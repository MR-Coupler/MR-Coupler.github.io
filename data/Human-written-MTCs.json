{
    "MTCs": [
        {
            "poj_link": "https://github.com/awslabs/aws-saas-boost/",
            "file_path": "awslabs/aws-saas-boost/services/settings-service/src/test/java/com/amazon/aws/partners/saasfactory/saasboost/AppConfigHelperTest.java",
            "test_name": "testIsSslCertArnChanged",
            "FQS": "com.amazon.aws.partners.saasfactory.saasboost.AppConfigHelperTest.testIsSslCertArnChanged()",
            "start_line": "77",
            "blame_result": "e70a9955 (Beardsley       2021-05-11 16:47:34 -0700 78)         AppConfig existing = AppConfig.builder().build();\ne70a9955 (Beardsley       2021-05-11 16:47:34 -0700 79)         AppConfig altered = AppConfig.builder().build();\ne70a9955 (Beardsley       2021-05-11 16:47:34 -0700 80)         assertFalse(\"Both null\", AppConfigHelper.isSslArnChanged(existing, altered));\ne70a9955 (Beardsley       2021-05-11 16:47:34 -0700 81) \n76d8502b (Thomas Poepping 2022-05-18 13:38:13 -0700 82)         existing = AppConfig.builder().sslCertificate(\"\").build();\n",
            "commit_hashes": {
                "e70a9955": "    AWS SaaS Boost general availability",
                "76d8502b": "    Add multi-container support. (#221)"
            },
            "Commit&issueIDs": {
                "76d8502b": [
                    "(#221)"
                ]
            },
            "links": [
                "https://github.com/awslabs/aws-saas-boost/issues/221",
                "https://github.com/awslabs/aws-saas-boost/commit/76d8502b"
            ]
        },
        {
            "poj_link": "https://github.com/awslabs/aws-saas-boost/",
            "file_path": "awslabs/aws-saas-boost/services/settings-service/src/test/java/com/amazon/aws/partners/saasfactory/saasboost/AppConfigHelperTest.java",
            "test_name": "testIsServicesChanged",
            "FQS": "com.amazon.aws.partners.saasfactory.saasboost.AppConfigHelperTest.testIsServicesChanged()",
            "start_line": "104",
            "blame_result": "e70a9955 (Beardsley       2021-05-11 16:47:34 -0700 105)         AppConfig existing = AppConfig.builder().build();\ne70a9955 (Beardsley       2021-05-11 16:47:34 -0700 106)         AppConfig altered = AppConfig.builder().build();\n76d8502b (Thomas Poepping 2022-05-18 13:38:13 -0700 107)         assertFalse(AppConfigHelper.isServicesChanged(existing, altered));\n76d8502b (Thomas Poepping 2022-05-18 13:38:13 -0700 108) \n76d8502b (Thomas Poepping 2022-05-18 13:38:13 -0700 109)         Map<String, ServiceConfig> services1 = new HashMap<>();\n",
            "commit_hashes": {
                "e70a9955": "    AWS SaaS Boost general availability",
                "76d8502b": "    Add multi-container support. (#221)"
            },
            "Commit&issueIDs": {
                "76d8502b": [
                    "(#221)"
                ]
            },
            "links": [
                "https://github.com/awslabs/aws-saas-boost/issues/221",
                "https://github.com/awslabs/aws-saas-boost/commit/76d8502b"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-cli/src/test/java/org/cornutum/tcases/TestTcasesCommand.java",
            "test_name": "run_whenSchemas",
            "FQS": "org.cornutum.tcases.TestTcasesCommand.run_whenSchemas()",
            "start_line": "591",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 592)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 593)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 594)     File inFile = getResourceFile( \"run-whenSchemas-Input.json\");\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 595)     File outFile = new File( inFile.getParent(), \"run-whenSchemas-Test.json\");\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 596) \n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-flink/src/test/java/org/gradoop/flink/algorithms/gelly/pagerank/PageRankTest.java",
            "test_name": "testPageRankWithZeroDegrees",
            "FQS": "org.gradoop.flink.algorithms.gelly.pagerank.PageRankTest.testPageRankWithZeroDegrees()",
            "start_line": "84",
            "blame_result": "b003ed921559 (Timo              2021-03-04 14:32:47 +0100 85)     LogicalGraph resultGraph = testGraph\nb003ed921559 (Timo              2021-03-04 14:32:47 +0100 86)       .callForGraph(new PageRank<>(propertyKey, 0.3, 20, true));\n21281bd718f3 (Matthias T\u00e4schner 2018-11-26 16:13:39 +0100 87)     checkPageRankProperty(resultGraph);\n21281bd718f3 (Matthias T\u00e4schner 2018-11-26 16:13:39 +0100 88)     assertEquals(resultGraph.getVertices().count(), testGraph.getVertices().count());\n21281bd718f3 (Matthias T\u00e4schner 2018-11-26 16:13:39 +0100 89)   }\n",
            "commit_hashes": {
                "b003ed921559": "    [#1455] Generify Gelly operators (#1457)",
                "21281bd718f3": "    [#1090] PageRank algorithm bugfix (#1095)"
            },
            "Commit&issueIDs": {
                "b003ed921559": [
                    "(#1457)"
                ],
                "21281bd718f3": [
                    "(#1095)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1457",
                "https://github.com/dbs-leipzig/gradoop/commit/b003ed921559",
                "https://github.com/dbs-leipzig/gradoop/issues/1095",
                "https://github.com/dbs-leipzig/gradoop/commit/21281bd718f3"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-flink/src/test/java/org/gradoop/flink/model/impl/operators/layouting/functions/CentroidUpdaterTest.java",
            "test_name": "testCentroidUpdater",
            "FQS": "org.gradoop.flink.model.impl.operators.layouting.functions.CentroidUpdaterTest.testCentroidUpdater()",
            "start_line": "34",
            "blame_result": "b9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 35)     List<Centroid> centroids = new ArrayList<>();\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 36)     centroids.add(new Centroid(new Vector(3, 3), 0));\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 37)     centroids.add(new Centroid(new Vector(7, 7), 0));\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 38)     CentroidUpdater upd =\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 39)       new CentroidUpdater(1000, CentroidFRLayouter.MIN_MASS_FACTOR,\n",
            "commit_hashes": {
                "b9368446494c": "    [#1274] Implemented distributed layouting (#1401)"
            },
            "Commit&issueIDs": {
                "b9368446494c": [
                    "(#1401)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1401",
                "https://github.com/dbs-leipzig/gradoop/commit/b9368446494c"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-flink/src/test/java/org/gradoop/flink/model/impl/operators/layouting/functions/FRRepulsionFunctionTest.java",
            "test_name": "testRepulseJoinFunction",
            "FQS": "org.gradoop.flink.model.impl.operators.layouting.functions.FRRepulsionFunctionTest.testRepulseJoinFunction()",
            "start_line": "35",
            "blame_result": "b9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 36)     JoinFunction<LVertex, LVertex, Force> jf = new FRRepulsionFunction(1, 20);\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 37)     LVertex v1 = getDummyVertex(1, 1);\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 38)     LVertex v2 = getDummyVertex(2, 3);\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 39)     LVertex v3 = getDummyVertex(7, 5);\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 40)     LVertex v4 = getDummyVertex(1, 1);\n",
            "commit_hashes": {
                "b9368446494c": "    [#1274] Implemented distributed layouting (#1401)"
            },
            "Commit&issueIDs": {
                "b9368446494c": [
                    "(#1401)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1401",
                "https://github.com/dbs-leipzig/gradoop/commit/b9368446494c"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-flink/src/test/java/org/gradoop/flink/model/impl/operators/layouting/functions/VertexFusorTest.java",
            "test_name": "testSuperVertexGenerator",
            "FQS": "org.gradoop.flink.model.impl.operators.layouting.functions.VertexFusorTest.testSuperVertexGenerator()",
            "start_line": "37",
            "blame_result": "b9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 38)     VertexFusor.SuperVertexGenerator gen = new VertexFusor.SuperVertexGenerator();\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 39) \nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 40)     LVertex receiver = new LVertex(GradoopId.get(), new Vector(10, 10), -1, generateSubVertices(4),\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 41)       new Vector(10, 10));\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 42)     LVertex donor1 = new LVertex(GradoopId.get(), new Vector(100, 100), -1, null, new Vector(10, 10));\n",
            "commit_hashes": {
                "b9368446494c": "    [#1274] Implemented distributed layouting (#1401)"
            },
            "Commit&issueIDs": {
                "b9368446494c": [
                    "(#1401)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1401",
                "https://github.com/dbs-leipzig/gradoop/commit/b9368446494c"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-flink/src/test/java/org/gradoop/flink/model/impl/operators/layouting/util/VectorTest.java",
            "test_name": "testRotate",
            "FQS": "org.gradoop.flink.model.impl.operators.layouting.util.VectorTest.testRotate()",
            "start_line": "111",
            "blame_result": "b9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 112)     Vector a = new Vector(100, 20);\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 113)     Vector b = a.rotate(87);\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 114)     Assert.assertEquals(a.magnitude(), b.magnitude(), 0.0000001);\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 115)     Assert.assertEquals(87, a.angle(b), 0.00000001);\nb9368446494c (dbaumgarten 2020-01-21 13:03:34 +0100 116)   }\n",
            "commit_hashes": {
                "b9368446494c": "    [#1274] Implemented distributed layouting (#1401)"
            },
            "Commit&issueIDs": {
                "b9368446494c": [
                    "(#1401)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1401",
                "https://github.com/dbs-leipzig/gradoop/commit/b9368446494c"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-temporal/src/test/java/org/gradoop/temporal/model/impl/operators/matching/common/statistics/binning/BinningTemporalGraphStatisticsTest.java",
            "test_name": "countTest",
            "FQS": "org.gradoop.temporal.model.impl.operators.matching.common.statistics.binning.BinningTemporalGraphStatisticsTest.countTest()",
            "start_line": "568",
            "blame_result": "600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 569)     BinningTemporalGraphStatistics stats = getDummyStats();\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 570)     long count1 = stats.getEdgeCount();\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 571)     assertEquals(100, count1);\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 572)     long count2 = stats.getEdgeCount(\"edge\");\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 573)     assertEquals(100, count2);\n",
            "commit_hashes": {
                "600551c28f0d": "    [#1482] Implemented Temporal Pattern Matching (#1501)"
            },
            "Commit&issueIDs": {
                "600551c28f0d": [
                    "(#1501)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1501",
                "https://github.com/dbs-leipzig/gradoop/commit/600551c28f0d"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-temporal/src/test/java/org/gradoop/temporal/model/impl/operators/matching/common/statistics/binning/pojos/ReservoirSamplerTest.java",
            "test_name": "samplerTest",
            "FQS": "org.gradoop.temporal.model.impl.operators.matching.common.statistics.binning.pojos.ReservoirSamplerTest.samplerTest()",
            "start_line": "31",
            "blame_result": "600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 32)     int sampleSize = 100;\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 33)     ReservoirSampler<Integer> sampler = new ReservoirSampler<>(sampleSize);\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 34)     ArrayList<Integer> input = new ArrayList<>();\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 35)     for (int i = 0; i < 500; i++) {\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 36)       input.add(i);\n",
            "commit_hashes": {
                "600551c28f0d": "    [#1482] Implemented Temporal Pattern Matching (#1501)"
            },
            "Commit&issueIDs": {
                "600551c28f0d": [
                    "(#1501)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1501",
                "https://github.com/dbs-leipzig/gradoop/commit/600551c28f0d"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-temporal/src/test/java/org/gradoop/temporal/model/impl/operators/matching/single/cypher/planning/estimation/CNFEstimationTest.java",
            "test_name": "timeSelectorComparisonTest",
            "FQS": "org.gradoop.temporal.model.impl.operators.matching.single.cypher.planning.estimation.CNFEstimationTest.timeSelectorComparisonTest()",
            "start_line": "71",
            "blame_result": "600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 72)     CNFEstimation estimator = getEstimator();\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 73) \n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 74)     //tx_from of v1 equally distributed from 100L to 200L\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 75)     // => 175L is part of the 76th bin\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 76)     // => 24 bins are greater => should yield 0.24\n",
            "commit_hashes": {
                "600551c28f0d": "    [#1482] Implemented Temporal Pattern Matching (#1501)"
            },
            "Commit&issueIDs": {
                "600551c28f0d": [
                    "(#1501)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1501",
                "https://github.com/dbs-leipzig/gradoop/commit/600551c28f0d"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-temporal/src/test/java/org/gradoop/temporal/model/impl/operators/matching/single/cypher/planning/estimation/CNFEstimationTest.java",
            "test_name": "durationComparisonTest",
            "FQS": "org.gradoop.temporal.model.impl.operators.matching.single.cypher.planning.estimation.CNFEstimationTest.durationComparisonTest()",
            "start_line": "106",
            "blame_result": "600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 107)     CNFEstimation estimator = getEstimator();\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 108) \n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 109)     // durations are equally distributed from 0 to 100\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 110)     Comparison comp1 = new Comparison(eTxDuration, GT, new TimeConstant(10));\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 111)     CNFElement e1 =\n",
            "commit_hashes": {
                "600551c28f0d": "    [#1482] Implemented Temporal Pattern Matching (#1501)"
            },
            "Commit&issueIDs": {
                "600551c28f0d": [
                    "(#1501)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1501",
                "https://github.com/dbs-leipzig/gradoop/commit/600551c28f0d"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-temporal/src/test/java/org/gradoop/temporal/model/impl/operators/matching/single/cypher/planning/estimation/CNFEstimationTest.java",
            "test_name": "complexDurationComparisonTest",
            "FQS": "org.gradoop.temporal.model.impl.operators.matching.single.cypher.planning.estimation.CNFEstimationTest.complexDurationComparisonTest()",
            "start_line": "146",
            "blame_result": "600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 147)     CNFEstimation estimator = getEstimator();\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 148) \n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 149)     Comparison comp1 = new Comparison(eTxDuration, LTE, fValDuration);\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 150)     CNFElement e1 =\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 151)       new CNFElement(Collections.singletonList(new ComparisonExpression(comp1, new ComparableTPGMFactory())));\n",
            "commit_hashes": {
                "600551c28f0d": "    [#1482] Implemented Temporal Pattern Matching (#1501)"
            },
            "Commit&issueIDs": {
                "600551c28f0d": [
                    "(#1501)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1501",
                "https://github.com/dbs-leipzig/gradoop/commit/600551c28f0d"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-temporal/src/test/java/org/gradoop/temporal/model/impl/operators/matching/single/cypher/planning/estimation/CNFEstimationTest.java",
            "test_name": "propertyComparisonTest",
            "FQS": "org.gradoop.temporal.model.impl.operators.matching.single.cypher.planning.estimation.CNFEstimationTest.propertyComparisonTest()",
            "start_line": "173",
            "blame_result": "600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 174)     CNFEstimation estimator = getEstimator();\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 175) \n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 176)     // categorical\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 177)     Comparison comp1 = new Comparison(\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 178)       new PropertySelector(\"a\", \"catProp1\"),\n",
            "commit_hashes": {
                "600551c28f0d": "    [#1482] Implemented Temporal Pattern Matching (#1501)"
            },
            "Commit&issueIDs": {
                "600551c28f0d": [
                    "(#1501)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1501",
                "https://github.com/dbs-leipzig/gradoop/commit/600551c28f0d"
            ]
        },
        {
            "poj_link": "https://github.com/dbs-leipzig/gradoop/",
            "file_path": "dbs-leipzig/gradoop/gradoop-temporal/src/test/java/org/gradoop/temporal/model/impl/operators/matching/single/cypher/planning/estimation/CNFEstimationTest.java",
            "test_name": "complexPropertyComparisonTest",
            "FQS": "org.gradoop.temporal.model.impl.operators.matching.single.cypher.planning.estimation.CNFEstimationTest.complexPropertyComparisonTest()",
            "start_line": "224",
            "blame_result": "600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 225)     // property selector vs property selector\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 226)     CNFEstimation estimator = getEstimator();\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 227) \n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 228)     // categorical\n600551c28f0d (lc0197 2021-03-26 16:50:34 +0100 229)     Comparison comp1 = new Comparison(\n",
            "commit_hashes": {
                "600551c28f0d": "    [#1482] Implemented Temporal Pattern Matching (#1501)"
            },
            "Commit&issueIDs": {
                "600551c28f0d": [
                    "(#1501)"
                ]
            },
            "links": [
                "https://github.com/dbs-leipzig/gradoop/issues/1501",
                "https://github.com/dbs-leipzig/gradoop/commit/600551c28f0d"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-cli/src/test/java/org/cornutum/tcases/TestTcasesCommand.java",
            "test_name": "run_whenShowEffectiveInput",
            "FQS": "org.cornutum.tcases.TestTcasesCommand.run_whenShowEffectiveInput()",
            "start_line": "614",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 615)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 616)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 617)     File inFile = getResourceFile( \"run-whenSchemas-Input.json\");\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 618)     File effInFile = getResourceFile( \"run-whenSchemas-Effective-Input.json\");\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 619)     File outFile = new File( inFile.getParent(), \"run-whenSchemas-Test.json\");\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-io/src/test/java/org/cornutum/tcases/io/TestSystemInputDocReader.java",
            "test_name": "testGetSystemInputDef_1",
            "FQS": "org.cornutum.tcases.io.TestSystemInputDocReader.testGetSystemInputDef_1()",
            "start_line": "162",
            "blame_result": "^9906a83e test/com/startingblocktech/tcases/io/TestSystemInputDocReader.java            (kerrykimbrough  2010-04-28 00:47:30 +0000 163)     {\n708ae73d7 tcases-lib/src/test/java/org/cornutum/tcases/io/TestSystemInputDocReader.java (Kerry Kimbrough 2018-07-24 17:26:55 -0500 164)     // Given...\n708ae73d7 tcases-lib/src/test/java/org/cornutum/tcases/io/TestSystemInputDocReader.java (Kerry Kimbrough 2018-07-24 17:26:55 -0500 165)     SystemInputDef expected =\n708ae73d7 tcases-lib/src/test/java/org/cornutum/tcases/io/TestSystemInputDocReader.java (Kerry Kimbrough 2018-07-24 17:26:55 -0500 166)       SystemInputDefBuilder.with( \"System-1\")\n708ae73d7 tcases-lib/src/test/java/org/cornutum/tcases/io/TestSystemInputDocReader.java (Kerry Kimbrough 2018-07-24 17:26:55 -0500 167)       .build();\n",
            "commit_hashes": {
                "9906a83e": "    Initial version",
                "708ae73d7": "    For better testability, add builders and matchers (#38)"
            },
            "Commit&issueIDs": {
                "708ae73d7": [
                    "38"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/38",
                "https://github.com/Cornutum/tcases/commit/708ae73d7"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-io/src/test/java/org/cornutum/tcases/io/TestSystemTestDocReader.java",
            "test_name": "testGetSystemTestDef_1",
            "FQS": "org.cornutum.tcases.io.TestSystemTestDocReader.testGetSystemTestDef_1()",
            "start_line": "137",
            "blame_result": "14a98a47d test/com/startingblocktech/tcases/io/TestSystemTestDocReader.java            (kerrykimbrough@gmail.com 2012-01-07 00:53:53 +0000 138)     {\n708ae73d7 tcases-lib/src/test/java/org/cornutum/tcases/io/TestSystemTestDocReader.java (Kerry Kimbrough          2018-07-24 17:26:55 -0500 139)     // Given...\n708ae73d7 tcases-lib/src/test/java/org/cornutum/tcases/io/TestSystemTestDocReader.java (Kerry Kimbrough          2018-07-24 17:26:55 -0500 140)     SystemTestDef expected =\n708ae73d7 tcases-lib/src/test/java/org/cornutum/tcases/io/TestSystemTestDocReader.java (Kerry Kimbrough          2018-07-24 17:26:55 -0500 141)       SystemTestDefBuilder.with( \"System-1\")\n708ae73d7 tcases-lib/src/test/java/org/cornutum/tcases/io/TestSystemTestDocReader.java (Kerry Kimbrough          2018-07-24 17:26:55 -0500 142)       .build();\n",
            "commit_hashes": {
                "14a98a47d": "    Add SystemTestDocReader",
                "708ae73d7": "    For better testability, add builders and matchers (#38)"
            },
            "Commit&issueIDs": {
                "708ae73d7": [
                    "38"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/38",
                "https://github.com/Cornutum/tcases/commit/708ae73d7"
            ]
        },
        {
            "poj_link": "https://github.com/imglib/imglib2/",
            "file_path": "imglib/imglib2/src/test/java/net/imglib2/FinalDimensionsTest.java",
            "test_name": "testHashCode",
            "FQS": "net.imglib2.FinalDimensionsTest.testHashCode()",
            "start_line": "63",
            "blame_result": "b87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 64) \t{\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 65) \t\tfinal FinalDimensions dimensions = new FinalDimensions( 1, 2 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 66) \t\tfinal FinalDimensions sameDimensions = new FinalDimensions( 1, 2 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 67) \t\tassertEquals( dimensions.hashCode(), sameDimensions.hashCode() );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 68) \t}\n",
            "commit_hashes": {
                "b87ec3deaa": "    FinalInterval, FinalRealInterval, Point, RealPoint and FinalDimensions: add equals, hashCode & toString (#266)"
            },
            "Commit&issueIDs": {
                "b87ec3deaa": [
                    "(#266)"
                ]
            },
            "links": [
                "https://github.com/imglib/imglib2/issues/266",
                "https://github.com/imglib/imglib2/commit/b87ec3deaa"
            ]
        },
        {
            "poj_link": "https://github.com/imglib/imglib2/",
            "file_path": "imglib/imglib2/src/test/java/net/imglib2/FinalIntervalTest.java",
            "test_name": "testHashCode",
            "FQS": "net.imglib2.FinalIntervalTest.testHashCode()",
            "start_line": "154",
            "blame_result": "b87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 155) \t{\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 156) \t\tfinal FinalInterval interval = FinalInterval.createMinMax( 1, 2, 3, 4 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 157) \t\tfinal FinalInterval sameInterval = FinalInterval.createMinMax( 1, 2, 3, 4 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 158) \t\tassertEquals( interval.hashCode(), interval.hashCode() );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 159) \t\tassertEquals( interval.hashCode(), sameInterval.hashCode() );\n",
            "commit_hashes": {
                "b87ec3deaa": "    FinalInterval, FinalRealInterval, Point, RealPoint and FinalDimensions: add equals, hashCode & toString (#266)"
            },
            "Commit&issueIDs": {
                "b87ec3deaa": [
                    "(#266)"
                ]
            },
            "links": [
                "https://github.com/imglib/imglib2/issues/266",
                "https://github.com/imglib/imglib2/commit/b87ec3deaa"
            ]
        },
        {
            "poj_link": "https://github.com/imglib/imglib2/",
            "file_path": "imglib/imglib2/src/test/java/net/imglib2/FinalRealIntervalTest.java",
            "test_name": "testEquals",
            "FQS": "net.imglib2.FinalRealIntervalTest.testEquals()",
            "start_line": "53",
            "blame_result": "b87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 54) \t{\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 55) \t\tFinalRealInterval interval = FinalRealInterval.createMinMax( 1.0, 2.5, 3.0, 4.0 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 56) \t\tFinalRealInterval same = FinalRealInterval.createMinMax( 1.0, 2.5, 3.0, 4.0 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 57) \t\tFinalRealInterval different = FinalRealInterval.createMinMax( 1.0, 2.5001, 3.0, 4.0 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 58) \t\tassertTrue( interval.equals( same ) );\n",
            "commit_hashes": {
                "b87ec3deaa": "    FinalInterval, FinalRealInterval, Point, RealPoint and FinalDimensions: add equals, hashCode & toString (#266)"
            },
            "Commit&issueIDs": {
                "b87ec3deaa": [
                    "(#266)"
                ]
            },
            "links": [
                "https://github.com/imglib/imglib2/issues/266",
                "https://github.com/imglib/imglib2/commit/b87ec3deaa"
            ]
        },
        {
            "poj_link": "https://github.com/imglib/imglib2/",
            "file_path": "imglib/imglib2/src/test/java/net/imglib2/FinalRealIntervalTest.java",
            "test_name": "testHashCode",
            "FQS": "net.imglib2.FinalRealIntervalTest.testHashCode()",
            "start_line": "63",
            "blame_result": "b87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 64) \t{\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 65) \t\tFinalRealInterval interval = FinalRealInterval.createMinMax( 1.0, 2.5, 3.0, 4.0 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 66) \t\tFinalRealInterval same = FinalRealInterval.createMinMax( 1.0, 2.5, 3.0, 4.0 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 67) \t\tassertEquals( interval.hashCode(), same.hashCode() );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 68) \t}\n",
            "commit_hashes": {
                "b87ec3deaa": "    FinalInterval, FinalRealInterval, Point, RealPoint and FinalDimensions: add equals, hashCode & toString (#266)"
            },
            "Commit&issueIDs": {
                "b87ec3deaa": [
                    "(#266)"
                ]
            },
            "links": [
                "https://github.com/imglib/imglib2/issues/266",
                "https://github.com/imglib/imglib2/commit/b87ec3deaa"
            ]
        },
        {
            "poj_link": "https://github.com/imglib/imglib2/",
            "file_path": "imglib/imglib2/src/test/java/net/imglib2/PointTest.java",
            "test_name": "testHashCode",
            "FQS": "net.imglib2.PointTest.testHashCode()",
            "start_line": "411",
            "blame_result": "b87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 412) \t{\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 413) \t\tfinal Point point = new Point( 1, 2, 3 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 414) \t\tfinal Point same = new Point( 1, 2, 3 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 415) \t\tassertEquals( point.hashCode(), same.hashCode() );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 416) \t}\n",
            "commit_hashes": {
                "b87ec3deaa": "    FinalInterval, FinalRealInterval, Point, RealPoint and FinalDimensions: add equals, hashCode & toString (#266)"
            },
            "Commit&issueIDs": {
                "b87ec3deaa": [
                    "(#266)"
                ]
            },
            "links": [
                "https://github.com/imglib/imglib2/issues/266",
                "https://github.com/imglib/imglib2/commit/b87ec3deaa"
            ]
        },
        {
            "poj_link": "https://github.com/imglib/imglib2/",
            "file_path": "imglib/imglib2/src/test/java/net/imglib2/RealPointTest.java",
            "test_name": "testHashCode",
            "FQS": "net.imglib2.RealPointTest.testHashCode()",
            "start_line": "591",
            "blame_result": "b87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 592) \t{\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 593) \t\tfinal RealPoint point = new RealPoint( 1.0, 2.5 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 594) \t\tfinal RealPoint same = new RealPoint( 1.0, 2.5 );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 595) \t\tassertEquals( point.hashCode(), same.hashCode() );\nb87ec3deaa (Matthias Arzt 2019-09-25 16:35:30 +0200 596) \t}\n",
            "commit_hashes": {
                "b87ec3deaa": "    FinalInterval, FinalRealInterval, Point, RealPoint and FinalDimensions: add equals, hashCode & toString (#266)"
            },
            "Commit&issueIDs": {
                "b87ec3deaa": [
                    "(#266)"
                ]
            },
            "links": [
                "https://github.com/imglib/imglib2/issues/266",
                "https://github.com/imglib/imglib2/commit/b87ec3deaa"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/generator/TestTupleGenerator.java",
            "test_name": "getTests_Combined",
            "FQS": "org.cornutum.tcases.generator.TestTupleGenerator.getTests_Combined()",
            "start_line": "86",
            "blame_result": "54ef7f373 test/org/cornutum/tcases/generator/TestTupleGenerator.java                     (kerrykimbrough@gmail.com 2012-12-14 19:28:33 +0000 87)     {\n54ef7f373 test/org/cornutum/tcases/generator/TestTupleGenerator.java                     (kerrykimbrough@gmail.com 2012-12-14 19:28:33 +0000 88)     // Given...\ncb49569b0 tcases-lib/src/test/java/org/cornutum/tcases/generator/TestTupleGenerator.java (Kerry Kimbrough          2019-01-27 12:44:37 -0600 89)     SystemInputDef systemInputDef = getSystemInputDefBasic();\n687e40d0c test/com/startingblocktech/tcases/generator/TestTupleCombiner.java             (kerrykimbrough@gmail.com 2012-01-04 22:43:35 +0000 90)     FunctionInputDef functionInputDef = systemInputDef.getFunctionInputDef( \"Make\");\n54ef7f373 test/org/cornutum/tcases/generator/TestTupleGenerator.java                     (kerrykimbrough@gmail.com 2012-12-14 19:28:33 +0000 91)     TupleGenerator generator = new TupleGenerator();\n",
            "commit_hashes": {
                "54ef7f373": "    Relocate to org.cornutum: Update references",
                "cb49569b0": "    Reorganize for better modularity (#48)",
                "687e40d0c": "    TupleCombiner.isIncluded: If no included patterns specified, include all variables. Remove method=isEmpty, which is now superfluous."
            },
            "Commit&issueIDs": {
                "cb49569b0": [
                    "48"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/48",
                "https://github.com/Cornutum/tcases/commit/cb49569b0"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree2/",
            "file_path": "davidmoten/rtree2/src/test/java/com/github/davidmoten/rtree2/geometry/CircleTest.java",
            "test_name": "testIntersectsPoint",
            "FQS": "com.github.davidmoten.rtree2.geometry.CircleTest.testIntersectsPoint()",
            "start_line": "118",
            "blame_result": "7b255027 src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java (Dave Moten 2015-11-06 11:20:36 +1100 119)         assertTrue(circle(0, 0, 1).intersects(Geometries.point(0, 0)));\ne2da9105 src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java (Dave Moten 2014-11-11 15:50:16 +1100 120)     }\n7b255027 src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java (Dave Moten 2015-11-06 11:20:36 +1100 121) \ne2da9105 src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java (Dave Moten 2014-11-11 15:50:16 +1100 122)     @Test\ne2da9105 src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java (Dave Moten 2014-11-11 15:50:16 +1100 123)     public void testDoesNotIntersectPoint() {\n",
            "commit_hashes": {
                "7b255027": "    #31 add Intersects.circleIntersectsCircle",
                "e2da9105": "    add unit tests for Circle"
            },
            "Commit&issueIDs": {
                "7b255027": [
                    "#31"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree2/issues/31",
                "https://github.com/davidmoten/rtree2/commit/7b255027"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenNumbers",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenNumbers()",
            "start_line": "22",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 23)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 24)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 25)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 26)       SchemaBuilder.type( \"number\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 27)       .format( \"double\")\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree2/",
            "file_path": "davidmoten/rtree2/src/test/java/com/github/davidmoten/rtree2/geometry/CircleTest.java",
            "test_name": "testDoesNotIntersectPoint",
            "FQS": "com.github.davidmoten.rtree2.geometry.CircleTest.testDoesNotIntersectPoint()",
            "start_line": "123",
            "blame_result": "7b255027 src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java (Dave Moten 2015-11-06 11:20:36 +1100 124)         assertFalse(circle(0, 0, 1).intersects(Geometries.point(100, 100)));\ne2da9105 src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java (Dave Moten 2014-11-11 15:50:16 +1100 125)     }\n2beac3d5 src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java (Dave Moten 2014-08-31 07:09:46 +1000 126) }\n",
            "commit_hashes": {
                "7b255027": "    #31 add Intersects.circleIntersectsCircle",
                "e2da9105": "    add unit tests for Circle",
                "2beac3d5": "    add test for Circle"
            },
            "Commit&issueIDs": {
                "7b255027": [
                    "#31"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree2/issues/31",
                "https://github.com/davidmoten/rtree2/commit/7b255027"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenIntegers",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenIntegers()",
            "start_line": "64",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 65)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 66)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 67)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 68)       SchemaBuilder.type( \"integer\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 69)       .format( null)\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree2/",
            "file_path": "davidmoten/rtree2/src/test/java/com/github/davidmoten/rtree2/geometry/LineTest.java",
            "test_name": "testLineDoesIntersectPoint",
            "FQS": "com.github.davidmoten.rtree2.geometry.LineTest.testLineDoesIntersectPoint()",
            "start_line": "193",
            "blame_result": "849b4c4f src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java (Dave Moten  2016-03-05 13:12:42 +1100 194)         assertTrue(Geometries.line(1.5, 1.5, 2.5, 2.5).intersects(point(2, 2)));\n8786a081 src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java (David Moten 2019-06-26 12:24:22 +1000 195)     }\n8786a081 src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java (David Moten 2019-06-26 12:24:22 +1000 196)     \n8786a081 src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java (David Moten 2019-06-26 12:24:22 +1000 197)     @Test\n8786a081 src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java (David Moten 2019-06-26 12:24:22 +1000 198)     public void testLineDoubleIntersectsWithHorizontalLine() {\n",
            "commit_hashes": {
                "849b4c4f": "    fix LineTest",
                "8786a081": "    fix Line.lineIntersectsRect #91"
            },
            "Commit&issueIDs": {
                "8786a081": [
                    "#91"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree2/issues/91",
                "https://github.com/davidmoten/rtree2/commit/8786a081"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree2/",
            "file_path": "davidmoten/rtree2/src/test/java/com/github/davidmoten/rtree2/geometry/PointTest.java",
            "test_name": "testMbr",
            "FQS": "com.github.davidmoten.rtree2.geometry.PointTest.testMbr()",
            "start_line": "35",
            "blame_result": "75da4898 src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java (David Moten 2016-07-31 07:34:21 +1000 36) \t\tPoint p = Geometries.point(1, 2);\n75da4898 src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java (David Moten 2016-07-31 07:34:21 +1000 37) \t\tPoint p2 = Geometries.point(1, 2);\n75da4898 src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java (David Moten 2016-07-31 07:34:21 +1000 38) \t\tassertEquals(p, p2);\n75da4898 src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java (David Moten 2016-07-31 07:34:21 +1000 39) \t}\ne2e0e8d4 src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java (Dave Moten  2014-08-31 10:50:44 +1000 40) \n",
            "commit_hashes": {
                "75da4898": "    fix #60 Point.contains() not working",
                "e2e0e8d4": "    add tests"
            },
            "Commit&issueIDs": {
                "75da4898": [
                    "#60"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree2/issues/60",
                "https://github.com/davidmoten/rtree2/commit/75da4898"
            ]
        },
        {
            "poj_link": "https://github.com/mwiede/jsch/",
            "file_path": "mwiede/jsch/src/test/java/com/jcraft/jsch/jbcrypt/BCryptTest.java",
            "test_name": "testGensalt",
            "FQS": "com.jcraft.jsch.jbcrypt.BCryptTest.testGensalt()",
            "start_line": "93",
            "blame_result": "72f8a6df (Matthias Wiedemann 2023-02-09 22:17:08 +0100 94)     // System.out.print(\"BCrypt.gensalt(log_rounds):\");\n72f8a6df (Matthias Wiedemann 2023-02-09 22:17:08 +0100 95)     for (int i = 4; i <= 12; i++) {\n72f8a6df (Matthias Wiedemann 2023-02-09 22:17:08 +0100 96)       // System.out.print(\" \" + Integer.toString(i) + \":\");\n72f8a6df (Matthias Wiedemann 2023-02-09 22:17:08 +0100 97)       for (int j = 0; j < test_vectors.length; j += 4) {\n72f8a6df (Matthias Wiedemann 2023-02-09 22:17:08 +0100 98)         String plain = test_vectors[j][0];\n",
            "commit_hashes": {
                "72f8a6df": "    activate sourcecode formatting (#247)"
            },
            "Commit&issueIDs": {
                "72f8a6df": [
                    "(#247)"
                ]
            },
            "links": [
                "https://github.com/mwiede/jsch/issues/247",
                "https://github.com/mwiede/jsch/commit/72f8a6df"
            ]
        },
        {
            "poj_link": "https://github.com/robovm/robovm/",
            "file_path": "robovm/robovm/compiler/src/test/java/org/robovm/compiler/VTableTest.java",
            "test_name": "testB",
            "FQS": "org.robovm.compiler.VTableTest.testB()",
            "start_line": "91",
            "blame_result": "4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 92)         SootClass scJLO = getSootClass(\"java.lang.Object\");\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 93)         SootClass scA = getSootClass(\"org.robovm.compiler.a.A\");\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 94)         SootClass scB = getSootClass(\"org.robovm.compiler.b.B\");\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 95)         \n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 96)         VTable.Cache cache = new VTable.Cache();\n",
            "commit_hashes": {
                "4d3f245e35": "    Optimized virtual method dispatch using vtables. (#3)"
            },
            "Commit&issueIDs": {
                "4d3f245e35": [
                    "(#3)"
                ]
            },
            "links": [
                "https://github.com/robovm/robovm/issues/3",
                "https://github.com/robovm/robovm/commit/4d3f245e35"
            ]
        },
        {
            "poj_link": "https://github.com/robovm/robovm/",
            "file_path": "robovm/robovm/compiler/src/test/java/org/robovm/compiler/VTableTest.java",
            "test_name": "testC",
            "FQS": "org.robovm.compiler.VTableTest.testC()",
            "start_line": "143",
            "blame_result": "4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 144)         SootClass scA = getSootClass(\"org.robovm.compiler.a.A\");\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 145)         SootClass scC = getSootClass(\"org.robovm.compiler.a.C\");\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 146)         \n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 147)         VTable.Cache cache = new VTable.Cache();\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 148)         VTable vtableA = cache.get(scA);\n",
            "commit_hashes": {
                "4d3f245e35": "    Optimized virtual method dispatch using vtables. (#3)"
            },
            "Commit&issueIDs": {
                "4d3f245e35": [
                    "(#3)"
                ]
            },
            "links": [
                "https://github.com/robovm/robovm/issues/3",
                "https://github.com/robovm/robovm/commit/4d3f245e35"
            ]
        },
        {
            "poj_link": "https://github.com/robovm/robovm/",
            "file_path": "robovm/robovm/compiler/src/test/java/org/robovm/compiler/VTableTest.java",
            "test_name": "testD",
            "FQS": "org.robovm.compiler.VTableTest.testD()",
            "start_line": "165",
            "blame_result": "4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 166)         SootClass scA = getSootClass(\"org.robovm.compiler.a.A\");\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 167)         SootClass scB = getSootClass(\"org.robovm.compiler.b.B\");\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 168)         SootClass scD = getSootClass(\"org.robovm.compiler.b.D\");\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 169)         \n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 170)         VTable.Cache cache = new VTable.Cache();\n",
            "commit_hashes": {
                "4d3f245e35": "    Optimized virtual method dispatch using vtables. (#3)"
            },
            "Commit&issueIDs": {
                "4d3f245e35": [
                    "(#3)"
                ]
            },
            "links": [
                "https://github.com/robovm/robovm/issues/3",
                "https://github.com/robovm/robovm/commit/4d3f245e35"
            ]
        },
        {
            "poj_link": "https://github.com/robovm/robovm/",
            "file_path": "robovm/robovm/compiler/src/test/java/org/robovm/compiler/VTableTest.java",
            "test_name": "testEmpty",
            "FQS": "org.robovm.compiler.VTableTest.testEmpty()",
            "start_line": "189",
            "blame_result": "4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 190)         SootClass scJLO = getSootClass(\"java.lang.Object\");\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 191)         SootClass scEmpty = getSootClass(\"org.robovm.compiler.a.Empty\");\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 192)         \n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 193)         VTable.Cache cache = new VTable.Cache();\n4d3f245e35 (Niklas Therning 2013-08-28 12:46:51 +0200 194)         VTable vtableJLO = cache.get(scJLO);\n",
            "commit_hashes": {
                "4d3f245e35": "    Optimized virtual method dispatch using vtables. (#3)"
            },
            "Commit&issueIDs": {
                "4d3f245e35": [
                    "(#3)"
                ]
            },
            "links": [
                "https://github.com/robovm/robovm/issues/3",
                "https://github.com/robovm/robovm/commit/4d3f245e35"
            ]
        },
        {
            "poj_link": "https://github.com/robovm/robovm/",
            "file_path": "robovm/robovm/compiler/src/test/java/org/robovm/compiler/config/ConfigTest.java",
            "test_name": "testMergeConfigsFromClasspath",
            "FQS": "org.robovm.compiler.config.ConfigTest.testMergeConfigsFromClasspath()",
            "start_line": "219",
            "blame_result": "82b932d704 (Niklas Therning 2014-05-05 08:27:38 +0200 220)         File tmpDir = createTempDir();\n82b932d704 (Niklas Therning 2014-05-05 08:27:38 +0200 221)         File cacheDir = new File(tmpDir, \"cache\");\n98cc221384 (Niklas Therning 2014-05-06 12:03:33 +0200 222)         File p1 = createMergeConfig(tmpDir, \"p1\", \"Foo\", OS.macosx, Arch.x86, false);\n82b932d704 (Niklas Therning 2014-05-05 08:27:38 +0200 223)         File p2 = createMergeConfig(tmpDir, \"p2\", \"Wooz\", OS.linux, Arch.x86, false);\nf095b949fe (Niklas Therning 2015-01-22 11:51:05 +0100 224)         // Create a jar file with both x86 and x86_64 by first creating a folder for x86 in p3/ \n",
            "commit_hashes": {
                "82b932d704": "    The compiler will now look for robovm.xml files under META-INF/robovm/<os>/<arch> of each classpath enrty and merge with the current config. (#132)",
                "98cc221384": "    Fixed ConfigTest failure when running on Linux.",
                "f095b949fe": "    Fixed Config.builder() to return a fresh Builder corresponding to the initial"
            },
            "Commit&issueIDs": {
                "82b932d704": [
                    "(#132)"
                ]
            },
            "links": [
                "https://github.com/robovm/robovm/issues/132",
                "https://github.com/robovm/robovm/commit/82b932d704"
            ]
        },
        {
            "poj_link": "https://github.com/robovm/robovm/",
            "file_path": "robovm/robovm/compiler/src/test/java/org/robovm/compiler/config/ConfigTest.java",
            "test_name": "testCreateBuilderFromConfig",
            "FQS": "org.robovm.compiler.config.ConfigTest.testCreateBuilderFromConfig()",
            "start_line": "300",
            "blame_result": "82b932d704 compiler/src/test/java/org/robovm/compiler/config/ConfigTest.java (Niklas Therning 2014-05-05 08:27:38 +0200 301)         File tmpDir = createTempDir();\n82b932d704 compiler/src/test/java/org/robovm/compiler/config/ConfigTest.java (Niklas Therning 2014-05-05 08:27:38 +0200 302)         File cacheDir = new File(tmpDir, \"cache\");\n5b9f12d8c7 compiler/src/test/java/org/robovm/compiler/config/ConfigTest.java (Niklas Therning 2015-01-09 12:35:58 +0100 303)         \nc17b62cdc8 compiler/src/test/java/org/robovm/compiler/ConfigTest.java        (Niklas Therning 2013-05-16 06:50:38 +0200 304)         Config.Builder builder = new Config.Builder();\n5b9f12d8c7 compiler/src/test/java/org/robovm/compiler/config/ConfigTest.java (Niklas Therning 2015-01-09 12:35:58 +0100 305)         builder.tmpDir(tmpDir);\n",
            "commit_hashes": {
                "82b932d704": "    The compiler will now look for robovm.xml files under META-INF/robovm/<os>/<arch> of each classpath enrty and merge with the current config. (#132)",
                "5b9f12d8c7": "    Added support for creating IPAs with fat binaries containing multiple",
                "c17b62cdc8": "    Added a test for testing the serialization of Config objects."
            },
            "Commit&issueIDs": {
                "82b932d704": [
                    "(#132)"
                ]
            },
            "links": [
                "https://github.com/robovm/robovm/issues/132",
                "https://github.com/robovm/robovm/commit/82b932d704"
            ]
        },
        {
            "poj_link": "https://github.com/robovm/robovm/",
            "file_path": "robovm/robovm/libimobiledevice/src/test/java/org/robovm/libimobiledevice/AfcClientTest.java",
            "test_name": "testGetDeviceInfo",
            "FQS": "org.robovm.libimobiledevice.AfcClientTest.testGetDeviceInfo()",
            "start_line": "98",
            "blame_result": "912b96dc55 (Niklas Therning 2013-10-14 14:18:33 +0200  99)         Map<String, String> devInfo = client.getDeviceInfo();\n912b96dc55 (Niklas Therning 2013-10-14 14:18:33 +0200 100)         assertFalse(devInfo.isEmpty());\n912b96dc55 (Niklas Therning 2013-10-14 14:18:33 +0200 101)         assertTrue(devInfo.containsKey(AfcClient.DEVICE_INFO_KEY_FS_BLOCK_SIZE));\n912b96dc55 (Niklas Therning 2013-10-14 14:18:33 +0200 102)         assertTrue(devInfo.containsKey(AfcClient.DEVICE_INFO_KEY_FS_FREE_BYTES));\n912b96dc55 (Niklas Therning 2013-10-14 14:18:33 +0200 103)         assertTrue(devInfo.containsKey(AfcClient.DEVICE_INFO_KEY_FS_TOTAL_BYTES));\n",
            "commit_hashes": {
                "912b96dc55": "    Added JNI bindings for libimobiledevice (OSX so far). Also added the AppLauncher class which replicates what fruitstrap does. (#190)"
            },
            "Commit&issueIDs": {
                "912b96dc55": [
                    "(#190)"
                ]
            },
            "links": [
                "https://github.com/robovm/robovm/issues/190",
                "https://github.com/robovm/robovm/commit/912b96dc55"
            ]
        },
        {
            "poj_link": "https://github.com/robovm/robovm/",
            "file_path": "robovm/robovm/libimobiledevice/src/test/java/org/robovm/libimobiledevice/IDeviceTest.java",
            "test_name": "testNewIDevice",
            "FQS": "org.robovm.libimobiledevice.IDeviceTest.testNewIDevice()",
            "start_line": "50",
            "blame_result": "912b96dc55 (Niklas Therning 2013-10-14 14:18:33 +0200 51)         try {\n912b96dc55 (Niklas Therning 2013-10-14 14:18:33 +0200 52)             new IDevice((String) null);\n912b96dc55 (Niklas Therning 2013-10-14 14:18:33 +0200 53)             fail(\"NullPointerException expected\");\n912b96dc55 (Niklas Therning 2013-10-14 14:18:33 +0200 54)         } catch (NullPointerException e) {}\n912b96dc55 (Niklas Therning 2013-10-14 14:18:33 +0200 55)         try {\n",
            "commit_hashes": {
                "912b96dc55": "    Added JNI bindings for libimobiledevice (OSX so far). Also added the AppLauncher class which replicates what fruitstrap does. (#190)"
            },
            "Commit&issueIDs": {
                "912b96dc55": [
                    "(#190)"
                ]
            },
            "links": [
                "https://github.com/robovm/robovm/issues/190",
                "https://github.com/robovm/robovm/commit/912b96dc55"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenNumberInteger",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenNumberInteger()",
            "start_line": "106",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 107)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 108)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 109)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 110)       SchemaBuilder.type( \"number\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 111)       .format( \"double\")\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree2/",
            "file_path": "davidmoten/rtree2/src/test/java/com/github/davidmoten/rtree2/geometry/RectangleTest.java",
            "test_name": "testIntersects",
            "FQS": "com.github.davidmoten.rtree2.geometry.RectangleTest.testIntersects()",
            "start_line": "118",
            "blame_result": "36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 119)         Rectangle a = rectangle(14, 14, 86, 37);\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 120)         Rectangle b = rectangle(13, 23, 50, 80);\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 121)         assertTrue(a.intersects(b));\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 122)         assertTrue(b.intersects(a));\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 123)     }\n",
            "commit_hashes": {
                "36043530": "    rewrite Rectangle.intersects to fix #7"
            },
            "Commit&issueIDs": {
                "36043530": [
                    "#7"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree2/issues/7",
                "https://github.com/davidmoten/rtree2/commit/36043530"
            ]
        },
        {
            "poj_link": "https://github.com/apache/dolphinscheduler/",
            "file_path": "apache/dolphinscheduler/dolphinscheduler-common/src/test/java/org/apache/dolphinscheduler/common/utils/DateUtilsTest.java",
            "test_name": "testDateToString",
            "FQS": "org.apache.dolphinscheduler.common.utils.DateUtilsTest.testDateToString()",
            "start_line": "258",
            "blame_result": "030fb89d6e (pinkhello 2022-07-09 22:28:08 +0800 259)         ZoneId asiaSh = ZoneId.of(\"Asia/Shanghai\");\n030fb89d6e (pinkhello 2022-07-09 22:28:08 +0800 260)         ZoneId utc = ZoneId.of(\"UTC\");\n030fb89d6e (pinkhello 2022-07-09 22:28:08 +0800 261)         ZonedDateTime asiaShNow = ZonedDateTime.now(asiaSh);\n030fb89d6e (pinkhello 2022-07-09 22:28:08 +0800 262)         ZonedDateTime utcNow = asiaShNow.minusHours(8);\n030fb89d6e (pinkhello 2022-07-09 22:28:08 +0800 263)         String asiaShNowStr = DateUtils.dateToString(utcNow, asiaSh);\n",
            "commit_hashes": {
                "030fb89d6e": "    [Fixed-10833] [Bug] [Quartz] timezone display doesn't match the next_fire_time in ds 3.0.0-beta1 version (#10865)"
            },
            "Commit&issueIDs": {
                "030fb89d6e": [
                    "(#10865)"
                ]
            },
            "links": [
                "https://github.com/apache/dolphinscheduler/issues/10865",
                "https://github.com/apache/dolphinscheduler/commit/030fb89d6e"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree2/",
            "file_path": "davidmoten/rtree2/src/test/java/com/github/davidmoten/rtree2/geometry/RectangleTest.java",
            "test_name": "testIntersectsNoRectangleContainsCornerOfAnother",
            "FQS": "com.github.davidmoten.rtree2.geometry.RectangleTest.testIntersectsNoRectangleContainsCornerOfAnother()",
            "start_line": "126",
            "blame_result": "36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 127)         Rectangle a = rectangle(10, 10, 50, 50);\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 128)         Rectangle b = rectangle(28.0, 4.0, 34.0, 85.0);\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 129)         assertTrue(a.intersects(b));\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 130)         assertTrue(b.intersects(a));\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 131)     }\n",
            "commit_hashes": {
                "36043530": "    rewrite Rectangle.intersects to fix #7"
            },
            "Commit&issueIDs": {
                "36043530": [
                    "#7"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree2/issues/7",
                "https://github.com/davidmoten/rtree2/commit/36043530"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenIntegerNumber",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenIntegerNumber()",
            "start_line": "148",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 149)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 150)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 151)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 152)       SchemaBuilder.type( \"integer\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 153)       .format( \"null\")\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree2/",
            "file_path": "davidmoten/rtree2/src/test/java/com/github/davidmoten/rtree2/geometry/RectangleTest.java",
            "test_name": "testIntersectsOneRectangleContainsTheOther",
            "FQS": "com.github.davidmoten.rtree2.geometry.RectangleTest.testIntersectsOneRectangleContainsTheOther()",
            "start_line": "134",
            "blame_result": "36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 135)         Rectangle a = rectangle(10, 10, 50, 50);\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 136)         Rectangle b = rectangle(20, 20, 40, 40);\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 137)         assertTrue(a.intersects(b));\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 138)         assertTrue(b.intersects(a));\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java (Dave Moten 2014-10-23 14:15:04 +1100 139)     }\n",
            "commit_hashes": {
                "36043530": "    rewrite Rectangle.intersects to fix #7"
            },
            "Commit&issueIDs": {
                "36043530": [
                    "#7"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree2/issues/7",
                "https://github.com/davidmoten/rtree2/commit/36043530"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree2/",
            "file_path": "davidmoten/rtree2/src/test/java/com/github/davidmoten/rtree2/geometry/RectangleTest.java",
            "test_name": "testIntersectsOneRectangleReturnsTrueDespiteZeroArea",
            "FQS": "com.github.davidmoten.rtree2.geometry.RectangleTest.testIntersectsOneRectangleReturnsTrueDespiteZeroArea()",
            "start_line": "142",
            "blame_result": "f7e210c8 src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java (David Moten 2019-06-26 13:44:17 +1000 143)         Rectangle a = rectangle(10, 50, 50, 50);\nf7e210c8 src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java (David Moten 2019-06-26 13:44:17 +1000 144)         Rectangle b = rectangle(20, 20, 60, 60);\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java          (Dave Moten  2014-10-23 14:15:04 +1100 145)         assertTrue(a.intersects(b));\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java          (Dave Moten  2014-10-23 14:15:04 +1100 146)         assertTrue(b.intersects(a));\n36043530 src/test/java/com/github/davidmoten/rtree/RectangleTest.java          (Dave Moten  2014-10-23 14:15:04 +1100 147)     }\n",
            "commit_hashes": {
                "f7e210c8": "    add test for rectangle intersects with zero area rectangle",
                "36043530": "    rewrite Rectangle.intersects to fix #7"
            },
            "Commit&issueIDs": {
                "36043530": [
                    "#7"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree2/issues/7",
                "https://github.com/davidmoten/rtree2/commit/36043530"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenArraysUniqueItemsNone",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenArraysUniqueItemsNone()",
            "start_line": "190",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 191)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 192)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 193)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 194)       SchemaBuilder.type( \"array\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 195)       .format( \"list\")\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenArraysOverride",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenArraysOverride()",
            "start_line": "229",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 230)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 231)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 232)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 233)       SchemaBuilder.type( \"array\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 234)       .format( null)\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/jfree/jfreechart/",
            "file_path": "jfree/jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYLineAndShapeRendererTest.java",
            "test_name": "testHashcode",
            "FQS": "org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testHashcode()",
            "start_line": "156",
            "blame_result": "^6f8f85d3 tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java  (David Gilbert 2007-06-29 13:35:09 +0000 157)         XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer();\n^6f8f85d3 tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java  (David Gilbert 2007-06-29 13:35:09 +0000 158)         XYLineAndShapeRenderer r2 = new XYLineAndShapeRenderer();\na27780c82 src/test/java/org/jfree/chart/renderer/xy/XYLineAndShapeRendererTest.java (David Gilbert 2021-10-04 06:45:31 +0200 159)         assertEquals(r1, r2);\n^6f8f85d3 tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java  (David Gilbert 2007-06-29 13:35:09 +0000 160)         int h1 = r1.hashCode();\n^6f8f85d3 tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java  (David Gilbert 2007-06-29 13:35:09 +0000 161)         int h2 = r2.hashCode();\n",
            "commit_hashes": {
                "6f8f85d3": "    Branch for 1.0.x (starts with version 1.0.6).",
                "a27780c82": "    Implement hashCode() in XYLineAndShapeRenderer - bug #240"
            },
            "Commit&issueIDs": {
                "a27780c82": [
                    "#240"
                ]
            },
            "links": [
                "https://github.com/jfree/jfreechart/issues/240",
                "https://github.com/jfree/jfreechart/commit/a27780c82"
            ]
        },
        {
            "poj_link": "https://github.com/jfree/jfreechart/",
            "file_path": "jfree/jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYLineAndShapeRendererTest.java",
            "test_name": "testCloning",
            "FQS": "org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testCloning()",
            "start_line": "169",
            "blame_result": "^6f8f85d3 tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java  (David Gilbert 2007-06-29 13:35:09 +0000 170)         Rectangle2D legendShape = new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0);\n^6f8f85d3 tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java  (David Gilbert 2007-06-29 13:35:09 +0000 171)         XYLineAndShapeRenderer r1 = new XYLineAndShapeRenderer();\n^6f8f85d3 tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java  (David Gilbert 2007-06-29 13:35:09 +0000 172)         r1.setLegendLine(legendShape);\n2e7f3c40f src/test/java/org/jfree/chart/renderer/xy/XYLineAndShapeRendererTest.java (David Gilbert 2020-03-21 10:44:48 +0100 173)         XYLineAndShapeRenderer r2 = CloneUtils.clone(r1);\na27780c82 src/test/java/org/jfree/chart/renderer/xy/XYLineAndShapeRendererTest.java (David Gilbert 2021-10-04 06:45:31 +0200 174)         assertNotSame(r1, r2);\n",
            "commit_hashes": {
                "6f8f85d3": "    Branch for 1.0.x (starts with version 1.0.6).",
                "2e7f3c40f": "    Fix compiler warnings.",
                "a27780c82": "    Implement hashCode() in XYLineAndShapeRenderer - bug #240"
            },
            "Commit&issueIDs": {
                "a27780c82": [
                    "#240"
                ]
            },
            "links": [
                "https://github.com/jfree/jfreechart/issues/240",
                "https://github.com/jfree/jfreechart/commit/a27780c82"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenArraysDefaults",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenArraysDefaults()",
            "start_line": "268",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 269)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 270)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 271)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 272)       SchemaBuilder.type( \"array\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 273)       .format( \"base64\")\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/redfx-quantum/strange/",
            "file_path": "redfx-quantum/strange/src/test/java/org/redfx/strange/test/BellStateTest.java",
            "test_name": "hcnot01",
            "FQS": "org.redfx.strange.test.BellStateTest.hcnot01()",
            "start_line": "58",
            "blame_result": "7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 59)         Program p = new Program(2,\n7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 60)           new Step(new Hadamard(0)),\n7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 61)           new Step(new Cnot(0,1))\n7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 62)         );\ne8d5f1b0 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Johan Vos       2018-05-01 12:15:38 +0200 63)         Result res = runProgram(p);\n",
            "commit_hashes": {
                "7026d154": "    New round on API enhancements (#34)",
                "e8d5f1b0": "    add test on entanglement (and find out we incorrectly handle it)"
            },
            "Commit&issueIDs": {
                "7026d154": [
                    "34"
                ]
            },
            "links": [
                "https://github.com/redfx-quantum/strange/issues/34",
                "https://github.com/redfx-quantum/strange/commit/7026d154"
            ]
        },
        {
            "poj_link": "https://github.com/redfx-quantum/strange/",
            "file_path": "redfx-quantum/strange/src/test/java/org/redfx/strange/test/BellStateTest.java",
            "test_name": "multimeasurement",
            "FQS": "org.redfx.strange.test.BellStateTest.multimeasurement()",
            "start_line": "76",
            "blame_result": "7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 77)         Program p = new Program(2,\n7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 78)             new Step(new Hadamard(0)),\n7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 79)             new Step(new Cnot(0,1))\n7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 80)         );\ne8d5f1b0 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Johan Vos       2018-05-01 12:15:38 +0200 81)         Result res = runProgram(p);\n",
            "commit_hashes": {
                "7026d154": "    New round on API enhancements (#34)",
                "e8d5f1b0": "    add test on entanglement (and find out we incorrectly handle it)"
            },
            "Commit&issueIDs": {
                "7026d154": [
                    "34"
                ]
            },
            "links": [
                "https://github.com/redfx-quantum/strange/issues/34",
                "https://github.com/redfx-quantum/strange/commit/7026d154"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenArraysSchemaNone",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenArraysSchemaNone()",
            "start_line": "307",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 308)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 309)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 310)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 311)       SchemaBuilder.type( \"array\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 312)       .format( null)\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/redfx-quantum/strange/",
            "file_path": "redfx-quantum/strange/src/test/java/org/redfx/strange/test/BellStateTest.java",
            "test_name": "cnotH",
            "FQS": "org.redfx.strange.test.BellStateTest.cnotH()",
            "start_line": "100",
            "blame_result": "7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 101)         Program p = new Program(3,\n7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 102)             new Step(new Hadamard(0)),\n7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 103)             new Step(new Cnot(0,1)),\n7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 104)             new Step(new Hadamard(2))\n7026d154 src/test/java/com/gluonhq/strange/test/BellStateTest.java (Eugene Ryzhikov 2019-12-12 05:15:18 -0500 105)         );\n",
            "commit_hashes": {
                "7026d154": "    New round on API enhancements (#34)"
            },
            "Commit&issueIDs": {
                "7026d154": [
                    "34"
                ]
            },
            "links": [
                "https://github.com/redfx-quantum/strange/issues/34",
                "https://github.com/redfx-quantum/strange/commit/7026d154"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenStringsMinLengthNone",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenStringsMinLengthNone()",
            "start_line": "346",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 347)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 348)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 349)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 350)       SchemaBuilder.type( \"string\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 351)       .format( \"email\")\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenStringsMaxLengthNone",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenStringsMaxLengthNone()",
            "start_line": "382",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 383)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 384)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 385)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 386)       SchemaBuilder.type( \"string\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 387)       .format( null)\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenStringsPatternNone",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenStringsPatternNone()",
            "start_line": "418",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 419)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 420)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 421)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 422)       SchemaBuilder.type( \"string\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 423)       .format( \"date-time\")\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/context/src/test/java/com/megaease/easeagent/context/AsyncContextImplTest.java",
            "test_name": "put",
            "FQS": "com.megaease.easeagent.context.AsyncContextImplTest.put()",
            "start_line": "69",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 70)         assertNull(sessionContext.get(name));\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 71)         try (Cleaner cleaner = asyncContext.importToCurrent()) {\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 72)             assertEquals(value, sessionContext.get(name));\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 73)         }\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 74)         assertNull(sessionContext.get(name));\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/context/src/test/java/com/megaease/easeagent/context/RetBoundTest.java",
            "test_name": "get",
            "FQS": "com.megaease.easeagent.context.RetBoundTest.get()",
            "start_line": "32",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 33)         RetBound retBound = new RetBound(1);\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 34)         Object o = new Object();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 35)         Object o2 = new Object();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 36)         retBound.put(\"a\", o);\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 37)         assertEquals(o, retBound.get(\"a\"));\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/context/src/test/java/com/megaease/easeagent/context/SessionContextTest.java",
            "test_name": "get",
            "FQS": "com.megaease.easeagent.context.SessionContextTest.get()",
            "start_line": "51",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 52)         assertNotNull(contextManager);\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 53)     }\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 54) \n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 55)     @Test\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 56)     public void isNoop() {\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/context/src/test/java/com/megaease/easeagent/context/SessionContextTest.java",
            "test_name": "exportAsync",
            "FQS": "com.megaease.easeagent.context.SessionContextTest.exportAsync()",
            "start_line": "193",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 194)         SessionContext sessionContext = new SessionContext();\n042fbaea5 (jzw       2022-03-25 12:23:28 +0800 195)         sessionContext.setSupplier(() -> EaseAgent.initializeContextSupplier.getContext());\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 196)         MockITracing iTracing = new MockITracing();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 197)         sessionContext.setCurrentTracing(iTracing);\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 198)         String name = \"test_name\";\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)",
                "042fbaea5": "    make all interceptors implement order interface & fix orchestration sequence  (#261)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ],
                "042fbaea5": [
                    "(#261)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb",
                "https://github.com/megaease/easeagent/issues/261",
                "https://github.com/megaease/easeagent/commit/042fbaea5"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/context/src/test/java/com/megaease/easeagent/context/SessionContextTest.java",
            "test_name": "wrap",
            "FQS": "com.megaease.easeagent.context.SessionContextTest.wrap()",
            "start_line": "307",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 308)         SessionContext sessionContext = new SessionContext();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 309)         MockITracing iTracing = new MockITracing();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 310)         sessionContext.setCurrentTracing(iTracing);\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 311)         String name = \"test_name\";\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 312)         String value = \"test_value\";\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/metrics/src/test/java/com/megaease/easeagent/metrics/impl/MetricRegistryImplTest.java",
            "test_name": "getMetrics",
            "FQS": "com.megaease.easeagent.metrics.impl.MetricRegistryImplTest.getMetrics()",
            "start_line": "77",
            "blame_result": "1c13221a3 (yufu.deng 2022-02-22 15:09:30 +0800 78)         com.codahale.metrics.MetricRegistry mr = MetricRegistryService.DEFAULT.createMetricRegistry(null, null, null);\nce6aca7a7 (yufu.deng 2022-01-27 10:46:53 +0800 79)         MetricRegistry metricRegistry = MetricRegistryImpl.build(mr);\nce6aca7a7 (yufu.deng 2022-01-27 10:46:53 +0800 80)         String gaugeName = buildMetricName(\"getMetrics_gaugeName\");\nce6aca7a7 (yufu.deng 2022-01-27 10:46:53 +0800 81)         String value1 = \"test_remove_value1\";\nce6aca7a7 (yufu.deng 2022-01-27 10:46:53 +0800 82)         Gauge gauge = metricRegistry.gauge(gaugeName, () -> new TestGauge(value1));\n",
            "commit_hashes": {
                "1c13221a3": "    Metric (#217)",
                "ce6aca7a7": "    Unit test (#201)"
            },
            "Commit&issueIDs": {
                "1c13221a3": [
                    "(#217)"
                ],
                "ce6aca7a7": [
                    "(#201)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/217",
                "https://github.com/megaease/easeagent/commit/1c13221a3",
                "https://github.com/megaease/easeagent/issues/201",
                "https://github.com/megaease/easeagent/commit/ce6aca7a7"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/plugin-api/src/test/java/com/megaease/easeagent/plugin/tools/config/AutoRefreshConfigSupplierTest.java",
            "test_name": "newInstance",
            "FQS": "com.megaease.easeagent.plugin.tools.config.AutoRefreshConfigSupplierTest.newInstance()",
            "start_line": "33",
            "blame_result": "997374cf8 (jzw       2022-01-04 14:38:45 +0800 34)                 return new TestAutoRefreshPluginConfig();\nea4e29c83 (yufu.deng 2021-12-13 17:49:23 +0800 35)             }\nea4e29c83 (yufu.deng 2021-12-13 17:49:23 +0800 36)         };\n997374cf8 (jzw       2022-01-04 14:38:45 +0800 37)         AutoRefreshConfigSupplier<TestAutoRefreshPluginConfig> supplier2 = new AutoRefreshConfigSupplier<TestAutoRefreshPluginConfig>() {\nea4e29c83 (yufu.deng 2021-12-13 17:49:23 +0800 38)             @Override\n",
            "commit_hashes": {
                "997374cf8": "    Organize and simplify code, remove redundant code (#170)",
                "ea4e29c83": "    adjust config and metric, fix jdbc"
            },
            "Commit&issueIDs": {
                "997374cf8": [
                    "(#170)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/170",
                "https://github.com/megaease/easeagent/commit/997374cf8"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/plugins/jdbc/src/test/java/com/megaease/easeagent/plugin/jdbc/common/MD5SQLCompressionTest.java",
            "test_name": "getInstance",
            "FQS": "com.megaease.easeagent.plugin.jdbc.common.MD5SQLCompressionTest.getInstance()",
            "start_line": "43",
            "blame_result": "1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 44)         MD5SQLCompression md5SQLCompression = MD5SQLCompression.getInstance();\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 45)         assertSame(md5SQLCompression, MD5SQLCompression.getInstance());\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 46)     }\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 47) \n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 48)     @Test\n",
            "commit_hashes": {
                "1b9c15298": "    add unit test and fix : rabbitmq and jdbc (#224)"
            },
            "Commit&issueIDs": {
                "1b9c15298": [
                    "(#224)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/224",
                "https://github.com/megaease/easeagent/commit/1b9c15298"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/plugins/jdbc/src/test/java/com/megaease/easeagent/plugin/jdbc/common/SqlInfoTest.java",
            "test_name": "addSql",
            "FQS": "com.megaease.easeagent.plugin.jdbc.common.SqlInfoTest.addSql()",
            "start_line": "43",
            "blame_result": "1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 44)         SqlInfo sqlInfo = buildSqlInfo();\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 45)         String sql = \"testSql\";\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 46)         sqlInfo.addSql(sql, true);\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 47)         assertEquals(1, sqlInfo.getSqlList().size());\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 48)         assertEquals(sql, sqlInfo.getSqlList().get(0));\n",
            "commit_hashes": {
                "1b9c15298": "    add unit test and fix : rabbitmq and jdbc (#224)"
            },
            "Commit&issueIDs": {
                "1b9c15298": [
                    "(#224)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/224",
                "https://github.com/megaease/easeagent/commit/1b9c15298"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/plugins/jdbc/src/test/java/com/megaease/easeagent/plugin/jdbc/common/SqlInfoTest.java",
            "test_name": "getSql",
            "FQS": "com.megaease.easeagent.plugin.jdbc.common.SqlInfoTest.getSql()",
            "start_line": "47",
            "blame_result": "1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 48)         assertEquals(sql, sqlInfo.getSqlList().get(0));\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 49)         sqlInfo.addSql(sql, true);\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 50)         assertEquals(2, sqlInfo.getSqlList().size());\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 51)         assertEquals(sql, sqlInfo.getSqlList().get(1));\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 52) \n",
            "commit_hashes": {
                "1b9c15298": "    add unit test and fix : rabbitmq and jdbc (#224)"
            },
            "Commit&issueIDs": {
                "1b9c15298": [
                    "(#224)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/224",
                "https://github.com/megaease/easeagent/commit/1b9c15298"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/plugins/kafka/src/test/java/com/megaease/easeagent/plugin/kafka/interceptor/tracing/KafkaProducerRequestTest.java",
            "test_name": "header",
            "FQS": "com.megaease.easeagent.plugin.kafka.interceptor.tracing.KafkaProducerRequestTest.header()",
            "start_line": "58",
            "blame_result": "e4dac4a8a (yufu.deng 2022-02-14 15:56:42 +0800 59)         KafkaProducerRequest kafkaProducerRequest = createOne();\ne4dac4a8a (yufu.deng 2022-02-14 15:56:42 +0800 60)         String headerKey = \"testHeaderKeys\";\ne4dac4a8a (yufu.deng 2022-02-14 15:56:42 +0800 61)         String headerValue = \"testHeaderValue\";\ne4dac4a8a (yufu.deng 2022-02-14 15:56:42 +0800 62)         kafkaProducerRequest.setHeader(headerKey, headerValue);\ne4dac4a8a (yufu.deng 2022-02-14 15:56:42 +0800 63)         assertEquals(headerValue, kafkaProducerRequest.header(headerKey));\n",
            "commit_hashes": {
                "e4dac4a8a": "    Unit test (#210)"
            },
            "Commit&issueIDs": {
                "e4dac4a8a": [
                    "(#210)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/210",
                "https://github.com/megaease/easeagent/commit/e4dac4a8a"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/plugins/rabbitmq/src/test/java/com/megaease/easeagent/plugin/rabbitmq/spring/interceptor/RabbitMqOnMessageTracingInterceptorTest.java",
            "test_name": "testRabbitConsumerRequest",
            "FQS": "com.megaease.easeagent.plugin.rabbitmq.spring.interceptor.RabbitMqOnMessageTracingInterceptorTest.testRabbitConsumerRequest()",
            "start_line": "262",
            "blame_result": "1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 263)         MessageProperties messageProperties = new MessageProperties();\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 264) \n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 265)         String queue = \"testConsumerQueue\";\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 266)         messageProperties.setConsumerQueue(queue);\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 267)         String testMqUri = \"testMqUri\";\n",
            "commit_hashes": {
                "1b9c15298": "    add unit test and fix : rabbitmq and jdbc (#224)"
            },
            "Commit&issueIDs": {
                "1b9c15298": [
                    "(#224)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/224",
                "https://github.com/megaease/easeagent/commit/1b9c15298"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/plugins/rabbitmq/src/test/java/com/megaease/easeagent/plugin/rabbitmq/v5/interceptor/tracing/RabbitMqChannelPublishTracingInterceptorTest.java",
            "test_name": "testRabbitProducerRequest",
            "FQS": "com.megaease.easeagent.plugin.rabbitmq.v5.interceptor.tracing.RabbitMqChannelPublishTracingInterceptorTest.testRabbitProducerRequest()",
            "start_line": "113",
            "blame_result": "1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 114)         String exchange = \"testExchange\";\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 115)         String routingKey = \"testRoutingKey\";\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 116)         AMQP.BasicProperties basicProperties = new AMQP.BasicProperties();\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 117)         RabbitMqChannelPublishTracingInterceptor.RabbitProducerRequest request = new RabbitMqChannelPublishTracingInterceptor.RabbitProducerRequest(exchange, routingKey, basicProperties);\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 118)         assertEquals(\"send\", request.operation());\n",
            "commit_hashes": {
                "1b9c15298": "    add unit test and fix : rabbitmq and jdbc (#224)"
            },
            "Commit&issueIDs": {
                "1b9c15298": [
                    "(#224)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/224",
                "https://github.com/megaease/easeagent/commit/1b9c15298"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/plugins/rabbitmq/src/test/java/com/megaease/easeagent/plugin/rabbitmq/v5/interceptor/tracing/RabbitMqConsumerTracingInterceptorTest.java",
            "test_name": "testRabbitConsumerRequest",
            "FQS": "com.megaease.easeagent.plugin.rabbitmq.v5.interceptor.tracing.RabbitMqConsumerTracingInterceptorTest.testRabbitConsumerRequest()",
            "start_line": "118",
            "blame_result": "1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 119)         String queue = \"testRabbitConsumerRequestQueue\";\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 120)         Envelope envelope = new Envelope(0, false, \"\", queue);\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 121)         AMQP.BasicProperties basicProperties = new AMQP.BasicProperties();\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 122)         RabbitMqConsumerTracingInterceptor.RabbitConsumerRequest request = new RabbitMqConsumerTracingInterceptor.RabbitConsumerRequest(envelope, basicProperties);\n1b9c15298 (yufu.deng 2022-02-28 14:38:50 +0800 123)         assertEquals(\"receive\", request.operation());\n",
            "commit_hashes": {
                "1b9c15298": "    add unit test and fix : rabbitmq and jdbc (#224)"
            },
            "Commit&issueIDs": {
                "1b9c15298": [
                    "(#224)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/224",
                "https://github.com/megaease/easeagent/commit/1b9c15298"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/plugins/spring-gateway/src/test/java/easeagent/plugin/spring/gateway/interceptor/metric/TimeUtilsTest.java",
            "test_name": "startTime",
            "FQS": "easeagent.plugin.spring.gateway.interceptor.metric.TimeUtilsTest.startTime()",
            "start_line": "32",
            "blame_result": "964c49465 (yufu.deng 2022-02-21 17:29:35 +0800 33)         Object key = new Object();\n964c49465 (yufu.deng 2022-02-21 17:29:35 +0800 34)         long startTime = TimeUtils.startTime(EaseAgent.getContext(), key);\n964c49465 (yufu.deng 2022-02-21 17:29:35 +0800 35)         Thread.sleep(10);\n964c49465 (yufu.deng 2022-02-21 17:29:35 +0800 36)         assertEquals(startTime, TimeUtils.startTime(EaseAgent.getContext(), key));\n964c49465 (yufu.deng 2022-02-21 17:29:35 +0800 37)         Object key2 = new Object();\n",
            "commit_hashes": {
                "964c49465": "    Unit test (#214)"
            },
            "Commit&issueIDs": {
                "964c49465": [
                    "(#214)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/214",
                "https://github.com/megaease/easeagent/commit/964c49465"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/plugins/spring-gateway/src/test/java/easeagent/plugin/spring/gateway/interceptor/metric/TimeUtilsTest.java",
            "test_name": "removeStartTime",
            "FQS": "easeagent.plugin.spring.gateway.interceptor.metric.TimeUtilsTest.removeStartTime()",
            "start_line": "42",
            "blame_result": "964c49465 (yufu.deng 2022-02-21 17:29:35 +0800 43)         Object key = new Object();\n964c49465 (yufu.deng 2022-02-21 17:29:35 +0800 44)         long startTime = TimeUtils.startTime(EaseAgent.getContext(), key);\n964c49465 (yufu.deng 2022-02-21 17:29:35 +0800 45)         Long startObj = TimeUtils.removeStartTime(EaseAgent.getContext(), key);\n964c49465 (yufu.deng 2022-02-21 17:29:35 +0800 46)         assertNotNull(startObj);\n964c49465 (yufu.deng 2022-02-21 17:29:35 +0800 47)         assertEquals(startTime, (long) startObj);\n",
            "commit_hashes": {
                "964c49465": "    Unit test (#214)"
            },
            "Commit&issueIDs": {
                "964c49465": [
                    "(#214)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/214",
                "https://github.com/megaease/easeagent/commit/964c49465"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/zipkin/src/test/java/com/megaease/easeagent/zipkin/impl/AsyncRequestTest.java",
            "test_name": "header",
            "FQS": "com.megaease.easeagent.zipkin.impl.AsyncRequestTest.header()",
            "start_line": "45",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 46)         AsyncRequest asyncRequest = new AsyncRequest(new RequestMock());\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 47)         String name = \"testName\";\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 48)         assertNull(asyncRequest.header(name));\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 49)         RequestMock requestMock = new RequestMock();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 50)         asyncRequest = new AsyncRequest(requestMock);\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/zipkin/src/test/java/com/megaease/easeagent/zipkin/impl/RequestContextImplTest.java",
            "test_name": "getHeaders",
            "FQS": "com.megaease.easeagent.zipkin.impl.RequestContextImplTest.getHeaders()",
            "start_line": "97",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800  98)         String name = \"test_name\";\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800  99)         String value = \"test_value\";\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 100)         RequestMock requestMock = new RequestMock();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 101)         buildOne(requestMock, c -> {\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 102)             c.setHeader(name, value);\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/zipkin/src/test/java/com/megaease/easeagent/zipkin/impl/SpanImplTest.java",
            "test_name": "parentId",
            "FQS": "com.megaease.easeagent.zipkin.impl.SpanImplTest.parentId()",
            "start_line": "97",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800  98)         assertEquals(bSpanN.context().spanId(), bSpanN.context().traceId());\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800  99)         try (CurrentTraceContext.Scope scope = tracing.currentTraceContext().maybeScope(bSpanN.context())) {\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 100)             String name = \"testName\";\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 101)             brave.Span bSpan2 = SpanImpl.nextBraveSpan(tracing, extractor, new RequestMock().setKind(Span.Kind.PRODUCER).setName(name));\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 102)             assertEquals(bSpanN.context().traceId(), bSpan2.context().traceId());\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/zipkin/src/test/java/com/megaease/easeagent/zipkin/impl/TracingImplTest.java",
            "test_name": "currentSpan",
            "FQS": "com.megaease.easeagent.zipkin.impl.TracingImplTest.currentSpan()",
            "start_line": "73",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 74)         Span span = iTracing.nextSpan();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 75)         Span currentSpan = iTracing.currentSpan();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 76)         assertTrue(currentSpan.isNoop());\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 77)         try (Scope scope = span.maybeScope()) {\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 78)             currentSpan = iTracing.currentSpan();\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/zipkin/src/test/java/com/megaease/easeagent/zipkin/impl/TracingImplTest.java",
            "test_name": "importAsync",
            "FQS": "com.megaease.easeagent.zipkin.impl.TracingImplTest.importAsync()",
            "start_line": "107",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 108)         Span span = iTracing.nextSpan();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 109)         SpanContext spanContext = iTracing.exportAsync();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 110)         assertTrue(spanContext.isNoop());\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 111)         Scope importScope = iTracing.importAsync(spanContext);\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 112)         assertNull(importScope.unwrap());\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/zipkin/src/test/java/com/megaease/easeagent/zipkin/impl/TracingImplTest.java",
            "test_name": "nextSpan",
            "FQS": "com.megaease.easeagent.zipkin.impl.TracingImplTest.nextSpan()",
            "start_line": "64",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 65)         assertFalse(iTracing.hasCurrentSpan());\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 66)         try (Scope scope = span.maybeScope()) {\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 67)             assertTrue(iTracing.hasCurrentSpan());\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 68)         }\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 69)         assertFalse(iTracing.hasCurrentSpan());\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/zipkin/src/test/java/com/megaease/easeagent/zipkin/impl/TracingImplTest.java",
            "test_name": "consumerSpan",
            "FQS": "com.megaease.easeagent.zipkin.impl.TracingImplTest.consumerSpan()",
            "start_line": "237",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 238)         Span span = iTracing.consumerSpan(new MessagingRequestMock().setOperation(operation).setChannelKind(channelKind).setChannelName(channelName));\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 239)         assertFalse(span.isNoop());\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 240)         MutableSpan state = AgentFieldReflectAccessor.getFieldValue(span.unwrap(), \"state\");\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 241)         checkTag(state);\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 242) \n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/zipkin/src/test/java/com/megaease/easeagent/zipkin/impl/TracingImplTest.java",
            "test_name": "producerSpan",
            "FQS": "com.megaease.easeagent.zipkin.impl.TracingImplTest.producerSpan()",
            "start_line": "244",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 245) \n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 246)         MessagingRequestMock messagingRequestMock = new MessagingRequestMock();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 247)         iTracing.messagingTracing().producerInjector().inject(span, messagingRequestMock);\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 248) \n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 249)         MessagingRequestMock request1 = new MessagingRequestMock();\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/zipkin/src/test/java/com/megaease/easeagent/zipkin/impl/message/MessagingTracingImplTest.java",
            "test_name": "consumerSpan",
            "FQS": "com.megaease.easeagent.zipkin.impl.message.MessagingTracingImplTest.consumerSpan()",
            "start_line": "66",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 67)         Span span = messagingTracing.consumerSpan(new MessagingRequestMock().setOperation(operation).setChannelKind(channelKind).setChannelName(channelName));\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 68)         assertFalse(span.isNoop());\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 69)         MutableSpan state = AgentFieldReflectAccessor.getFieldValue(span.unwrap(), \"state\");\nf2c717156 (yufu.deng 2022-02-07 14:39:31 +0800 70)         assertNotNull(state);\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 71)         checkTag(state);\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)",
                "f2c717156": "    Unit test (#205)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ],
                "f2c717156": [
                    "(#205)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb",
                "https://github.com/megaease/easeagent/issues/205",
                "https://github.com/megaease/easeagent/commit/f2c717156"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/zipkin/src/test/java/com/megaease/easeagent/zipkin/impl/message/MessagingTracingImplTest.java",
            "test_name": "producerSpan",
            "FQS": "com.megaease.easeagent.zipkin.impl.message.MessagingTracingImplTest.producerSpan()",
            "start_line": "74",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 75) \n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 76)         MessagingRequestMock messagingRequestMock = new MessagingRequestMock();\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 77)         messagingTracing.producerInjector().inject(span, messagingRequestMock);\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 78) \n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 79)         MessagingRequestMock request1 = new MessagingRequestMock();\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/megaease/easeagent/",
            "file_path": "megaease/easeagent/zipkin/src/test/java/com/megaease/easeagent/zipkin/logging/AgentLogMDCTest.java",
            "test_name": "put",
            "FQS": "com.megaease.easeagent.zipkin.logging.AgentLogMDCTest.put()",
            "start_line": "41",
            "blame_result": "93332becb (yufu.deng 2022-01-24 19:05:56 +0800 42)         try (LogUtilsTest.Close ignored = LogUtilsTest.reset()) {\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 43)             AgentLogMDC agentLogMDC = AgentLogMDC.create(Thread.currentThread().getContextClassLoader());\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 44)             String name = \"testName\";\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 45)             String value = \"testValue\";\n93332becb (yufu.deng 2022-01-24 19:05:56 +0800 46)             agentLogMDC.put(name, value);\n",
            "commit_hashes": {
                "93332becb": "    add unit test: zipkin, context, httpclient (#196)"
            },
            "Commit&issueIDs": {
                "93332becb": [
                    "(#196)"
                ]
            },
            "links": [
                "https://github.com/megaease/easeagent/issues/196",
                "https://github.com/megaease/easeagent/commit/93332becb"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenStringsFormatNone",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenStringsFormatNone()",
            "start_line": "454",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 455)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 456)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 457)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 458)       SchemaBuilder.type( \"string\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 459)       .format( null)\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-text/",
            "file_path": "apache/commons-text/src/test/java/org/apache/commons/text/ExtendedMessageFormatTest.java",
            "test_name": "testEqualsHashcode",
            "FQS": "org.apache.commons.text.ExtendedMessageFormatTest.testEqualsHashcode()",
            "start_line": "333",
            "blame_result": "6665a0209 (Pascal Schumacher 2017-10-15 19:57:21 +0200 334)         final Map<String, ? extends FormatFactory> fmtRegistry =\n1f1a06098 (Gary Gregory      2023-05-18 10:44:01 -0400 335)                 Collections.singletonMap(\"testfmt\", LowerCaseFormat.FACTORY);\n2559593ad (XenoAmess         2020-07-21 20:21:22 +0800 336)         final Map<String, ? extends FormatFactory> otherRegistry =\n1f1a06098 (Gary Gregory      2023-05-18 10:44:01 -0400 337)                 Collections.singletonMap(\"testfmt\", UpperCaseFormat.FACTORY);\n6f24aa456 (Rob Tompkins      2016-11-09 15:35:38 -0500 338) \n",
            "commit_hashes": {
                "6665a0209": "    apply (relaxed) checkstyle rules to test and fix (or suppress) existing violations (closes  #71)",
                "1f1a06098": "    Use functional interfaces",
                "2559593ad": "    [TEXT-182] Fix typos (#137)",
                "6f24aa456": "    TEXT-23: Adding remainder of the o.a.c.l.text package"
            },
            "Commit&issueIDs": {
                "2559593ad": [
                    "(#137)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-text/issues/137",
                "https://github.com/apache/commons-text/commit/2559593ad"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenBoolean",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenBoolean()",
            "start_line": "490",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 491)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 492)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 493)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 494)       SchemaBuilder.type( \"boolean\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 495)       .format( \"string\")\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java",
            "test_name": "removeBody",
            "FQS": "org.dyn4j.world.AbstractCollisionWorldTest.removeBody()",
            "start_line": "276",
            "blame_result": "e220841d src/test/java/org/dyn4j/geometry/AdaptiveDecimalTest.java     (mtsamis        2019-12-23 17:49:23 +0200 277) \t */\ne220841d src/test/java/org/dyn4j/geometry/AdaptiveDecimalTest.java     (mtsamis        2019-12-23 17:49:23 +0200 278) \t@Test(expected = IndexOutOfBoundsException.class)\n4fdc119a src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java (William Bittle 2020-08-29 20:14:14 -0400 279) \tpublic void removeBodyNegativeIndex() {\n4fdc119a src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java (William Bittle 2020-08-29 20:14:14 -0400 280) \t\tTestWorld w = new TestWorld();\n4fdc119a src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java (William Bittle 2020-08-29 20:14:14 -0400 281) \t\tw.removeBody(-1);\n",
            "commit_hashes": {
                "e220841d": "    Robust hull algorithms (#97)",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "e220841d": [
                    "(#97)"
                ],
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/97",
                "https://github.com/dyn4j/dyn4j/commit/e220841d",
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenNullFormatOverride",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenNullFormatOverride()",
            "start_line": "518",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 519)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 520)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 521)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 522)       SchemaBuilder.generic()\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 523)       .format( \"int16\")\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenNullValueDefault",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenNullValueDefault()",
            "start_line": "545",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 546)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 547)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 548)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 549)       SchemaBuilder.generic()\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 550)       .format( null)\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenNullFormatDefault",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenNullFormatDefault()",
            "start_line": "574",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 575)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 576)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 577)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 578)       SchemaBuilder.generic()\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 579)       .format( \"uuid\")\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/MergeSchemaTest.java",
            "test_name": "whenOtherConstant",
            "FQS": "org.cornutum.tcases.resolve.MergeSchemaTest.whenOtherConstant()",
            "start_line": "634",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 635)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 636)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 637)     Schema defaults =\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 638)       SchemaBuilder.type( \"string\")\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 639)       .format( \"email\")\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenMinItemsAboveMax",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenMinItemsAboveMax()",
            "start_line": "22",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 23)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 24)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 25)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 26) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 27)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenMaxItemsNegative",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenMaxItemsNegative()",
            "start_line": "92",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 93)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 94)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 95)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 96) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 97)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/IQSS/dataverse/",
            "file_path": "IQSS/dataverse/src/test/java/edu/harvard/iq/dataverse/authorization/groups/impl/ipaddress/ip/IPv6AddressTest.java",
            "test_name": "testLongRoundTrips",
            "FQS": "edu.harvard.iq.dataverse.authorization.groups.impl.ipaddress.ip.IPv6AddressTest.testLongRoundTrips()",
            "start_line": "149",
            "blame_result": "a7a3223761e src/test/java/edu/harvard/iq/dataverse/authorization/groups/impl/ipaddress/ip/IPv6AddressTest.java (Michael Bar-Sinai 2016-08-12 10:19:39 -0400 150)         for (String s : Arrays.asList(\"a:b:c:d:e:f::1\", \"::\", \"::1\", \"ff:ff:ff:ff:ff:ff:ff:ff\",\n9fee2f12d41 src/test/java/edu/harvard/iq/ip/IPv6AddressTest.java                                               (Michael Bar-Sinai 2014-12-17 15:11:58 +0200 151)                 \"fe80::8358:c945:7094:2e6c\",\na7a3223761e src/test/java/edu/harvard/iq/dataverse/authorization/groups/impl/ipaddress/ip/IPv6AddressTest.java (Michael Bar-Sinai 2016-08-12 10:19:39 -0400 152)                 \"fe80::60d0:6eff:fece:7713\", \"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\")) {\n9fee2f12d41 src/test/java/edu/harvard/iq/ip/IPv6AddressTest.java                                               (Michael Bar-Sinai 2014-12-17 15:11:58 +0200 153)             IPv6Address addr = IPv6Address.valueOf(s);\n9b8dc3d0958 src/test/java/edu/harvard/iq/dataverse/authorization/groups/impl/ipaddress/ip/IPv6AddressTest.java (Oliver Bertuch    2023-08-18 17:56:11 +0200 154)             assertEquals(addr, new IPv6Address(addr.toLongArray()), \"Bad roundtrip on address: \" + s);\n",
            "commit_hashes": {
                "a7a3223761e": "    #1308: Removed debugging logging, updated NativeAPI docs. Added some unit tests",
                "9fee2f12d41": "    IP Groups, and group assignments",
                "9b8dc3d0958": "    build(test): migrate JUnit4 assertion arguments order to JUnit5 style, simplify where reasonable #9782"
            },
            "Commit&issueIDs": {
                "9b8dc3d0958": [
                    "#9782"
                ]
            },
            "links": [
                "https://github.com/IQSS/dataverse/issues/9782",
                "https://github.com/IQSS/dataverse/commit/9b8dc3d0958"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenMinItemsNegative",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenMinItemsNegative()",
            "start_line": "122",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 123)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 124)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 125)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 126) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 127)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenMaxItemsNoneInfeasible",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenMaxItemsNoneInfeasible()",
            "start_line": "156",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 157)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 158)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 159)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 160) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 161)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/IQSS/dataverse/",
            "file_path": "IQSS/dataverse/src/test/java/edu/harvard/iq/dataverse/search/SortByTest.java",
            "test_name": "testHashCodeIdentityOfSameObject",
            "FQS": "edu.harvard.iq.dataverse.search.SortByTest.testHashCodeIdentityOfSameObject()",
            "start_line": "53",
            "blame_result": "e62283175b1 (Alex Scheitlin 2019-03-13 22:04:19 +0100 54)         // Whenever it is invoked on the same object more than once during an execution of\ne62283175b1 (Alex Scheitlin 2019-03-13 22:04:19 +0100 55)         // a Java application, the hashCode method must consistently return the same\ne62283175b1 (Alex Scheitlin 2019-03-13 22:04:19 +0100 56)         // integer, ...\ne62283175b1 (Alex Scheitlin 2019-03-13 22:04:19 +0100 57)         // according to:\ne62283175b1 (Alex Scheitlin 2019-03-13 22:04:19 +0100 58)         // https://docs.oracle.com/javase/7/donulli/java/lang/Object.html#hashCode()\n",
            "commit_hashes": {
                "e62283175b1": "    test SortBy class #5634"
            },
            "Commit&issueIDs": {
                "e62283175b1": [
                    "#5634"
                ]
            },
            "links": [
                "https://github.com/IQSS/dataverse/issues/5634",
                "https://github.com/IQSS/dataverse/commit/e62283175b1"
            ]
        },
        {
            "poj_link": "https://github.com/IQSS/dataverse/",
            "file_path": "IQSS/dataverse/src/test/java/edu/harvard/iq/dataverse/search/SortByTest.java",
            "test_name": "testHashCodeIdentityOfDifferentObjects",
            "FQS": "edu.harvard.iq.dataverse.search.SortByTest.testHashCodeIdentityOfDifferentObjects()",
            "start_line": "66",
            "blame_result": "e62283175b1 (Alex Scheitlin 2019-03-13 22:04:19 +0100 67)         // If two objects are equal according to the equals(Object) method, then calling\ne62283175b1 (Alex Scheitlin 2019-03-13 22:04:19 +0100 68)         // the hashCode method on each of the two objects must produce the same integer\ne62283175b1 (Alex Scheitlin 2019-03-13 22:04:19 +0100 69)         // result.\ne62283175b1 (Alex Scheitlin 2019-03-13 22:04:19 +0100 70)         // according to:\ne62283175b1 (Alex Scheitlin 2019-03-13 22:04:19 +0100 71)         // https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()\n",
            "commit_hashes": {
                "e62283175b1": "    test SortBy class #5634"
            },
            "Commit&issueIDs": {
                "e62283175b1": [
                    "#5634"
                ]
            },
            "links": [
                "https://github.com/IQSS/dataverse/issues/5634",
                "https://github.com/IQSS/dataverse/commit/e62283175b1"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/acl/src/test/java/org/apache/rocketmq/acl/common/SessionCredentialsTest.java",
            "test_name": "SessionCredentialEqualsTest",
            "FQS": "org.apache.rocketmq.acl.common.SessionCredentialsTest.SessionCredentialEqualsTest()",
            "start_line": "56",
            "blame_result": "a5725c6b85 (Nowinkey    2022-09-29 11:46:56 +0800 57)         SessionCredentials sessionCredential1  = new SessionCredentials();\na5725c6b85 (Nowinkey    2022-09-29 11:46:56 +0800 58)         Properties properties1 = new Properties();\n5f66424721 (Hu Zongtang 2018-12-28 10:56:48 +0800 59)         properties1.setProperty(SessionCredentials.ACCESS_KEY,\"RocketMQ\");\n5f66424721 (Hu Zongtang 2018-12-28 10:56:48 +0800 60)         properties1.setProperty(SessionCredentials.SECRET_KEY,\"12345678\");\n5f66424721 (Hu Zongtang 2018-12-28 10:56:48 +0800 61)         properties1.setProperty(SessionCredentials.SECURITY_TOKEN,\"abcd\");\n",
            "commit_hashes": {
                "a5725c6b85": "    [ISSUE #5219] Enable checkstyle for test code (rocketmq-acl and rocketmq-tools) (#5220)",
                "5f66424721": "    [ISSUE#525]add aclClient PRCHook for message track (#638)"
            },
            "Commit&issueIDs": {
                "a5725c6b85": [
                    "(#5220)"
                ],
                "5f66424721": [
                    "(#638)"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/5220",
                "https://github.com/apache/rocketmq/commit/a5725c6b85",
                "https://github.com/apache/rocketmq/issues/638",
                "https://github.com/apache/rocketmq/commit/5f66424721"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/broker/src/test/java/org/apache/rocketmq/broker/offset/ConsumerOrderInfoManagerTest.java",
            "test_name": "testUpdateNextVisibleTime",
            "FQS": "org.apache.rocketmq.broker.offset.ConsumerOrderInfoManagerTest.testUpdateNextVisibleTime()",
            "start_line": "324",
            "blame_result": "03ffc45a8b (lk 2022-10-24 10:44:06 +0800 325)         long invisibleTime = 3000;\n03ffc45a8b (lk 2022-10-24 10:44:06 +0800 326) \n03ffc45a8b (lk 2022-10-24 10:44:06 +0800 327)         StringBuilder orderInfoBuilder = new StringBuilder();\n03ffc45a8b (lk 2022-10-24 10:44:06 +0800 328)         consumerOrderInfoManager.update(\n57642bc630 (lk 2023-05-05 15:06:11 +0800 329)             null,\n",
            "commit_hashes": {
                "03ffc45a8b": "    [ISSUE #5364] Support changeInvisibleTime for pop orderly (#5367)",
                "57642bc630": "    [ISSUE #6691] Support reentrant pop orderly for broker (#6692)"
            },
            "Commit&issueIDs": {
                "03ffc45a8b": [
                    "(#5367)"
                ],
                "57642bc630": [
                    "(#6692)"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/5367",
                "https://github.com/apache/rocketmq/commit/03ffc45a8b",
                "https://github.com/apache/rocketmq/issues/6692",
                "https://github.com/apache/rocketmq/commit/57642bc630"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenMaxItemsInfeasible",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenMaxItemsInfeasible()",
            "start_line": "185",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 186)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 187)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 188)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 189) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 190)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/broker/src/test/java/org/apache/rocketmq/broker/offset/RocksdbTransferOffsetAndCqTest.java",
            "test_name": "testRocksdbCqWrite",
            "FQS": "org.apache.rocketmq.broker.offset.RocksdbTransferOffsetAndCqTest.testRocksdbCqWrite()",
            "start_line": "132",
            "blame_result": "525f877f3b (LetLetMe 2024-09-23 19:24:15 +0800 133)         if (notToBeExecuted()) {\n525f877f3b (LetLetMe 2024-09-23 19:24:15 +0800 134)             return;\n525f877f3b (LetLetMe 2024-09-23 19:24:15 +0800 135)         }\n525f877f3b (LetLetMe 2024-09-23 19:24:15 +0800 136)         RocksDBMessageStore kvStore = defaultMessageStore.getRocksDBMessageStore();\n525f877f3b (LetLetMe 2024-09-23 19:24:15 +0800 137)         ConsumeQueueStoreInterface store = kvStore.getConsumeQueueStore();\n",
            "commit_hashes": {
                "525f877f3b": "    [ISSUE #8589] Support file format CQ and json format offset in-place upgrade to rocksdb management (#8600)"
            },
            "Commit&issueIDs": {
                "525f877f3b": [
                    "8600"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/8600",
                "https://github.com/apache/rocketmq/commit/525f877f3b"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/client/src/test/java/org/apache/rocketmq/client/impl/consumer/ProcessQueueTest.java",
            "test_name": "testProcessQueue",
            "FQS": "org.apache.rocketmq.client.impl.consumer.ProcessQueueTest.testProcessQueue()",
            "start_line": "156",
            "blame_result": "3722431c25 (yx9o 2024-07-28 17:11:15 +0800 157)         ProcessQueue processQueue1 = createProcessQueue();\n3722431c25 (yx9o 2024-07-28 17:11:15 +0800 158)         ProcessQueue processQueue2 = createProcessQueue();\n3722431c25 (yx9o 2024-07-28 17:11:15 +0800 159)         assertEquals(processQueue1.getMsgAccCnt(), processQueue2.getMsgAccCnt());\n3722431c25 (yx9o 2024-07-28 17:11:15 +0800 160)         assertEquals(processQueue1.getTryUnlockTimes(), processQueue2.getTryUnlockTimes());\n3722431c25 (yx9o 2024-07-28 17:11:15 +0800 161)         assertEquals(processQueue1.getLastLockTimestamp(), processQueue2.getLastLockTimestamp());\n",
            "commit_hashes": {
                "3722431c25": "    [ISSUE #8458] Add more test coverage for ProcessQueue (#8459)"
            },
            "Commit&issueIDs": {
                "3722431c25": [
                    "8459"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/8459",
                "https://github.com/apache/rocketmq/commit/3722431c25"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenStringNormal",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenStringNormal()",
            "start_line": "485",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 486)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 487)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 488)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 489) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 490)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/common/src/test/java/org/apache/rocketmq/common/compression/Lz4CompressorTest.java",
            "test_name": "testCompressAndDecompress",
            "FQS": "org.apache.rocketmq.common.compression.Lz4CompressorTest.testCompressAndDecompress()",
            "start_line": "30",
            "blame_result": "8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 31)         byte[] originalData = TEST_STRING.getBytes();\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 32)         Compressor compressor = new Lz4Compressor();\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 33)         byte[] compressedData = compressor.compress(originalData, 1);\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 34)         assertTrue(\"Compressed data should be bigger than original\", compressedData.length > originalData.length);\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 35) \n",
            "commit_hashes": {
                "8167608334": "    [ISSUE #8503] Add test cases for org.apache.rocketmq.common.chain/coldstr/compression/consumer (#8504)"
            },
            "Commit&issueIDs": {
                "8167608334": [
                    "8504"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/8504",
                "https://github.com/apache/rocketmq/commit/8167608334"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/common/src/test/java/org/apache/rocketmq/common/compression/ZlibCompressorTest.java",
            "test_name": "testCompressionAndDecompression",
            "FQS": "org.apache.rocketmq.common.compression.ZlibCompressorTest.testCompressionAndDecompression()",
            "start_line": "30",
            "blame_result": "8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 31)         byte[] originalData = TEST_STRING.getBytes();\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 32)         ZlibCompressor compressor = new ZlibCompressor();\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 33)         byte[] compressedData = compressor.compress(originalData, 0);\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 34)         assertTrue(\"Compressed data should be bigger than original\", compressedData.length > originalData.length);\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 35) \n",
            "commit_hashes": {
                "8167608334": "    [ISSUE #8503] Add test cases for org.apache.rocketmq.common.chain/coldstr/compression/consumer (#8504)"
            },
            "Commit&issueIDs": {
                "8167608334": [
                    "8504"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/8504",
                "https://github.com/apache/rocketmq/commit/8167608334"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/common/src/test/java/org/apache/rocketmq/common/compression/ZstdCompressorTest.java",
            "test_name": "testCompressAndDecompress",
            "FQS": "org.apache.rocketmq.common.compression.ZstdCompressorTest.testCompressAndDecompress()",
            "start_line": "28",
            "blame_result": "8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 29)         byte[] originalData = \"RocketMQ is awesome!\".getBytes();\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 30)         ZstdCompressor compressor = new ZstdCompressor();\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 31)         byte[] compressedData = compressor.compress(originalData, 1);\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 32)         assertTrue(\"Compressed data should be bigger than original\", compressedData.length > originalData.length);\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 33) \n",
            "commit_hashes": {
                "8167608334": "    [ISSUE #8503] Add test cases for org.apache.rocketmq.common.chain/coldstr/compression/consumer (#8504)"
            },
            "Commit&issueIDs": {
                "8167608334": [
                    "8504"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/8504",
                "https://github.com/apache/rocketmq/commit/8167608334"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenMaxLengthAbovePatternMax",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenMaxLengthAbovePatternMax()",
            "start_line": "513",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 514)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 515)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 516)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 517) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 518)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/common/src/test/java/org/apache/rocketmq/common/compression/ZstdCompressorTest.java",
            "test_name": "testCompressAndDecompressEmptyString",
            "FQS": "org.apache.rocketmq.common.compression.ZstdCompressorTest.testCompressAndDecompressEmptyString()",
            "start_line": "53",
            "blame_result": "8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 54)         byte[] originalData = \"\".getBytes();\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 55)         ZstdCompressor compressor = new ZstdCompressor();\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 56)         byte[] compressedData = compressor.compress(originalData, 1);\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 57)         assertTrue(\"Compressed data for empty string should not be empty\", compressedData.length > 0);\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 58) \n",
            "commit_hashes": {
                "8167608334": "    [ISSUE #8503] Add test cases for org.apache.rocketmq.common.chain/coldstr/compression/consumer (#8504)"
            },
            "Commit&issueIDs": {
                "8167608334": [
                    "8504"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/8504",
                "https://github.com/apache/rocketmq/commit/8167608334"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/common/src/test/java/org/apache/rocketmq/common/compression/ZstdCompressorTest.java",
            "test_name": "testCompressAndDecompressLargeData",
            "FQS": "org.apache.rocketmq.common.compression.ZstdCompressorTest.testCompressAndDecompressLargeData()",
            "start_line": "64",
            "blame_result": "8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 65)         StringBuilder largeStringBuilder = new StringBuilder();\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 66)         for (int i = 0; i < 10000; i++) {\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 67)             largeStringBuilder.append(\"RocketMQ is awesome! \");\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 68)         }\n8167608334 (\u6211\u662f\u7ba1\u5c0f\u4eae_V0x3f 2024-08-08 10:47:14 +0800 69)         byte[] originalData = largeStringBuilder.toString().getBytes();\n",
            "commit_hashes": {
                "8167608334": "    [ISSUE #8503] Add test cases for org.apache.rocketmq.common.chain/coldstr/compression/consumer (#8504)"
            },
            "Commit&issueIDs": {
                "8167608334": [
                    "8504"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/8504",
                "https://github.com/apache/rocketmq/commit/8167608334"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/proxy/src/test/java/org/apache/rocketmq/proxy/service/route/LocalTopicRouteServiceTest.java",
            "test_name": "testGetCurrentMessageQueueView",
            "FQS": "org.apache.rocketmq.proxy.service.route.LocalTopicRouteServiceTest.testGetCurrentMessageQueueView()",
            "start_line": "79",
            "blame_result": "a325d144b2 (lk       2023-06-06 17:07:06 +0800 80)         ProxyContext ctx = ProxyContext.create();\na45b040fba (kaiyi.lk 2022-05-23 19:12:58 +0800 81)         this.topicConfigTable.put(TOPIC, new TopicConfig(TOPIC, 3, 2, PermName.PERM_WRITE | PermName.PERM_READ));\na325d144b2 (lk       2023-06-06 17:07:06 +0800 82)         MessageQueueView messageQueueView = this.topicRouteService.getCurrentMessageQueueView(ctx, TOPIC);\na45b040fba (kaiyi.lk 2022-05-23 19:12:58 +0800 83)         assertEquals(3, messageQueueView.getReadSelector().getQueues().size());\na45b040fba (kaiyi.lk 2022-05-23 19:12:58 +0800 84)         assertEquals(2, messageQueueView.getWriteSelector().getQueues().size());\n",
            "commit_hashes": {
                "a325d144b2": "    [ISSUE #6858] passing through ProxyContext for future expansion (#6859)",
                "a45b040fba": "    [ISSUE #3949] add test cases"
            },
            "Commit&issueIDs": {
                "a325d144b2": [
                    "(#6859)"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/6859",
                "https://github.com/apache/rocketmq/commit/a325d144b2"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/proxy/src/test/java/org/apache/rocketmq/proxy/service/route/MessageQueueSelectorTest.java",
            "test_name": "testReadMessageQueue",
            "FQS": "org.apache.rocketmq.proxy.service.route.MessageQueueSelectorTest.testReadMessageQueue()",
            "start_line": "30",
            "blame_result": "a45b040fba (kaiyi.lk  2022-05-23 19:12:58 +0800 31)         queueData.setPerm(PermName.PERM_READ);\na45b040fba (kaiyi.lk  2022-05-23 19:12:58 +0800 32)         queueData.setReadQueueNums(0);\nb028277018 (Ji Juntao 2023-08-29 16:13:38 +0800 33)         MessageQueueSelector messageQueueSelector = new MessageQueueSelector(new TopicRouteWrapper(topicRouteData, TOPIC), null, true);\na45b040fba (kaiyi.lk  2022-05-23 19:12:58 +0800 34)         assertTrue(messageQueueSelector.getQueues().isEmpty());\na45b040fba (kaiyi.lk  2022-05-23 19:12:58 +0800 35) \n",
            "commit_hashes": {
                "a45b040fba": "    [ISSUE #3949] add test cases",
                "b028277018": "    [ISSUE #6567] [RIP-63] Queue Selection Strategy Optimization (#6568)"
            },
            "Commit&issueIDs": {
                "b028277018": [
                    "(#6568)"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/6568",
                "https://github.com/apache/rocketmq/commit/b028277018"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/proxy/src/test/java/org/apache/rocketmq/proxy/service/route/MessageQueueSelectorTest.java",
            "test_name": "testWriteMessageQueue",
            "FQS": "org.apache.rocketmq.proxy.service.route.MessageQueueSelectorTest.testWriteMessageQueue()",
            "start_line": "58",
            "blame_result": "a45b040fba (kaiyi.lk  2022-05-23 19:12:58 +0800 59)         queueData.setPerm(PermName.PERM_WRITE);\na45b040fba (kaiyi.lk  2022-05-23 19:12:58 +0800 60)         queueData.setReadQueueNums(0);\nb028277018 (Ji Juntao 2023-08-29 16:13:38 +0800 61)         MessageQueueSelector messageQueueSelector = new MessageQueueSelector(new TopicRouteWrapper(topicRouteData, TOPIC), null, false);\na45b040fba (kaiyi.lk  2022-05-23 19:12:58 +0800 62)         assertTrue(messageQueueSelector.getQueues().isEmpty());\na45b040fba (kaiyi.lk  2022-05-23 19:12:58 +0800 63) \n",
            "commit_hashes": {
                "a45b040fba": "    [ISSUE #3949] add test cases",
                "b028277018": "    [ISSUE #6567] [RIP-63] Queue Selection Strategy Optimization (#6568)"
            },
            "Commit&issueIDs": {
                "b028277018": [
                    "(#6568)"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/6568",
                "https://github.com/apache/rocketmq/commit/b028277018"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/remoting/src/test/java/org/apache/rocketmq/remoting/protocol/CheckpointFileTest.java",
            "test_name": "testNormalWriteAndRead",
            "FQS": "org.apache.rocketmq.remoting.protocol.CheckpointFileTest.testNormalWriteAndRead()",
            "start_line": "79",
            "blame_result": "eb4e684642 common/src/test/java/org/apache/rocketmq/common/utils/CheckpointFileTest.java (lizhimins 2022-07-18 20:28:07 +0800 80)         List<EpochEntry> listFromFile = checkpoint.read();\neb4e684642 common/src/test/java/org/apache/rocketmq/common/utils/CheckpointFileTest.java (lizhimins 2022-07-18 20:28:07 +0800 81)         Assert.assertEquals(entryList, listFromFile);\neb4e684642 common/src/test/java/org/apache/rocketmq/common/utils/CheckpointFileTest.java (lizhimins 2022-07-18 20:28:07 +0800 82)         checkpoint.write(entryList);\neb4e684642 common/src/test/java/org/apache/rocketmq/common/utils/CheckpointFileTest.java (lizhimins 2022-07-18 20:28:07 +0800 83)         listFromFile = checkpoint.read();\neb4e684642 common/src/test/java/org/apache/rocketmq/common/utils/CheckpointFileTest.java (lizhimins 2022-07-18 20:28:07 +0800 84)         Assert.assertEquals(entryList, listFromFile);\n",
            "commit_hashes": {
                "eb4e684642": "    [ISSUE #4626] Add CRC32 verification when saving checkpoint file (#4627)"
            },
            "Commit&issueIDs": {
                "eb4e684642": [
                    "(#4627)"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/4627",
                "https://github.com/apache/rocketmq/commit/eb4e684642"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/remoting/src/test/java/org/apache/rocketmq/remoting/protocol/CheckpointFileTest.java",
            "test_name": "testAbNormalWriteAndRead",
            "FQS": "org.apache.rocketmq.remoting.protocol.CheckpointFileTest.testAbNormalWriteAndRead()",
            "start_line": "88",
            "blame_result": "eb4e684642 common/src/test/java/org/apache/rocketmq/common/utils/CheckpointFileTest.java (lizhimins 2022-07-18 20:28:07 +0800 89)         this.checkpoint.write(entryList);\neb4e684642 common/src/test/java/org/apache/rocketmq/common/utils/CheckpointFileTest.java (lizhimins 2022-07-18 20:28:07 +0800 90)         UtilAll.deleteFile(new File(FILE_PATH));\neb4e684642 common/src/test/java/org/apache/rocketmq/common/utils/CheckpointFileTest.java (lizhimins 2022-07-18 20:28:07 +0800 91)         List<EpochEntry> listFromFile = checkpoint.read();\neb4e684642 common/src/test/java/org/apache/rocketmq/common/utils/CheckpointFileTest.java (lizhimins 2022-07-18 20:28:07 +0800 92)         Assert.assertEquals(entryList, listFromFile);\neb4e684642 common/src/test/java/org/apache/rocketmq/common/utils/CheckpointFileTest.java (lizhimins 2022-07-18 20:28:07 +0800 93)         checkpoint.write(entryList);\n",
            "commit_hashes": {
                "eb4e684642": "    [ISSUE #4626] Add CRC32 verification when saving checkpoint file (#4627)"
            },
            "Commit&issueIDs": {
                "eb4e684642": [
                    "(#4627)"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/4627",
                "https://github.com/apache/rocketmq/commit/eb4e684642"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/store/src/test/java/org/apache/rocketmq/store/timer/TimerMetricsTest.java",
            "test_name": "testTimingDistribution",
            "FQS": "org.apache.rocketmq.store.timer.TimerMetricsTest.testTimingDistribution()",
            "start_line": "60",
            "blame_result": "ccead04519 (Juntao   2022-07-20 17:33:41 +0800 61)         String baseDir = StoreTestUtils.createBaseDir();\nccead04519 (Juntao   2022-07-20 17:33:41 +0800 62)         TimerMetrics first = new TimerMetrics(baseDir);\nb0d0deca0b (Nowinkey 2022-09-29 17:22:01 +0800 63)         List<Integer> timerDist = new ArrayList<Integer>() {{\nb0d0deca0b (Nowinkey 2022-09-29 17:22:01 +0800 64)                 add(5);\nb0d0deca0b (Nowinkey 2022-09-29 17:22:01 +0800 65)                 add(60);\n",
            "commit_hashes": {
                "ccead04519": "    [RIP-43] Support Timing Messages with Arbitrary Time Delay",
                "b0d0deca0b": "    [ISSUE #5221] Enable checkstyle for test code (rocketmq-store) (#5222)"
            },
            "Commit&issueIDs": {
                "b0d0deca0b": [
                    "(#5222)"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/5222",
                "https://github.com/apache/rocketmq/commit/b0d0deca0b"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenMinLengthBelowFormatMin",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenMinLengthBelowFormatMin()",
            "start_line": "545",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 546)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 547)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 548)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 549) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 550)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/core/MessageStoreTopicFilterTest.java",
            "test_name": "filterTopicTest",
            "FQS": "org.apache.rocketmq.tieredstore.core.MessageStoreTopicFilterTest.filterTopicTest()",
            "start_line": "27",
            "blame_result": "026a910b26 tieredstore/src/test/java/org/apache/rocketmq/tieredstore/core/MessageStoreTopicFilterTest.java             (lizhimins 2024-03-18 10:46:36 +0800 28)         MessageStoreFilter topicFilter = new MessageStoreTopicFilter(new MessageStoreConfig());\ne11e29419f tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/TieredStoreTopicBlackListFilterTest.java (lizhimins 2023-09-06 20:42:24 +0800 29)         Assert.assertTrue(topicFilter.filterTopic(\"\"));\ne11e29419f tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/TieredStoreTopicBlackListFilterTest.java (lizhimins 2023-09-06 20:42:24 +0800 30)         Assert.assertTrue(topicFilter.filterTopic(TopicValidator.SYSTEM_TOPIC_PREFIX + \"_Topic\"));\ne11e29419f tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/TieredStoreTopicBlackListFilterTest.java (lizhimins 2023-09-06 20:42:24 +0800 31) \ne11e29419f tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/TieredStoreTopicBlackListFilterTest.java (lizhimins 2023-09-06 20:42:24 +0800 32)         String topicName = \"WhiteTopic\";\n",
            "commit_hashes": {
                "026a910b26": "    [ISSUE #7878] Performance Improvement and Bug Fixes for the Tiered Storage Module (#7899)",
                "e11e29419f": "    [ISSUE #7308] Adding topic blacklist and filter in tiered storage module (#7310)"
            },
            "Commit&issueIDs": {
                "026a910b26": [
                    "7899"
                ],
                "e11e29419f": [
                    "7310"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/7899",
                "https://github.com/apache/rocketmq/commit/026a910b26",
                "https://github.com/apache/rocketmq/issues/7310",
                "https://github.com/apache/rocketmq/commit/e11e29419f"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenMaxLengthAboveFormatMax",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenMaxLengthAboveFormatMax()",
            "start_line": "578",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 579)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 580)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 581)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 582) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 583)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/FlatMessageFileTest.java",
            "test_name": "testEquals",
            "FQS": "org.apache.rocketmq.tieredstore.file.FlatMessageFileTest.testEquals()",
            "start_line": "122",
            "blame_result": "026a910b26 (lizhimins 2024-03-18 10:46:36 +0800 123)         String topic = \"EqualsTest\";\n026a910b26 (lizhimins 2024-03-18 10:46:36 +0800 124)         FlatMessageFile flatFile1 = new FlatMessageFile(flatFileFactory, topic, 0);\n026a910b26 (lizhimins 2024-03-18 10:46:36 +0800 125)         FlatMessageFile flatFile2 = new FlatMessageFile(flatFileFactory, topic, 0);\n026a910b26 (lizhimins 2024-03-18 10:46:36 +0800 126)         FlatMessageFile flatFile3 = new FlatMessageFile(flatFileFactory, topic, 1);\n026a910b26 (lizhimins 2024-03-18 10:46:36 +0800 127)         Assert.assertEquals(flatFile1, flatFile2);\n",
            "commit_hashes": {
                "026a910b26": "    [ISSUE #7878] Performance Improvement and Bug Fixes for the Tiered Storage Module (#7899)"
            },
            "Commit&issueIDs": {
                "026a910b26": [
                    "7899"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/7899",
                "https://github.com/apache/rocketmq/commit/026a910b26"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenMinLengthBelowPatternMin",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenMinLengthBelowPatternMin()",
            "start_line": "612",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 613)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 614)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 615)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 616) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 617)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/DefaultMetadataStoreTest.java",
            "test_name": "testReload",
            "FQS": "org.apache.rocketmq.tieredstore.metadata.DefaultMetadataStoreTest.testReload()",
            "start_line": "218",
            "blame_result": "026a910b26 tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/DefaultMetadataStoreTest.java (lizhimins 2024-03-18 10:46:36 +0800 219)         DefaultMetadataStore defaultMetadataStore = (DefaultMetadataStore) metadataStore;\n026a910b26 tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/DefaultMetadataStoreTest.java (lizhimins 2024-03-18 10:46:36 +0800 220)         defaultMetadataStore.addTopic(mq0.getTopic(), 1);\n026a910b26 tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/DefaultMetadataStoreTest.java (lizhimins 2024-03-18 10:46:36 +0800 221)         defaultMetadataStore.addTopic(mq1.getTopic(), 2);\n845f96f4f6 tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/MetadataStoreTest.java        (SSpirits  2023-02-03 11:48:27 +0800 222) \n026a910b26 tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/DefaultMetadataStoreTest.java (lizhimins 2024-03-18 10:46:36 +0800 223)         defaultMetadataStore.addQueue(mq0, 2);\n",
            "commit_hashes": {
                "026a910b26": "    [ISSUE #7878] Performance Improvement and Bug Fixes for the Tiered Storage Module (#7899)",
                "845f96f4f6": "    [ISSUE #5923] Add example tiered storage backend service provider (#5926)"
            },
            "Commit&issueIDs": {
                "026a910b26": [
                    "7899"
                ],
                "845f96f4f6": [
                    "5926"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/7899",
                "https://github.com/apache/rocketmq/commit/026a910b26",
                "https://github.com/apache/rocketmq/issues/5926",
                "https://github.com/apache/rocketmq/commit/845f96f4f6"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/audiofilters/EMAFilterTest.java",
            "test_name": "testAlphaBounds",
            "FQS": "com.thealgorithms.audiofilters.EMAFilterTest.testAlphaBounds()",
            "start_line": "28",
            "blame_result": "7b962a4a1 (Shreya 2024-11-01 14:08:27 +0530 29)         EMAFilter emaFilterMin = new EMAFilter(0.01);\n7b962a4a1 (Shreya 2024-11-01 14:08:27 +0530 30)         EMAFilter emaFilterMax = new EMAFilter(1.0);\n7b962a4a1 (Shreya 2024-11-01 14:08:27 +0530 31)         double[] audioSignal = {1.0, 1.0, 1.0, 1.0};\n7b962a4a1 (Shreya 2024-11-01 14:08:27 +0530 32) \n7b962a4a1 (Shreya 2024-11-01 14:08:27 +0530 33)         // Minimal smoothing (alpha close to 0)\n",
            "commit_hashes": {
                "7b962a4a1": "    Add Exponential Moving Average Filter (#6075)"
            },
            "Commit&issueIDs": {
                "7b962a4a1": [
                    "6075"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/6075",
                "https://github.com/TheAlgorithms/Java/commit/7b962a4a1"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/bitmanipulation/GrayCodeConversionTest.java",
            "test_name": "testBinaryGrayCycle",
            "FQS": "com.thealgorithms.bitmanipulation.GrayCodeConversionTest.testBinaryGrayCycle()",
            "start_line": "24",
            "blame_result": "c0ffbb0e4 (Hardik Pawar 2024-10-12 11:56:04 +0530 25)         int binary = 9; // 1001 in binary\nc0ffbb0e4 (Hardik Pawar 2024-10-12 11:56:04 +0530 26)         int gray = GrayCodeConversion.binaryToGray(binary);\nc0ffbb0e4 (Hardik Pawar 2024-10-12 11:56:04 +0530 27)         assertEquals(binary, GrayCodeConversion.grayToBinary(gray)); // Should return to original binary\nc0ffbb0e4 (Hardik Pawar 2024-10-12 11:56:04 +0530 28)     }\nc0ffbb0e4 (Hardik Pawar 2024-10-12 11:56:04 +0530 29) }\n",
            "commit_hashes": {
                "c0ffbb0e4": "    Add `GrayCodeConversion` algorithm (#5705)"
            },
            "Commit&issueIDs": {
                "c0ffbb0e4": [
                    "5705"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5705",
                "https://github.com/TheAlgorithms/Java/commit/c0ffbb0e4"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenPatternNotApplicable",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenPatternNotApplicable()",
            "start_line": "643",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 644)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 645)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 646)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 647) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 648)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/lambdazy/lzy/",
            "file_path": "lambdazy/lzy/util/util-s3/src/test/java/ru/yandex/qe/s3/transfer/ByteBufferPoolTest.java",
            "test_name": "static_check_borrow_blocked_if_all_borrowed",
            "FQS": "ru.yandex.qe.s3.transfer.ByteBufferPoolTest.static_check_borrow_blocked_if_all_borrowed()",
            "start_line": "59",
            "blame_result": "9da43da3f6 lzy-util/util-s3/src/test/java/ru/yandex/qe/s3/transfer/ByteBufferPoolTest.java (LenSunko01   2021-11-19 18:14:44 +0300 60)         final StaticByteBufferPool bufferPool = new StaticByteBufferPool(ByteBufferSizeType._8_MB, 2);\n9da43da3f6 lzy-util/util-s3/src/test/java/ru/yandex/qe/s3/transfer/ByteBufferPoolTest.java (LenSunko01   2021-11-19 18:14:44 +0300 61)         final ByteBuffer borrowed = bufferPool.borrowObject(100);\n4a12a66b43 util/util-s3/src/test/java/ru/yandex/qe/s3/transfer/ByteBufferPoolTest.java     (Igor Makunin 2022-10-27 15:54:47 +0300 62)         assertNotNull(\"borrowed first pool successfully\", borrowed);\n9da43da3f6 lzy-util/util-s3/src/test/java/ru/yandex/qe/s3/transfer/ByteBufferPoolTest.java (LenSunko01   2021-11-19 18:14:44 +0300 63)         final ByteBuffer borrowed2 = bufferPool.borrowObject(100);\n4a12a66b43 util/util-s3/src/test/java/ru/yandex/qe/s3/transfer/ByteBufferPoolTest.java     (Igor Makunin 2022-10-27 15:54:47 +0300 64)         assertNotNull(\"borrowed second pool successfully\", borrowed2);\n",
            "commit_hashes": {
                "9da43da3f6": "    introduce lzy-util; add S3ExecutionSnapshot",
                "4a12a66b43": "    extract api modules from model-old (#586)"
            },
            "Commit&issueIDs": {
                "4a12a66b43": [
                    "586"
                ]
            },
            "links": [
                "https://github.com/lambdazy/lzy/issues/586",
                "https://github.com/lambdazy/lzy/commit/4a12a66b43"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq/",
            "file_path": "apache/rocketmq/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/FileSegmentTest.java",
            "test_name": "consumeQueueTest",
            "FQS": "org.apache.rocketmq.tieredstore.provider.FileSegmentTest.consumeQueueTest()",
            "start_line": "226",
            "blame_result": "026a910b26 (lizhimins 2024-03-18 10:46:36 +0800 227)         MetadataStore metadataStore = new DefaultMetadataStore(storeConfig);\n026a910b26 (lizhimins 2024-03-18 10:46:36 +0800 228)         FileSegmentFactory factory = new FileSegmentFactory(metadataStore, storeConfig);\n026a910b26 (lizhimins 2024-03-18 10:46:36 +0800 229)         FileSegment fileSegment = factory.createConsumeQueueFileSegment(MessageStoreUtil.toFilePath(mq), baseOffset);\n026a910b26 (lizhimins 2024-03-18 10:46:36 +0800 230) \n026a910b26 (lizhimins 2024-03-18 10:46:36 +0800 231)         long storeTimestamp = System.currentTimeMillis();\n",
            "commit_hashes": {
                "026a910b26": "    [ISSUE #7878] Performance Improvement and Bug Fixes for the Tiered Storage Module (#7899)"
            },
            "Commit&issueIDs": {
                "026a910b26": [
                    "7899"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq/issues/7899",
                "https://github.com/apache/rocketmq/commit/026a910b26"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/AESEncryptionTest.java",
            "test_name": "testDecryptText",
            "FQS": "com.thealgorithms.ciphers.AESEncryptionTest.testDecryptText()",
            "start_line": "30",
            "blame_result": "99d7f80a6 (Hardik Pawar 2024-10-07 20:30:57 +0530 31)         String plainText = \"Hello World\";\n99d7f80a6 (Hardik Pawar 2024-10-07 20:30:57 +0530 32)         SecretKey secKey = AESEncryption.getSecretEncryptionKey();\n99d7f80a6 (Hardik Pawar 2024-10-07 20:30:57 +0530 33)         byte[] cipherText = AESEncryption.encryptText(plainText, secKey);\n99d7f80a6 (Hardik Pawar 2024-10-07 20:30:57 +0530 34) \n99d7f80a6 (Hardik Pawar 2024-10-07 20:30:57 +0530 35)         // Decrypt the ciphertext\n",
            "commit_hashes": {
                "99d7f80a6": "    Add Junit tests for `AESEncryption.java` (#5597)"
            },
            "Commit&issueIDs": {
                "99d7f80a6": [
                    "5597"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5597",
                "https://github.com/TheAlgorithms/Java/commit/99d7f80a6"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenPatternInvalid",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenPatternInvalid()",
            "start_line": "674",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 675)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 676)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 677)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 678) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 679)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/AESEncryptionTest.java",
            "test_name": "testEncryptDecrypt",
            "FQS": "com.thealgorithms.ciphers.AESEncryptionTest.testEncryptDecrypt()",
            "start_line": "43",
            "blame_result": "99d7f80a6 (Hardik Pawar 2024-10-07 20:30:57 +0530 44)         String plainText = \"Hello AES!\";\n99d7f80a6 (Hardik Pawar 2024-10-07 20:30:57 +0530 45)         SecretKey secKey = AESEncryption.getSecretEncryptionKey();\n99d7f80a6 (Hardik Pawar 2024-10-07 20:30:57 +0530 46) \n99d7f80a6 (Hardik Pawar 2024-10-07 20:30:57 +0530 47)         // Encrypt the plaintext\n99d7f80a6 (Hardik Pawar 2024-10-07 20:30:57 +0530 48)         byte[] cipherText = AESEncryption.encryptText(plainText, secKey);\n",
            "commit_hashes": {
                "99d7f80a6": "    Add Junit tests for `AESEncryption.java` (#5597)"
            },
            "Commit&issueIDs": {
                "99d7f80a6": [
                    "5597"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5597",
                "https://github.com/TheAlgorithms/Java/commit/99d7f80a6"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/ColumnarTranspositionCipherTest.java",
            "test_name": "testDecryption",
            "FQS": "com.thealgorithms.ciphers.ColumnarTranspositionCipherTest.testDecryption()",
            "start_line": "31",
            "blame_result": "6e6028e3d (SAIVARDHAN15 2024-10-10 01:11:25 +0530 32)         String encryptedText = ColumnarTranspositionCipher.encrypt(plaintext, keyword);\n6e6028e3d (SAIVARDHAN15 2024-10-10 01:11:25 +0530 33)         String decryptedText = ColumnarTranspositionCipher.decrypt();\n25dc55e4a (Hardik Pawar 2024-10-07 20:41:56 +0530 34) \n25dc55e4a (Hardik Pawar 2024-10-07 20:41:56 +0530 35)         assertEquals(plaintext.replaceAll(\" \", \"\"), decryptedText.replaceAll(\" \", \"\"), \"The decrypted text should match the original plaintext, ignoring spaces.\");\n6e6028e3d (SAIVARDHAN15 2024-10-10 01:11:25 +0530 36)         assertEquals(encryptedText, ColumnarTranspositionCipher.encrypt(plaintext, keyword), \"The encrypted text should be the same when encrypted again.\");\n",
            "commit_hashes": {
                "6e6028e3d": "    Fix columnarTranspositionCipher and typos in Test (#5649)",
                "25dc55e4a": "    Add Junit tests for `ColumnarTranspositionCipher.java` (#5599)"
            },
            "Commit&issueIDs": {
                "6e6028e3d": [
                    "5649"
                ],
                "25dc55e4a": [
                    "5599"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5649",
                "https://github.com/TheAlgorithms/Java/commit/6e6028e3d",
                "https://github.com/TheAlgorithms/Java/issues/5599",
                "https://github.com/TheAlgorithms/Java/commit/25dc55e4a"
            ]
        },
        {
            "poj_link": "https://github.com/Cornutum/tcases/",
            "file_path": "Cornutum/tcases/tcases-lib/src/test/java/org/cornutum/tcases/resolve/NormalizeSchemaTest.java",
            "test_name": "whenIntegerEnum",
            "FQS": "org.cornutum.tcases.resolve.NormalizeSchemaTest.whenIntegerEnum()",
            "start_line": "758",
            "blame_result": "b255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 759)     {\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 760)     // Given...\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 761)     Schemas schemas = new Schemas( withConditionRecorder());\nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 762) \nb255f2568 (Kerry Kimbrough 2022-12-22 17:48:29 -0600 763)     Schema schema =\n",
            "commit_hashes": {
                "b255f2568": "    Schemas to define values (#267)"
            },
            "Commit&issueIDs": {
                "b255f2568": [
                    "267"
                ]
            },
            "links": [
                "https://github.com/Cornutum/tcases/issues/267",
                "https://github.com/Cornutum/tcases/commit/b255f2568"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/ColumnarTranspositionCipherTest.java",
            "test_name": "testLongPlainText",
            "FQS": "com.thealgorithms.ciphers.ColumnarTranspositionCipherTest.testLongPlainText()",
            "start_line": "40",
            "blame_result": "25dc55e4a (Hardik Pawar 2024-10-07 20:41:56 +0530 41)         String longText = \"This is a significantly longer piece of text to test the encryption and decryption capabilities of the Columnar Transposition Cipher. It should handle long strings gracefully.\";\n6e6028e3d (SAIVARDHAN15 2024-10-10 01:11:25 +0530 42)         String encryptedText = ColumnarTranspositionCipher.encrypt(longText, keyword);\n6e6028e3d (SAIVARDHAN15 2024-10-10 01:11:25 +0530 43)         String decryptedText = ColumnarTranspositionCipher.decrypt();\n25dc55e4a (Hardik Pawar 2024-10-07 20:41:56 +0530 44)         assertEquals(longText.replaceAll(\" \", \"\"), decryptedText.replaceAll(\" \", \"\"), \"The decrypted text should match the original long plaintext, ignoring spaces.\");\n6e6028e3d (SAIVARDHAN15 2024-10-10 01:11:25 +0530 45)         assertEquals(encryptedText, ColumnarTranspositionCipher.encrypt(longText, keyword), \"The encrypted text should be the same when encrypted again.\");\n",
            "commit_hashes": {
                "25dc55e4a": "    Add Junit tests for `ColumnarTranspositionCipher.java` (#5599)",
                "6e6028e3d": "    Fix columnarTranspositionCipher and typos in Test (#5649)"
            },
            "Commit&issueIDs": {
                "25dc55e4a": [
                    "5599"
                ],
                "6e6028e3d": [
                    "5649"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5599",
                "https://github.com/TheAlgorithms/Java/commit/25dc55e4a",
                "https://github.com/TheAlgorithms/Java/issues/5649",
                "https://github.com/TheAlgorithms/Java/commit/6e6028e3d"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/ECCTest.java",
            "test_name": "testCipherTextRandomness",
            "FQS": "com.thealgorithms.ciphers.ECCTest.testCipherTextRandomness()",
            "start_line": "87",
            "blame_result": "2040df88d (xuyang471 2024-10-11 13:47:36 +0800 88)         String message = \"Elliptic Curve Cryptography\";\n2040df88d (xuyang471 2024-10-11 13:47:36 +0800 89) \n2040df88d (xuyang471 2024-10-11 13:47:36 +0800 90)         ECC.ECPoint[] cipherText1 = ecc.encrypt(message);\n2040df88d (xuyang471 2024-10-11 13:47:36 +0800 91)         ECC.ECPoint[] cipherText2 = ecc.encrypt(message);\n2040df88d (xuyang471 2024-10-11 13:47:36 +0800 92) \n",
            "commit_hashes": {
                "2040df88d": "    Add Elliptic Curve Cryptography (#5700)"
            },
            "Commit&issueIDs": {
                "2040df88d": [
                    "5700"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5700",
                "https://github.com/TheAlgorithms/Java/commit/2040df88d"
            ]
        },
        {
            "poj_link": "https://github.com/ProgrammerAnthony/RocketMQC/",
            "file_path": "ProgrammerAnthony/RocketMQC/common/src/test/java/org/apache/rocketmq/common/RegisterBrokerBodyTest.java",
            "test_name": "test_encode_decode",
            "FQS": "org.apache.rocketmq.common.RegisterBrokerBodyTest.test_encode_decode()",
            "start_line": "30",
            "blame_result": "^66ca327a rocketmq-namesrv/src/main/java/com/alibaba/rocketmq/namesrv/processor/DefaultRequestProcessor.java (yukon    2016-12-19 17:34:19 +0800 31)         RegisterBrokerBody registerBrokerBody = new RegisterBrokerBody();\n^66ca327a rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/topic/TopicConfigManager.java            (yukon    2016-12-19 17:34:19 +0800 32)         TopicConfigSerializeWrapper topicConfigSerializeWrapper = new TopicConfigSerializeWrapper();\ne74422252 common/src/test/java/org/apache/rocketmq/common/RegisterBrokerBodyTest.java                        (fuyou001 2018-03-07 14:38:54 +0800 33)         registerBrokerBody.setTopicConfigSerializeWrapper(topicConfigSerializeWrapper);\ne74422252 common/src/test/java/org/apache/rocketmq/common/RegisterBrokerBodyTest.java                        (fuyou001 2018-03-07 14:38:54 +0800 34)         \ne74422252 common/src/test/java/org/apache/rocketmq/common/RegisterBrokerBodyTest.java                        (fuyou001 2018-03-07 14:38:54 +0800 35)         ConcurrentMap<String, TopicConfig> topicConfigTable = new ConcurrentHashMap<String, TopicConfig>();\n",
            "commit_hashes": {
                "66ca327a": "    Finish code dump. Reviewed by @vongosling @stevenschew @vintagewang @lollipopjin",
                "e74422252": "    [ROCKETMQ-319] Improve broker register performance and reduce memory usage   (#205)"
            },
            "Commit&issueIDs": {
                "e74422252": [
                    "(#205)"
                ]
            },
            "links": [
                "https://github.com/ProgrammerAnthony/RocketMQC/issues/205",
                "https://github.com/ProgrammerAnthony/RocketMQC/commit/e74422252"
            ]
        },
        {
            "poj_link": "https://github.com/ProgrammerAnthony/RocketMQC/",
            "file_path": "ProgrammerAnthony/RocketMQC/logging/src/test/java/org/apache/rocketmq/logging/inner/LevelTest.java",
            "test_name": "levelTest",
            "FQS": "org.apache.rocketmq.logging.inner.LevelTest.levelTest()",
            "start_line": "26",
            "blame_result": "305f5717c (lindzh 2018-03-02 16:07:41 +0800 27)         Level info = Level.toLevel(\"info\");\n305f5717c (lindzh 2018-03-02 16:07:41 +0800 28)         Level error = Level.toLevel(3);\n305f5717c (lindzh 2018-03-02 16:07:41 +0800 29)         Assert.assertTrue(error != null && info != null);\n305f5717c (lindzh 2018-03-02 16:07:41 +0800 30)     }\n305f5717c (lindzh 2018-03-02 16:07:41 +0800 31) \n",
            "commit_hashes": {
                "305f5717c": "    [ROCKETMQ-367] Add logging component. (#224)"
            },
            "Commit&issueIDs": {
                "305f5717c": [
                    "(#224)"
                ]
            },
            "links": [
                "https://github.com/ProgrammerAnthony/RocketMQC/issues/224",
                "https://github.com/ProgrammerAnthony/RocketMQC/commit/305f5717c"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/ECCTest.java",
            "test_name": "testECCEncryptionAndDecryption",
            "FQS": "com.thealgorithms.ciphers.ECCTest.testECCEncryptionAndDecryption()",
            "start_line": "100",
            "blame_result": "2040df88d (xuyang471 2024-10-11 13:47:36 +0800 101)         String textToEncrypt = \"Elliptic Curve Cryptography\";\n2040df88d (xuyang471 2024-10-11 13:47:36 +0800 102)         ECC.ECPoint[] cipherText = ecc.encrypt(textToEncrypt);\n2040df88d (xuyang471 2024-10-11 13:47:36 +0800 103)         String decryptedText = ecc.decrypt(cipherText);\n2040df88d (xuyang471 2024-10-11 13:47:36 +0800 104)         assertEquals(textToEncrypt, decryptedText); // Verify that the decrypted text matches the original text\n2040df88d (xuyang471 2024-10-11 13:47:36 +0800 105)     }\n",
            "commit_hashes": {
                "2040df88d": "    Add Elliptic Curve Cryptography (#5700)"
            },
            "Commit&issueIDs": {
                "2040df88d": [
                    "5700"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5700",
                "https://github.com/TheAlgorithms/Java/commit/2040df88d"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/PlayfairTest.java",
            "test_name": "testEncryptionAndDecryption",
            "FQS": "com.thealgorithms.ciphers.PlayfairTest.testEncryptionAndDecryption()",
            "start_line": "28",
            "blame_result": "9bef5a16 (Govind Gupta 2024-01-03 18:44:38 +0530 29)         PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");\n9bef5a16 (Govind Gupta 2024-01-03 18:44:38 +0530 30) \n9bef5a16 (Govind Gupta 2024-01-03 18:44:38 +0530 31)         String plaintext = \"PLAYFAIR\";\n9bef5a16 (Govind Gupta 2024-01-03 18:44:38 +0530 32)         String encryptedText = playfairCipher.encrypt(plaintext);\n9bef5a16 (Govind Gupta 2024-01-03 18:44:38 +0530 33)         String decryptedText = playfairCipher.decrypt(encryptedText);\n",
            "commit_hashes": {
                "9bef5a16": "    Add Playfair Cipher (#4988)"
            },
            "Commit&issueIDs": {
                "9bef5a16": [
                    "(#4988)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4988",
                "https://github.com/TheAlgorithms/Java/commit/9bef5a16"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/PolybiusTest.java",
            "test_name": "testIsTextTheSameAfterEncryptionAndDecryption",
            "FQS": "com.thealgorithms.ciphers.PolybiusTest.testIsTextTheSameAfterEncryptionAndDecryption()",
            "start_line": "34",
            "blame_result": "199c85d1 (Hikmet \u00c7ak\u0131r 2022-07-11 18:15:14 +0300 35)         // Given\n199c85d1 (Hikmet \u00c7ak\u0131r 2022-07-11 18:15:14 +0300 36)         String plaintext = \"HELLOWORLD\";\n199c85d1 (Hikmet \u00c7ak\u0131r 2022-07-11 18:15:14 +0300 37) \n199c85d1 (Hikmet \u00c7ak\u0131r 2022-07-11 18:15:14 +0300 38)         // When\n199c85d1 (Hikmet \u00c7ak\u0131r 2022-07-11 18:15:14 +0300 39)         String encryptedText = Polybius.encrypt(plaintext);\n",
            "commit_hashes": {
                "199c85d1": "    Add Polybius Cipher (#3185)"
            },
            "Commit&issueIDs": {
                "199c85d1": [
                    "(#3185)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/3185",
                "https://github.com/TheAlgorithms/Java/commit/199c85d1"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/RSATest.java",
            "test_name": "testEncryptDecryptString",
            "FQS": "com.thealgorithms.ciphers.RSATest.testEncryptDecryptString()",
            "start_line": "14",
            "blame_result": "4d85c61c3 (Hardik Pawar 2024-10-26 20:20:32 +0530 15)         String originalMessage = \"Such secure\";\n4d85c61c3 (Hardik Pawar 2024-10-26 20:20:32 +0530 16)         String encryptedMessage = rsa.encrypt(originalMessage);\n4d85c61c3 (Hardik Pawar 2024-10-26 20:20:32 +0530 17)         String decryptedMessage = rsa.decrypt(encryptedMessage);\n4d85c61c3 (Hardik Pawar 2024-10-26 20:20:32 +0530 18)         assertEquals(originalMessage, decryptedMessage);\n4d85c61c3 (Hardik Pawar 2024-10-26 20:20:32 +0530 19)     }\n",
            "commit_hashes": {
                "4d85c61c3": "    Enhance docs, add more tests in `RSA` (#5898)"
            },
            "Commit&issueIDs": {
                "4d85c61c3": [
                    "5898"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5898",
                "https://github.com/TheAlgorithms/Java/commit/4d85c61c3"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/RSATest.java",
            "test_name": "testEncryptDecryptBigInteger",
            "FQS": "com.thealgorithms.ciphers.RSATest.testEncryptDecryptBigInteger()",
            "start_line": "22",
            "blame_result": "4d85c61c3 (Hardik Pawar 2024-10-26 20:20:32 +0530 23)         BigInteger originalMessage = new BigInteger(\"12345678901234567890\");\n4d85c61c3 (Hardik Pawar 2024-10-26 20:20:32 +0530 24)         BigInteger encryptedMessage = rsa.encrypt(originalMessage);\n4d85c61c3 (Hardik Pawar 2024-10-26 20:20:32 +0530 25)         BigInteger decryptedMessage = rsa.decrypt(encryptedMessage);\n4d85c61c3 (Hardik Pawar 2024-10-26 20:20:32 +0530 26)         assertEquals(originalMessage, decryptedMessage);\n4d85c61c3 (Hardik Pawar 2024-10-26 20:20:32 +0530 27)     }\n",
            "commit_hashes": {
                "4d85c61c3": "    Enhance docs, add more tests in `RSA` (#5898)"
            },
            "Commit&issueIDs": {
                "4d85c61c3": [
                    "5898"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5898",
                "https://github.com/TheAlgorithms/Java/commit/4d85c61c3"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/RSATest.java",
            "test_name": "testDifferentKeySizes",
            "FQS": "com.thealgorithms.ciphers.RSATest.testDifferentKeySizes()",
            "start_line": "37",
            "blame_result": "4d85c61c3 (Hardik Pawar      2024-10-26 20:20:32 +0530 38)         // Testing with 512-bit RSA keys\n4d85c61c3 (Hardik Pawar      2024-10-26 20:20:32 +0530 39)         RSA smallRSA = new RSA(512);\n4d85c61c3 (Hardik Pawar      2024-10-26 20:20:32 +0530 40)         String originalMessage = \"Test with smaller key\";\n8c6ed9c24 (Alexandre Velloso 2022-10-26 02:10:27 +0100 41) \n4d85c61c3 (Hardik Pawar      2024-10-26 20:20:32 +0530 42)         String encryptedMessage = smallRSA.encrypt(originalMessage);\n",
            "commit_hashes": {
                "4d85c61c3": "    Enhance docs, add more tests in `RSA` (#5898)",
                "8c6ed9c24": "    Add unit test for RSA cipher (#3664)"
            },
            "Commit&issueIDs": {
                "4d85c61c3": [
                    "5898"
                ],
                "8c6ed9c24": [
                    "3664"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5898",
                "https://github.com/TheAlgorithms/Java/commit/4d85c61c3",
                "https://github.com/TheAlgorithms/Java/issues/3664",
                "https://github.com/TheAlgorithms/Java/commit/8c6ed9c24"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/RSATest.java",
            "test_name": "testSpecialCharacters",
            "FQS": "com.thealgorithms.ciphers.RSATest.testSpecialCharacters()",
            "start_line": "58",
            "blame_result": "4d85c61c3 (Hardik Pawar      2024-10-26 20:20:32 +0530 59)         String originalMessage = \"Hello, RSA! @2024#\";\n4d85c61c3 (Hardik Pawar      2024-10-26 20:20:32 +0530 60)         String encryptedMessage = rsa.encrypt(originalMessage);\n4d85c61c3 (Hardik Pawar      2024-10-26 20:20:32 +0530 61)         String decryptedMessage = rsa.decrypt(encryptedMessage);\n4d85c61c3 (Hardik Pawar      2024-10-26 20:20:32 +0530 62)         assertEquals(originalMessage, decryptedMessage);\n8c6ed9c24 (Alexandre Velloso 2022-10-26 02:10:27 +0100 63)     }\n",
            "commit_hashes": {
                "4d85c61c3": "    Enhance docs, add more tests in `RSA` (#5898)",
                "8c6ed9c24": "    Add unit test for RSA cipher (#3664)"
            },
            "Commit&issueIDs": {
                "4d85c61c3": [
                    "5898"
                ],
                "8c6ed9c24": [
                    "3664"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5898",
                "https://github.com/TheAlgorithms/Java/commit/4d85c61c3",
                "https://github.com/TheAlgorithms/Java/issues/3664",
                "https://github.com/TheAlgorithms/Java/commit/8c6ed9c24"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/VigenereTest.java",
            "test_name": "testWithNumbersInMessage",
            "FQS": "com.thealgorithms.ciphers.VigenereTest.testWithNumbersInMessage()",
            "start_line": "46",
            "blame_result": "8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 47)         String text = \"Vigenere123!\";\n8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 48)         String key = \"cipher\";\n8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 49) \n8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 50)         String encryptedText = vigenere.encrypt(text, key);\n7ef75980d (Alexandre Velloso 2022-10-26 01:57:51 +0100 51)         String decryptedText = vigenere.decrypt(encryptedText, key);\n",
            "commit_hashes": {
                "8b604858f": "    Enhance docs, add more tests in `Vigenere` (#5899)",
                "7ef75980d": "    Add unit tests for Vigenere cipher (#3666)"
            },
            "Commit&issueIDs": {
                "8b604858f": [
                    "5899"
                ],
                "7ef75980d": [
                    "3666"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5899",
                "https://github.com/TheAlgorithms/Java/commit/8b604858f",
                "https://github.com/TheAlgorithms/Java/issues/3666",
                "https://github.com/TheAlgorithms/Java/commit/7ef75980d"
            ]
        },
        {
            "poj_link": "https://github.com/vipshop/pallas/",
            "file_path": "vipshop/pallas/pallas-core/src/test/java/com/vip/pallas/utils/DateUtilTest.java",
            "test_name": "testAll",
            "FQS": "com.vip.pallas.utils.DateUtilTest.testAll()",
            "start_line": "34",
            "blame_result": "d552d76e (chembohuang 2019-01-18 18:15:17 +0800 35) \t\t  String ddd = \"2012-07-05 04:50:00\";\nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 36) \t\t  Date d  = DateUtil.getDateFromString(ddd, \"yyyy-MM-dd HH:mm:ss\");\nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 37) \t\t  String format = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 38) \t\t  assertEquals(DateUtil.getStringFromDate(d, format), \"2012-07-05T04:50:00.000Z\");\nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 39) \t\t\n",
            "commit_hashes": {
                "d552d76e": "    #1 init the project"
            },
            "Commit&issueIDs": {
                "d552d76e": [
                    "#1"
                ]
            },
            "links": [
                "https://github.com/vipshop/pallas/issues/1",
                "https://github.com/vipshop/pallas/commit/d552d76e"
            ]
        },
        {
            "poj_link": "https://github.com/vipshop/pallas/",
            "file_path": "vipshop/pallas/pallas-core/src/test/java/com/vip/pallas/utils/DateUtilTest.java",
            "test_name": "testIsSameDayOfWeek",
            "FQS": "com.vip.pallas.utils.DateUtilTest.testIsSameDayOfWeek()",
            "start_line": "128",
            "blame_result": "d552d76e (chembohuang 2019-01-18 18:15:17 +0800 129) \t\tDate date1 = DateUtil.getDateFromString(\"2015-07-12\");\nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 130) \t\tDate date2 = DateUtil.getDateFromString(\"2015-07-19\");\nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 131) \t\tassertTrue(DateUtil.isSameDayOfWeek(date1, date2));\nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 132) \nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 133) \t}\n",
            "commit_hashes": {
                "d552d76e": "    #1 init the project"
            },
            "Commit&issueIDs": {
                "d552d76e": [
                    "#1"
                ]
            },
            "links": [
                "https://github.com/vipshop/pallas/issues/1",
                "https://github.com/vipshop/pallas/commit/d552d76e"
            ]
        },
        {
            "poj_link": "https://github.com/vipshop/pallas/",
            "file_path": "vipshop/pallas/pallas-core/src/test/java/com/vip/pallas/utils/DateUtilTest.java",
            "test_name": "testIsSameDayOfMonth",
            "FQS": "com.vip.pallas.utils.DateUtilTest.testIsSameDayOfMonth()",
            "start_line": "136",
            "blame_result": "d552d76e (chembohuang 2019-01-18 18:15:17 +0800 137) \t\tDate date1 = DateUtil.getDateFromString(\"2019-09-12\");\nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 138) \t\tDate date2 = DateUtil.getDateFromString(\"2015-07-12\");\nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 139) \t\tassertTrue(DateUtil.isSameDayOfMonth(date1, date2));\nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 140) \t}\nd552d76e (chembohuang 2019-01-18 18:15:17 +0800 141) \n",
            "commit_hashes": {
                "d552d76e": "    #1 init the project"
            },
            "Commit&issueIDs": {
                "d552d76e": [
                    "#1"
                ]
            },
            "links": [
                "https://github.com/vipshop/pallas/issues/1",
                "https://github.com/vipshop/pallas/commit/d552d76e"
            ]
        },
        {
            "poj_link": "https://github.com/vipshop/pallas/",
            "file_path": "vipshop/pallas/pallas-search/src/test/java/com/vip/pallas/search/throttling/ThrottlingPolicyTest.java",
            "test_name": "testReplacePolicy",
            "FQS": "com.vip.pallas.search.throttling.ThrottlingPolicyTest.testReplacePolicy()",
            "start_line": "63",
            "blame_result": "189c4f53 (ivy01.li    2019-06-21 17:48:02 +0800 64) \t\tTemplateWithThrottling templateWithThrottling = new TemplateWithThrottling();\n189c4f53 (ivy01.li    2019-06-21 17:48:02 +0800 65) \t\tString indexName = \"test_index\";\n189c4f53 (ivy01.li    2019-06-21 17:48:02 +0800 66) \t\tString template = \"test_template\";\n72b751d0 (nathan.chan 2019-10-25 23:11:12 +0800 67) \t\tString clusterName = \"test_cluster\";\n189c4f53 (ivy01.li    2019-06-21 17:48:02 +0800 68) \t\ttemplateWithThrottling.setIndexName(indexName);\n",
            "commit_hashes": {
                "189c4f53": "    #860 pallas-search: add throttling filter; pallas-console: add api to read/update throttling config; add some ut/it cases",
                "72b751d0": "     #126 fix bug [vip:platform/pallas#981]"
            },
            "Commit&issueIDs": {
                "189c4f53": [
                    "#860"
                ],
                "72b751d0": [
                    "#126"
                ]
            },
            "links": [
                "https://github.com/vipshop/pallas/issues/860",
                "https://github.com/vipshop/pallas/commit/189c4f53",
                "https://github.com/vipshop/pallas/issues/126",
                "https://github.com/vipshop/pallas/commit/72b751d0"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/VigenereTest.java",
            "test_name": "testLongerKeyThanMessage",
            "FQS": "com.thealgorithms.ciphers.VigenereTest.testLongerKeyThanMessage()",
            "start_line": "58",
            "blame_result": "8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 59)         String text = \"Short\";\n8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 60)         String key = \"VeryLongSecretKey\";\n8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 61) \n8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 62)         String encryptedText = vigenere.encrypt(text, key);\n7ef75980d (Alexandre Velloso 2022-10-26 01:57:51 +0100 63)         String decryptedText = vigenere.decrypt(encryptedText, key);\n",
            "commit_hashes": {
                "8b604858f": "    Enhance docs, add more tests in `Vigenere` (#5899)",
                "7ef75980d": "    Add unit tests for Vigenere cipher (#3666)"
            },
            "Commit&issueIDs": {
                "8b604858f": [
                    "5899"
                ],
                "7ef75980d": [
                    "3666"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5899",
                "https://github.com/TheAlgorithms/Java/commit/8b604858f",
                "https://github.com/TheAlgorithms/Java/issues/3666",
                "https://github.com/TheAlgorithms/Java/commit/7ef75980d"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/VigenereTest.java",
            "test_name": "testUppercaseMessageAndKey",
            "FQS": "com.thealgorithms.ciphers.VigenereTest.testUppercaseMessageAndKey()",
            "start_line": "70",
            "blame_result": "8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 71)         String text = \"HELLO\";\n8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 72)         String key = \"SECRET\";\n8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 73) \n8b604858f (Hardik Pawar      2024-10-27 00:20:31 +0530 74)         String encryptedText = vigenere.encrypt(text, key);\n7ef75980d (Alexandre Velloso 2022-10-26 01:57:51 +0100 75)         String decryptedText = vigenere.decrypt(encryptedText, key);\n",
            "commit_hashes": {
                "8b604858f": "    Enhance docs, add more tests in `Vigenere` (#5899)",
                "7ef75980d": "    Add unit tests for Vigenere cipher (#3666)"
            },
            "Commit&issueIDs": {
                "8b604858f": [
                    "5899"
                ],
                "7ef75980d": [
                    "3666"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5899",
                "https://github.com/TheAlgorithms/Java/commit/8b604858f",
                "https://github.com/TheAlgorithms/Java/issues/3666",
                "https://github.com/TheAlgorithms/Java/commit/7ef75980d"
            ]
        },
        {
            "poj_link": "https://github.com/jasminb/jsonapi-converter/",
            "file_path": "jasminb/jsonapi-converter/src/test/java/com/github/jasminb/jsonapi/ResourceConverterTest.java",
            "test_name": "testWriteWithKebabCaseRelationships",
            "FQS": "com.github.jasminb.jsonapi.ResourceConverterTest.testWriteWithKebabCaseRelationships()",
            "start_line": "669",
            "blame_result": "6d42693c (Shyamal Prasad 2017-06-22 16:42:08 -0700 670) \t\tfinal ObjectMapper kebabMapper = new ObjectMapper();\n6d42693c (Shyamal Prasad 2017-06-22 16:42:08 -0700 671) \t\tkebabMapper.setPropertyNamingStrategy(PropertyNamingStrategy.KEBAB_CASE);\n6d42693c (Shyamal Prasad 2017-06-22 16:42:08 -0700 672) \t\tResourceConverter kebabConverter = new ResourceConverter(kebabMapper, \"https://api.example.com\", Status.class, User.class, Author.class,\nd074a91b (Jasmin Begic   2016-11-30 23:11:47 +0100 673) \t\t\t\tArticle.class, Comment.class, Engineer.class, EngineeringField.class, City.class,\n6d42693c (Shyamal Prasad 2017-06-22 16:42:08 -0700 674) \t\t\t\tIntegerIdResource.class, LongIdResource.class,\n",
            "commit_hashes": {
                "6d42693c": "    Fixes 130: KEBAB_CASE property naming strategy breaks relationship attribute removal (#128)",
                "d074a91b": "    Implemented support for links autogeneration on resources/relationships"
            },
            "Commit&issueIDs": {
                "6d42693c": [
                    "(#128)"
                ]
            },
            "links": [
                "https://github.com/jasminb/jsonapi-converter/issues/128",
                "https://github.com/jasminb/jsonapi-converter/commit/6d42693c"
            ]
        },
        {
            "poj_link": "https://github.com/jasminb/jsonapi-converter/",
            "file_path": "jasminb/jsonapi-converter/src/test/java/com/github/jasminb/jsonapi/ResourceConverterTest.java",
            "test_name": "testWriteDocumentCollection",
            "FQS": "com.github.jasminb.jsonapi.ResourceConverterTest.testWriteDocumentCollection()",
            "start_line": "761",
            "blame_result": "dccc25d5 (Jasmin Begic 2016-07-27 15:47:15 +0200 762) \t\tInputStream usersRequest = IOUtils.getResource(\"users.json\");\nd8ebab6a (Craig Petty  2016-04-01 22:13:37 -0700 763) \nca4257a9 (Jasmin Begic 2016-10-21 10:21:23 +0200 764) \t\tconverter.enableSerializationOption(SerializationFeature.INCLUDE_LINKS);\nca4257a9 (Jasmin Begic 2016-10-21 10:21:23 +0200 765) \t\tconverter.enableSerializationOption(SerializationFeature.INCLUDE_META);\nca4257a9 (Jasmin Begic 2016-10-21 10:21:23 +0200 766) \n",
            "commit_hashes": {
                "dccc25d5": "    Retrofit type improvements, support for consuming streams, error handling improvements (#57)",
                "d8ebab6a": "    Support for writeObjectCollection",
                "ca4257a9": "    Added method for serializing document collection"
            },
            "Commit&issueIDs": {
                "dccc25d5": [
                    "(#57)"
                ]
            },
            "links": [
                "https://github.com/jasminb/jsonapi-converter/issues/57",
                "https://github.com/jasminb/jsonapi-converter/commit/dccc25d5"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/XORCipherTest.java",
            "test_name": "testShortKey",
            "FQS": "com.thealgorithms.ciphers.XORCipherTest.testShortKey()",
            "start_line": "43",
            "blame_result": "4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 44)         String plaintext = \"Short message\";\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 45)         String key = \"k\";\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 46) \n41f767ef9 (Luiz Carlos Jr 2024-10-04 13:10:18 -0300 47)         String cipherText = XORCipher.encrypt(plaintext, key);\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 48)         String decryptedText = XORCipher.decrypt(cipherText, key);\n",
            "commit_hashes": {
                "4e4600210": "    Enhance docs, add more tests in `XORCipher` (#5900)",
                "41f767ef9": "    Add XOR Cipher (#5490)"
            },
            "Commit&issueIDs": {
                "4e4600210": [
                    "5900"
                ],
                "41f767ef9": [
                    "5490"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5900",
                "https://github.com/TheAlgorithms/Java/commit/4e4600210",
                "https://github.com/TheAlgorithms/Java/issues/5490",
                "https://github.com/TheAlgorithms/Java/commit/41f767ef9"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/XORCipherTest.java",
            "test_name": "testNonASCIICharacters",
            "FQS": "com.thealgorithms.ciphers.XORCipherTest.testNonASCIICharacters()",
            "start_line": "54",
            "blame_result": "4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 55)         String plaintext = \"\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\"; // \"Hello World\" in Japanese (Konichiwa Sekai)\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 56)         String key = \"key\";\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 57) \n41f767ef9 (Luiz Carlos Jr 2024-10-04 13:10:18 -0300 58)         String cipherText = XORCipher.encrypt(plaintext, key);\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 59)         String decryptedText = XORCipher.decrypt(cipherText, key);\n",
            "commit_hashes": {
                "4e4600210": "    Enhance docs, add more tests in `XORCipher` (#5900)",
                "41f767ef9": "    Add XOR Cipher (#5490)"
            },
            "Commit&issueIDs": {
                "4e4600210": [
                    "5900"
                ],
                "41f767ef9": [
                    "5490"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5900",
                "https://github.com/TheAlgorithms/Java/commit/4e4600210",
                "https://github.com/TheAlgorithms/Java/issues/5490",
                "https://github.com/TheAlgorithms/Java/commit/41f767ef9"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/XORCipherTest.java",
            "test_name": "testSameKeyAndPlaintext",
            "FQS": "com.thealgorithms.ciphers.XORCipherTest.testSameKeyAndPlaintext()",
            "start_line": "65",
            "blame_result": "4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 66)         String plaintext = \"samekey\";\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 67)         String key = \"samekey\";\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 68) \n41f767ef9 (Luiz Carlos Jr 2024-10-04 13:10:18 -0300 69)         String cipherText = XORCipher.encrypt(plaintext, key);\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 70)         String decryptedText = XORCipher.decrypt(cipherText, key);\n",
            "commit_hashes": {
                "4e4600210": "    Enhance docs, add more tests in `XORCipher` (#5900)",
                "41f767ef9": "    Add XOR Cipher (#5490)"
            },
            "Commit&issueIDs": {
                "4e4600210": [
                    "5900"
                ],
                "41f767ef9": [
                    "5490"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5900",
                "https://github.com/TheAlgorithms/Java/commit/4e4600210",
                "https://github.com/TheAlgorithms/Java/issues/5490",
                "https://github.com/TheAlgorithms/Java/commit/41f767ef9"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/XORCipherTest.java",
            "test_name": "testLongPlaintextShortKey",
            "FQS": "com.thealgorithms.ciphers.XORCipherTest.testLongPlaintextShortKey()",
            "start_line": "76",
            "blame_result": "4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 77)         String plaintext = \"This is a long plaintext message.\";\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 78)         String key = \"key\";\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 79) \n41f767ef9 (Luiz Carlos Jr 2024-10-04 13:10:18 -0300 80)         String cipherText = XORCipher.encrypt(plaintext, key);\n4e4600210 (Hardik Pawar   2024-10-26 20:37:47 +0530 81)         String decryptedText = XORCipher.decrypt(cipherText, key);\n",
            "commit_hashes": {
                "4e4600210": "    Enhance docs, add more tests in `XORCipher` (#5900)",
                "41f767ef9": "    Add XOR Cipher (#5490)"
            },
            "Commit&issueIDs": {
                "4e4600210": [
                    "5900"
                ],
                "41f767ef9": [
                    "5490"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5900",
                "https://github.com/TheAlgorithms/Java/commit/4e4600210",
                "https://github.com/TheAlgorithms/Java/issues/5490",
                "https://github.com/TheAlgorithms/Java/commit/41f767ef9"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/ciphers/a5/A5KeyStreamGeneratorTest.java",
            "test_name": "testGetNextKeyStreamProducesDifferentOutputs",
            "FQS": "com.thealgorithms.ciphers.a5.A5KeyStreamGeneratorTest.testGetNextKeyStreamProducesDifferentOutputs()",
            "start_line": "49",
            "blame_result": "93cfa86a9 (Hardik Pawar 2024-10-07 19:53:21 +0530 50)         // Generate a key stream\n93cfa86a9 (Hardik Pawar 2024-10-07 19:53:21 +0530 51)         BitSet firstKeyStream = keyStreamGenerator.getNextKeyStream();\n93cfa86a9 (Hardik Pawar 2024-10-07 19:53:21 +0530 52) \n93cfa86a9 (Hardik Pawar 2024-10-07 19:53:21 +0530 53)         // Generate another key stream\n93cfa86a9 (Hardik Pawar 2024-10-07 19:53:21 +0530 54)         BitSet secondKeyStream = keyStreamGenerator.getNextKeyStream();\n",
            "commit_hashes": {
                "93cfa86a9": "    Add tests for `A5KeyStreamGenerator.java`, improve documentation (#5595)"
            },
            "Commit&issueIDs": {
                "93cfa86a9": [
                    "5595"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5595",
                "https://github.com/TheAlgorithms/Java/commit/93cfa86a9"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/caches/LRUCacheTest.java",
            "test_name": "testEvictionPolicy",
            "FQS": "com.thealgorithms.datastructures.caches.LRUCacheTest.testEvictionPolicy()",
            "start_line": "26",
            "blame_result": "b64e53cd3 (Hardik Pawar 2024-10-23 23:46:19 +0530 27)         // Fill cache to capacity\ne96f567bf (acbin        2022-10-03 17:23:00 +0800 28)         for (int i = 0; i < SIZE; i++) {\nb64e53cd3 (Hardik Pawar 2024-10-23 23:46:19 +0530 29)             cache.put(i, i * 100);\nd56eaa58a (valjamwo     2022-09-19 19:55:15 +0200 30)         }\nd56eaa58a (valjamwo     2022-09-19 19:55:15 +0200 31) \n",
            "commit_hashes": {
                "b64e53cd3": "    Enhance docs, add more tests in `LRUCache` (#5950)",
                "e96f567bf": "    Format code with prettier (#3375)",
                "d56eaa58a": "    Add LRUCacheTest and MRUCacheTest (fixes #3263) (#3277)"
            },
            "Commit&issueIDs": {
                "b64e53cd3": [
                    "5950"
                ],
                "e96f567bf": [
                    "3375"
                ],
                "d56eaa58a": [
                    "3277"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5950",
                "https://github.com/TheAlgorithms/Java/commit/b64e53cd3",
                "https://github.com/TheAlgorithms/Java/issues/3375",
                "https://github.com/TheAlgorithms/Java/commit/e96f567bf",
                "https://github.com/TheAlgorithms/Java/issues/3277",
                "https://github.com/TheAlgorithms/Java/commit/d56eaa58a"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/caches/LRUCacheTest.java",
            "test_name": "testAccessOrder",
            "FQS": "com.thealgorithms.datastructures.caches.LRUCacheTest.testAccessOrder()",
            "start_line": "46",
            "blame_result": "b64e53cd3 (Hardik Pawar 2024-10-23 23:46:19 +0530 47)         // Fill cache\ne96f567bf (acbin        2022-10-03 17:23:00 +0800 48)         for (int i = 0; i < SIZE; i++) {\nb64e53cd3 (Hardik Pawar 2024-10-23 23:46:19 +0530 49)             cache.put(i, i);\nd56eaa58a (valjamwo     2022-09-19 19:55:15 +0200 50)         }\nd56eaa58a (valjamwo     2022-09-19 19:55:15 +0200 51) \n",
            "commit_hashes": {
                "b64e53cd3": "    Enhance docs, add more tests in `LRUCache` (#5950)",
                "e96f567bf": "    Format code with prettier (#3375)",
                "d56eaa58a": "    Add LRUCacheTest and MRUCacheTest (fixes #3263) (#3277)"
            },
            "Commit&issueIDs": {
                "b64e53cd3": [
                    "5950"
                ],
                "e96f567bf": [
                    "3375"
                ],
                "d56eaa58a": [
                    "3277"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5950",
                "https://github.com/TheAlgorithms/Java/commit/b64e53cd3",
                "https://github.com/TheAlgorithms/Java/issues/3375",
                "https://github.com/TheAlgorithms/Java/commit/e96f567bf",
                "https://github.com/TheAlgorithms/Java/issues/3277",
                "https://github.com/TheAlgorithms/Java/commit/d56eaa58a"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/json/ModifyAwareMapTest.java",
            "test_name": "testKeySet",
            "FQS": "io.ebeaninternal.json.ModifyAwareMapTest.testKeySet()",
            "start_line": "149",
            "blame_result": "f5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 150) \nf5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 151)     ModifyAwareMap<String, String> map = createMap();\n3c7ef7d46e src/test/java/io/ebeaninternal/json/ModifyAwareMapTest.java               (Rob Bygrave 2018-01-06 12:51:50 +1300 152)     assertFalse(map.isMarkedDirty());\nf5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 153) \nf5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 154)     Set<String> keys = map.keySet();\n",
            "commit_hashes": {
                "f5a2cf8ff9": "    #297 - ENH: Add support for mapping Map<String,Object> as JSON content to DB including Postgres JSON and JSON types.",
                "3c7ef7d46e": "    #1229 - Implement equals and hashCode on ModifyAwareMap, ModifyAwareList and ModifyAwareSet"
            },
            "Commit&issueIDs": {
                "f5a2cf8ff9": [
                    "#297"
                ],
                "3c7ef7d46e": [
                    "#1229"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/297",
                "https://github.com/ebean-orm/ebean/commit/f5a2cf8ff9",
                "https://github.com/ebean-orm/ebean/issues/1229",
                "https://github.com/ebean-orm/ebean/commit/3c7ef7d46e"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/json/ModifyAwareMapTest.java",
            "test_name": "testValues",
            "FQS": "io.ebeaninternal.json.ModifyAwareMapTest.testValues()",
            "start_line": "161",
            "blame_result": "f5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 162) \nf5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 163)     ModifyAwareMap<String, String> map = createMap();\n3c7ef7d46e src/test/java/io/ebeaninternal/json/ModifyAwareMapTest.java               (Rob Bygrave 2018-01-06 12:51:50 +1300 164)     assertFalse(map.isMarkedDirty());\nf5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 165) \nf5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 166)     Collection<String> values = map.values();\n",
            "commit_hashes": {
                "f5a2cf8ff9": "    #297 - ENH: Add support for mapping Map<String,Object> as JSON content to DB including Postgres JSON and JSON types.",
                "3c7ef7d46e": "    #1229 - Implement equals and hashCode on ModifyAwareMap, ModifyAwareList and ModifyAwareSet"
            },
            "Commit&issueIDs": {
                "f5a2cf8ff9": [
                    "#297"
                ],
                "3c7ef7d46e": [
                    "#1229"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/297",
                "https://github.com/ebean-orm/ebean/commit/f5a2cf8ff9",
                "https://github.com/ebean-orm/ebean/issues/1229",
                "https://github.com/ebean-orm/ebean/commit/3c7ef7d46e"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/json/ModifyAwareMapTest.java",
            "test_name": "testEntrySet",
            "FQS": "io.ebeaninternal.json.ModifyAwareMapTest.testEntrySet()",
            "start_line": "173",
            "blame_result": "f5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 174) \nf5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 175)     ModifyAwareMap<String, String> map = createMap();\nf5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 176)     Set<Map.Entry<String, String>> entries = map.entrySet();\nf5a2cf8ff9 src/test/java/com/avaje/ebeaninternal/server/type/ModifyAwareMapTest.java (rbygrave    2015-05-28 00:02:57 +1200 177) \n3c7ef7d46e src/test/java/io/ebeaninternal/json/ModifyAwareMapTest.java               (Rob Bygrave 2018-01-06 12:51:50 +1300 178)     assertFalse(map.isMarkedDirty());\n",
            "commit_hashes": {
                "f5a2cf8ff9": "    #297 - ENH: Add support for mapping Map<String,Object> as JSON content to DB including Postgres JSON and JSON types.",
                "3c7ef7d46e": "    #1229 - Implement equals and hashCode on ModifyAwareMap, ModifyAwareList and ModifyAwareSet"
            },
            "Commit&issueIDs": {
                "f5a2cf8ff9": [
                    "#297"
                ],
                "3c7ef7d46e": [
                    "#1229"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/297",
                "https://github.com/ebean-orm/ebean/commit/f5a2cf8ff9",
                "https://github.com/ebean-orm/ebean/issues/1229",
                "https://github.com/ebean-orm/ebean/commit/3c7ef7d46e"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/caches/LRUCacheTest.java",
            "test_name": "testCustomObjects",
            "FQS": "com.thealgorithms.datastructures.caches.LRUCacheTest.testCustomObjects()",
            "start_line": "117",
            "blame_result": "b64e53cd3 (Hardik Pawar 2024-10-23 23:46:19 +0530 118)         class TestObject {\nb64e53cd3 (Hardik Pawar 2024-10-23 23:46:19 +0530 119)             private final String value;\nd56eaa58a (valjamwo     2022-09-19 19:55:15 +0200 120) \nb64e53cd3 (Hardik Pawar 2024-10-23 23:46:19 +0530 121)             TestObject(String value) {\nb64e53cd3 (Hardik Pawar 2024-10-23 23:46:19 +0530 122)                 this.value = value;\n",
            "commit_hashes": {
                "b64e53cd3": "    Enhance docs, add more tests in `LRUCache` (#5950)",
                "d56eaa58a": "    Add LRUCacheTest and MRUCacheTest (fixes #3263) (#3277)"
            },
            "Commit&issueIDs": {
                "b64e53cd3": [
                    "5950"
                ],
                "d56eaa58a": [
                    "3277"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5950",
                "https://github.com/TheAlgorithms/Java/commit/b64e53cd3",
                "https://github.com/TheAlgorithms/Java/issues/3277",
                "https://github.com/TheAlgorithms/Java/commit/d56eaa58a"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/crdt/GCounterTest.java",
            "test_name": "compare",
            "FQS": "com.thealgorithms.datastructures.crdt.GCounterTest.compare()",
            "start_line": "38",
            "blame_result": "b1efd4e3 (Niklas Hoefflin 2023-11-24 18:13:44 +0100 39)         GCounter counter1 = new GCounter(0, 5);\nb1efd4e3 (Niklas Hoefflin 2023-11-24 18:13:44 +0100 40)         GCounter counter2 = new GCounter(3, 5);\nb1efd4e3 (Niklas Hoefflin 2023-11-24 18:13:44 +0100 41)         counter1.increment();\nb1efd4e3 (Niklas Hoefflin 2023-11-24 18:13:44 +0100 42)         counter1.increment();\nb1efd4e3 (Niklas Hoefflin 2023-11-24 18:13:44 +0100 43)         counter2.merge(counter1);\n",
            "commit_hashes": {
                "b1efd4e3": "    Add G-Counter (Grow-only Counter) (#4965)"
            },
            "Commit&issueIDs": {
                "b1efd4e3": [
                    "(#4965)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4965",
                "https://github.com/TheAlgorithms/Java/commit/b1efd4e3"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/crdt/GSetTest.java",
            "test_name": "testCompare",
            "FQS": "com.thealgorithms.datastructures.crdt.GSetTest.testCompare()",
            "start_line": "32",
            "blame_result": "e59a3b1e (Niklas Hoefflin 2023-12-05 19:39:18 +0100 33)         GSet<String> gSet1 = new GSet<>();\ne59a3b1e (Niklas Hoefflin 2023-12-05 19:39:18 +0100 34)         GSet<String> gSet2 = new GSet<>();\ne59a3b1e (Niklas Hoefflin 2023-12-05 19:39:18 +0100 35)         gSet1.addElement(\"apple\");\ne59a3b1e (Niklas Hoefflin 2023-12-05 19:39:18 +0100 36)         gSet1.addElement(\"orange\");\ne59a3b1e (Niklas Hoefflin 2023-12-05 19:39:18 +0100 37)         gSet2.addElement(\"orange\");\n",
            "commit_hashes": {
                "e59a3b1e": "    Add G-Set (Grow-only Set) (#4975)"
            },
            "Commit&issueIDs": {
                "e59a3b1e": [
                    "(#4975)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4975",
                "https://github.com/TheAlgorithms/Java/commit/e59a3b1e"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/crdt/LWWElementSetTest.java",
            "test_name": "testRemove",
            "FQS": "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testRemove()",
            "start_line": "27",
            "blame_result": "b8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 28)         Element element = new Element(\"key1\", 1, bias);\nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 29)         set.add(element);\nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 30)         set.remove(element);\nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 31) \nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 32)         assertFalse(set.lookup(element));\n",
            "commit_hashes": {
                "b8b1dea3": "    Add LWW Element Set (Last Write Wins Element Set) (#4979)"
            },
            "Commit&issueIDs": {
                "b8b1dea3": [
                    "(#4979)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4979",
                "https://github.com/TheAlgorithms/Java/commit/b8b1dea3"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/crdt/LWWElementSetTest.java",
            "test_name": "testCompareEqualSets",
            "FQS": "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testCompareEqualSets()",
            "start_line": "51",
            "blame_result": "b8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 52)         LWWElementSet otherSet = new LWWElementSet();\nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 53) \nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 54)         Element element = new Element(\"key1\", 1, bias);\nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 55)         set.add(element);\nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 56)         otherSet.add(element);\n",
            "commit_hashes": {
                "b8b1dea3": "    Add LWW Element Set (Last Write Wins Element Set) (#4979)"
            },
            "Commit&issueIDs": {
                "b8b1dea3": [
                    "(#4979)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4979",
                "https://github.com/TheAlgorithms/Java/commit/b8b1dea3"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/crdt/LWWElementSetTest.java",
            "test_name": "testCompareDifferentSets",
            "FQS": "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testCompareDifferentSets()",
            "start_line": "65",
            "blame_result": "b8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 66)         LWWElementSet otherSet = new LWWElementSet();\nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 67) \nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 68)         Element element1 = new Element(\"key1\", 1, bias);\nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 69)         Element element2 = new Element(\"key2\", 2, bias);\nb8b1dea3 (Niklas Hoefflin 2023-12-08 19:57:07 +0100 70) \n",
            "commit_hashes": {
                "b8b1dea3": "    Add LWW Element Set (Last Write Wins Element Set) (#4979)"
            },
            "Commit&issueIDs": {
                "b8b1dea3": [
                    "(#4979)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4979",
                "https://github.com/TheAlgorithms/Java/commit/b8b1dea3"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/crdt/ORSetTest.java",
            "test_name": "testCompareEqualSets",
            "FQS": "com.thealgorithms.datastructures.crdt.ORSetTest.testCompareEqualSets()",
            "start_line": "42",
            "blame_result": "e26fd9da (Niklas Hoefflin 2023-12-11 22:05:43 +0100 43)         ORSet<String> orSet1 = new ORSet<>();\ne26fd9da (Niklas Hoefflin 2023-12-11 22:05:43 +0100 44)         ORSet<String> orSet2 = new ORSet<>();\ne26fd9da (Niklas Hoefflin 2023-12-11 22:05:43 +0100 45) \ne26fd9da (Niklas Hoefflin 2023-12-11 22:05:43 +0100 46)         orSet1.add(\"A\");\ne26fd9da (Niklas Hoefflin 2023-12-11 22:05:43 +0100 47)         orSet2.add(\"A\");\n",
            "commit_hashes": {
                "e26fd9da": "    Add OR-Set (Observed-Remove Set) (#4980)"
            },
            "Commit&issueIDs": {
                "e26fd9da": [
                    "(#4980)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4980",
                "https://github.com/TheAlgorithms/Java/commit/e26fd9da"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/crdt/ORSetTest.java",
            "test_name": "testCompareDifferentSets",
            "FQS": "com.thealgorithms.datastructures.crdt.ORSetTest.testCompareDifferentSets()",
            "start_line": "59",
            "blame_result": "e26fd9da (Niklas Hoefflin 2023-12-11 22:05:43 +0100 60)         ORSet<String> orSet1 = new ORSet<>();\ne26fd9da (Niklas Hoefflin 2023-12-11 22:05:43 +0100 61)         ORSet<String> orSet2 = new ORSet<>();\ne26fd9da (Niklas Hoefflin 2023-12-11 22:05:43 +0100 62) \ne26fd9da (Niklas Hoefflin 2023-12-11 22:05:43 +0100 63)         orSet1.add(\"A\");\ne26fd9da (Niklas Hoefflin 2023-12-11 22:05:43 +0100 64)         orSet2.add(\"B\");\n",
            "commit_hashes": {
                "e26fd9da": "    Add OR-Set (Observed-Remove Set) (#4980)"
            },
            "Commit&issueIDs": {
                "e26fd9da": [
                    "(#4980)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4980",
                "https://github.com/TheAlgorithms/Java/commit/e26fd9da"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/crdt/PNCounterTest.java",
            "test_name": "testCompare",
            "FQS": "com.thealgorithms.datastructures.crdt.PNCounterTest.testCompare()",
            "start_line": "33",
            "blame_result": "3001620c (Niklas Hoefflin 2023-12-04 17:22:02 +0100 34)         PNCounter counter1 = new PNCounter(0, 3);\n3001620c (Niklas Hoefflin 2023-12-04 17:22:02 +0100 35)         counter1.increment();\n3001620c (Niklas Hoefflin 2023-12-04 17:22:02 +0100 36)         PNCounter counter2 = new PNCounter(1, 3);\n3001620c (Niklas Hoefflin 2023-12-04 17:22:02 +0100 37)         assertTrue(counter1.compare(counter2));\n3001620c (Niklas Hoefflin 2023-12-04 17:22:02 +0100 38)         counter2.increment();\n",
            "commit_hashes": {
                "3001620c": "    Add PN-Counter (#4974)"
            },
            "Commit&issueIDs": {
                "3001620c": [
                    "(#4974)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4974",
                "https://github.com/TheAlgorithms/Java/commit/3001620c"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/crdt/TwoPSetTest.java",
            "test_name": "testCompare",
            "FQS": "com.thealgorithms.datastructures.crdt.TwoPSetTest.testCompare()",
            "start_line": "40",
            "blame_result": "4aa8e6a0 (Niklas Hoefflin 2023-12-11 19:58:56 +0100 41)         TwoPSet<String> set1 = new TwoPSet<>();\n249ee1dc (Niklas Hoefflin 2023-12-07 16:23:22 +0100 42)         set1.add(\"A\");\n249ee1dc (Niklas Hoefflin 2023-12-07 16:23:22 +0100 43)         set1.add(\"B\");\n4aa8e6a0 (Niklas Hoefflin 2023-12-11 19:58:56 +0100 44)         TwoPSet<String> set2 = new TwoPSet<>();\n249ee1dc (Niklas Hoefflin 2023-12-07 16:23:22 +0100 45)         set2.add(\"A\");\n",
            "commit_hashes": {
                "4aa8e6a0": "    Updated TwoPSet to use Generics instead of Strings (#4981)",
                "249ee1dc": "    Add 2P-Set (Two-Phase Set) for both addition and removal operations in distributed systems (#4977)"
            },
            "Commit&issueIDs": {
                "4aa8e6a0": [
                    "(#4981)"
                ],
                "249ee1dc": [
                    "(#4977)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4981",
                "https://github.com/TheAlgorithms/Java/commit/4aa8e6a0",
                "https://github.com/TheAlgorithms/Java/issues/4977",
                "https://github.com/TheAlgorithms/Java/commit/249ee1dc"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/disjointsetunion/DisjointSetUnionTest.java",
            "test_name": "testUnionFindSet",
            "FQS": "com.thealgorithms.datastructures.disjointsetunion.DisjointSetUnionTest.testUnionFindSet()",
            "start_line": "19",
            "blame_result": "94621fb6 (Manan Solanki 2023-09-10 22:30:35 +0530 20)         DisjointSetUnion<Integer> dsu = new DisjointSetUnion<>();\n94621fb6 (Manan Solanki 2023-09-10 22:30:35 +0530 21)         Node<Integer> node1 = dsu.makeSet(1);\n94621fb6 (Manan Solanki 2023-09-10 22:30:35 +0530 22)         Node<Integer> node2 = dsu.makeSet(2);\n94621fb6 (Manan Solanki 2023-09-10 22:30:35 +0530 23)         Node<Integer> node3 = dsu.makeSet(3);\n94621fb6 (Manan Solanki 2023-09-10 22:30:35 +0530 24)         Node<Integer> node4 = dsu.makeSet(4);\n",
            "commit_hashes": {
                "94621fb6": "    Enhancing DisjointSetUnion data structure (#4366)"
            },
            "Commit&issueIDs": {
                "94621fb6": [
                    "(#4366)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4366",
                "https://github.com/TheAlgorithms/Java/commit/94621fb6"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/server/type/ConvertInetAddressTest.java",
            "test_name": "forString",
            "FQS": "io.ebeaninternal.server.type.ConvertInetAddressTest.forString()",
            "start_line": "12",
            "blame_result": "58760fe001 src/test/java/com/avaje/ebeaninternal/server/type/ConvertInetAddressTest.java (Rob Bygrave 2016-11-17 20:17:21 +1300 13) \n241f6f3d6d src/test/java/com/avaje/ebeaninternal/server/type/ConvertInetAddressTest.java (Rob Bygrave 2014-10-20 22:31:22 +1300 14)     InetAddress addr = ConvertInetAddresses.forString(\"128.1.10.23\");\n5975694538 src/test/java/io/ebeaninternal/server/type/ConvertInetAddressTest.java        (Rob Bygrave 2019-02-21 22:14:21 +1300 15)     assertEquals(\"128.1.10.23\", addr.getHostAddress());\n58760fe001 src/test/java/com/avaje/ebeaninternal/server/type/ConvertInetAddressTest.java (Rob Bygrave 2016-11-17 20:17:21 +1300 16) \n241f6f3d6d src/test/java/com/avaje/ebeaninternal/server/type/ConvertInetAddressTest.java (Rob Bygrave 2014-10-20 22:31:22 +1300 17)     String ip6addr = \"2001:db8:85a3:0:0:8a2e:370:7334\";\n",
            "commit_hashes": {
                "58760fe001": "    no effective change - format test code",
                "241f6f3d6d": "    #196 - Add support for using java.net.InetAddress in entity beans",
                "5975694538": "    #1640 - For Postgres support mapping InetAddress to INET db column (#1641)"
            },
            "Commit&issueIDs": {
                "241f6f3d6d": [
                    "#196"
                ],
                "5975694538": [
                    "#1640",
                    "(#1641)"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/196",
                "https://github.com/ebean-orm/ebean/commit/241f6f3d6d",
                "https://github.com/ebean-orm/ebean/issues/1640",
                "https://github.com/ebean-orm/ebean/commit/5975694538"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/server/type/ScalarTypeLocalDateTimeTest.java",
            "test_name": "testConvertToMillis",
            "FQS": "io.ebeaninternal.server.type.ScalarTypeLocalDateTimeTest.testConvertToMillis()",
            "start_line": "40",
            "blame_result": "523ddbab63 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypeLocalDateTimeTest.java (Robin Bygrave 2016-04-21 20:11:39 +1200 41) \ncb74ef01e0 src/test/java/io/ebeaninternal/server/type/ScalarTypeLocalDateTimeTest.java        (Roland Praml  2019-02-11 10:42:05 +0100 42)     LocalDateTime now = LocalDateTime.now().withNano(123_000_000); // jdk11 workaround\n523ddbab63 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypeLocalDateTimeTest.java (Robin Bygrave 2016-04-21 20:11:39 +1200 43)     long asMillis = type.convertToMillis(now);\n523ddbab63 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypeLocalDateTimeTest.java (Robin Bygrave 2016-04-21 20:11:39 +1200 44)     LocalDateTime fromMillis = type.convertFromMillis(asMillis);\n523ddbab63 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypeLocalDateTimeTest.java (Robin Bygrave 2016-04-21 20:11:39 +1200 45) \n",
            "commit_hashes": {
                "523ddbab63": "    #658 - REFACTOR: Simplify LocalDateTime -> Timestamp conversion, use Timestamp.valueOf()",
                "cb74ef01e0": "    build on jdk11 (#1637)"
            },
            "Commit&issueIDs": {
                "523ddbab63": [
                    "#658"
                ],
                "cb74ef01e0": [
                    "(#1637)"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/658",
                "https://github.com/ebean-orm/ebean/commit/523ddbab63",
                "https://github.com/ebean-orm/ebean/issues/1637",
                "https://github.com/ebean-orm/ebean/commit/cb74ef01e0"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/server/type/ScalarTypePathTest.java",
            "test_name": "convertFromDbString",
            "FQS": "io.ebeaninternal.server.type.ScalarTypePathTest.convertFromDbString()",
            "start_line": "17",
            "blame_result": "221f5ad879 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypePathTest.java (Robin Bygrave 2016-04-21 11:33:26 +1200 18) \ncf9eb4ed97 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypePathTest.java (Roland Praml  2016-07-19 13:25:53 +0200 19)     Path path = Paths.get(TEMP_PATH);\n221f5ad879 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypePathTest.java (Robin Bygrave 2016-04-21 11:33:26 +1200 20) \ncf9eb4ed97 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypePathTest.java (Roland Praml  2016-07-19 13:25:53 +0200 21)     String asString = type.convertToDbString(path); // \"/tmp\" will be converted to \"file://c:/tmp\" on windows\n221f5ad879 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypePathTest.java (Robin Bygrave 2016-04-21 11:33:26 +1200 22)     Path converted = type.convertFromDbString(asString);\n",
            "commit_hashes": {
                "221f5ad879": "    #651 - ENH: Add type support for java.nio.file.Path ... such that it stores the underlying URI as VARCHAR/string",
                "cf9eb4ed97": "    FIX: PathTests - they fail on windows machine, because the OS translates \"/tmp\" to \"c:\\tmp\". bumped classpath-canner to current API version"
            },
            "Commit&issueIDs": {
                "221f5ad879": [
                    "#651"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/651",
                "https://github.com/ebean-orm/ebean/commit/221f5ad879"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/server/type/ScalarTypePathTest.java",
            "test_name": "formatAndParse",
            "FQS": "io.ebeaninternal.server.type.ScalarTypePathTest.formatAndParse()",
            "start_line": "28",
            "blame_result": "221f5ad879 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypePathTest.java (Robin Bygrave 2016-04-21 11:33:26 +1200 29) \ncf9eb4ed97 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypePathTest.java (Roland Praml  2016-07-19 13:25:53 +0200 30)     Path path = Paths.get(TEMP_PATH);\n221f5ad879 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypePathTest.java (Robin Bygrave 2016-04-21 11:33:26 +1200 31) \n221f5ad879 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypePathTest.java (Robin Bygrave 2016-04-21 11:33:26 +1200 32)     String asString = type.formatValue(path);\n221f5ad879 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypePathTest.java (Robin Bygrave 2016-04-21 11:33:26 +1200 33)     Path converted = type.parse(asString);\n",
            "commit_hashes": {
                "221f5ad879": "    #651 - ENH: Add type support for java.nio.file.Path ... such that it stores the underlying URI as VARCHAR/string",
                "cf9eb4ed97": "    FIX: PathTests - they fail on windows machine, because the OS translates \"/tmp\" to \"c:\\tmp\". bumped classpath-canner to current API version"
            },
            "Commit&issueIDs": {
                "221f5ad879": [
                    "#651"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/651",
                "https://github.com/ebean-orm/ebean/commit/221f5ad879"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/server/type/ScalarTypeYearMonthDateTest.java",
            "test_name": "testConvertFromMillis",
            "FQS": "io.ebeaninternal.server.type.ScalarTypeYearMonthDateTest.testConvertFromMillis()",
            "start_line": "21",
            "blame_result": "fd4d757f87 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypeYearMonthDateTest.java (rbygrave    2014-11-18 01:20:26 +1300 22) \nfd4d757f87 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypeYearMonthDateTest.java (rbygrave    2014-11-18 01:20:26 +1300 23)     LocalDate today = LocalDate.now();\nfd4d757f87 src/test/java/com/avaje/ebeaninternal/server/type/ScalarTypeYearMonthDateTest.java (rbygrave    2014-11-18 01:20:26 +1300 24)     LocalDate firstMonthDay = today.withDayOfMonth(1);\nc46ac04c0a src/test/java/io/ebeaninternal/server/type/ScalarTypeYearMonthDateTest.java        (rob bygrave 2019-04-27 10:33:17 +1200 25)     ZonedDateTime zonedDateTime = firstMonthDay.atStartOfDay(ZoneOffset.UTC);\nc46ac04c0a src/test/java/io/ebeaninternal/server/type/ScalarTypeYearMonthDateTest.java        (rob bygrave 2019-04-27 10:33:17 +1200 26) \n",
            "commit_hashes": {
                "fd4d757f87": "    WIP Java8 types - ScalarTypeDuration etc",
                "c46ac04c0a": "    #1684 - Fix JSON marshalling on LocalDate, sql.Date etc - explicit UTC"
            },
            "Commit&issueIDs": {
                "c46ac04c0a": [
                    "#1684"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/1684",
                "https://github.com/ebean-orm/ebean/commit/c46ac04c0a"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java",
            "test_name": "testConversion",
            "FQS": "io.ebeaninternal.server.type.TestScalarTypeUUIDBinaryConversion.testConversion()",
            "start_line": "12",
            "blame_result": "22cd5b0e82 src/test/java/com/avaje/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java     (Rob Bygrave  2014-05-17 21:52:51 +1200 13)     UUID id = UUID.randomUUID();\n58760fe001 src/test/java/com/avaje/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java     (Rob Bygrave  2016-11-17 20:17:21 +1300 14) \ne252f71792 src/test/java/io/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java            (Roland Praml 2018-03-02 00:04:56 +0100 15)     byte[] bytes = ScalarTypeUUIDBinary.convertToBytes(id, false);\n70a967a3a7 ebean-core/src/test/java/io/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java (rbygrave     2021-09-07 13:23:27 +1200 16)     assertEquals(16, bytes.length);\n58760fe001 src/test/java/com/avaje/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java     (Rob Bygrave  2016-11-17 20:17:21 +1300 17) \n",
            "commit_hashes": {
                "22cd5b0e82": "    Fix for #128 storing UUID as binary",
                "58760fe001": "    no effective change - format test code",
                "e252f71792": "    ENH: Optimized binary form for UUID (Type 1) (#1308)",
                "70a967a3a7": "    Junit5 bump - ebean-core"
            },
            "Commit&issueIDs": {
                "22cd5b0e82": [
                    "#128"
                ],
                "e252f71792": [
                    "(#1308)"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/128",
                "https://github.com/ebean-orm/ebean/commit/22cd5b0e82",
                "https://github.com/ebean-orm/ebean/issues/1308",
                "https://github.com/ebean-orm/ebean/commit/e252f71792"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java",
            "test_name": "testConversionOptimized",
            "FQS": "io.ebeaninternal.server.type.TestScalarTypeUUIDBinaryConversion.testConversionOptimized()",
            "start_line": "23",
            "blame_result": "22cd5b0e82 src/test/java/com/avaje/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java     (Rob Bygrave  2014-05-17 21:52:51 +1200 24)     UUID id = UUID.randomUUID();\n58760fe001 src/test/java/com/avaje/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java     (Rob Bygrave  2016-11-17 20:17:21 +1300 25) \ne252f71792 src/test/java/io/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java            (Roland Praml 2018-03-02 00:04:56 +0100 26)     byte[] bytes = ScalarTypeUUIDBinary.convertToBytes(id, true);\n70a967a3a7 ebean-core/src/test/java/io/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java (rbygrave     2021-09-07 13:23:27 +1200 27)     assertEquals(16, bytes.length);\ne252f71792 src/test/java/io/ebeaninternal/server/type/TestScalarTypeUUIDBinaryConversion.java            (Roland Praml 2018-03-02 00:04:56 +0100 28) \n",
            "commit_hashes": {
                "22cd5b0e82": "    Fix for #128 storing UUID as binary",
                "58760fe001": "    no effective change - format test code",
                "e252f71792": "    ENH: Optimized binary form for UUID (Type 1) (#1308)",
                "70a967a3a7": "    Junit5 bump - ebean-core"
            },
            "Commit&issueIDs": {
                "22cd5b0e82": [
                    "#128"
                ],
                "e252f71792": [
                    "(#1308)"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/128",
                "https://github.com/ebean-orm/ebean/commit/22cd5b0e82",
                "https://github.com/ebean-orm/ebean/issues/1308",
                "https://github.com/ebean-orm/ebean/commit/e252f71792"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/server/util/Md5Test.java",
            "test_name": "hash",
            "FQS": "io.ebeaninternal.server.util.Md5Test.hash()",
            "start_line": "11",
            "blame_result": "c610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 12)     String content = \"some random content we wish to hash\";\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 13)     String hash1 = Md5.hash(content);\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 14)     String hash2 = Md5.hash(content);\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 15)     assertEquals(hash1, hash2);\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 16)     assertEquals(hash1, \"62c20bf679ff56cb746452ab5c88e3ed\");\n",
            "commit_hashes": {
                "c610f95b2d": "    #2293 - Metric hash back to MD5 of sql + name + loc (minus location file and line source) ~= Revert of #2288"
            },
            "Commit&issueIDs": {
                "c610f95b2d": [
                    "#2293",
                    "#2288"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/2293",
                "https://github.com/ebean-orm/ebean/commit/c610f95b2d"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/server/util/Md5Test.java",
            "test_name": "hashDifferent",
            "FQS": "io.ebeaninternal.server.util.Md5Test.hashDifferent()",
            "start_line": "20",
            "blame_result": "c610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 21)     String hash1 = Md5.hash(\"one\");\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 22)     String hash2 = Md5.hash(\"two\");\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 23)     String hash3 = Md5.hash(\"onetwo\");\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 24) \nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 25)     assertNotEquals(hash1, hash2);\n",
            "commit_hashes": {
                "c610f95b2d": "    #2293 - Metric hash back to MD5 of sql + name + loc (minus location file and line source) ~= Revert of #2288"
            },
            "Commit&issueIDs": {
                "c610f95b2d": [
                    "#2293",
                    "#2288"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/2293",
                "https://github.com/ebean-orm/ebean/commit/c610f95b2d"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/server/util/Md5Test.java",
            "test_name": "hashMulti",
            "FQS": "io.ebeaninternal.server.util.Md5Test.hashMulti()",
            "start_line": "31",
            "blame_result": "c610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 32)     String hash1 = Md5.hash(\"one\", \"two\");\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 33)     String hash2 = Md5.hash(\"onetwo\");\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 34) \nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 35)     assertEquals(hash1, hash2);\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 36)     assertEquals(hash1, \"5b9164ad6f496d9dee12ec7634ce253f\");\n",
            "commit_hashes": {
                "c610f95b2d": "    #2293 - Metric hash back to MD5 of sql + name + loc (minus location file and line source) ~= Revert of #2288"
            },
            "Commit&issueIDs": {
                "c610f95b2d": [
                    "#2293",
                    "#2288"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/2293",
                "https://github.com/ebean-orm/ebean/commit/c610f95b2d"
            ]
        },
        {
            "poj_link": "https://github.com/ebean-orm/ebean/",
            "file_path": "ebean-orm/ebean/ebean-core/src/test/java/io/ebeaninternal/server/util/Md5Test.java",
            "test_name": "hashMulti_when_null",
            "FQS": "io.ebeaninternal.server.util.Md5Test.hashMulti_when_null()",
            "start_line": "40",
            "blame_result": "c610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 41)     String hash1 = Md5.hash(\"one\", null);\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 42)     String hash2 = Md5.hash(\"one\");\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 43) \nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 44)     assertEquals(hash1, hash2);\nc610f95b2d (rbygrave 2021-08-09 14:05:10 +1200 45)     assertEquals(hash1, \"f97c5d29941bfb1b2fdab0874906ab82\");\n",
            "commit_hashes": {
                "c610f95b2d": "    #2293 - Metric hash back to MD5 of sql + name + loc (minus location file and line source) ~= Revert of #2288"
            },
            "Commit&issueIDs": {
                "c610f95b2d": [
                    "#2293",
                    "#2288"
                ]
            },
            "links": [
                "https://github.com/ebean-orm/ebean/issues/2293",
                "https://github.com/ebean-orm/ebean/commit/c610f95b2d"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/hashmap/hashing/HashMapTest.java",
            "test_name": "testInsertLargeNumberOfElements",
            "FQS": "com.thealgorithms.datastructures.hashmap.hashing.HashMapTest.testInsertLargeNumberOfElements()",
            "start_line": "98",
            "blame_result": "a23e9b0ba (Alex Klymenko 2024-08-28 22:29:24 +0200  99)         HashMap<Integer, String> hashMap = new HashMap<>(10);\na23e9b0ba (Alex Klymenko 2024-08-28 22:29:24 +0200 100)         for (int i = 0; i < 100; i++) {\na23e9b0ba (Alex Klymenko 2024-08-28 22:29:24 +0200 101)             hashMap.insert(i, \"Value\" + i);\na23e9b0ba (Alex Klymenko 2024-08-28 22:29:24 +0200 102)         }\na23e9b0ba (Alex Klymenko 2024-08-28 22:29:24 +0200 103) \n",
            "commit_hashes": {
                "a23e9b0ba": "    refactor: `HashMap` (#5426)"
            },
            "Commit&issueIDs": {
                "a23e9b0ba": [
                    "5426"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5426",
                "https://github.com/TheAlgorithms/Java/commit/a23e9b0ba"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/hashmap/hashing/HashMapTest.java",
            "test_name": "testResizeHashMap",
            "FQS": "com.thealgorithms.datastructures.hashmap.hashing.HashMapTest.testResizeHashMap()",
            "start_line": "149",
            "blame_result": "f5bc2c807 (Hardik Pawar  2024-10-26 21:59:21 +0530 150)         HashMap<Integer, String> hashMap = new HashMap<>(2); // Small initial size to force rehashing\nf5bc2c807 (Hardik Pawar  2024-10-26 21:59:21 +0530 151)         for (int i = 0; i < 10; i++) {\na23e9b0ba (Alex Klymenko 2024-08-28 22:29:24 +0200 152)             hashMap.insert(i, \"Value\" + i);\na23e9b0ba (Alex Klymenko 2024-08-28 22:29:24 +0200 153)         }\na23e9b0ba (Alex Klymenko 2024-08-28 22:29:24 +0200 154) \n",
            "commit_hashes": {
                "f5bc2c807": "    Add more tests in `HashMap` (#5974)",
                "a23e9b0ba": "    refactor: `HashMap` (#5426)"
            },
            "Commit&issueIDs": {
                "f5bc2c807": [
                    "5974"
                ],
                "a23e9b0ba": [
                    "5426"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5974",
                "https://github.com/TheAlgorithms/Java/commit/f5bc2c807",
                "https://github.com/TheAlgorithms/Java/issues/5426",
                "https://github.com/TheAlgorithms/Java/commit/a23e9b0ba"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/hashmap/hashing/LinearProbingHashMapTest.java",
            "test_name": "stressTest",
            "FQS": "com.thealgorithms.datastructures.hashmap.hashing.LinearProbingHashMapTest.stressTest()",
            "start_line": "80",
            "blame_result": "26f114cb6 (Hardik Pawar 2024-10-26 21:35:31 +0530 81)         Map<Integer, String> map = getMap();\n26f114cb6 (Hardik Pawar 2024-10-26 21:35:31 +0530 82)         for (int i = 0; i < 1000; i++) {\n26f114cb6 (Hardik Pawar 2024-10-26 21:35:31 +0530 83)             map.put(i, String.valueOf(i));\n26f114cb6 (Hardik Pawar 2024-10-26 21:35:31 +0530 84)             assertEquals(i + 1, map.size(), \"Size should match number of inserted elements\");\n26f114cb6 (Hardik Pawar 2024-10-26 21:35:31 +0530 85)         }\n",
            "commit_hashes": {
                "26f114cb6": "    Enhance docs, add tests in `LinearProbingHashMap` (#5977)"
            },
            "Commit&issueIDs": {
                "26f114cb6": [
                    "5977"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5977",
                "https://github.com/TheAlgorithms/Java/commit/26f114cb6"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/lists/CircleLinkedListTest.java",
            "test_name": "testClear",
            "FQS": "com.thealgorithms.datastructures.lists.CircleLinkedListTest.testClear()",
            "start_line": "101",
            "blame_result": "45563ccbd (Alex Klymenko 2024-08-28 18:31:39 +0200 102)         list.append(1);\n45563ccbd (Alex Klymenko 2024-08-28 18:31:39 +0200 103)         list.append(2);\n45563ccbd (Alex Klymenko 2024-08-28 18:31:39 +0200 104)         list.append(3);\n202879aa5 (Hardik Pawar  2024-10-25 20:46:34 +0530 105) \n202879aa5 (Hardik Pawar  2024-10-25 20:46:34 +0530 106)         // Remove all elements to simulate clearing the list\n",
            "commit_hashes": {
                "45563ccbd": "    test: `CircleLinkedListTest` (#5422)",
                "202879aa5": "    Enhance docs, add tests in `CircleLinkedList` (#5991)"
            },
            "Commit&issueIDs": {
                "45563ccbd": [
                    "5422"
                ],
                "202879aa5": [
                    "5991"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5422",
                "https://github.com/TheAlgorithms/Java/commit/45563ccbd",
                "https://github.com/TheAlgorithms/Java/issues/5991",
                "https://github.com/TheAlgorithms/Java/commit/202879aa5"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/lists/SkipListTest.java",
            "test_name": "removeFromHead",
            "FQS": "com.thealgorithms.datastructures.lists.SkipListTest.removeFromHead()",
            "start_line": "44",
            "blame_result": "e59568bc (Artem Boiarshinov 2022-06-21 10:41:22 +0300 45)         SkipList<String> skipList = createSkipList();\nd14a5d1e (Artem Boiarshinov 2022-06-22 16:56:35 +0300 46)         String mostLeftElement = skipList.get(0);\ne59568bc (Artem Boiarshinov 2022-06-21 10:41:22 +0300 47)         int initialSize = skipList.size();\ne59568bc (Artem Boiarshinov 2022-06-21 10:41:22 +0300 48)         print(skipList);\ne59568bc (Artem Boiarshinov 2022-06-21 10:41:22 +0300 49) \n",
            "commit_hashes": {
                "e59568bc": "    Add Skip List (#3154)",
                "d14a5d1e": "    Fix SkipList remove operation (#3160)"
            },
            "Commit&issueIDs": {
                "e59568bc": [
                    "(#3154)"
                ],
                "d14a5d1e": [
                    "(#3160)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/3154",
                "https://github.com/TheAlgorithms/Java/commit/e59568bc",
                "https://github.com/TheAlgorithms/Java/issues/3160",
                "https://github.com/TheAlgorithms/Java/commit/d14a5d1e"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/lists/SkipListTest.java",
            "test_name": "removeFromTail",
            "FQS": "com.thealgorithms.datastructures.lists.SkipListTest.removeFromTail()",
            "start_line": "57",
            "blame_result": "e59568bc (Artem Boiarshinov 2022-06-21 10:41:22 +0300 58)         SkipList<String> skipList = createSkipList();\nd14a5d1e (Artem Boiarshinov 2022-06-22 16:56:35 +0300 59)         String mostRightValue = skipList.get(skipList.size() - 1);\ne59568bc (Artem Boiarshinov 2022-06-21 10:41:22 +0300 60)         int initialSize = skipList.size();\ne59568bc (Artem Boiarshinov 2022-06-21 10:41:22 +0300 61)         print(skipList);\ne59568bc (Artem Boiarshinov 2022-06-21 10:41:22 +0300 62) \n",
            "commit_hashes": {
                "e59568bc": "    Add Skip List (#3154)",
                "d14a5d1e": "    Fix SkipList remove operation (#3160)"
            },
            "Commit&issueIDs": {
                "e59568bc": [
                    "(#3154)"
                ],
                "d14a5d1e": [
                    "(#3160)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/3154",
                "https://github.com/TheAlgorithms/Java/commit/e59568bc",
                "https://github.com/TheAlgorithms/Java/issues/3160",
                "https://github.com/TheAlgorithms/Java/commit/d14a5d1e"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/trees/LazySegmentTreeTest.java",
            "test_name": "updateAndGet",
            "FQS": "com.thealgorithms.datastructures.trees.LazySegmentTreeTest.updateAndGet()",
            "start_line": "48",
            "blame_result": "00282efd (acbin                       2023-06-09 18:52:05 +0800 49)         int[] arr = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n3e8f30c7 (AmirMohammad Hosseini Nasab 2022-08-10 21:57:53 +0430 50)         LazySegmentTree lazySegmentTree = new LazySegmentTree(arr);\n3e8f30c7 (AmirMohammad Hosseini Nasab 2022-08-10 21:57:53 +0430 51) \n00282efd (acbin                       2023-06-09 18:52:05 +0800 52)         for (int i = 0; i < 10; i++)\n00282efd (acbin                       2023-06-09 18:52:05 +0800 53)             for (int j = i + 1; j < 10; j++) {\n",
            "commit_hashes": {
                "00282efd": "    style: format code (#4212)",
                "3e8f30c7": "    Add Lazy Segment Tree (#3209)"
            },
            "Commit&issueIDs": {
                "00282efd": [
                    "(#4212)"
                ],
                "3e8f30c7": [
                    "(#3209)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4212",
                "https://github.com/TheAlgorithms/Java/commit/00282efd",
                "https://github.com/TheAlgorithms/Java/issues/3209",
                "https://github.com/TheAlgorithms/Java/commit/3e8f30c7"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/trees/SameTreesCheckTest.java",
            "test_name": "testSingleNodeTreesAreSame",
            "FQS": "com.thealgorithms.datastructures.trees.SameTreesCheckTest.testSingleNodeTreesAreSame()",
            "start_line": "24",
            "blame_result": "00282efd (acbin                2023-06-09 18:52:05 +0800 25)         final BinaryTree.Node p = TreeTestUtils.createTree(new Integer[] {100});\n00282efd (acbin                2023-06-09 18:52:05 +0800 26)         final BinaryTree.Node q = TreeTestUtils.createTree(new Integer[] {100});\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 27)         assertTrue(SameTreesCheck.check(p, q));\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 28)     }\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 29) \n",
            "commit_hashes": {
                "00282efd": "    style: format code (#4212)",
                "351e85d2": "    Added same trees algorithm check with a unit test (#3845)"
            },
            "Commit&issueIDs": {
                "00282efd": [
                    "(#4212)"
                ],
                "351e85d2": [
                    "(#3845)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4212",
                "https://github.com/TheAlgorithms/Java/commit/00282efd",
                "https://github.com/TheAlgorithms/Java/issues/3845",
                "https://github.com/TheAlgorithms/Java/commit/351e85d2"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/trees/SameTreesCheckTest.java",
            "test_name": "testSameTreesIsSuccessful",
            "FQS": "com.thealgorithms.datastructures.trees.SameTreesCheckTest.testSameTreesIsSuccessful()",
            "start_line": "38",
            "blame_result": "00282efd (acbin                2023-06-09 18:52:05 +0800 39)         final BinaryTree.Node p = TreeTestUtils.createTree(new Integer[] {1, 2, 3, 4, 5, 6, 7});\n00282efd (acbin                2023-06-09 18:52:05 +0800 40)         final BinaryTree.Node q = TreeTestUtils.createTree(new Integer[] {1, 2, 3, 4, 5, 6, 7});\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 41)         assertTrue(SameTreesCheck.check(p, q));\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 42)     }\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 43) \n",
            "commit_hashes": {
                "00282efd": "    style: format code (#4212)",
                "351e85d2": "    Added same trees algorithm check with a unit test (#3845)"
            },
            "Commit&issueIDs": {
                "00282efd": [
                    "(#4212)"
                ],
                "351e85d2": [
                    "(#3845)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4212",
                "https://github.com/TheAlgorithms/Java/commit/00282efd",
                "https://github.com/TheAlgorithms/Java/issues/3845",
                "https://github.com/TheAlgorithms/Java/commit/351e85d2"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/trees/SameTreesCheckTest.java",
            "test_name": "testSameTreesFails",
            "FQS": "com.thealgorithms.datastructures.trees.SameTreesCheckTest.testSameTreesFails()",
            "start_line": "52",
            "blame_result": "00282efd (acbin                2023-06-09 18:52:05 +0800 53)         final BinaryTree.Node p = TreeTestUtils.createTree(new Integer[] {1, 2, 3, 4, 5, 6, 7});\n00282efd (acbin                2023-06-09 18:52:05 +0800 54)         final BinaryTree.Node q = TreeTestUtils.createTree(new Integer[] {1, 2, 3, 4, 5, 6});\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 55)         assertFalse(SameTreesCheck.check(p, q));\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 56)     }\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 57) \n",
            "commit_hashes": {
                "00282efd": "    style: format code (#4212)",
                "351e85d2": "    Added same trees algorithm check with a unit test (#3845)"
            },
            "Commit&issueIDs": {
                "00282efd": [
                    "(#4212)"
                ],
                "351e85d2": [
                    "(#3845)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4212",
                "https://github.com/TheAlgorithms/Java/commit/00282efd",
                "https://github.com/TheAlgorithms/Java/issues/3845",
                "https://github.com/TheAlgorithms/Java/commit/351e85d2"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/trees/SameTreesCheckTest.java",
            "test_name": "testTreesWithDifferentStructure",
            "FQS": "com.thealgorithms.datastructures.trees.SameTreesCheckTest.testTreesWithDifferentStructure()",
            "start_line": "64",
            "blame_result": "00282efd (acbin                2023-06-09 18:52:05 +0800 65)         final BinaryTree.Node p = TreeTestUtils.createTree(new Integer[] {1, 2});\n00282efd (acbin                2023-06-09 18:52:05 +0800 66)         final BinaryTree.Node q = TreeTestUtils.createTree(new Integer[] {1, null, 2});\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 67)         assertFalse(SameTreesCheck.check(p, q));\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 68)     }\n351e85d2 (Albina Gimaletdinova 2023-01-13 23:07:56 +0300 69) }\n",
            "commit_hashes": {
                "00282efd": "    style: format code (#4212)",
                "351e85d2": "    Added same trees algorithm check with a unit test (#3845)"
            },
            "Commit&issueIDs": {
                "00282efd": [
                    "(#4212)"
                ],
                "351e85d2": [
                    "(#3845)"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/4212",
                "https://github.com/TheAlgorithms/Java/commit/00282efd",
                "https://github.com/TheAlgorithms/Java/issues/3845",
                "https://github.com/TheAlgorithms/Java/commit/351e85d2"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/trees/TrieTest.java",
            "test_name": "testInsertAndSearchMultipleWords",
            "FQS": "com.thealgorithms.datastructures.trees.TrieTest.testInsertAndSearchMultipleWords()",
            "start_line": "35",
            "blame_result": "ce3459562 src/test/java/com/thealgorithms/datastructures/trees/TrieImpTest.java (Hardik Pawar 2024-10-05 15:17:52 +0530 36)         String word1 = \"cat\";\nce3459562 src/test/java/com/thealgorithms/datastructures/trees/TrieImpTest.java (Hardik Pawar 2024-10-05 15:17:52 +0530 37)         String word2 = \"car\";\nce3459562 src/test/java/com/thealgorithms/datastructures/trees/TrieImpTest.java (Hardik Pawar 2024-10-05 15:17:52 +0530 38)         trie.insert(word1);\nce3459562 src/test/java/com/thealgorithms/datastructures/trees/TrieImpTest.java (Hardik Pawar 2024-10-05 15:17:52 +0530 39)         trie.insert(word2);\nce3459562 src/test/java/com/thealgorithms/datastructures/trees/TrieImpTest.java (Hardik Pawar 2024-10-05 15:17:52 +0530 40) \n",
            "commit_hashes": {
                "ce3459562": "    Improve `TrieImp.java` comments & enhance readability (#5526)"
            },
            "Commit&issueIDs": {
                "ce3459562": [
                    "5526"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5526",
                "https://github.com/TheAlgorithms/Java/commit/ce3459562"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/datastructures/trees/TrieTest.java",
            "test_name": "testInsertAndSearchPrefix",
            "FQS": "com.thealgorithms.datastructures.trees.TrieTest.testInsertAndSearchPrefix()",
            "start_line": "61",
            "blame_result": "ce3459562 src/test/java/com/thealgorithms/datastructures/trees/TrieImpTest.java (Hardik Pawar 2024-10-05 15:17:52 +0530 62)         String prefix = \"pre\";\nce3459562 src/test/java/com/thealgorithms/datastructures/trees/TrieImpTest.java (Hardik Pawar 2024-10-05 15:17:52 +0530 63)         String word = \"prefix\";\nce3459562 src/test/java/com/thealgorithms/datastructures/trees/TrieImpTest.java (Hardik Pawar 2024-10-05 15:17:52 +0530 64)         trie.insert(prefix);\nce3459562 src/test/java/com/thealgorithms/datastructures/trees/TrieImpTest.java (Hardik Pawar 2024-10-05 15:17:52 +0530 65)         trie.insert(word);\nce3459562 src/test/java/com/thealgorithms/datastructures/trees/TrieImpTest.java (Hardik Pawar 2024-10-05 15:17:52 +0530 66) \n",
            "commit_hashes": {
                "ce3459562": "    Improve `TrieImp.java` comments & enhance readability (#5526)"
            },
            "Commit&issueIDs": {
                "ce3459562": [
                    "5526"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5526",
                "https://github.com/TheAlgorithms/Java/commit/ce3459562"
            ]
        },
        {
            "poj_link": "https://github.com/TheAlgorithms/Java/",
            "file_path": "TheAlgorithms/Java/src/test/java/com/thealgorithms/searches/BM25InvertedIndexTest.java",
            "test_name": "testCaseInsensitivity",
            "FQS": "com.thealgorithms.searches.BM25InvertedIndexTest.testCaseInsensitivity()",
            "start_line": "90",
            "blame_result": "732f7c845 (Prayas Kumar 2024-10-07 23:00:46 +0530 91)         List<SearchResult> resultsLowerCase = index.search(\"hope\");\n732f7c845 (Prayas Kumar 2024-10-07 23:00:46 +0530 92)         List<SearchResult> resultsUpperCase = index.search(\"HOPE\");\n732f7c845 (Prayas Kumar 2024-10-07 23:00:46 +0530 93)         assertEquals(resultsLowerCase, resultsUpperCase);\n732f7c845 (Prayas Kumar 2024-10-07 23:00:46 +0530 94)     }\n732f7c845 (Prayas Kumar 2024-10-07 23:00:46 +0530 95) }\n",
            "commit_hashes": {
                "732f7c845": "    Add BM25 Inverted Index Search Algorithm (#5615)"
            },
            "Commit&issueIDs": {
                "732f7c845": [
                    "5615"
                ]
            },
            "links": [
                "https://github.com/TheAlgorithms/Java/issues/5615",
                "https://github.com/TheAlgorithms/Java/commit/732f7c845"
            ]
        },
        {
            "poj_link": "https://github.com/apache/sedona/",
            "file_path": "apache/sedona/spark/common/src/test/java/org/apache/sedona/core/spatialPartitioning/quadtree/QuadTreeTest.java",
            "test_name": "testIntersectElementsAreInserted",
            "FQS": "org.apache.sedona.core.spatialPartitioning.quadtree.QuadTreeTest.testIntersectElementsAreInserted()",
            "start_line": "101",
            "blame_result": "b69bc21b1a (Kristin Cowalcijk 2024-06-12 12:19:52 +0800 102)     StandardQuadTree<QuadRectangle> quadTree =\nb69bc21b1a (Kristin Cowalcijk 2024-06-12 12:19:52 +0800 103)         new StandardQuadTree<>(new QuadRectangle(0, 0, 10, 10), 0, 1, 2);\n2490b86268 (John Bampton      2024-03-12 01:08:26 +1000 104) \nb69bc21b1a (Kristin Cowalcijk 2024-06-12 12:19:52 +0800 105)     QuadRectangle r1 = new QuadRectangle(1, 1, 1, 1);\nb69bc21b1a (Kristin Cowalcijk 2024-06-12 12:19:52 +0800 106)     QuadRectangle r2 = new QuadRectangle(2, 2, 1, 1);\n",
            "commit_hashes": {
                "b69bc21b1a": "    [SEDONA-102] Use spotless as Java and Scala code formatter (#1428)",
                "2490b86268": "    [SEDONA-513] Add pre-commit hook `mixed-line-ending` (#1274)"
            },
            "Commit&issueIDs": {
                "b69bc21b1a": [
                    "1428"
                ],
                "2490b86268": [
                    "1274"
                ]
            },
            "links": [
                "https://github.com/apache/sedona/issues/1428",
                "https://github.com/apache/sedona/commit/b69bc21b1a",
                "https://github.com/apache/sedona/issues/1274",
                "https://github.com/apache/sedona/commit/2490b86268"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/collision/broadphase/BroadphaseItemTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.collision.broadphase.BroadphaseItemTest.copy()",
            "start_line": "8",
            "blame_result": "e220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java             (mtsamis        2019-12-23 17:49:23 +0200  9)  *     and the following disclaimer.\ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java             (mtsamis        2019-12-23 17:49:23 +0200 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java             (mtsamis        2019-12-23 17:49:23 +0200 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java             (mtsamis        2019-12-23 17:49:23 +0200 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/collision/broadphase/BroadphaseItemTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "e220841d": "    Robust hull algorithms (#97)",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "e220841d": [
                    "(#97)"
                ],
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/97",
                "https://github.com/dyn4j/dyn4j/commit/e220841d",
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/collision/broadphase/CollisionItemBroadphasePairTest.java",
            "test_name": "hashcodeEquals",
            "FQS": "org.dyn4j.collision.broadphase.CollisionItemBroadphasePairTest.hashcodeEquals()",
            "start_line": "68",
            "blame_result": "4fdc119a src/test/java/org/dyn4j/collision/broadphase/BroadphasePairTest.java (William Bittle 2020-08-29 20:14:14 -0400 69) \t\tTestCollisionBody body1 = new TestCollisionBody();\n4fdc119a src/test/java/org/dyn4j/collision/broadphase/BroadphasePairTest.java (William Bittle 2020-08-29 20:14:14 -0400 70) \t\tFixture fixture1 = new Fixture(Geometry.createCircle(0.5));\n4fdc119a src/test/java/org/dyn4j/collision/broadphase/BroadphasePairTest.java (William Bittle 2020-08-29 20:14:14 -0400 71) \t\tTestCollisionBody body2 = new TestCollisionBody();\n4fdc119a src/test/java/org/dyn4j/collision/broadphase/BroadphasePairTest.java (William Bittle 2020-08-29 20:14:14 -0400 72) \t\tFixture fixture2 = new Fixture(Geometry.createCircle(0.5));\n4fdc119a src/test/java/org/dyn4j/collision/broadphase/BroadphasePairTest.java (William Bittle 2020-08-29 20:14:14 -0400 73) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/collision/broadphase/CollisionItemBroadphasePairTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.collision.broadphase.CollisionItemBroadphasePairTest.copy()",
            "start_line": "8",
            "blame_result": "e220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java             (mtsamis        2019-12-23 17:49:23 +0200  9)  *     and the following disclaimer.\ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java             (mtsamis        2019-12-23 17:49:23 +0200 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java             (mtsamis        2019-12-23 17:49:23 +0200 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java             (mtsamis        2019-12-23 17:49:23 +0200 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/collision/broadphase/BroadphasePairTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "e220841d": "    Robust hull algorithms (#97)",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "e220841d": [
                    "(#97)"
                ],
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/97",
                "https://github.com/dyn4j/dyn4j/commit/e220841d",
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/collision/continuous/TimeOfImpactTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.collision.continuous.TimeOfImpactTest.copy()",
            "start_line": "8",
            "blame_result": "e220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200  9)  *     and the following disclaimer.\ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/world/result/DetectResultTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "e220841d": "    Robust hull algorithms (#97)",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "e220841d": [
                    "(#97)"
                ],
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/97",
                "https://github.com/dyn4j/dyn4j/commit/e220841d",
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/collision/manifold/IndexedManifoldPointIdTest.java",
            "test_name": "hashcode",
            "FQS": "org.dyn4j.collision.manifold.IndexedManifoldPointIdTest.hashcode()",
            "start_line": "107",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 108) \t\tIndexedManifoldPointId id1 = new IndexedManifoldPointId(0, 1, 0);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 109) \t\tIndexedManifoldPointId id2 = new IndexedManifoldPointId(0, 1, 0);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 110) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 111) \t\tTestCase.assertEquals(id1.hashCode(), id2.hashCode());\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 112) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/AbstractPhysicsBodyTest.java",
            "test_name": "applyImpulse",
            "FQS": "org.dyn4j.dynamics.AbstractPhysicsBodyTest.applyImpulse()",
            "start_line": "261",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 262) \t */\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 263) \t@Test\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 264) \tpublic void applyImpulse() {\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 265) \t\tTestBody b = new TestBody();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 266) \t\tb.addFixture(Geometry.createRectangle(1.0, 1.0));\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/AbstractPhysicsBodyTest.java",
            "test_name": "integrateVelocity",
            "FQS": "org.dyn4j.dynamics.AbstractPhysicsBodyTest.integrateVelocity()",
            "start_line": "911",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 912) \t */\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 913) \t@Test\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 914) \tpublic void integrateVelocity() {\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 915) \t\tTestBody b = new TestBody();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 916) \t\tb.addFixture(Geometry.createCircle(0.5));\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/AbstractPhysicsBodyTest.java",
            "test_name": "integratePosition",
            "FQS": "org.dyn4j.dynamics.AbstractPhysicsBodyTest.integratePosition()",
            "start_line": "960",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 961) \t\tTestBody b = new TestBody();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 962) \t\tb.addFixture(Geometry.createCircle(0.5));\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 963) \t\tb.setMass(MassType.NORMAL);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 964) \t\tb.setLinearVelocity(new Vector2(0.0, -2.0));\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 965) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/SettingsTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.dynamics.SettingsTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java         (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java         (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java         (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java         (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/dynamics/SettingsTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/AngleJointTest.java",
            "test_name": "shift",
            "FQS": "org.dyn4j.dynamics.joint.AngleJointTest.shift()",
            "start_line": "629",
            "blame_result": "0c61f578 (William Bittle 2021-05-13 00:38:01 -0400 630) \t */\n0c61f578 (William Bittle 2021-05-13 00:38:01 -0400 631) \t@Test\n0c61f578 (William Bittle 2021-05-13 00:38:01 -0400 632) \tpublic void shift() {\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 633) \t\tAngleJoint<Body> aj = new AngleJoint<Body>(b1, b2);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 634) \t\t\n",
            "commit_hashes": {
                "0c61f578": "    151 combine distance and rope joints (#199)",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "0c61f578": [
                    "(#199)"
                ],
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/199",
                "https://github.com/dyn4j/dyn4j/commit/0c61f578",
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/AngleJointTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.dynamics.joint.AngleJointTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                 (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                 (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                 (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                 (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/dynamics/joint/AngleJointTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/DistanceJointTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.dynamics.joint.DistanceJointTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/dynamics/joint/DistanceJointTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/FrictionJointTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.dynamics.joint.FrictionJointTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/dynamics/joint/FrictionJointTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/MotorJointTest.java",
            "test_name": "setLinearTargetSleep",
            "FQS": "org.dyn4j.dynamics.joint.MotorJointTest.setLinearTargetSleep()",
            "start_line": "182",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 183) \t\tMotorJoint<Body> mj = new MotorJoint<Body>(b1, b2);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 184) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 185) \t\tVector2 defaultLinearTarget = mj.getLinearTarget();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 186) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 187) \t\tTestCase.assertFalse(b1.isAtRest());\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/MotorJointTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.dynamics.joint.MotorJointTest.copy()",
            "start_line": "8",
            "blame_result": "e220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200  9)  *     and the following disclaimer.\ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/dynamics/joint/MotorJointTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "e220841d": "    Robust hull algorithms (#97)",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "e220841d": [
                    "97"
                ],
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/97",
                "https://github.com/dyn4j/dyn4j/commit/e220841d",
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/molgenis/molgenis/",
            "file_path": "molgenis/molgenis/molgenis-data/src/test/java/org/molgenis/data/FetchTest.java",
            "test_name": "equalsFalse",
            "FQS": "org.molgenis.data.FetchTest.equalsFalse()",
            "start_line": "21",
            "blame_result": "c7d00f9ad61 (Dennis Hendriksen 2019-09-23 08:07:12 +0200 22)     assertNotEquals(new Fetch().field(\"field0\"), new Fetch().field(\"field1\"));\n46e5cf25534 (Fleur Kelpin      2018-09-03 21:32:18 +0200 23)   }\n01dfdf6d3bb (dennishendriksen  2015-11-06 13:31:07 +0100 24) \n46e5cf25534 (Fleur Kelpin      2018-09-03 21:32:18 +0200 25)   @Test\n81ea5185b2f (Dennis Hendriksen 2019-09-17 16:12:25 +0200 26)   void equalsSubFetchTrue() {\n",
            "commit_hashes": {
                "c7d00f9ad61": "    Fix squid:S3415 Assertion arguments should be passed in the correct order (#8669)",
                "46e5cf25534": "    style: Format source code using mvn fmt:format",
                "01dfdf6d3bb": "    Introduce Fetch",
                "81ea5185b2f": "    M6291 Replace TestNG with JUnit 5 (#8627)"
            },
            "Commit&issueIDs": {
                "c7d00f9ad61": [
                    "8669"
                ],
                "81ea5185b2f": [
                    "8627"
                ]
            },
            "links": [
                "https://github.com/molgenis/molgenis/issues/8669",
                "https://github.com/molgenis/molgenis/commit/c7d00f9ad61",
                "https://github.com/molgenis/molgenis/issues/8627",
                "https://github.com/molgenis/molgenis/commit/81ea5185b2f"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/PinJointTest.java",
            "test_name": "setTargetSleep",
            "FQS": "org.dyn4j.dynamics.joint.PinJointTest.setTargetSleep()",
            "start_line": "478",
            "blame_result": "5ad72147 (William Bittle 2022-12-23 23:37:12 -0500 479) \t\tPinJoint<Body> pj = new PinJoint<Body>(b1, new Vector2());\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 480) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 481) \t\tVector2 defaultTarget = pj.getTarget();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 482) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 483) \t\tTestCase.assertFalse(b1.isAtRest());\n",
            "commit_hashes": {
                "5ad72147": "    Version 5 - Joint package restructure (#260)",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "5ad72147": [
                    "(#260)"
                ],
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/260",
                "https://github.com/dyn4j/dyn4j/commit/5ad72147",
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/algesten/jsondiff/",
            "file_path": "algesten/jsondiff/src/test/java/foodev/jsondiff/JsonDiffTestMethods.java",
            "test_name": "testArrayObjectsChangeField",
            "FQS": "foodev.jsondiff.JsonDiffTestMethods.testArrayObjectsChangeField()",
            "start_line": "573",
            "blame_result": "a94499d8 src/test/java/foodev/jsondiff/JsonDiffTest.java                        (Dan Everton      2011-11-28 15:37:22 +1000 574)         String from = \"{\\\"a\\\":[{\\\"c\\\":2,\\\"d\\\":3},{\\\"c\\\":2,\\\"d\\\":3},{\\\"c\\\":2,\\\"d\\\":3},{\\\"c\\\":2,\\\"d\\\":3}]}\";\na94499d8 src/test/java/foodev/jsondiff/JsonDiffTest.java                        (Dan Everton      2011-11-28 15:37:22 +1000 575)         String to = \"{\\\"a\\\":[{\\\"c\\\":2,\\\"d\\\":4},{\\\"c\\\":2,\\\"d\\\":5},{\\\"c\\\":2,\\\"d\\\":3},{\\\"c\\\":2,\\\"d\\\":6}]}\";\n21d38f3f jsondiff-common/src/test/java/foodev/jsondiff/JsonDiffTestMethods.java (ignacio.gonzalez 2013-11-23 20:17:17 +0100 576)         String diff = \"{\\\"a\\\":{\\\"~0\\\":[{\\\"d\\\":4}],\\\"~1\\\":[{\\\"d\\\":5}],\\\"~3\\\":[{\\\"d\\\":6}]}}\";\n21d38f3f jsondiff-common/src/test/java/foodev/jsondiff/JsonDiffTestMethods.java (ignacio.gonzalez 2013-11-23 20:17:17 +0100 577) \n21d38f3f jsondiff-common/src/test/java/foodev/jsondiff/JsonDiffTestMethods.java (ignacio.gonzalez 2013-11-23 20:17:17 +0100 578)         String d = diff(from, to);\n",
            "commit_hashes": {
                "a94499d8": "    Add test case for issue #2",
                "21d38f3f": "    2.0 branch"
            },
            "Commit&issueIDs": {
                "a94499d8": [
                    "#2"
                ]
            },
            "links": [
                "https://github.com/algesten/jsondiff/issues/2",
                "https://github.com/algesten/jsondiff/commit/a94499d8"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/PinJointTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.dynamics.joint.PinJointTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java               (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java               (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java               (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java               (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/dynamics/joint/PinJointTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/algesten/jsondiff/",
            "file_path": "algesten/jsondiff/src/test/java/foodev/jsondiff/JsonDiffTestMethods.java",
            "test_name": "testArrayObjectsRemoveAfterMultipleAdd",
            "FQS": "foodev.jsondiff.JsonDiffTestMethods.testArrayObjectsRemoveAfterMultipleAdd()",
            "start_line": "605",
            "blame_result": "5c87ec98 src/test/java/foodev/jsondiff/JsonDiffTest.java                        (Martin Algesten  2011-12-01 08:51:05 +0100 606) \na892f79d src/test/java/foodev/jsondiff/JsonDiffTest.java                        (Martin Algesten  2011-12-13 09:06:21 +0100 607)         String from = \"{a:[{c:0},{c:1},{c:2},{c:3},{c:4}]}\";\n64af168e src/test/java/foodev/jsondiff/JsonDiffTest.java                        (Martin Algesten  2011-12-02 15:11:36 +0100 608)         String to = \"{\\\"a\\\":[{\\\"e\\\":0},{\\\"c\\\":0},{\\\"c\\\":2},{\\\"e\\\":2},{\\\"c\\\":3,\\\"d\\\":3},{\\\"e\\\":3}]}\";\n21d38f3f jsondiff-common/src/test/java/foodev/jsondiff/JsonDiffTestMethods.java (ignacio.gonzalez 2013-11-23 20:17:17 +0100 609)         String diff = \"{\\\"~a\\\":[{\\\"+1\\\":{\\\"c\\\":0}},{\\\"-3\\\":0},{\\\"+4\\\":{\\\"c\\\":3,\\\"d\\\":3}}],\\\"a\\\":{\\\"~0\\\":[{\\\"+e\\\":0},{\\\"-c\\\":0}],\\\"~1\\\":[{\\\"c\\\":2}],\\\"~3\\\":[{\\\"+e\\\":2},{\\\"-c\\\":0}],\\\"~4\\\":[{\\\"+e\\\":3},{\\\"-c\\\":0}]}}\";\n21d38f3f jsondiff-common/src/test/java/foodev/jsondiff/JsonDiffTestMethods.java (ignacio.gonzalez 2013-11-23 20:17:17 +0100 610) \n",
            "commit_hashes": {
                "5c87ec98": "    Made test that fails due to array index position confusion",
                "a892f79d": "    Added test case for broken array mutation boundaries found in Issue #9",
                "64af168e": "    Added ArrNode prevDeletes/prevInserts to correctly adjust array indexes.",
                "21d38f3f": "    2.0 branch"
            },
            "Commit&issueIDs": {
                "a892f79d": [
                    "#9"
                ]
            },
            "links": [
                "https://github.com/algesten/jsondiff/issues/9",
                "https://github.com/algesten/jsondiff/commit/a892f79d"
            ]
        },
        {
            "poj_link": "https://github.com/algesten/jsondiff/",
            "file_path": "algesten/jsondiff/src/test/java/foodev/jsondiff/JsonDiffTestMethods.java",
            "test_name": "testEndlessLoopInCompareArrays",
            "FQS": "foodev.jsondiff.JsonDiffTestMethods.testEndlessLoopInCompareArrays()",
            "start_line": "638",
            "blame_result": "0f20976f src/test/java/foodev/jsondiff/JsonDiffTest.java                        (Martin Algesten  2011-12-11 03:07:53 +0100 639) \na892f79d src/test/java/foodev/jsondiff/JsonDiffTest.java                        (Martin Algesten  2011-12-13 09:06:21 +0100 640)         String from = \"{\\\"offset\\\":\\\"PT0S\\\",\\\"reference\\\":\\\"Today\\\",\\\"referenceTimeList\\\":[{\\\"name\\\":\\\"Yesterday\\\",\\\"start\\\":\\\"Unknown\\\"},{\\\"name\\\":\\\"Today\\\",\\\"offset\\\":\\\"P1D\\\",\\\"reference\\\":\\\"Yesterday\\\"}]}\";\n0f20976f src/test/java/foodev/jsondiff/JsonDiffTest.java                        (Martin Algesten  2011-12-11 03:07:53 +0100 641)         String to = \"{\\\"offset\\\":\\\"PT0S\\\",\\\"reference\\\":\\\"Today\\\",\\\"referenceTimeList\\\":[{\\\"name\\\":\\\"Today\\\",\\\"start\\\":\\\"2010-10-11T17:51:52.204Z\\\"}]}\";\n0f20976f src/test/java/foodev/jsondiff/JsonDiffTest.java                        (Martin Algesten  2011-12-11 03:07:53 +0100 642) \n21d38f3f jsondiff-common/src/test/java/foodev/jsondiff/JsonDiffTestMethods.java (ignacio.gonzalez 2013-11-23 20:17:17 +0100 643)         String d = diff(from, to);\n",
            "commit_hashes": {
                "0f20976f": "    Added test case for potential issue #7",
                "a892f79d": "    Added test case for broken array mutation boundaries found in Issue #9",
                "21d38f3f": "    2.0 branch"
            },
            "Commit&issueIDs": {
                "0f20976f": [
                    "#7"
                ],
                "a892f79d": [
                    "#9"
                ]
            },
            "links": [
                "https://github.com/algesten/jsondiff/issues/7",
                "https://github.com/algesten/jsondiff/commit/0f20976f",
                "https://github.com/algesten/jsondiff/issues/9",
                "https://github.com/algesten/jsondiff/commit/a892f79d"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/PrismaticJointTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.dynamics.joint.PrismaticJointTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                     (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                     (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                     (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                     (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/dynamics/joint/PrismaticJointTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/RtBranchTest.java",
            "test_name": "fetchesRepo",
            "FQS": "com.jcabi.github.RtBranchTest.fetchesRepo()",
            "start_line": "92",
            "blame_result": "0863491b6e (Chris Rebert 2015-06-01 13:52:10 -0700 93)         final Repo repo = new MkGithub().randomRepo();\n0863491b6e (Chris Rebert 2015-06-01 13:52:10 -0700 94)         final Coordinates coords = RtBranchTest.newBranch(repo)\ne1f9f53f98 (Chris Rebert 2015-05-25 02:19:53 -0700 95)             .repo().coordinates();\ne1f9f53f98 (Chris Rebert 2015-05-25 02:19:53 -0700 96)         MatcherAssert.assertThat(\n0863491b6e (Chris Rebert 2015-06-01 13:52:10 -0700 97)             coords.user(),\n",
            "commit_hashes": {
                "0863491b6e": "    Use MkGithub.randomRepo() for creating test mock repos",
                "e1f9f53f98": "    Implement \"List Branches\" API; fixes #1084"
            },
            "Commit&issueIDs": {
                "e1f9f53f98": [
                    "#1084"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/1084",
                "https://github.com/jcabi/jcabi-github/commit/e1f9f53f98"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/RtBranchesTest.java",
            "test_name": "fetchesRepo",
            "FQS": "com.jcabi.github.RtBranchesTest.fetchesRepo()",
            "start_line": "159",
            "blame_result": "0863491b6e (Chris Rebert 2015-06-01 13:52:10 -0700 160)         final Repo repo = new MkGithub().randomRepo();\ne1f9f53f98 (Chris Rebert 2015-05-25 02:19:53 -0700 161)         final RtBranches branch = new RtBranches(new FakeRequest(), repo);\ne1f9f53f98 (Chris Rebert 2015-05-25 02:19:53 -0700 162)         final Coordinates coords = branch.repo().coordinates();\ne1f9f53f98 (Chris Rebert 2015-05-25 02:19:53 -0700 163)         MatcherAssert.assertThat(\n0863491b6e (Chris Rebert 2015-06-01 13:52:10 -0700 164)             coords.user(),\n",
            "commit_hashes": {
                "0863491b6e": "    Use MkGithub.randomRepo() for creating test mock repos",
                "e1f9f53f98": "    Implement \"List Branches\" API; fixes #1084"
            },
            "Commit&issueIDs": {
                "e1f9f53f98": [
                    "#1084"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/1084",
                "https://github.com/jcabi/jcabi-github/commit/e1f9f53f98"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/RtContentsITCase.java",
            "test_name": "getContent",
            "FQS": "com.jcabi.github.RtContentsITCase.getContent()",
            "start_line": "231",
            "blame_result": "5f213dfc19 (Yegor Bugayenko 2022-07-07 07:12:15 +0300 232)         final Repos repos = new GithubIT().connect().repos();\nc313807d1a (aistomin        2014-06-12 17:10:57 +0300 233)         final Repo repo = this.rule.repo(repos);\nb60327773b (Carlos Miranda  2014-03-20 06:15:20 +0800 234)         try {\nb60327773b (Carlos Miranda  2014-03-20 06:15:20 +0800 235)             final String path = RandomStringUtils.randomAlphanumeric(Tv.TEN);\nb60327773b (Carlos Miranda  2014-03-20 06:15:20 +0800 236)             final String message = String.format(\"testMessage\");\n",
            "commit_hashes": {
                "5f213dfc19": "    #1544 it tests fixed",
                "c313807d1a": "    Issue-791. RepoRule applied to the test were we create real repo.",
                "b60327773b": "    Issue #665 RtContentsITCase works under new random repo"
            },
            "Commit&issueIDs": {
                "5f213dfc19": [
                    "#1544"
                ],
                "b60327773b": [
                    "#665"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/1544",
                "https://github.com/jcabi/jcabi-github/commit/5f213dfc19",
                "https://github.com/jcabi/jcabi-github/issues/665",
                "https://github.com/jcabi/jcabi-github/commit/b60327773b"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/RtDeployKeysITCase.java",
            "test_name": "canFetchAllDeployKeys",
            "FQS": "com.jcabi.github.RtDeployKeysITCase.canFetchAllDeployKeys()",
            "start_line": "87",
            "blame_result": "6346e07b50 (Giang Le       2014-07-14 13:21:48 +0700 88)         final DeployKeys keys = repo.keys();\nbb3ce35588 (Carlos Miranda 2014-02-20 08:56:01 +0800 89)         final String title = \"Test Iterate Key\";\n41071d3114 (Carlos Miranda 2014-03-03 08:56:16 +0800 90)         final DeployKey key = keys.create(title, key());\nbb3ce35588 (Carlos Miranda 2014-02-20 08:56:01 +0800 91)         try {\nbb3ce35588 (Carlos Miranda 2014-02-20 08:56:01 +0800 92)             MatcherAssert.assertThat(\n",
            "commit_hashes": {
                "6346e07b50": "     Provided repo vs. Generated repo #808",
                "bb3ce35588": "    Issue #224 Implemented RtDeployKeysITCase",
                "41071d3114": "    Issue #607 Now using random keys in RtDeployKeysITCase"
            },
            "Commit&issueIDs": {
                "6346e07b50": [
                    "#808"
                ],
                "bb3ce35588": [
                    "#224"
                ],
                "41071d3114": [
                    "#607"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/808",
                "https://github.com/jcabi/jcabi-github/commit/6346e07b50",
                "https://github.com/jcabi/jcabi-github/issues/224",
                "https://github.com/jcabi/jcabi-github/commit/bb3ce35588",
                "https://github.com/jcabi/jcabi-github/issues/607",
                "https://github.com/jcabi/jcabi-github/commit/41071d3114"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/RtGistCommentsITCase.java",
            "test_name": "getComment",
            "FQS": "com.jcabi.github.RtGistCommentsITCase.getComment()",
            "start_line": "69",
            "blame_result": "a7bf534f53 (Paul Polishchuk 2014-01-25 00:42:17 +0200 70)         final Gist gist = RtGistCommentsITCase.gist();\n72588a1472 (lthuangiang     2014-01-16 07:04:43 +0700 71)         final GistComments comments = gist.comments();\n908c1f216e (lthuangiang     2014-01-15 23:37:38 +0700 72)         final GistComment comment = comments.post(\"test comment\");\n908c1f216e (lthuangiang     2014-01-15 23:37:38 +0700 73)         MatcherAssert.assertThat(\n908c1f216e (lthuangiang     2014-01-15 23:37:38 +0700 74)             comments.get(comment.number()),\n",
            "commit_hashes": {
                "a7bf534f53": "    Issue #310 Gists.remove() now accepts identifier, not a name",
                "72588a1472": "    issue #233 - fixed",
                "908c1f216e": "    Issue #233 RtGistCommentsITCase.java:38-40: Integration tests for RtGistComments was implemented"
            },
            "Commit&issueIDs": {
                "a7bf534f53": [
                    "#310"
                ],
                "72588a1472": [
                    "#233"
                ],
                "908c1f216e": [
                    "#233"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/310",
                "https://github.com/jcabi/jcabi-github/commit/a7bf534f53",
                "https://github.com/jcabi/jcabi-github/issues/233",
                "https://github.com/jcabi/jcabi-github/commit/72588a1472",
                "https://github.com/jcabi/jcabi-github/issues/233",
                "https://github.com/jcabi/jcabi-github/commit/908c1f216e"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/RtGistCommentsITCase.java",
            "test_name": "iterateComments",
            "FQS": "com.jcabi.github.RtGistCommentsITCase.iterateComments()",
            "start_line": "86",
            "blame_result": "a7bf534f53 (Paul Polishchuk 2014-01-25 00:42:17 +0200 87)         final Gist gist = RtGistCommentsITCase.gist();\n72588a1472 (lthuangiang     2014-01-16 07:04:43 +0700 88)         final GistComments comments = gist.comments();\n908c1f216e (lthuangiang     2014-01-15 23:37:38 +0700 89)         final GistComment comment = comments.post(\"comment\");\n908c1f216e (lthuangiang     2014-01-15 23:37:38 +0700 90)         MatcherAssert.assertThat(\n908c1f216e (lthuangiang     2014-01-15 23:37:38 +0700 91)             comments.iterate(),\n",
            "commit_hashes": {
                "a7bf534f53": "    Issue #310 Gists.remove() now accepts identifier, not a name",
                "72588a1472": "    issue #233 - fixed",
                "908c1f216e": "    Issue #233 RtGistCommentsITCase.java:38-40: Integration tests for RtGistComments was implemented"
            },
            "Commit&issueIDs": {
                "a7bf534f53": [
                    "#310"
                ],
                "72588a1472": [
                    "#233"
                ],
                "908c1f216e": [
                    "#233"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/310",
                "https://github.com/jcabi/jcabi-github/commit/a7bf534f53",
                "https://github.com/jcabi/jcabi-github/issues/233",
                "https://github.com/jcabi/jcabi-github/commit/72588a1472",
                "https://github.com/jcabi/jcabi-github/issues/233",
                "https://github.com/jcabi/jcabi-github/commit/908c1f216e"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/RtGistsITCase.java",
            "test_name": "iterateGists",
            "FQS": "com.jcabi.github.RtGistsITCase.iterateGists()",
            "start_line": "70",
            "blame_result": "a7bf534f53 (Paul Polishchuk 2014-01-25 00:42:17 +0200 71)         final Gists gists = RtGistsITCase.gists();\n05174922a1 (amihaiemil      2014-01-06 01:03:55 +0200 72)         final Gist gist = gists.create(\na4bbfab0a8 (aistomin        2014-03-22 12:21:34 +0300 73)             Collections.singletonMap(\"test.txt\", \"content\"), false\n05174922a1 (amihaiemil      2014-01-06 01:03:55 +0200 74)         );\n5476735e62 (amihaiemil      2014-01-04 14:14:49 +0200 75)         MatcherAssert.assertThat(\n",
            "commit_hashes": {
                "a7bf534f53": "    Issue #310 Gists.remove() now accepts identifier, not a name",
                "05174922a1": "    #20 fixes",
                "a4bbfab0a8": "    Issue 645. Gists.create doesn't allow specifying visibility bug fixed.",
                "5476735e62": "    #20 Added remove() method to Gists"
            },
            "Commit&issueIDs": {
                "a7bf534f53": [
                    "#310"
                ],
                "05174922a1": [
                    "#20"
                ],
                "5476735e62": [
                    "#20"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/310",
                "https://github.com/jcabi/jcabi-github/commit/a7bf534f53",
                "https://github.com/jcabi/jcabi-github/issues/20",
                "https://github.com/jcabi/jcabi-github/commit/05174922a1",
                "https://github.com/jcabi/jcabi-github/issues/20",
                "https://github.com/jcabi/jcabi-github/commit/5476735e62"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/RtGistsITCase.java",
            "test_name": "singleGist",
            "FQS": "com.jcabi.github.RtGistsITCase.singleGist()",
            "start_line": "86",
            "blame_result": "ea9083c677 (lthuangiang     2014-01-14 07:24:10 +0700 87)         final String filename = \"single-name.txt\";\na7bf534f53 (Paul Polishchuk 2014-01-25 00:42:17 +0200 88)         final Gists gists = RtGistsITCase.gists();\n05174922a1 (amihaiemil      2014-01-06 01:03:55 +0200 89)         final Gist gist = gists.create(\na4bbfab0a8 (aistomin        2014-03-22 12:21:34 +0300 90)             Collections.singletonMap(filename, \"body\"), false\nea9083c677 (lthuangiang     2014-01-14 07:24:10 +0700 91)         );\n",
            "commit_hashes": {
                "ea9083c677": "    Issue #90 - RtGists.java:53-54: An integration test was implemented",
                "a7bf534f53": "    Issue #310 Gists.remove() now accepts identifier, not a name",
                "05174922a1": "    #20 fixes",
                "a4bbfab0a8": "    Issue 645. Gists.create doesn't allow specifying visibility bug fixed."
            },
            "Commit&issueIDs": {
                "ea9083c677": [
                    "#90"
                ],
                "a7bf534f53": [
                    "#310"
                ],
                "05174922a1": [
                    "#20"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/90",
                "https://github.com/jcabi/jcabi-github/commit/ea9083c677",
                "https://github.com/jcabi/jcabi-github/issues/310",
                "https://github.com/jcabi/jcabi-github/commit/a7bf534f53",
                "https://github.com/jcabi/jcabi-github/issues/20",
                "https://github.com/jcabi/jcabi-github/commit/05174922a1"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/mock/MkBranchTest.java",
            "test_name": "fetchesRepo",
            "FQS": "com.jcabi.github.mock.MkBranchTest.fetchesRepo()",
            "start_line": "80",
            "blame_result": "0863491b6e (Chris Rebert 2015-06-01 13:52:10 -0700 81)         final Repo repo = new MkGithub().randomRepo();\n0863491b6e (Chris Rebert 2015-06-01 13:52:10 -0700 82)         final Coordinates coords = MkBranchTest.branches(repo)\ne1f9f53f98 (Chris Rebert 2015-05-25 02:19:53 -0700 83)             .create(\"test\", \"sha\")\ne1f9f53f98 (Chris Rebert 2015-05-25 02:19:53 -0700 84)             .repo().coordinates();\ne1f9f53f98 (Chris Rebert 2015-05-25 02:19:53 -0700 85)         MatcherAssert.assertThat(\n",
            "commit_hashes": {
                "0863491b6e": "    Use MkGithub.randomRepo() for creating test mock repos",
                "e1f9f53f98": "    Implement \"List Branches\" API; fixes #1084"
            },
            "Commit&issueIDs": {
                "e1f9f53f98": [
                    "#1084"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/1084",
                "https://github.com/jcabi/jcabi-github/commit/e1f9f53f98"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/mock/MkGistTest.java",
            "test_name": "fork",
            "FQS": "com.jcabi.github.mock.MkGistTest.fork()",
            "start_line": "63",
            "blame_result": "9bc3955c5a (Alexander Sinyagin 2014-01-05 22:29:01 +0600 64)      * @throws IOException If some problem inside\nfb1839557a (Alexander Sinyagin 2014-01-05 21:36:37 +0600 65)      */\nfb1839557a (Alexander Sinyagin 2014-01-05 21:36:37 +0600 66)     @Test\nb7923c9cf1 (Alexander Sinyagin 2014-01-06 11:57:55 +0600 67)     public void fork() throws IOException {\n9bc3955c5a (Alexander Sinyagin 2014-01-05 22:29:01 +0600 68)         final String filename = \"file.txt\";\n",
            "commit_hashes": {
                "9bc3955c5a": "    Code style fixes",
                "fb1839557a": "    Red tests for issue #131",
                "b7923c9cf1": "    Issue #21: Gist forking"
            },
            "Commit&issueIDs": {
                "fb1839557a": [
                    "#131"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/131",
                "https://github.com/jcabi/jcabi-github/commit/fb1839557a"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/mock/MkGithubTest.java",
            "test_name": "worksWithMockedData",
            "FQS": "com.jcabi.github.mock.MkGithubTest.worksWithMockedData()",
            "start_line": "73",
            "blame_result": "944cdc3d9b src/test/java/com/jcabi/github/mock/MkGithubTest.java (Chris Rebert    2015-05-27 01:18:12 -0700 74)         final Repo repo = new MkGithub().repos().create(NEW_REPO_SETTINGS);\n8444d9e2f9 src/test/java/com/jcabi/github/GithubTest.java        (Yegor Bugayenko 2013-11-08 13:44:11 +0100 75)         final Issue issue = repo.issues().create(\"hey\", \"how are you?\");\n8444d9e2f9 src/test/java/com/jcabi/github/GithubTest.java        (Yegor Bugayenko 2013-11-08 13:44:11 +0100 76)         final Comment comment = issue.comments().post(\"hey, works?\");\n8444d9e2f9 src/test/java/com/jcabi/github/GithubTest.java        (Yegor Bugayenko 2013-11-08 13:44:11 +0100 77)         MatcherAssert.assertThat(\n3a592e45a5 src/test/java/com/jcabi/github/GithubTest.java        (Yegor Bugayenko 2013-11-18 20:41:12 +0100 78)             new Comment.Smart(comment).body(),\n",
            "commit_hashes": {
                "944cdc3d9b": "    Make Repo.create() use RepoCreate class; fixes #1094",
                "8444d9e2f9": "    mocks",
                "3a592e45a5": "    Tool renamed to Smart"
            },
            "Commit&issueIDs": {
                "944cdc3d9b": [
                    "#1094"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/1094",
                "https://github.com/jcabi/jcabi-github/commit/944cdc3d9b"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/mock/MkGithubTest.java",
            "test_name": "canCreateRandomRepo",
            "FQS": "com.jcabi.github.mock.MkGithubTest.canCreateRandomRepo()",
            "start_line": "145",
            "blame_result": "8a3f1f775e src/test/java/com/jcabi/github/mock/MkGithubTest.java (Giang Le        2013-12-26 13:16:40 +0700 146)         final MkGithub github = new MkGithub();\n8243d003ef src/test/java/com/jcabi/github/mock/MkGithubTest.java (Gena Svarovski  2014-07-16 23:41:25 +0700 147)         final Repo repo = github.randomRepo();\n8444d9e2f9 src/test/java/com/jcabi/github/GithubTest.java        (Yegor Bugayenko 2013-11-08 13:44:11 +0100 148)         MatcherAssert.assertThat(\nae20812313 src/test/java/com/jcabi/github/mock/MkGithubTest.java (Yegor Bugayenko 2014-08-01 09:06:07 +0200 149)             github.repos().get(repo.coordinates()).coordinates(),\nae20812313 src/test/java/com/jcabi/github/mock/MkGithubTest.java (Yegor Bugayenko 2014-08-01 09:06:07 +0200 150)             Matchers.equalTo(repo.coordinates())\n",
            "commit_hashes": {
                "8a3f1f775e": "    Issue #30 added new method MkGithub#relogin(String)",
                "8243d003ef": "    added MkGithub.randomRepo with test",
                "8444d9e2f9": "    mocks",
                "ae20812313": "    #888 reproduced"
            },
            "Commit&issueIDs": {
                "8a3f1f775e": [
                    "#30"
                ],
                "ae20812313": [
                    "#888"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/30",
                "https://github.com/jcabi/jcabi-github/commit/8a3f1f775e",
                "https://github.com/jcabi/jcabi-github/issues/888",
                "https://github.com/jcabi/jcabi-github/commit/ae20812313"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/mock/MkHooksTest.java",
            "test_name": "canCreateHook",
            "FQS": "com.jcabi.github.mock.MkHooksTest.canCreateHook()",
            "start_line": "140",
            "blame_result": "5e0dc62a76 (Chris Rebert       2015-06-05 13:33:13 -0700 141)         final Hooks hooks = MkHooksTest.newHooks();\ne9c62ed18f (Alexander Sinyagin 2014-01-30 14:37:32 +0600 142)         final Hook hook = hooks.create(\n5e0dc62a76 (Chris Rebert       2015-06-05 13:33:13 -0700 143)             HOOK_TYPE,\nec8eada624 (Chris Rebert       2015-06-02 22:55:55 -0700 144)             Collections.<String, String>emptyMap(),\nb61b7b09c6 (George Aristy      2018-09-20 16:35:06 -0400 145)             Collections.<Event>emptyList(),\n",
            "commit_hashes": {
                "5e0dc62a76": "    extract HOOK_TYPE const and repo()=>newHooks()",
                "e9c62ed18f": "    Issue #266: Added tests for MkHooks.create(), MkHooks.get(), and MkHooks.iterate()",
                "ec8eada624": "    Use fake webhook instead of geocommit for Hook tests; fixes #1104",
                "b61b7b09c6": "    (#1435) Added support for \"events\" in Hooks.create()"
            },
            "Commit&issueIDs": {
                "ec8eada624": [
                    "#1104"
                ],
                "b61b7b09c6": [
                    "(#1435)"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/1104",
                "https://github.com/jcabi/jcabi-github/commit/ec8eada624",
                "https://github.com/jcabi/jcabi-github/issues/1435",
                "https://github.com/jcabi/jcabi-github/commit/b61b7b09c6"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/mock/MkPublicMembersTest.java",
            "test_name": "fetchesOrg",
            "FQS": "com.jcabi.github.mock.MkPublicMembersTest.fetchesOrg()",
            "start_line": "54",
            "blame_result": "9b3a2439ae (Chris Rebert 2015-06-02 01:00:52 -0700 55)         final Organization org = organization();\n9b3a2439ae (Chris Rebert 2015-06-02 01:00:52 -0700 56)         MatcherAssert.assertThat(\n9b3a2439ae (Chris Rebert 2015-06-02 01:00:52 -0700 57)             org.publicMembers().org().login(),\n9b3a2439ae (Chris Rebert 2015-06-02 01:00:52 -0700 58)             Matchers.equalTo(org.login())\n9b3a2439ae (Chris Rebert 2015-06-02 01:00:52 -0700 59)         );\n",
            "commit_hashes": {
                "9b3a2439ae": "    Implement PublicMembers (of Org) API; fixes #1091"
            },
            "Commit&issueIDs": {
                "9b3a2439ae": [
                    "#1091"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/1091",
                "https://github.com/jcabi/jcabi-github/commit/9b3a2439ae"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/mock/MkReleaseAssetsTest.java",
            "test_name": "fetchesSingleAsset",
            "FQS": "com.jcabi.github.mock.MkReleaseAssetsTest.fetchesSingleAsset()",
            "start_line": "76",
            "blame_result": "afe0123b70 (Carlos Miranda 2014-02-18 09:55:11 +0800 77)         final ReleaseAssets assets = release().assets();\nafe0123b70 (Carlos Miranda 2014-02-18 09:55:11 +0800 78)         final ReleaseAsset asset = assets.upload(\nafe0123b70 (Carlos Miranda 2014-02-18 09:55:11 +0800 79)             \"testGet\".getBytes(), \"text/plain\", \"get.txt\"\nafe0123b70 (Carlos Miranda 2014-02-18 09:55:11 +0800 80)         );\nafe0123b70 (Carlos Miranda 2014-02-18 09:55:11 +0800 81)         MatcherAssert.assertThat(\n",
            "commit_hashes": {
                "afe0123b70": "    Issue #511 Added MkReleaseAssets fields and annotations,"
            },
            "Commit&issueIDs": {
                "afe0123b70": [
                    "#511"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/511",
                "https://github.com/jcabi/jcabi-github/commit/afe0123b70"
            ]
        },
        {
            "poj_link": "https://github.com/jcabi/jcabi-github/",
            "file_path": "jcabi/jcabi-github/src/test/java/com/jcabi/github/RtReleasesITCase.java",
            "test_name": "canCreateRelease",
            "FQS": "com.jcabi.github.RtReleasesITCase.canCreateRelease()",
            "start_line": "133",
            "blame_result": "255bf4801b (aistomin       2014-05-20 16:22:52 +0300 134)         final Releases releases = repo.releases();\n255bf4801b (aistomin       2014-05-20 16:22:52 +0300 135)         final Release created = releases.create(\"0.1\");\n255bf4801b (aistomin       2014-05-20 16:22:52 +0300 136)         final int number = created.number();\nec463116f4 (Carlos Miranda 2014-01-29 08:47:21 +0800 137)         try {\n255bf4801b (aistomin       2014-05-20 16:22:52 +0300 138)             final Release obtained = releases.get(number);\n",
            "commit_hashes": {
                "255bf4801b": "    Issue-771. try-catch replaced with @BeforeClass and @AfterClass",
                "ec463116f4": "    Issue #375 Implemented RtReleasesITCase#canCreateRelease"
            },
            "Commit&issueIDs": {
                "ec463116f4": [
                    "#375"
                ]
            },
            "links": [
                "https://github.com/jcabi/jcabi-github/issues/375",
                "https://github.com/jcabi/jcabi-github/commit/ec463116f4"
            ]
        },
        {
            "poj_link": "https://github.com/molgenis/molgenis/",
            "file_path": "molgenis/molgenis/molgenis-data/src/test/java/org/molgenis/data/FetchTest.java",
            "test_name": "equalsSubFetchFalse",
            "FQS": "org.molgenis.data.FetchTest.equalsSubFetchFalse()",
            "start_line": "33",
            "blame_result": "46e5cf25534 (Fleur Kelpin      2018-09-03 21:32:18 +0200 34)     String field = \"field\";\n46e5cf25534 (Fleur Kelpin      2018-09-03 21:32:18 +0200 35)     Fetch subFetch = new Fetch();\nc7d00f9ad61 (Dennis Hendriksen 2019-09-23 08:07:12 +0200 36)     assertNotEquals(new Fetch().field(field, subFetch), new Fetch().field(field));\n46e5cf25534 (Fleur Kelpin      2018-09-03 21:32:18 +0200 37)   }\n01dfdf6d3bb (dennishendriksen  2015-11-06 13:31:07 +0100 38) \n",
            "commit_hashes": {
                "46e5cf25534": "    style: Format source code using mvn fmt:format",
                "c7d00f9ad61": "    Fix squid:S3415 Assertion arguments should be passed in the correct order (#8669)",
                "01dfdf6d3bb": "    Introduce Fetch"
            },
            "Commit&issueIDs": {
                "c7d00f9ad61": [
                    "8669"
                ]
            },
            "links": [
                "https://github.com/molgenis/molgenis/issues/8669",
                "https://github.com/molgenis/molgenis/commit/c7d00f9ad61"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/PulleyJointTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.dynamics.joint.PulleyJointTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                  (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                  (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                  (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                  (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/dynamics/joint/PulleyJointTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/hector-client/hector/",
            "file_path": "hector-client/hector/core/src/test/java/me/prettyprint/hector/api/HFactoryTest.java",
            "test_name": "testCreateColumn",
            "FQS": "me.prettyprint.hector.api.HFactoryTest.testCreateColumn()",
            "start_line": "52",
            "blame_result": "960d835f3 (Patricio Echague 2012-02-18 11:31:12 -0800 53) \t  long clock = HFactory.createClock();\n960d835f3 (Patricio Echague 2012-02-18 11:31:12 -0800 54) \t  HColumn<String, Long> col = HFactory.createColumn(\"nameString\", new Long(\"345\"), clock);\n960d835f3 (Patricio Echague 2012-02-18 11:31:12 -0800 55) \t  HColumn<String, Long> col2 = HFactory.createColumn(\"nameString\", new Long(\"345\"), clock, StringSerializer.get(), LongSerializer.get());\n960d835f3 (Patricio Echague 2012-02-18 11:31:12 -0800 56) \t  assertEquals(col.getName(), col2.getName());\n960d835f3 (Patricio Echague 2012-02-18 11:31:12 -0800 57) \t  assertEquals(col.getValue(), col2.getValue());\n",
            "commit_hashes": {
                "960d835f3": "    Add test for #329"
            },
            "Commit&issueIDs": {
                "960d835f3": [
                    "#329"
                ]
            },
            "links": [
                "https://github.com/hector-client/hector/issues/329",
                "https://github.com/hector-client/hector/commit/960d835f3"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/RevoluteJointTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.dynamics.joint.RevoluteJointTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                    (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/dynamics/joint/RevoluteJointTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/WeldJointTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.dynamics.joint.WeldJointTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/dynamics/joint/WeldJointTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/dynamics/joint/WheelJointTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.dynamics.joint.WheelJointTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                 (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                 (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                 (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java                 (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/dynamics/joint/WheelJointTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/terrier-org/terrier-core/",
            "file_path": "terrier-org/terrier-core/modules/docvectors/src/test/java/org/terrier/matching/TestDVFeaturedScoringMatching.java",
            "test_name": "singleDocumentSingleTerm",
            "FQS": "org.terrier.matching.TestDVFeaturedScoringMatching.singleDocumentSingleTerm()",
            "start_line": "122",
            "blame_result": "ca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 123) \t{\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 124) \t\tApplicationSetup.setProperty(\"termpipelines\", \"\");\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 125) \t\tApplicationSetup.setProperty(\"ignore.low.idf.terms\", \"false\");\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 126) \t\tApplicationSetup.setProperty(\"proximity.dependency.type\",\"SD\");\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 127) \t\tIndex index = IndexTestUtils.makeIndex(\n",
            "commit_hashes": {
                "ca9629484": "    Docvectors support for Terrier-Core (#249)"
            },
            "Commit&issueIDs": {
                "ca9629484": [
                    "249"
                ]
            },
            "links": [
                "https://github.com/terrier-org/terrier-core/issues/249",
                "https://github.com/terrier-org/terrier-core/commit/ca9629484"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/geometry/AABBTest.java",
            "test_name": "testHashcode",
            "FQS": "org.dyn4j.geometry.AABBTest.testHashcode()",
            "start_line": "410",
            "blame_result": "7b7a8ec7 (William Bittle 2018-03-14 01:05:36 -0400 411) \t\tAABB aabb1 = new AABB(-2.0, 0.0, 2.0, 1.0);\n7b7a8ec7 (William Bittle 2018-03-14 01:05:36 -0400 412) \t\tAABB aabb2 = new AABB(-1.0, -2.0, 5.0, 2.0);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 413) \t\tAABB aabb3 = new AABB(-1.0, -2.0, 5.0, 2.0);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 414) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 415) \t\tTestCase.assertEquals(aabb1.hashCode(), aabb1.hashCode());\n",
            "commit_hashes": {
                "7b7a8ec7": "    Updated builds and moved tests back into main project for ease of",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/geometry/TransformTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.geometry.TransformTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java          (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java          (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java          (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java          (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/geometry/TransformTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/geometry/Vector2Test.java",
            "test_name": "equalsEpsilon",
            "FQS": "org.dyn4j.geometry.Vector2Test.equalsEpsilon()",
            "start_line": "666",
            "blame_result": "e585a055 (William Bittle 2024-03-16 15:43:27 -0400 667) \t\tVector2 v1 = new Vector2(1, 1);\ne585a055 (William Bittle 2024-03-16 15:43:27 -0400 668) \t\tVector2 v2 = new Vector2(2, 2);\ne585a055 (William Bittle 2024-03-16 15:43:27 -0400 669) \t\t\ne585a055 (William Bittle 2024-03-16 15:43:27 -0400 670) \t\tTestCase.assertFalse(v1.equals(v2, 0.0));\ne585a055 (William Bittle 2024-03-16 15:43:27 -0400 671) \t\tTestCase.assertFalse(v1.equals(v2, 0.1));\n",
            "commit_hashes": {
                "e585a055": "    Fixed #288 by added suggested methods"
            },
            "Commit&issueIDs": {
                "e585a055": [
                    "#288"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/288",
                "https://github.com/dyn4j/dyn4j/commit/e585a055"
            ]
        },
        {
            "poj_link": "https://github.com/terrier-org/terrier-core/",
            "file_path": "terrier-org/terrier-core/modules/docvectors/src/test/java/org/terrier/matching/TestDVFeaturedScoringMatching.java",
            "test_name": "multiDocMultipleTermsWithTags",
            "FQS": "org.terrier.matching.TestDVFeaturedScoringMatching.multiDocMultipleTermsWithTags()",
            "start_line": "164",
            "blame_result": "ca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 165) \t{\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 166) \t\tApplicationSetup.setProperty(\"termpipelines\", \"\");\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 167) \t\tApplicationSetup.setProperty(\"ignore.low.idf.terms\", \"false\");\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 168) \t\tApplicationSetup.setProperty(\"proximity.dependency.type\",\"SD\");\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 169) \t\tIndex index = IndexTestUtils.makeIndexBlocks(\n",
            "commit_hashes": {
                "ca9629484": "    Docvectors support for Terrier-Core (#249)"
            },
            "Commit&issueIDs": {
                "ca9629484": [
                    "249"
                ]
            },
            "links": [
                "https://github.com/terrier-org/terrier-core/issues/249",
                "https://github.com/terrier-org/terrier-core/commit/ca9629484"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/geometry/Vector3Test.java",
            "test_name": "equalsEpsilon",
            "FQS": "org.dyn4j.geometry.Vector3Test.equalsEpsilon()",
            "start_line": "592",
            "blame_result": "e585a055 (William Bittle 2024-03-16 15:43:27 -0400 593) \t\tVector3 v1 = new Vector3(1, 1, 1);\ne585a055 (William Bittle 2024-03-16 15:43:27 -0400 594) \t\tVector3 v2 = new Vector3(2, 2, 2);\ne585a055 (William Bittle 2024-03-16 15:43:27 -0400 595) \t\t\ne585a055 (William Bittle 2024-03-16 15:43:27 -0400 596) \t\tTestCase.assertFalse(v1.equals(v2, 0.0));\ne585a055 (William Bittle 2024-03-16 15:43:27 -0400 597) \t\tTestCase.assertFalse(v1.equals(v2, 0.1));\n",
            "commit_hashes": {
                "e585a055": "    Fixed #288 by added suggested methods"
            },
            "Commit&issueIDs": {
                "e585a055": [
                    "#288"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/288",
                "https://github.com/dyn4j/dyn4j/commit/e585a055"
            ]
        },
        {
            "poj_link": "https://github.com/terrier-org/terrier-core/",
            "file_path": "terrier-org/terrier-core/modules/docvectors/src/test/java/org/terrier/matching/TestDVFeaturedScoringMatching2.java",
            "test_name": "singleDocumentSingleTerm",
            "FQS": "org.terrier.matching.TestDVFeaturedScoringMatching2.singleDocumentSingleTerm()",
            "start_line": "59",
            "blame_result": "ca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 60) \t{\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 61) \t\tApplicationSetup.setProperty(\"termpipelines\", \"\");\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 62) \t\tApplicationSetup.setProperty(\"ignore.low.idf.terms\", \"false\");\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 63) \t\tApplicationSetup.setProperty(\"proximity.dependency.type\",\"SD\");\nca9629484 (Craig Macdonald 2024-08-15 18:38:36 +0100 64) \t\tIndex index = IndexTestUtils.makeIndex(\n",
            "commit_hashes": {
                "ca9629484": "    Docvectors support for Terrier-Core (#249)"
            },
            "Commit&issueIDs": {
                "ca9629484": [
                    "249"
                ]
            },
            "links": [
                "https://github.com/terrier-org/terrier-core/issues/249",
                "https://github.com/terrier-org/terrier-core/commit/ca9629484"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java",
            "test_name": "removeAllBodies",
            "FQS": "org.dyn4j.world.AbstractCollisionWorldTest.removeAllBodies()",
            "start_line": "202",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 203) \t */\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 204) \t@Test\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 205) \tpublic void removeAllBodies() {\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 206) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 207) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java",
            "test_name": "containsBody",
            "FQS": "org.dyn4j.world.AbstractCollisionWorldTest.containsBody()",
            "start_line": "256",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 257) \t */\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 258) \t@Test\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 259) \tpublic void containsBody() {\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 260) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 261) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java",
            "test_name": "getBodyAtIndex",
            "FQS": "org.dyn4j.world.AbstractCollisionWorldTest.getBodyAtIndex()",
            "start_line": "390",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 391) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 392) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 393) \t\tBody b1 = new Body();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 394) \t\tBody b2 = new Body();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 395) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java",
            "test_name": "getAndSetBroadphaseDetector",
            "FQS": "org.dyn4j.world.AbstractCollisionWorldTest.getAndSetBroadphaseDetector()",
            "start_line": "581",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 582) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 583) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 584) \t\tBody b = new Body();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 585) \t\tb.addFixture(Geometry.createCircle(1.0));\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 586) \t\tw.addBody(b);\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java",
            "test_name": "raycast",
            "FQS": "org.dyn4j.world.AbstractCollisionWorldTest.raycast()",
            "start_line": "130",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 131) \t\tTestCase.assertNotNull(w.timeOfImpactDetector);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 132) \t\tTestCase.assertNull(w.userData);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 133) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 134) \t\t// test create with initial size\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 135) \t\tw = new TestWorld(16);\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java",
            "test_name": "raycastAgainstSingleBody",
            "FQS": "org.dyn4j.world.AbstractCollisionWorldTest.raycastAgainstSingleBody()",
            "start_line": "2209",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2210) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2211) \n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2212) \t\t// setup the bodies\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2213) \t\tConvex c1 = Geometry.createCircle(0.5);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2214) \t\tConvex c2 = Geometry.createRectangle(1.0, 0.5);\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java",
            "test_name": "convexCast",
            "FQS": "org.dyn4j.world.AbstractCollisionWorldTest.convexCast()",
            "start_line": "2447",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2448) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2449) \n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2450) \t\t// setup the bodies\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2451) \t\tConvex c1 = Geometry.createCircle(0.5);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2452) \t\tConvex c2 = Geometry.createRectangle(1.0, 0.5);\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractCollisionWorldTest.java",
            "test_name": "convexCastAgainstSingleBody",
            "FQS": "org.dyn4j.world.AbstractCollisionWorldTest.convexCastAgainstSingleBody()",
            "start_line": "2565",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2566) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2567) \n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2568) \t\t// setup the bodies\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2569) \t\tConvex c1 = Geometry.createCircle(0.5);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 2570) \t\tConvex c2 = Geometry.createRectangle(1.0, 0.5);\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "addJoint",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.addJoint()",
            "start_line": "233",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 234) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 235) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 236) \t\tBody b1 = new Body(); b1.addFixture(Geometry.createCapsule(1.0, 0.5));\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 237) \t\tBody b2 = new Body(); b2.addFixture(Geometry.createCapsule(1.0, 0.5));\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 238) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "getJointAtIndex",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.getJointAtIndex()",
            "start_line": "354",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 355) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 356) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 357) \t\tBody b1 = new Body();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 358) \t\tBody b2 = new Body();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 359) \t\tJoint<Body> j = new AngleJoint<Body>(b1, b2);\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "containsJoint",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.containsJoint()",
            "start_line": "256",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 257) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 258) \t\tConstraintGraphNode<Body> n1 = w.constraintGraph.getNode(b1);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 259) \t\tTestCase.assertNotNull(n1);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 260) \t\tTestCase.assertEquals(1, n1.joints.size());\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 261) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "fixtureModification",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.fixtureModification()",
            "start_line": "676",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 677) \t\tTestWorld w = new TestWorld();\nd6b78bdf (William Bittle 2021-01-26 20:06:24 -0500 678) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 679) \t\t// setup the bodies\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 680) \t\tConvex c1 = Geometry.createCircle(1.0);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 681) \t\tConvex c2 = Geometry.createEquilateralTriangle(0.5);\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)",
                "d6b78bdf": "    More tests and bug fix for removal of contacts/joints"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "getAndSetCCDBroadphaseDetector",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.getAndSetCCDBroadphaseDetector()",
            "start_line": "1046",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1047) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1048) \t\t\nd6b78bdf (William Bittle 2021-01-26 20:06:24 -0500 1049) \t\tBody b = new Body();\nd6b78bdf (William Bittle 2021-01-26 20:06:24 -0500 1050) \t\tb.addFixture(Geometry.createCircle(1.0));\nd6b78bdf (William Bittle 2021-01-26 20:06:24 -0500 1051) \t\tw.addBody(b);\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)",
                "d6b78bdf": "    More tests and bug fix for removal of contacts/joints"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "isJoined",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.isJoined()",
            "start_line": "267",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 268) \t\tTestCase.assertTrue(!w.isJointCollisionAllowed(b1, b2));\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 269) \t}\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 270) \n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 271) \t/**\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 272) \t * Tests the add joint method passing a null value.\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "isJointCollisionAllowed",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.isJointCollisionAllowed()",
            "start_line": "268",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 269) \t}\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 270) \n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 271) \t/**\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 272) \t * Tests the add joint method passing a null value.\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 273) \t */\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "getJoinedBodies",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.getJoinedBodies()",
            "start_line": "1133",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1134) \t */\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1135) \t@Test\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1136) \tpublic void getJoinedBodies() {\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1137) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1138) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "getJointsForBody",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.getJointsForBody()",
            "start_line": "1163",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1164) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1165) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1166) \t\tBody b1 = new Body();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1167) \t\tBody b2 = new Body();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1168) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "getInContactBodies",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.getInContactBodies()",
            "start_line": "1187",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1188) \t */\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1189) \t@Test\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1190) \tpublic void getInContactBodies() {\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1191) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1192) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "isInContact",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.isInContact()",
            "start_line": "1267",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1268) \t */\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1269) \t@Test\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1270) \tpublic void isInContact() {\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1271) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1272) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "removeBody",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.removeBody()",
            "start_line": "1599",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1600) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1601) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1602) \t\t// setup the destruction listener\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1603) \t\tContactListenerCounter cl = new ContactListenerCounter();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1604) \t\tDestructionListenerCounter dl = new DestructionListenerCounter();\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "removeBodyAtIndex",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.removeBodyAtIndex()",
            "start_line": "1725",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1726) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1727) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1728) \t\t// setup the destruction listener\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1729) \t\tDestructionListenerCounter dl = new DestructionListenerCounter();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1730) \t\tw.addDestructionListener(dl);\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/AbstractPhysicsWorldTest.java",
            "test_name": "removeBodyMemoryLeak",
            "FQS": "org.dyn4j.world.AbstractPhysicsWorldTest.removeBodyMemoryLeak()",
            "start_line": "1840",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1841) \t\tTestWorld w = new TestWorld();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1842) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1843) \t\t// setup the destruction listener\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1844) \t\tDestructionListenerCounter dl = new DestructionListenerCounter();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1845) \t\tw.addDestructionListener(dl);\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/CollisionItemAdapterTest.java",
            "test_name": "equalsAndHashcode",
            "FQS": "org.dyn4j.world.CollisionItemAdapterTest.equalsAndHashcode()",
            "start_line": "79",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 80) \t\tCollisionItemAdapter<Body, BodyFixture> item1 = new CollisionItemAdapter<Body, BodyFixture>();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 81) \t\tCollisionItemAdapter<Body, BodyFixture> item2 = new CollisionItemAdapter<Body, BodyFixture>();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 82) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 83) \t\tBody b1 = new Body();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 84) \t\tBody b2 = new Body();\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/ConstraintGraphTest.java",
            "test_name": "testRemoveBodyWithUnaryJoint",
            "FQS": "org.dyn4j.world.ConstraintGraphTest.testRemoveBodyWithUnaryJoint()",
            "start_line": "1130",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 1131) \t\tConstraintGraph<Body> g = new ConstraintGraph<Body>();\n1c0a9514 (William Bittle 2021-02-13 13:01:44 -0500 1132) \t\t\n1c0a9514 (William Bittle 2021-02-13 13:01:44 -0500 1133) \t\tBody b1 = new Body();\n1c0a9514 (William Bittle 2021-02-13 13:01:44 -0500 1134) \t\tg.addBody(b1);\n1c0a9514 (William Bittle 2021-02-13 13:01:44 -0500 1135) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)",
                "1c0a9514": "    Fixed an issue where removing a body attached to a unary joint would throw a NullPointerException (#182)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ],
                "1c0a9514": [
                    "(#182)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a",
                "https://github.com/dyn4j/dyn4j/issues/182",
                "https://github.com/dyn4j/dyn4j/commit/1c0a9514"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/world/result/DetectResultTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.world.result.DetectResultTest.copy()",
            "start_line": "8",
            "blame_result": "e220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200  9)  *     and the following disclaimer.\ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java   (mtsamis        2019-12-23 17:49:23 +0200 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/world/result/DetectResultTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "e220841d": "    Robust hull algorithms (#97)",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "e220841d": [
                    "(#97)"
                ],
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/97",
                "https://github.com/dyn4j/dyn4j/commit/e220841d",
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/basho/riak-java-client/",
            "file_path": "basho/riak-java-client/src/test/java/com/basho/riak/client/core/query/indexes/RawIndexTest.java",
            "test_name": "removeValue",
            "FQS": "com.basho.riak.client.core.query.indexes.RawIndexTest.removeValue()",
            "start_line": "98",
            "blame_result": "797d8e714 src/test/java/com/basho/riak/client/query/indexes/RawIndexTest.java      (Brian Roach 2013-08-14 13:05:49 -0600  99)     {\n28d89c894 src/test/java/com/basho/riak/client/core/query/indexes/RawIndexTest.java (Alex Moore  2016-01-26 18:21:05 -0500 100)         RawIndex.Name builder = RawIndex.named(\"index_name\", IndexType.BIN);\n797d8e714 src/test/java/com/basho/riak/client/query/indexes/RawIndexTest.java      (Brian Roach 2013-08-14 13:05:49 -0600 101)         RawIndex index = builder.createIndex();\n7b70c9369 src/test/java/com/basho/riak/client/query/indexes/RawIndexTest.java      (Brian Roach 2014-01-03 13:30:48 -0700 102)         BinaryValue baw = null;\n797d8e714 src/test/java/com/basho/riak/client/query/indexes/RawIndexTest.java      (Brian Roach 2013-08-14 13:05:49 -0600 103)         for (int i = 0; i < 3; i++)\n",
            "commit_hashes": {
                "797d8e714": "    Unit testing for RiakIndex classes",
                "28d89c894": "    fix for issue #584",
                "7b70c9369": "    rename ByteArrayWrapper to BinaryValue"
            },
            "Commit&issueIDs": {
                "28d89c894": [
                    "#584"
                ]
            },
            "links": [
                "https://github.com/basho/riak-java-client/issues/584",
                "https://github.com/basho/riak-java-client/commit/28d89c894"
            ]
        },
        {
            "poj_link": "https://github.com/Esri/geometry-api-java/",
            "file_path": "Esri/geometry-api-java/src/test/java/com/esri/core/geometry/TestEnvelope.java",
            "test_name": "testEquals",
            "FQS": "com.esri.core.geometry.TestEnvelope.testEquals()",
            "start_line": "137",
            "blame_result": "4205cd15 (Sergey Tolstov 2019-08-19 11:33:50 -0700 138) \t\tEnvelope env1 = new Envelope(10, 9, 11, 12);\n4205cd15 (Sergey Tolstov 2019-08-19 11:33:50 -0700 139) \t\tEnvelope env2 = new Envelope(10, 9, 11, 13);\n4205cd15 (Sergey Tolstov 2019-08-19 11:33:50 -0700 140) \t\tEnvelope1D emptyInterval = new Envelope1D();\n4205cd15 (Sergey Tolstov 2019-08-19 11:33:50 -0700 141) \t\temptyInterval.setEmpty();\n4205cd15 (Sergey Tolstov 2019-08-19 11:33:50 -0700 142) \t\tassertFalse(env1.equals(env2));\n",
            "commit_hashes": {
                "4205cd15": "    Fix hash calculation in few cases, change Point internals to be more compact (#238)"
            },
            "Commit&issueIDs": {
                "4205cd15": [
                    "(#238)"
                ]
            },
            "links": [
                "https://github.com/Esri/geometry-api-java/issues/238",
                "https://github.com/Esri/geometry-api-java/commit/4205cd15"
            ]
        },
        {
            "poj_link": "https://github.com/Esri/geometry-api-java/",
            "file_path": "Esri/geometry-api-java/src/test/java/com/esri/core/geometry/TestJSonToGeomFromWkiOrWkt_CR177613.java",
            "test_name": "testMP2onCR175871",
            "FQS": "com.esri.core.geometry.TestJSonToGeomFromWkiOrWkt_CR177613.testMP2onCR175871()",
            "start_line": "78",
            "blame_result": "d6999a9d (Sergey Tolstov 2017-07-07 14:27:29 -0700 79) \t\tPolygon pg = new Polygon();\nd6999a9d (Sergey Tolstov 2017-07-07 14:27:29 -0700 80) \t\tpg.startPath(-50, 10);\nd6999a9d (Sergey Tolstov 2017-07-07 14:27:29 -0700 81) \t\tpg.lineTo(-50, 12);\nd6999a9d (Sergey Tolstov 2017-07-07 14:27:29 -0700 82) \t\tpg.lineTo(-45, 12);\nd6999a9d (Sergey Tolstov 2017-07-07 14:27:29 -0700 83) \t\tpg.lineTo(-45, 10);\n",
            "commit_hashes": {
                "d6999a9d": "    Sergey/gitattribs (#137)"
            },
            "Commit&issueIDs": {
                "d6999a9d": [
                    "(#137)"
                ]
            },
            "links": [
                "https://github.com/Esri/geometry-api-java/issues/137",
                "https://github.com/Esri/geometry-api-java/commit/d6999a9d"
            ]
        },
        {
            "poj_link": "https://github.com/Esri/geometry-api-java/",
            "file_path": "Esri/geometry-api-java/src/test/java/com/esri/core/geometry/TestJsonParser.java",
            "test_name": "test3DPoint",
            "FQS": "com.esri.core.geometry.TestJsonParser.test3DPoint()",
            "start_line": "57",
            "blame_result": "b0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 58) \t\tString jsonString3DPt = \"{\\\"x\\\" : -118.15, \\\"y\\\" : 33.80, \\\"z\\\" : 10.0, \\\"spatialReference\\\" : {\\\"wkid\\\" : 4326}}\";\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 59) \nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 60) \t\tJsonParser jsonParser3DPt = factory.createParser(jsonString3DPt);\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 61) \t\tMapGeometry point3DMP = GeometryEngine.jsonToGeometry(jsonParser3DPt);\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 62) \t\tassertTrue(-118.15 == ((Point) point3DMP.getGeometry()).getX());\n",
            "commit_hashes": {
                "b0bc20e9": "    added missing license header (#138)"
            },
            "Commit&issueIDs": {
                "b0bc20e9": [
                    "(#138)"
                ]
            },
            "links": [
                "https://github.com/Esri/geometry-api-java/issues/138",
                "https://github.com/Esri/geometry-api-java/commit/b0bc20e9"
            ]
        },
        {
            "poj_link": "https://github.com/Esri/geometry-api-java/",
            "file_path": "Esri/geometry-api-java/src/test/java/com/esri/core/geometry/TestJsonParser.java",
            "test_name": "test3DPoint2",
            "FQS": "com.esri.core.geometry.TestJsonParser.test3DPoint2()",
            "start_line": "97",
            "blame_result": "b0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700  98) \t\t{\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700  99) \t\t\tPoint point1 = new Point(10.0, 20.0);\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 100) \t\t\tJsonParser pointWebMerc2Parser = factory\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 101) \t\t\t\t\t.createJsonParser(GeometryEngine.geometryToJson(spatialReferenceWebMerc2, point1));\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 102) \t\t\tMapGeometry pointWebMerc2MP = GeometryEngine.jsonToGeometry(pointWebMerc2Parser);\n",
            "commit_hashes": {
                "b0bc20e9": "    added missing license header (#138)"
            },
            "Commit&issueIDs": {
                "b0bc20e9": [
                    "(#138)"
                ]
            },
            "links": [
                "https://github.com/Esri/geometry-api-java/issues/138",
                "https://github.com/Esri/geometry-api-java/commit/b0bc20e9"
            ]
        },
        {
            "poj_link": "https://github.com/Esri/geometry-api-java/",
            "file_path": "Esri/geometry-api-java/src/test/java/com/esri/core/geometry/TestJsonParser.java",
            "test_name": "test3DPoint3",
            "FQS": "com.esri.core.geometry.TestJsonParser.test3DPoint3()",
            "start_line": "110",
            "blame_result": "b0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 111) \t\t{\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 112) \t\t\tPoint point1 = new Point(10.0, 20.0);\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 113) \t\t\tJsonParser pointWgs84Parser = factory\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 114) \t\t\t\t\t.createJsonParser(GeometryEngine.geometryToJson(spatialReferenceWGS84, point1));\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 115) \t\t\tMapGeometry pointWgs84MP = GeometryEngine.jsonToGeometry(pointWgs84Parser);\n",
            "commit_hashes": {
                "b0bc20e9": "    added missing license header (#138)"
            },
            "Commit&issueIDs": {
                "b0bc20e9": [
                    "(#138)"
                ]
            },
            "links": [
                "https://github.com/Esri/geometry-api-java/issues/138",
                "https://github.com/Esri/geometry-api-java/commit/b0bc20e9"
            ]
        },
        {
            "poj_link": "https://github.com/Esri/geometry-api-java/",
            "file_path": "Esri/geometry-api-java/src/test/java/com/esri/core/geometry/TestJsonParser.java",
            "test_name": "testCR181369",
            "FQS": "com.esri.core.geometry.TestJsonParser.testCR181369()",
            "start_line": "267",
            "blame_result": "b0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 268) \t\t// CR181369\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 269) \t\t{\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 270) \t\t\tString jsonStringPointAndWKT = \"{\\\"x\\\":10.0,\\\"y\\\":20.0,\\\"spatialReference\\\":{\\\"wkt\\\" : \\\"PROJCS[\\\\\\\"NAD83_UTM_zone_15N\\\\\\\",GEOGCS[\\\\\\\"GCS_North_American_1983\\\\\\\",DATUM[\\\\\\\"D_North_American_1983\\\\\\\",SPHEROID[\\\\\\\"GRS_1980\\\\\\\",6378137.0,298.257222101]],PRIMEM[\\\\\\\"Greenwich\\\\\\\",0.0],UNIT[\\\\\\\"Degree\\\\\\\",0.0174532925199433]],PROJECTION[\\\\\\\"Transverse_Mercator\\\\\\\"],PARAMETER[\\\\\\\"false_easting\\\\\\\",500000.0],PARAMETER[\\\\\\\"false_northing\\\\\\\",0.0],PARAMETER[\\\\\\\"central_meridian\\\\\\\",-93.0],PARAMETER[\\\\\\\"scale_factor\\\\\\\",0.9996],PARAMETER[\\\\\\\"latitude_of_origin\\\\\\\",0.0],UNIT[\\\\\\\"Meter\\\\\\\",1.0]]\\\"} }\";\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 271) \t\t\tJsonParser jsonParserPointAndWKT = factory.createJsonParser(jsonStringPointAndWKT);\nb0bc20e9 (Sergey Tolstov 2017-07-13 15:01:14 -0700 272) \t\t\tMapGeometry mapGeom2 = GeometryEngine.jsonToGeometry(jsonParserPointAndWKT);\n",
            "commit_hashes": {
                "b0bc20e9": "    added missing license header (#138)"
            },
            "Commit&issueIDs": {
                "b0bc20e9": [
                    "(#138)"
                ]
            },
            "links": [
                "https://github.com/Esri/geometry-api-java/issues/138",
                "https://github.com/Esri/geometry-api-java/commit/b0bc20e9"
            ]
        },
        {
            "poj_link": "https://github.com/Esri/geometry-api-java/",
            "file_path": "Esri/geometry-api-java/src/test/java/com/esri/core/geometry/TestJsonParser.java",
            "test_name": "testMP2onCR175871",
            "FQS": "com.esri.core.geometry.TestJsonParser.testMP2onCR175871()",
            "start_line": "408",
            "blame_result": "d6999a9d src/test/java/com/esri/core/geometry/TestJSonToGeomFromWkiOrWkt_CR177613.java (Sergey Tolstov 2017-07-07 14:27:29 -0700 409) \t\tPolygon pg = new Polygon();\nd6999a9d src/test/java/com/esri/core/geometry/TestJSonToGeomFromWkiOrWkt_CR177613.java (Sergey Tolstov 2017-07-07 14:27:29 -0700 410) \t\tpg.startPath(-50, 10);\nd6999a9d src/test/java/com/esri/core/geometry/TestJSonToGeomFromWkiOrWkt_CR177613.java (Sergey Tolstov 2017-07-07 14:27:29 -0700 411) \t\tpg.lineTo(-50, 12);\nd6999a9d src/test/java/com/esri/core/geometry/TestJSonToGeomFromWkiOrWkt_CR177613.java (Sergey Tolstov 2017-07-07 14:27:29 -0700 412) \t\tpg.lineTo(-45, 12);\nd6999a9d src/test/java/com/esri/core/geometry/TestJSonToGeomFromWkiOrWkt_CR177613.java (Sergey Tolstov 2017-07-07 14:27:29 -0700 413) \t\tpg.lineTo(-45, 10);\n",
            "commit_hashes": {
                "d6999a9d": "    Sergey/gitattribs (#137)"
            },
            "Commit&issueIDs": {
                "d6999a9d": [
                    "(#137)"
                ]
            },
            "links": [
                "https://github.com/Esri/geometry-api-java/issues/137",
                "https://github.com/Esri/geometry-api-java/commit/d6999a9d"
            ]
        },
        {
            "poj_link": "https://github.com/Esri/geometry-api-java/",
            "file_path": "Esri/geometry-api-java/src/test/java/com/esri/core/geometry/TestOGCContains.java",
            "test_name": "testAcceleratedPiP",
            "FQS": "com.esri.core.geometry.TestOGCContains.testAcceleratedPiP()",
            "start_line": "59",
            "blame_result": "937ca24b (Sergey Tolstov 2018-11-30 11:11:01 -0800 60) \t\tString wkt = \"MULTIPOLYGON (((-109.642707 30.5236901, -109.607932 30.5367411, -109.5820257 30.574184, -109.5728286 30.5874766, -109.568679 30.5934741, -109.5538097 30.5918356, -109.553714 30.5918251, -109.553289 30.596034, -109.550951 30.6191889, -109.5474935 30.6221179, -109.541059 30.6275689, -109.5373751 30.6326491, -109.522538 30.6531099, -109.514671 30.6611981, -109.456764 30.6548095, -109.4556456 30.6546861, -109.4536755 30.6544688, -109.4526481 30.6543554, -109.446824 30.6537129, -109.437751 30.6702901, -109.433968 30.6709781, -109.43338 30.6774591, -109.416243 30.7164651, -109.401643 30.7230741, -109.377583 30.7145241, -109.3487939 30.7073896, -109.348594 30.7073401, -109.3483718 30.7073797, -109.3477608 30.7074887, -109.3461903 30.7078834, -109.3451022 30.7081569, -109.3431732 30.7086416, -109.3423301 30.708844, -109.3419714 30.7089301, -109.3416347 30.709011, -109.3325693 30.7111874, -109.3323814 30.7112325, -109.332233 30.7112681, -109.332191 30.7112686, -109.3247809 30.7113581, -109.322215 30.7159391, -109.327776 30.7234381, -109.350134 30.7646001, -109.364505 30.8382481, -109.410211 30.8749199, -109.400048 30.8733419, -109.3847799 30.9652412, -109.3841625 30.9689575, -109.375268 31.0224939, -109.390544 31.0227899, -109.399749 31.0363341, -109.395787 31.0468411, -109.388174 31.0810249, -109.3912446 31.0891966, -109.3913452 31.0894644, -109.392735 31.0931629, -109.4000839 31.0979214, -109.402803 31.0996821, -109.4110458 31.1034586, -109.419153 31.1071729, -109.449782 31.1279489, -109.469654 31.1159979, -109.4734874 31.1131178, -109.473753 31.1129183, -109.4739754 31.1127512, -109.491296 31.0997381, -109.507789 31.0721811, -109.512776 31.0537519, -109.5271478 31.0606861, -109.5313703 31.0627234, -109.540698 31.0672239, -109.5805468 31.0674089, -109.5807399 31.0674209, -109.595423 31.0674779, -109.60347 31.0690241, -109.6048011 31.068808, -109.6050803 31.0687627, -109.6192237 31.0664664, -109.635432 31.0638349, -109.6520068 31.0955326, -109.6522294 31.0959584, -109.652373 31.0962329, -109.657709 31.0959719, -109.718258 31.0930099, -109.821036 31.0915909, -109.8183088 31.0793374, -109.8165128 31.0712679, -109.8140062 31.0600052, -109.8138512 31.0593089, -109.812707 31.0541679, -109.8188146 31.0531909, -109.8215447 31.0527542, -109.8436765 31.0492138, -109.8514316 31.0479733, -109.8620535 31.0462742, -109.8655958 31.0457076, -109.868388 31.0452609, -109.8795483 31.0359656, -109.909274 31.0112075, -109.9210382 31.0014092, -109.9216329 31.0009139, -109.920594 30.994183, -109.9195356 30.9873254, -109.9192113 30.9852243, -109.9186281 30.9814453, -109.917814 30.9761709, -109.933894 30.9748879, -109.94094 30.9768059, -109.944854 30.9719821, -109.950803 30.9702809, -109.954025 30.9652409, -109.9584129 30.9636033, -109.958471 30.9635809, -109.9590542 30.9644372, -109.959896 30.9656733, -109.9604184 30.9664405, -109.9606288 30.9667494, -109.9608462 30.9670686, -109.961225 30.9676249, -109.9611615 30.9702903, -109.9611179 30.9721175, -109.9610885 30.9733488, -109.9610882 30.9733604, -109.9610624 30.9744451, -109.961017 30.9763469, -109.962609 30.9786559, -109.9634437 30.9783167, -110.00172 30.9627641, -110.0021152 30.9627564, -110.0224353 30.9623622, -110.0365868 30.9620877, -110.037493 30.9620701, -110.0374055 30.961663, -110.033653 30.9442059, -110.0215506 30.9492932, -110.0180392 30.9507693, -110.011203 30.9536429, -110.0062891 30.9102124, -110.0058721 30.9065268, -110.004869 30.8976609, -109.996392 30.8957129, -109.985038 30.8870439, -109.969416 30.9006011, -109.967905 30.8687239, -109.903498 30.8447749, -109.882925 30.8458289, -109.865184 30.8206519, -109.86465 30.777698, -109.864515 30.7668429, -109.837007 30.7461781, -109.83453 30.7164469, -109.839017 30.7089009, -109.813394 30.6906529, -109.808694 30.6595701, -109.795334 30.6630041, -109.7943042 30.6427223, -109.7940456 30.6376287, -109.7940391 30.637501, -109.793823 30.6332449, -109.833511 30.6274289, -109.830299 30.6252799, -109.844198 30.6254801, -109.852442 30.6056949, -109.832973 30.6021201, -109.8050409 30.591211, -109.773847 30.5790279, -109.772859 30.5521999, -109.754427 30.5393969, -109.743293 30.5443401, -109.6966136 30.5417334, -109.6648181 30.5399578, -109.6560456 30.5394679, -109.6528439 30.5392912, -109.6504039 30.5391565, -109.6473602 30.5389885, -109.646906 30.5389634, -109.6414545 30.5386625, -109.639708 30.5385661, -109.6397729 30.5382443, -109.642707 30.5236901)))\";\n937ca24b (Sergey Tolstov 2018-11-30 11:11:01 -0800 61) \t\tString pointWkt = \"POINT (-109.65 31.091666666673)\";\n937ca24b (Sergey Tolstov 2018-11-30 11:11:01 -0800 62) \n937ca24b (Sergey Tolstov 2018-11-30 11:11:01 -0800 63) \t\tOGCGeometry polygon = OGCGeometry.fromText(wkt);\n937ca24b (Sergey Tolstov 2018-11-30 11:11:01 -0800 64) \t\tOGCGeometry point = OGCGeometry.fromText(pointWkt);\n",
            "commit_hashes": {
                "937ca24b": "    Fix rasterization with degenerate segments (#207)"
            },
            "Commit&issueIDs": {
                "937ca24b": [
                    "(#207)"
                ]
            },
            "links": [
                "https://github.com/Esri/geometry-api-java/issues/207",
                "https://github.com/Esri/geometry-api-java/commit/937ca24b"
            ]
        },
        {
            "poj_link": "https://github.com/Esri/geometry-api-java/",
            "file_path": "Esri/geometry-api-java/src/test/java/com/esri/core/geometry/TestPoint.java",
            "test_name": "testPt",
            "FQS": "com.esri.core.geometry.TestPoint.testPt()",
            "start_line": "45",
            "blame_result": "ee7645f9 unittest/com/esri/core/geometry/TestPoint.java      (Sergey Tolstov 2013-03-21 17:20:46 -0700 46) \t\tPoint pt = new Point();\nee7645f9 unittest/com/esri/core/geometry/TestPoint.java      (Sergey Tolstov 2013-03-21 17:20:46 -0700 47) \t\tassertTrue(pt.isEmpty());\n4205cd15 src/test/java/com/esri/core/geometry/TestPoint.java (Sergey Tolstov 2019-08-19 11:33:50 -0700 48) \t\tassertTrue(Double.isNaN(pt.getX()));\n4205cd15 src/test/java/com/esri/core/geometry/TestPoint.java (Sergey Tolstov 2019-08-19 11:33:50 -0700 49) \t\tassertTrue(Double.isNaN(pt.getY()));\n4205cd15 src/test/java/com/esri/core/geometry/TestPoint.java (Sergey Tolstov 2019-08-19 11:33:50 -0700 50) \t\tassertTrue(Double.isNaN(pt.getM()));\n",
            "commit_hashes": {
                "ee7645f9": "    open source release 2013-03-21",
                "4205cd15": "    Fix hash calculation in few cases, change Point internals to be more compact (#238)"
            },
            "Commit&issueIDs": {
                "4205cd15": [
                    "(#238)"
                ]
            },
            "links": [
                "https://github.com/Esri/geometry-api-java/issues/238",
                "https://github.com/Esri/geometry-api-java/commit/4205cd15"
            ]
        },
        {
            "poj_link": "https://github.com/Esri/geometry-api-java/",
            "file_path": "Esri/geometry-api-java/src/test/java/com/esri/core/geometry/TestWKBSupport.java",
            "test_name": "testWKB3",
            "FQS": "com.esri.core.geometry.TestWKBSupport.testWKB3()",
            "start_line": "112",
            "blame_result": "222c0e0d (satish-csi 2020-09-01 03:14:03 +0530 113) \t\tString multiPointWKT = \"MULTIPOINT ZM(10 40 1 23, 40 30 2 45)\";\n222c0e0d (satish-csi 2020-09-01 03:14:03 +0530 114) \t\tOGCGeometry geometry = OGCGeometry.fromText(multiPointWKT);\n222c0e0d (satish-csi 2020-09-01 03:14:03 +0530 115) \t\tByteBuffer byteBuffer = geometry.asBinary();\n222c0e0d (satish-csi 2020-09-01 03:14:03 +0530 116) \t\tOGCGeometry geomFromBinary = OGCGeometry.fromBinary(byteBuffer);\n222c0e0d (satish-csi 2020-09-01 03:14:03 +0530 117) \t\tassertTrue(geometry.Equals(geomFromBinary));\n",
            "commit_hashes": {
                "222c0e0d": "    Fix Geometry WKB parsing issue For MultiPoint ZM geometry (#268)"
            },
            "Commit&issueIDs": {
                "222c0e0d": [
                    "(#268)"
                ]
            },
            "links": [
                "https://github.com/Esri/geometry-api-java/issues/268",
                "https://github.com/Esri/geometry-api-java/commit/222c0e0d"
            ]
        },
        {
            "poj_link": "https://github.com/moditect/deptective/",
            "file_path": "moditect/deptective/javac-plugin/src/test/java/org/moditect/deptective/plugintest/analyze/AnalyzeTest.java",
            "test_name": "shouldGenerateConfig",
            "FQS": "org.moditect.deptective.plugintest.analyze.AnalyzeTest.shouldGenerateConfig()",
            "start_line": "44",
            "blame_result": "90c3102e (Gunnar Morling 2019-01-03 17:03:00 +0100 45)         Compilation compilation = Compiler.javac()\n939709ed (Gunnar Morling 2019-01-19 08:29:36 +0100 46)                 .withOptions(\nae0dec04 (Gunnar Morling 2019-01-30 21:10:12 +0100 47)                         TestOptions.deptectiveOptions(\nae0dec04 (Gunnar Morling 2019-01-30 21:10:12 +0100 48)                                 Options.MODE, \"analyze\",\nae0dec04 (Gunnar Morling 2019-01-30 21:10:12 +0100 49)                                 Options.WHITELISTED, \"java.math\"\n",
            "commit_hashes": {
                "90c3102e": "    #11 Adding \"analyze\" mode for producing deptective.json templates",
                "939709ed": "    #32 Providing Eclipse formatter configuration and setting up Spotless to check against it",
                "ae0dec04": "    #44 Passing options as plug-in options"
            },
            "Commit&issueIDs": {
                "90c3102e": [
                    "#11"
                ],
                "939709ed": [
                    "#32"
                ],
                "ae0dec04": [
                    "#44"
                ]
            },
            "links": [
                "https://github.com/moditect/deptective/issues/11",
                "https://github.com/moditect/deptective/commit/90c3102e",
                "https://github.com/moditect/deptective/issues/32",
                "https://github.com/moditect/deptective/commit/939709ed",
                "https://github.com/moditect/deptective/issues/44",
                "https://github.com/moditect/deptective/commit/ae0dec04"
            ]
        },
        {
            "poj_link": "https://github.com/moditect/deptective/",
            "file_path": "moditect/deptective/javac-plugin/src/test/java/org/moditect/deptective/plugintest/analyzewhitelistallexternal/AnalyzeWhitelistAllExternalTest.java",
            "test_name": "shouldGenerateConfig",
            "FQS": "org.moditect.deptective.plugintest.analyzewhitelistallexternal.AnalyzeWhitelistAllExternalTest.shouldGenerateConfig()",
            "start_line": "43",
            "blame_result": "39a71d3b (Gunnar Morling 2019-01-05 15:52:15 +0100 44)         Compilation compilation = Compiler.javac()\n939709ed (Gunnar Morling 2019-01-19 08:29:36 +0100 45)                 .withOptions(\nae0dec04 (Gunnar Morling 2019-01-30 21:10:12 +0100 46)                         TestOptions.deptectiveOptions(\nae0dec04 (Gunnar Morling 2019-01-30 21:10:12 +0100 47)                                 Options.MODE, \"ANALYZE\",\nae0dec04 (Gunnar Morling 2019-01-30 21:10:12 +0100 48)                                 Options.WHITELISTED, \"*ALL_EXTERNAL*\"\n",
            "commit_hashes": {
                "39a71d3b": "    #17 Optionally whitelisting all external dependencies",
                "939709ed": "    #32 Providing Eclipse formatter configuration and setting up Spotless to check against it",
                "ae0dec04": "    #44 Passing options as plug-in options"
            },
            "Commit&issueIDs": {
                "39a71d3b": [
                    "#17"
                ],
                "939709ed": [
                    "#32"
                ],
                "ae0dec04": [
                    "#44"
                ]
            },
            "links": [
                "https://github.com/moditect/deptective/issues/17",
                "https://github.com/moditect/deptective/commit/39a71d3b",
                "https://github.com/moditect/deptective/issues/32",
                "https://github.com/moditect/deptective/commit/939709ed",
                "https://github.com/moditect/deptective/issues/44",
                "https://github.com/moditect/deptective/commit/ae0dec04"
            ]
        },
        {
            "poj_link": "https://github.com/moditect/deptective/",
            "file_path": "moditect/deptective/javac-plugin/src/test/java/org/moditect/deptective/plugintest/analyzewithcomponent/AnalyzeWithDefinedComponentsTest.java",
            "test_name": "shouldGenerateConfig",
            "FQS": "org.moditect.deptective.plugintest.analyzewithcomponent.AnalyzeWithDefinedComponentsTest.shouldGenerateConfig()",
            "start_line": "47",
            "blame_result": "b8e94846 javac-plugin/src/test/java/org/moditect/deptective/plugintest/packagecontainedtwice/PackageContainedInTwoComponentsTest.java (Gunnar Morling 2019-01-20 21:15:55 +0100 48)         Compilation compilation = Compiler.javac()\nb8e94846 javac-plugin/src/test/java/org/moditect/deptective/plugintest/packagecontainedtwice/PackageContainedInTwoComponentsTest.java (Gunnar Morling 2019-01-20 21:15:55 +0100 49)                 .withOptions(\nae0dec04 javac-plugin/src/test/java/org/moditect/deptective/plugintest/analyzewithcomponent/AnalyzeWithDefinedComponentsTest.java     (Gunnar Morling 2019-01-30 21:10:12 +0100 50)                         TestOptions.deptectiveOptions(\nae0dec04 javac-plugin/src/test/java/org/moditect/deptective/plugintest/analyzewithcomponent/AnalyzeWithDefinedComponentsTest.java     (Gunnar Morling 2019-01-30 21:10:12 +0100 51)                                 Options.MODE, \"ANALYZE\",\nae0dec04 javac-plugin/src/test/java/org/moditect/deptective/plugintest/analyzewithcomponent/AnalyzeWithDefinedComponentsTest.java     (Gunnar Morling 2019-01-30 21:10:12 +0100 52)                                 Options.WHITELISTED, \"*ALL_EXTERNAL*\",\n",
            "commit_hashes": {
                "b8e94846": "    #28 Testing that compilation fails if one package is matched by more than one component",
                "ae0dec04": "    #44 Passing options as plug-in options"
            },
            "Commit&issueIDs": {
                "b8e94846": [
                    "#28"
                ],
                "ae0dec04": [
                    "#44"
                ]
            },
            "links": [
                "https://github.com/moditect/deptective/issues/28",
                "https://github.com/moditect/deptective/commit/b8e94846",
                "https://github.com/moditect/deptective/issues/44",
                "https://github.com/moditect/deptective/commit/ae0dec04"
            ]
        },
        {
            "poj_link": "https://github.com/PapenfussLab/gridss/",
            "file_path": "PapenfussLab/gridss/src/test/java/au/edu/wehi/idsv/BreakendSummaryTest.java",
            "test_name": "getAnchorSequence_should_use_nominal_position",
            "FQS": "au.edu.wehi.idsv.BreakendSummaryTest.getAnchorSequence_should_use_nominal_position()",
            "start_line": "191",
            "blame_result": "025cfe02c (Daniel Cameron 2020-05-13 17:33:16 +1000 192) \t\tAssert.assertEquals(\n025cfe02c (Daniel Cameron 2020-05-13 17:33:16 +1000 193) \t\t\t\tnew BreakendSummary(2, FWD, 500, 400, 600).getAnchorSequence(getContext().getReference(), 10),\n025cfe02c (Daniel Cameron 2020-05-13 17:33:16 +1000 194) \t\t\t\tnew BreakendSummary(2, FWD, 500).getAnchorSequence(getContext().getReference(), 10));\n025cfe02c (Daniel Cameron 2020-05-13 17:33:16 +1000 195) \t}\n025cfe02c (Daniel Cameron 2020-05-13 17:33:16 +1000 196) \t@Test\n",
            "commit_hashes": {
                "025cfe02c": "    #344 Fixed IHOMLEN bug where -ve breakends had revcomp insert sequences when comparing"
            },
            "Commit&issueIDs": {
                "025cfe02c": [
                    "#344"
                ]
            },
            "links": [
                "https://github.com/PapenfussLab/gridss/issues/344",
                "https://github.com/PapenfussLab/gridss/commit/025cfe02c"
            ]
        },
        {
            "poj_link": "https://github.com/iterate-ch/cyberduck/",
            "file_path": "iterate-ch/cyberduck/manta/src/test/java/ch/cyberduck/core/manta/MantaListServiceTest.java",
            "test_name": "testAccountRoot",
            "FQS": "ch.cyberduck.core.manta.MantaListServiceTest.testAccountRoot()",
            "start_line": "60",
            "blame_result": "639124b0e30 manta/src/test/java/ch/cyberduck/core/manta/MantaListServiceTest.java (David Kocher 2017-10-08 22:41:03 +0200 61)         final MantaAccountHomeInfo root = new MantaAccountHomeInfo(session.getHost().getCredentials().getUsername(), session.getHost().getDefaultPath());\nddffd06f41d manta/src/test/java/ch/cyberduck/core/manta/MantaListServiceTest.java (David Kocher 2022-04-03 21:06:49 +0200 62)         final Path directory = root.getAccountRoot();\nd52c5d818c2 manta/src/test/java/ch/cyberduck/core/manta/MantaListServiceIT.java   (Tomas Celaya 2017-08-15 07:50:47 -0700 63)         final AttributedList<Path> list = new MantaListService(session)\nddffd06f41d manta/src/test/java/ch/cyberduck/core/manta/MantaListServiceTest.java (David Kocher 2022-04-03 21:06:49 +0200 64)                 .list(directory, new DisabledListProgressListener());\nd52c5d818c2 manta/src/test/java/ch/cyberduck/core/manta/MantaListServiceIT.java   (Tomas Celaya 2017-08-15 07:50:47 -0700 65)         assertFalse(list.isEmpty());\n",
            "commit_hashes": {
                "639124b0e30": "    Review.",
                "ddffd06f41d": "    Add tests to ensure parent directory reference is preserved keeping attributes from vault.",
                "d52c5d818c2": "    feature/9711-support-manta-object-store (#2)"
            },
            "Commit&issueIDs": {
                "d52c5d818c2": [
                    "(#2)"
                ]
            },
            "links": [
                "https://github.com/iterate-ch/cyberduck/issues/2",
                "https://github.com/iterate-ch/cyberduck/commit/d52c5d818c2"
            ]
        },
        {
            "poj_link": "https://github.com/tdunning/t-digest/",
            "file_path": "tdunning/t-digest/core/src/test/java/com/tdunning/math/stats/TDigestTest.java",
            "test_name": "testSerialization",
            "FQS": "com.tdunning.math.stats.TDigestTest.testSerialization()",
            "start_line": "728",
            "blame_result": "bc1deb81 src/test/java/com/tdunning/math/stats/TDigestTest.java    (Ted Dunning 2016-05-28 15:41:45 +0100 729)         Random gen = getRandom();\n0e0614b5 src/test/java/com/tdunning/math/stats/TDigestTest.java    (Ted Dunning 2017-08-06 13:49:10 -0700 730)         final double compression = 20 + randomDouble() * 100;\nbc1deb81 src/test/java/com/tdunning/math/stats/TDigestTest.java    (Ted Dunning 2016-05-28 15:41:45 +0100 731)         TDigest dist = factory(compression).create();\nee53e4a9 src/test/java/org/apache/mahout/math/stats/HistoTest.java (Ted Dunning 2013-11-19 22:44:46 -0800 732)         for (int i = 0; i < 100000; i++) {\nee53e4a9 src/test/java/org/apache/mahout/math/stats/HistoTest.java (Ted Dunning 2013-11-19 22:44:46 -0800 733)             double x = gen.nextDouble();\n",
            "commit_hashes": {
                "bc1deb81": "    Closes #32. Switch to randomized tests (thanks to jpountz)",
                "0e0614b5": "    Closes #90 - makes MergingDigest be consistent on serialization.",
                "ee53e4a9": "    Added source code."
            },
            "Commit&issueIDs": {
                "0e0614b5": [
                    "#90"
                ]
            },
            "links": [
                "https://github.com/tdunning/t-digest/issues/90",
                "https://github.com/tdunning/t-digest/commit/0e0614b5"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/core/utils/RelativeDirectoryMapperTest.java",
            "test_name": "testGetdefaultInstance",
            "FQS": "org.verapdf.core.utils.RelativeDirectoryMapperTest.testGetdefaultInstance()",
            "start_line": "50",
            "blame_result": "991de83cf (Carl Wilson 2016-11-13 10:30:24 +0000 51) \t\tFileOutputMapper defaultInstance = RelativeDirectoryMapper.defaultInstance();\nc40505559 (MaximPlusov 2022-06-01 14:20:49 +0300 52) \t\tassertSame(defaultInstance, RelativeDirectoryMapper.defaultInstance());\n991de83cf (Carl Wilson 2016-11-13 10:30:24 +0000 53) \t}\n991de83cf (Carl Wilson 2016-11-13 10:30:24 +0000 54) \n991de83cf (Carl Wilson 2016-11-13 10:30:24 +0000 55) \t@Test(expected=NullPointerException.class)\n",
            "commit_hashes": {
                "991de83cf": "    FIX - Metadata Repair Output",
                "c40505559": "    Fix codacy issues (#1256)"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/metadata/fixer/FixerConfigTest.java",
            "test_name": "testDefaultInstance",
            "FQS": "org.verapdf.metadata.fixer.FixerConfigTest.testDefaultInstance()",
            "start_line": "58",
            "blame_result": "146ed5279 (Carl Wilson 2016-10-30 11:14:57 +0000 59) \t\tMetadataFixerConfig defaultConfig = FixerFactory.defaultConfig();\nc40505559 (MaximPlusov 2022-06-01 14:20:49 +0300 60) \t\tassertSame(defaultConfig, FixerFactory.defaultConfig());\nc40505559 (MaximPlusov 2022-06-01 14:20:49 +0300 61) \t\tassertEquals(defaultConfig, FixerFactory.defaultConfig());\n146ed5279 (Carl Wilson 2016-10-30 11:14:57 +0000 62) \t}\n146ed5279 (Carl Wilson 2016-10-30 11:14:57 +0000 63) \n",
            "commit_hashes": {
                "146ed5279": "    REFACT - Processor configuration",
                "c40505559": "    Fix codacy issues (#1256)"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/metadata/fixer/FixerConfigTest.java",
            "test_name": "testFromValues",
            "FQS": "org.verapdf.metadata.fixer.FixerConfigTest.testFromValues()",
            "start_line": "69",
            "blame_result": "146ed5279 (Carl Wilson 2016-10-30 11:14:57 +0000 70) \t\tMetadataFixerConfig defaultConfig = FixerFactory.defaultConfig();\ndc1bd6125 (Maxim       2023-09-27 17:09:22 +0300 71) \t\tMetadataFixerConfig fromVals = FixerFactory.configFromValues(defaultConfig.getFixesPrefix());\nc40505559 (MaximPlusov 2022-06-01 14:20:49 +0300 72) \t\tassertEquals(defaultConfig, fromVals);\nc40505559 (MaximPlusov 2022-06-01 14:20:49 +0300 73) \t\tassertNotSame(defaultConfig, fromVals);\n146ed5279 (Carl Wilson 2016-10-30 11:14:57 +0000 74) \t}\n",
            "commit_hashes": {
                "146ed5279": "    REFACT - Processor configuration",
                "dc1bd6125": "    Remove fixId from MetadataFixerConfig",
                "c40505559": "    Fix codacy issues (#1256)"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/metadata/fixer/FixerConfigTest.java",
            "test_name": "testToXmlMetadataFixerConfigOutputStreamBoolean",
            "FQS": "org.verapdf.metadata.fixer.FixerConfigTest.testToXmlMetadataFixerConfigOutputStreamBoolean()",
            "start_line": "93",
            "blame_result": "146ed5279 (Carl Wilson 2016-10-30 11:14:57 +0000 94) \t\tFile temp = Files.createTempFile(\"\", \"\").toFile();\n146ed5279 (Carl Wilson 2016-10-30 11:14:57 +0000 95) \t\tMetadataFixerConfig defaultInstance = FixerFactory.defaultConfig();\nc40505559 (MaximPlusov 2022-06-01 14:20:49 +0300 96) \t\tassertSame(defaultInstance, FixerFactory.defaultConfig());\n146ed5279 (Carl Wilson 2016-10-30 11:14:57 +0000 97) \t\ttry (OutputStream fos = new FileOutputStream(temp)) {\na5fa854ea (Carl Wilson 2016-11-03 12:50:36 +0000 98) \t\t\tXmlSerialiser.toXml(FixerFactory.defaultConfig(), fos, true, true);\n",
            "commit_hashes": {
                "146ed5279": "    REFACT - Processor configuration",
                "c40505559": "    Fix codacy issues (#1256)",
                "a5fa854ea": "    REFACT - Purge old JAXB methods"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/pdfa/results/LocationTest.java",
            "test_name": "testDefaultInstance",
            "FQS": "org.verapdf.pdfa.results.LocationTest.testDefaultInstance()",
            "start_line": "60",
            "blame_result": "47a86b701 core/src/test/java/org/verapdf/pdfa/results/LocationTests.java (Carl Wilson 2015-11-16 15:03:49 +0000 61)         Location defaultLoc = ValidationResults.defaultLocation();\nc40505559 core/src/test/java/org/verapdf/pdfa/results/LocationTest.java  (MaximPlusov 2022-06-01 14:20:49 +0300 62)         assertEquals(defaultLoc, ValidationResults.defaultLocation());\nc40505559 core/src/test/java/org/verapdf/pdfa/results/LocationTest.java  (MaximPlusov 2022-06-01 14:20:49 +0300 63)         assertSame(defaultLoc, ValidationResults.defaultLocation());\n47a86b701 core/src/test/java/org/verapdf/pdfa/results/LocationTests.java (Carl Wilson 2015-11-16 15:03:49 +0000 64)     }\n47a86b701 core/src/test/java/org/verapdf/pdfa/results/LocationTests.java (Carl Wilson 2015-11-16 15:03:49 +0000 65) \n",
            "commit_hashes": {
                "47a86b701": "    Improved core unit test coverage.",
                "c40505559": "    Fix codacy issues (#1256)"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/pdfa/results/LocationTest.java",
            "test_name": "testFromValues",
            "FQS": "org.verapdf.pdfa.results.LocationTest.testFromValues()",
            "start_line": "70",
            "blame_result": "b1b9998df core/src/test/java/org/verapdf/pdfa/results/LocationTest.java  (Carl Wilson 2017-04-13 18:02:27 +0300 71)         Location fromValLoc = ValidationResults.locationFromValues(\"level\", \"context\"); //$NON-NLS-1$ //$NON-NLS-2$\nc40505559 core/src/test/java/org/verapdf/pdfa/results/LocationTest.java  (MaximPlusov 2022-06-01 14:20:49 +0300 72)         assertEquals(fromValLoc, ValidationResults.defaultLocation());\nc40505559 core/src/test/java/org/verapdf/pdfa/results/LocationTest.java  (MaximPlusov 2022-06-01 14:20:49 +0300 73)         assertNotSame(fromValLoc, ValidationResults.defaultLocation());\n47a86b701 core/src/test/java/org/verapdf/pdfa/results/LocationTests.java (Carl Wilson 2015-11-16 15:03:49 +0000 74)     }\n47a86b701 core/src/test/java/org/verapdf/pdfa/results/LocationTests.java (Carl Wilson 2015-11-16 15:03:49 +0000 75) \n",
            "commit_hashes": {
                "b1b9998df": "    FIX - XML Report & Result Deserialisation",
                "c40505559": "    Fix codacy issues (#1256)",
                "47a86b701": "    Improved core unit test coverage."
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/pdfa/results/ValidationResultTest.java",
            "test_name": "testDefaultInstance",
            "FQS": "org.verapdf.pdfa.results.ValidationResultTest.testDefaultInstance()",
            "start_line": "73",
            "blame_result": "a5fa854ea core/src/test/java/org/verapdf/pdfa/results/ValidationResultTest.java  (Carl Wilson 2016-11-03 12:50:36 +0000 74) \t\tValidationResult defaultResult = ValidationResults.defaultResult();\nc40505559 core/src/test/java/org/verapdf/pdfa/results/ValidationResultTest.java  (MaximPlusov 2022-06-01 14:20:49 +0300 75) \t\tassertEquals(defaultResult, ValidationResults.defaultResult());\nc40505559 core/src/test/java/org/verapdf/pdfa/results/ValidationResultTest.java  (MaximPlusov 2022-06-01 14:20:49 +0300 76) \t\tassertSame(defaultResult, ValidationResults.defaultResult());\na5fa854ea core/src/test/java/org/verapdf/pdfa/results/ValidationResultTest.java  (Carl Wilson 2016-11-03 12:50:36 +0000 77) \t}\n47a86b701 core/src/test/java/org/verapdf/pdfa/results/ValidationResultTests.java (Carl Wilson 2015-11-16 15:03:49 +0000 78) \n",
            "commit_hashes": {
                "a5fa854ea": "    REFACT - Purge old JAXB methods",
                "c40505559": "    Fix codacy issues (#1256)",
                "47a86b701": "    Improved core unit test coverage."
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/pdfa/validation/profiles/ReferenceImplTest.java",
            "test_name": "testFromValues",
            "FQS": "org.verapdf.pdfa.validation.profiles.ReferenceImplTest.testFromValues()",
            "start_line": "62",
            "blame_result": "a5fa854ea (Carl Wilson 2016-11-03 12:50:36 +0000 63) \t\t// Get an equivalent to the default instance\na5fa854ea (Carl Wilson 2016-11-03 12:50:36 +0000 64) \t\tReference reference = Profiles.referenceFromValues(\"specification\", \"clause\");\na5fa854ea (Carl Wilson 2016-11-03 12:50:36 +0000 65) \t\tReference defaultInstance = Profiles.defaultReference();\na5fa854ea (Carl Wilson 2016-11-03 12:50:36 +0000 66) \t\t// Equivalent is NOT the same object as default instance\nc40505559 (MaximPlusov 2022-06-01 14:20:49 +0300 67) \t\tassertNotSame(reference, defaultInstance);\n",
            "commit_hashes": {
                "a5fa854ea": "    REFACT - Purge old JAXB methods",
                "c40505559": "    Fix codacy issues (#1256)"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/pdfa/validation/profiles/RuleIdImplTest.java",
            "test_name": "testFromValues",
            "FQS": "org.verapdf.pdfa.validation.profiles.RuleIdImplTest.testFromValues()",
            "start_line": "60",
            "blame_result": "b194a79ff core/src/test/java/org/verapdf/pdfa/validation/RuleIdImplTest.java          (Carl Wilson 2015-10-22 11:09:40 +0100 61)         // Get an equivalent to the default instance\n47a86b701 core/src/test/java/org/verapdf/pdfa/validation/RuleIdImplTest.java          (Carl Wilson 2015-11-16 15:03:49 +0000 62)         RuleId ruleId = Profiles.ruleIdFromValues(Specification.NO_STANDARD, \"clause\", 0);\n47a86b701 core/src/test/java/org/verapdf/pdfa/validation/RuleIdImplTest.java          (Carl Wilson 2015-11-16 15:03:49 +0000 63)         RuleId defaultInstance = Profiles.defaultRuleId();\nb194a79ff core/src/test/java/org/verapdf/pdfa/validation/RuleIdImplTest.java          (Carl Wilson 2015-10-22 11:09:40 +0100 64)         // Equivalent is NOT the same object as default instance\nc40505559 core/src/test/java/org/verapdf/pdfa/validation/profiles/RuleIdImplTest.java (MaximPlusov 2022-06-01 14:20:49 +0300 65)         assertNotSame(ruleId, defaultInstance);\n",
            "commit_hashes": {
                "b194a79ff": "    Implementation types and tests for profile.",
                "47a86b701": "    Improved core unit test coverage.",
                "c40505559": "    Fix codacy issues (#1256)"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/pdfa/validation/profiles/RuleImplTest.java",
            "test_name": "testFromValues",
            "FQS": "org.verapdf.pdfa.validation.profiles.RuleImplTest.testFromValues()",
            "start_line": "73",
            "blame_result": "83093e376 core/src/test/java/org/verapdf/pdfa/validation/RuleImplTest.java          (Carl Wilson 2015-10-22 11:09:40 +0100 74)         // Get an equivalent to the default instance\n83093e376 core/src/test/java/org/verapdf/pdfa/validation/RuleImplTest.java          (Carl Wilson 2015-10-22 11:09:40 +0100 75)         RuleImpl rule = RuleImpl\n29b70f6fd core/src/test/java/org/verapdf/pdfa/validation/profiles/RuleImplTest.java (MaximPlusov 2023-08-21 11:36:28 +0300 76)                 .fromValues(Profiles.defaultRuleId(), \"object\", null, null,\nc49358972 core/src/test/java/org/verapdf/pdfa/validation/profiles/RuleImplTest.java (Maxim       2023-12-08 17:42:19 +0300 77)                         \"description\", \"test\", ErrorDetailsImpl.defaultInstance(), Collections.emptyList());\n83093e376 core/src/test/java/org/verapdf/pdfa/validation/RuleImplTest.java          (Carl Wilson 2015-10-22 11:09:40 +0100 78)         Rule defaultInstance = RuleImpl.defaultInstance();\n",
            "commit_hashes": {
                "83093e376": "    Implementation types and tests for profile.",
                "29b70f6fd": "    Add tags for rules (#1367)",
                "c49358972": "    Refactoring"
            },
            "Commit&issueIDs": {
                "29b70f6fd": [
                    "(#1367)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1367",
                "https://github.com/veraPDF/veraPDF-library/commit/29b70f6fd"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/pdfa/validation/profiles/RuleImplTest.java",
            "test_name": "testFromRule",
            "FQS": "org.verapdf.pdfa.validation.profiles.RuleImplTest.testFromRule()",
            "start_line": "91",
            "blame_result": "83093e376 core/src/test/java/org/verapdf/pdfa/validation/RuleImplTest.java          (Carl Wilson 2015-10-22 11:09:40 +0100 92)         // Get an equivalent to the default instance\n83093e376 core/src/test/java/org/verapdf/pdfa/validation/RuleImplTest.java          (Carl Wilson 2015-10-22 11:09:40 +0100 93)         Rule rule = RuleImpl.fromRule(RuleImpl.defaultInstance());\n83093e376 core/src/test/java/org/verapdf/pdfa/validation/RuleImplTest.java          (Carl Wilson 2015-10-22 11:09:40 +0100 94)         Rule defaultInstance = RuleImpl.defaultInstance();\n83093e376 core/src/test/java/org/verapdf/pdfa/validation/RuleImplTest.java          (Carl Wilson 2015-10-22 11:09:40 +0100 95)         // Equivalent is NOT the same object as default instance\nc40505559 core/src/test/java/org/verapdf/pdfa/validation/profiles/RuleImplTest.java (MaximPlusov 2022-06-01 14:20:49 +0300 96)         assertNotSame(rule, defaultInstance);\n",
            "commit_hashes": {
                "83093e376": "    Implementation types and tests for profile.",
                "c40505559": "    Fix codacy issues (#1256)"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/pdfa/validation/validators/ValidatorConfigTest.java",
            "test_name": "testDefaultInstance",
            "FQS": "org.verapdf.pdfa.validation.validators.ValidatorConfigTest.testDefaultInstance()",
            "start_line": "58",
            "blame_result": "6704786f4 core/src/test/java/org/verapdf/pdfa/validation/validators/ValdidatorConfigTest.java (Carl Wilson 2016-10-30 00:55:22 +0100 59) \t\tValidatorConfig defaultInstance = ValidatorFactory.defaultConfig();\nc40505559 core/src/test/java/org/verapdf/pdfa/validation/validators/ValidatorConfigTest.java  (MaximPlusov 2022-06-01 14:20:49 +0300 60) \t\tassertSame(defaultInstance, ValidatorFactory.defaultConfig());\ncb0c63b27 core/src/test/java/org/verapdf/pdfa/validation/validators/ValdidatorConfigTest.java (Carl Wilson 2016-10-30 00:53:44 +0100 61) \t}\ncb0c63b27 core/src/test/java/org/verapdf/pdfa/validation/validators/ValdidatorConfigTest.java (Carl Wilson 2016-10-30 00:53:44 +0100 62) \ncb0c63b27 core/src/test/java/org/verapdf/pdfa/validation/validators/ValdidatorConfigTest.java (Carl Wilson 2016-10-30 00:53:44 +0100 63) \t/**\n",
            "commit_hashes": {
                "6704786f4": "    REFACT - Processoror Configuration",
                "c40505559": "    Fix codacy issues (#1256)",
                "cb0c63b27": "    Added ValidatorConfig tests."
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/pdfa/validation/validators/ValidatorConfigTest.java",
            "test_name": "testFromValues",
            "FQS": "org.verapdf.pdfa.validation.validators.ValidatorConfigTest.testFromValues()",
            "start_line": "68",
            "blame_result": "6704786f4 core/src/test/java/org/verapdf/pdfa/validation/validators/ValdidatorConfigTest.java (Carl Wilson 2016-10-30 00:55:22 +0100 69) \t\tValidatorConfig defaultInstance = ValidatorFactory.defaultConfig();\nc9e026f78 core/src/test/java/org/verapdf/pdfa/validation/validators/ValidatorConfigTest.java  (MaximPlusov 2022-05-17 12:28:07 +0300 70) \t\tValidatorConfig fromVals = ValidatorFactory.createConfig(defaultInstance.getFlavour(),\nc9e026f78 core/src/test/java/org/verapdf/pdfa/validation/validators/ValidatorConfigTest.java  (MaximPlusov 2022-05-17 12:28:07 +0300 71) \t\t\t\tdefaultInstance.getDefaultFlavour(), defaultInstance.isRecordPasses(), defaultInstance.getMaxFails(),\nc9e026f78 core/src/test/java/org/verapdf/pdfa/validation/validators/ValidatorConfigTest.java  (MaximPlusov 2022-05-17 12:28:07 +0300 72) \t\t\t\tdefaultInstance.isDebug(), false, Level.WARNING, defaultInstance.getMaxNumberOfDisplayedFailedChecks(),\n650db48ae core/src/test/java/org/verapdf/pdfa/validation/validators/ValidatorConfigTest.java  (MaximPlusov 2023-04-06 13:04:11 +0300 73) \t\t\t\tdefaultInstance.showErrorMessages(), \"\", false, false);\n",
            "commit_hashes": {
                "6704786f4": "    REFACT - Processoror Configuration",
                "c9e026f78": "    Show errorMessages in xml and html report (#1251)",
                "650db48ae": "    Fix zip processing"
            },
            "Commit&issueIDs": {
                "c9e026f78": [
                    "(#1251)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1251",
                "https://github.com/veraPDF/veraPDF-library/commit/c9e026f78"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/processor/reports/ValidationBatchSummaryTest.java",
            "test_name": "testDefaultInstance",
            "FQS": "org.verapdf.processor.reports.ValidationBatchSummaryTest.testDefaultInstance()",
            "start_line": "106",
            "blame_result": "e27d56fb0 (Carl Wilson 2017-04-19 01:53:55 +0100 107) \t\tValidationBatchSummary defaultInstance = ValidationBatchSummaryImpl.defaultInstance();\nc40505559 (MaximPlusov 2022-06-01 14:20:49 +0300 108) \t\tassertSame(defaultInstance, ValidationBatchSummaryImpl.defaultInstance());\ne27d56fb0 (Carl Wilson 2017-04-19 01:53:55 +0100 109) \t}\ne27d56fb0 (Carl Wilson 2017-04-19 01:53:55 +0100 110) \ne27d56fb0 (Carl Wilson 2017-04-19 01:53:55 +0100 111) \t/**\n",
            "commit_hashes": {
                "e27d56fb0": "    FIX - XML Report Clarity",
                "c40505559": "    Fix codacy issues (#1256)"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/processor/reports/ValidationBatchSummaryTest.java",
            "test_name": "testFromValues",
            "FQS": "org.verapdf.processor.reports.ValidationBatchSummaryTest.testFromValues()",
            "start_line": "115",
            "blame_result": "e27d56fb0 (Carl Wilson 2017-04-19 01:53:55 +0100 116) \t\tValidationBatchSummary instance = ValidationBatchSummaryImpl.fromValues(0, 0, 0);\nc40505559 (MaximPlusov 2022-06-01 14:20:49 +0300 117) \t\tassertNotSame(instance, ValidationBatchSummaryImpl.defaultInstance());\ne27d56fb0 (Carl Wilson 2017-04-19 01:53:55 +0100 118) \t\tassertEquals(ValidationBatchSummaryImpl.defaultInstance(), instance);\ne27d56fb0 (Carl Wilson 2017-04-19 01:53:55 +0100 119) \t}\ne27d56fb0 (Carl Wilson 2017-04-19 01:53:55 +0100 120) \n",
            "commit_hashes": {
                "e27d56fb0": "    FIX - XML Report Clarity",
                "c40505559": "    Fix codacy issues (#1256)"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/version/SemanticVersionTest.java",
            "test_name": "testCompareTo",
            "FQS": "org.verapdf.version.SemanticVersionTest.testCompareTo()",
            "start_line": "179",
            "blame_result": "4a1bd5aab core/src/test/java/org/verapdf/SemanticVersionTest.java (Carl Wilson 2017-05-26 01:06:30 +0100 180) \t\tSemanticVersionNumber vNum = VersionNumberImpl.fromString(v1_0_0);\ne06279a40 core/src/test/java/org/verapdf/SemanticVersionTest.java (Carl Wilson 2017-05-26 07:20:30 +0100 181) \t\tSemanticVersionNumber verNum = VersionNumberImpl.fromString(v1_0_0pdf);\n4a1bd5aab core/src/test/java/org/verapdf/SemanticVersionTest.java (Carl Wilson 2017-05-26 01:06:30 +0100 182) \t\tassertEquals(vNum, verNum);\nc40505559 core/src/test/java/org/verapdf/SemanticVersionTest.java (MaximPlusov 2022-06-01 14:20:49 +0300 183) \t\tassertEquals(0, vNum.compareTo(verNum));\n4a1bd5aab core/src/test/java/org/verapdf/SemanticVersionTest.java (Carl Wilson 2017-05-26 01:06:30 +0100 184) \t\tSemanticVersionNumber lessThan = VersionNumberImpl.fromInts(0,90,100);\n",
            "commit_hashes": {
                "4a1bd5aab": "    FEAT - Version comparison",
                "e06279a40": "    FIX - removed old version tests.",
                "c40505559": "    Fix codacy issues (#1256)"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/tdunning/t-digest/",
            "file_path": "tdunning/t-digest/core/src/test/java/com/tdunning/math/stats/TDigestTest.java",
            "test_name": "testQuantile",
            "FQS": "com.tdunning.math.stats.TDigestTest.testQuantile()",
            "start_line": "207",
            "blame_result": "eca1125a (Ted Dunning 2021-01-25 17:05:13 -0800 208)         double compression = 100;\neca1125a (Ted Dunning 2021-01-25 17:05:13 -0800 209)         double[] samples = new double[]{1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 5.0, 6.0, 7.0};\neca1125a (Ted Dunning 2021-01-25 17:05:13 -0800 210)         for (int i = 1; i < 10000; i++) {\neca1125a (Ted Dunning 2021-01-25 17:05:13 -0800 211)             TDigest hist1 = new MergingDigest(compression);\neca1125a (Ted Dunning 2021-01-25 17:05:13 -0800 212)             List<Double> data = new ArrayList<>();\n",
            "commit_hashes": {
                "eca1125a": "    Forced stable sorting. Closes #153, #114, #113, #102"
            },
            "Commit&issueIDs": {
                "eca1125a": [
                    "#102"
                ]
            },
            "links": [
                "https://github.com/tdunning/t-digest/issues/102",
                "https://github.com/tdunning/t-digest/commit/eca1125a"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java",
            "test_name": "shouldPutAndGetValue",
            "FQS": "com.iluwatar.abstractdocument.AbstractDocumentTest.shouldPutAndGetValue()",
            "start_line": "52",
            "blame_result": "afdeba4f9a (qza 2016-06-04 20:06:32 +0200 53)     document.put(KEY, VALUE);\nafdeba4f9a (qza 2016-06-04 20:06:32 +0200 54)     assertEquals(VALUE, document.get(KEY));\nafdeba4f9a (qza 2016-06-04 20:06:32 +0200 55)   }\n43f90ead48 (qza 2016-06-02 07:29:37 +0200 56) \nafdeba4f9a (qza 2016-06-04 20:06:32 +0200 57)   @Test\n",
            "commit_hashes": {
                "afdeba4f9a": "    #355 finalize example",
                "43f90ead48": "    #355 abstract document test"
            },
            "Commit&issueIDs": {
                "afdeba4f9a": [
                    "#355"
                ],
                "43f90ead48": [
                    "#355"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/355",
                "https://github.com/iluwatar/java-design-patterns/commit/afdeba4f9a",
                "https://github.com/iluwatar/java-design-patterns/issues/355",
                "https://github.com/iluwatar/java-design-patterns/commit/43f90ead48"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/abstract-document/src/test/java/com/iluwatar/abstractdocument/AbstractDocumentTest.java",
            "test_name": "shouldUpdateExistingValue",
            "FQS": "com.iluwatar.abstractdocument.AbstractDocumentTest.shouldUpdateExistingValue()",
            "start_line": "111",
            "blame_result": "44a9766656 (drishtii7 2024-03-31 04:47:04 -0300 112)     // Arrange\n44a9766656 (drishtii7 2024-03-31 04:47:04 -0300 113)     final String key = \"key\";\n44a9766656 (drishtii7 2024-03-31 04:47:04 -0300 114)     final String originalValue = \"originalValue\";\n44a9766656 (drishtii7 2024-03-31 04:47:04 -0300 115)     final String updatedValue = \"updatedValue\";\n44a9766656 (drishtii7 2024-03-31 04:47:04 -0300 116) \n",
            "commit_hashes": {
                "44a9766656": "    refactor: Changes to make Abstract-Document and Adapter better. (#2872)"
            },
            "Commit&issueIDs": {
                "44a9766656": [
                    "2872"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/2872",
                "https://github.com/iluwatar/java-design-patterns/commit/44a9766656"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/identity-map/src/test/java/com/iluwatar/identitymap/IdentityMapTest.java",
            "test_name": "testGetFromMap",
            "FQS": "com.iluwatar.identitymap.IdentityMapTest.testGetFromMap()",
            "start_line": "54",
            "blame_result": "d2599a2904 (u7275858 2022-11-10 06:55:44 +1100 55)     // new instance of an identity map(not connected to any DB here)\nd2599a2904 (u7275858 2022-11-10 06:55:44 +1100 56)     IdentityMap idMap = new IdentityMap();\nd2599a2904 (u7275858 2022-11-10 06:55:44 +1100 57)     // Dummy person instances\nd2599a2904 (u7275858 2022-11-10 06:55:44 +1100 58)     Person person1 = new Person(11, \"Michael\", 27304159);\nd2599a2904 (u7275858 2022-11-10 06:55:44 +1100 59)     Person person2 = new Person(22, \"John\", 42273631);\n",
            "commit_hashes": {
                "d2599a2904": "    feature: #1299 Add Identity Map Pattern (#2094)"
            },
            "Commit&issueIDs": {
                "d2599a2904": [
                    "#1299",
                    "(#2094)"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/1299",
                "https://github.com/iluwatar/java-design-patterns/commit/d2599a2904"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/parameter-object/src/test/java/com/iluwatar/parameter/object/SearchServiceTest.java",
            "test_name": "testDefaultParametersMatch",
            "FQS": "com.iluwatar.parameter.object.SearchServiceTest.testDefaultParametersMatch()",
            "start_line": "53",
            "blame_result": "846d05672a (Martel Richard 2021-02-28 15:12:48 +0530 54)     assertEquals(searchService.search(parameterObject), searchService.search(\"sneakers\",\n846d05672a (Martel Richard 2021-02-28 15:12:48 +0530 55)         SortOrder.ASC), \"Default Parameter values do not not match.\");\n846d05672a (Martel Richard 2021-02-28 15:12:48 +0530 56)     LOGGER.info(\"SortBy Default parameter value matches.\");\n846d05672a (Martel Richard 2021-02-28 15:12:48 +0530 57) \n846d05672a (Martel Richard 2021-02-28 15:12:48 +0530 58)     assertEquals(searchService.search(parameterObject), searchService.search(\"sneakers\",\n",
            "commit_hashes": {
                "846d05672a": "    #1638 Add Parameter Object pattern (#1650)"
            },
            "Commit&issueIDs": {
                "846d05672a": [
                    "#1638",
                    "(#1650)"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/1638",
                "https://github.com/iluwatar/java-design-patterns/commit/846d05672a"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/presentation-model/src/test/java/com/iluwatar/presentationmodel/PresentationTest.java",
            "test_name": "testSetSelectedAlbumNumber_1",
            "FQS": "com.iluwatar.presentationmodel.PresentationTest.testSetSelectedAlbumNumber_1()",
            "start_line": "45",
            "blame_result": "f1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 46)     PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 47)     final int selectId = 2;\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 48)     model.setSelectedAlbumNumber(selectId);\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 49)     assertEquals(albumList[selectId - 1], model.getTitle());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 50)   }\n",
            "commit_hashes": {
                "f1feb3f6a0": "    feature: Implement Presentation Model Pattern  (#1710)"
            },
            "Commit&issueIDs": {
                "f1feb3f6a0": [
                    "(#1710)"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/1710",
                "https://github.com/iluwatar/java-design-patterns/commit/f1feb3f6a0"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/presentation-model/src/test/java/com/iluwatar/presentationmodel/PresentationTest.java",
            "test_name": "testSetSelectedAlbumNumber_2",
            "FQS": "com.iluwatar.presentationmodel.PresentationTest.testSetSelectedAlbumNumber_2()",
            "start_line": "53",
            "blame_result": "f1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 54)     PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 55)     final int selectId = 4;\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 56)     model.setSelectedAlbumNumber(selectId);\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 57)     assertEquals(albumList[selectId - 1], model.getTitle());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 58)   }\n",
            "commit_hashes": {
                "f1feb3f6a0": "    feature: Implement Presentation Model Pattern  (#1710)"
            },
            "Commit&issueIDs": {
                "f1feb3f6a0": [
                    "(#1710)"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/1710",
                "https://github.com/iluwatar/java-design-patterns/commit/f1feb3f6a0"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/presentation-model/src/test/java/com/iluwatar/presentationmodel/PresentationTest.java",
            "test_name": "testSetTitle_1",
            "FQS": "com.iluwatar.presentationmodel.PresentationTest.testSetTitle_1()",
            "start_line": "61",
            "blame_result": "f1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 62)     PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 63)     String testTitle = \"TestTile\";\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 64)     model.setTitle(testTitle);\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 65)     assertEquals(testTitle, model.getTitle());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 66)   }\n",
            "commit_hashes": {
                "f1feb3f6a0": "    feature: Implement Presentation Model Pattern  (#1710)"
            },
            "Commit&issueIDs": {
                "f1feb3f6a0": [
                    "(#1710)"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/1710",
                "https://github.com/iluwatar/java-design-patterns/commit/f1feb3f6a0"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/presentation-model/src/test/java/com/iluwatar/presentationmodel/PresentationTest.java",
            "test_name": "testSetTitle_2",
            "FQS": "com.iluwatar.presentationmodel.PresentationTest.testSetTitle_2()",
            "start_line": "69",
            "blame_result": "f1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 70)     PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 71)     String testTitle = \"\";\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 72)     model.setTitle(testTitle);\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 73)     assertEquals(testTitle, model.getTitle());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 74)   }\n",
            "commit_hashes": {
                "f1feb3f6a0": "    feature: Implement Presentation Model Pattern  (#1710)"
            },
            "Commit&issueIDs": {
                "f1feb3f6a0": [
                    "(#1710)"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/1710",
                "https://github.com/iluwatar/java-design-patterns/commit/f1feb3f6a0"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/presentation-model/src/test/java/com/iluwatar/presentationmodel/PresentationTest.java",
            "test_name": "testSetArtist_1",
            "FQS": "com.iluwatar.presentationmodel.PresentationTest.testSetArtist_1()",
            "start_line": "77",
            "blame_result": "f1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 78)     PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 79)     String testArtist = \"TestArtist\";\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 80)     model.setArtist(testArtist);\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 81)     assertEquals(testArtist, model.getArtist());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 82)   }\n",
            "commit_hashes": {
                "f1feb3f6a0": "    feature: Implement Presentation Model Pattern  (#1710)"
            },
            "Commit&issueIDs": {
                "f1feb3f6a0": [
                    "(#1710)"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/1710",
                "https://github.com/iluwatar/java-design-patterns/commit/f1feb3f6a0"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/presentation-model/src/test/java/com/iluwatar/presentationmodel/PresentationTest.java",
            "test_name": "testSetArtist_2",
            "FQS": "com.iluwatar.presentationmodel.PresentationTest.testSetArtist_2()",
            "start_line": "85",
            "blame_result": "f1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 86)     PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 87)     String testArtist = \"\";\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 88)     model.setArtist(testArtist);\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 89)     assertEquals(testArtist, model.getArtist());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 90)   }\n",
            "commit_hashes": {
                "f1feb3f6a0": "    feature: Implement Presentation Model Pattern  (#1710)"
            },
            "Commit&issueIDs": {
                "f1feb3f6a0": [
                    "(#1710)"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/1710",
                "https://github.com/iluwatar/java-design-patterns/commit/f1feb3f6a0"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/presentation-model/src/test/java/com/iluwatar/presentationmodel/PresentationTest.java",
            "test_name": "testSetComposer_true",
            "FQS": "com.iluwatar.presentationmodel.PresentationTest.testSetComposer_true()",
            "start_line": "110",
            "blame_result": "f1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 111)     PresentationModel model = new PresentationModel(PresentationModel.albumDataSet());\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 112)     String testComposer = \"TestComposer\";\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 113) \nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 114)     model.setIsClassical(true);\nf1feb3f6a0 presentation/src/test/java/com/iluwatar/presentation/PresentationTest.java (EdisonE3 2021-05-11 21:46:11 +0800 115)     model.setComposer(testComposer);\n",
            "commit_hashes": {
                "f1feb3f6a0": "    feature: Implement Presentation Model Pattern  (#1710)"
            },
            "Commit&issueIDs": {
                "f1feb3f6a0": [
                    "(#1710)"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/1710",
                "https://github.com/iluwatar/java-design-patterns/commit/f1feb3f6a0"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/version-number/src/test/java/com/iluwatar/versionnumber/BookRepositoryTest.java",
            "test_name": "testAliceAndBobHaveDifferentVersionsAfterAliceUpdate",
            "FQS": "com.iluwatar.versionnumber.BookRepositoryTest.testAliceAndBobHaveDifferentVersionsAfterAliceUpdate()",
            "start_line": "53",
            "blame_result": "97e3a3debc (Pavel Manannikov 2020-11-23 19:42:50 +0200 54)     final var aliceBook = bookRepository.get(bookId);\n97e3a3debc (Pavel Manannikov 2020-11-23 19:42:50 +0200 55)     final var bobBook = bookRepository.get(bookId);\n2332520d67 (Pavel Manannikov 2020-10-13 20:17:25 +0300 56) \n2332520d67 (Pavel Manannikov 2020-10-13 20:17:25 +0300 57)     aliceBook.setTitle(\"Kama Sutra\");\n2332520d67 (Pavel Manannikov 2020-10-13 20:17:25 +0300 58)     bookRepository.update(aliceBook);\n",
            "commit_hashes": {
                "97e3a3debc": "    #1284 Use local variable inference",
                "2332520d67": "    #1284 Implement Version Number pattern"
            },
            "Commit&issueIDs": {
                "97e3a3debc": [
                    "#1284"
                ],
                "2332520d67": [
                    "#1284"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/1284",
                "https://github.com/iluwatar/java-design-patterns/commit/97e3a3debc",
                "https://github.com/iluwatar/java-design-patterns/issues/1284",
                "https://github.com/iluwatar/java-design-patterns/commit/2332520d67"
            ]
        },
        {
            "poj_link": "https://github.com/iluwatar/java-design-patterns/",
            "file_path": "iluwatar/java-design-patterns/version-number/src/test/java/com/iluwatar/versionnumber/BookRepositoryTest.java",
            "test_name": "testShouldThrowVersionMismatchExceptionOnStaleUpdate",
            "FQS": "com.iluwatar.versionnumber.BookRepositoryTest.testShouldThrowVersionMismatchExceptionOnStaleUpdate()",
            "start_line": "69",
            "blame_result": "97e3a3debc (Pavel Manannikov 2020-11-23 19:42:50 +0200 70)     final var aliceBook = bookRepository.get(bookId);\n97e3a3debc (Pavel Manannikov 2020-11-23 19:42:50 +0200 71)     final var bobBook = bookRepository.get(bookId);\n2332520d67 (Pavel Manannikov 2020-10-13 20:17:25 +0300 72) \n2332520d67 (Pavel Manannikov 2020-10-13 20:17:25 +0300 73)     aliceBook.setTitle(\"Kama Sutra\");\n2332520d67 (Pavel Manannikov 2020-10-13 20:17:25 +0300 74)     bookRepository.update(aliceBook);\n",
            "commit_hashes": {
                "97e3a3debc": "    #1284 Use local variable inference",
                "2332520d67": "    #1284 Implement Version Number pattern"
            },
            "Commit&issueIDs": {
                "97e3a3debc": [
                    "#1284"
                ],
                "2332520d67": [
                    "#1284"
                ]
            },
            "links": [
                "https://github.com/iluwatar/java-design-patterns/issues/1284",
                "https://github.com/iluwatar/java-design-patterns/commit/97e3a3debc",
                "https://github.com/iluwatar/java-design-patterns/issues/1284",
                "https://github.com/iluwatar/java-design-patterns/commit/2332520d67"
            ]
        },
        {
            "poj_link": "https://github.com/apache/zookeeper/",
            "file_path": "apache/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java",
            "test_name": "testAddAndRemove",
            "FQS": "org.apache.zookeeper.server.util.BitMapTest.testAddAndRemove()",
            "start_line": "30",
            "blame_result": "629518b5ea zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java (Tim te Beek 2023-02-10 16:54:14 +0100 31)         BitMap<String> bitMap = new BitMap<>();\nfe940cdd8f zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java (tison       2019-08-17 08:13:15 -0700 32)         String v1 = \"v1\";\nfdde8b0064 src/java/test/org/apache/zookeeper/server/util/BitMapTest.java                  (Fangmin Lyu 2018-09-28 14:38:24 -0700 33)         Integer bit = bitMap.add(v1);\nfdde8b0064 src/java/test/org/apache/zookeeper/server/util/BitMapTest.java                  (Fangmin Lyu 2018-09-28 14:38:24 -0700 34) \nfe940cdd8f zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java (tison       2019-08-17 08:13:15 -0700 35)         assertEquals(1, bitMap.size());\n",
            "commit_hashes": {
                "629518b5ea": "    [ZOOKEEPER-4672] Code cleanup - apply JDK7 Diamond operator consistently (#1979)",
                "fe940cdd8f": "    ZOOKEEPER-3475: Enable Checkstyle configuration on zookeeper-server",
                "fdde8b0064": "    ZOOKEEPER-1177: Add the memory optimized watch manager for concentrate watches scenario"
            },
            "Commit&issueIDs": {
                "629518b5ea": [
                    "(#1979)"
                ]
            },
            "links": [
                "https://github.com/apache/zookeeper/issues/1979",
                "https://github.com/apache/zookeeper/commit/629518b5ea"
            ]
        },
        {
            "poj_link": "https://github.com/apache/zookeeper/",
            "file_path": "apache/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java",
            "test_name": "testBitReuse",
            "FQS": "org.apache.zookeeper.server.util.BitMapTest.testBitReuse()",
            "start_line": "64",
            "blame_result": "629518b5ea zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java (Tim te Beek 2023-02-10 16:54:14 +0100 65)         BitMap<String> bitMap = new BitMap<>();\nfdde8b0064 src/java/test/org/apache/zookeeper/server/util/BitMapTest.java                  (Fangmin Lyu 2018-09-28 14:38:24 -0700 66)         int v1Bit = bitMap.add(\"v1\");\nfdde8b0064 src/java/test/org/apache/zookeeper/server/util/BitMapTest.java                  (Fangmin Lyu 2018-09-28 14:38:24 -0700 67)         int v2Bit = bitMap.add(\"v2\");\nfdde8b0064 src/java/test/org/apache/zookeeper/server/util/BitMapTest.java                  (Fangmin Lyu 2018-09-28 14:38:24 -0700 68)         int v3Bit = bitMap.add(\"v3\");\nfdde8b0064 src/java/test/org/apache/zookeeper/server/util/BitMapTest.java                  (Fangmin Lyu 2018-09-28 14:38:24 -0700 69)         bitMap.remove(v2Bit);\n",
            "commit_hashes": {
                "629518b5ea": "    [ZOOKEEPER-4672] Code cleanup - apply JDK7 Diamond operator consistently (#1979)",
                "fdde8b0064": "    ZOOKEEPER-1177: Add the memory optimized watch manager for concentrate watches scenario"
            },
            "Commit&issueIDs": {
                "629518b5ea": [
                    "(#1979)"
                ]
            },
            "links": [
                "https://github.com/apache/zookeeper/issues/1979",
                "https://github.com/apache/zookeeper/commit/629518b5ea"
            ]
        },
        {
            "poj_link": "https://github.com/geonetwork/core-geonetwork/",
            "file_path": "geonetwork/core-geonetwork/core/src/test/java/org/fao/geonet/kernel/ThesaurusTest.java",
            "test_name": "testAddElementKeywordBean",
            "FQS": "org.fao.geonet.kernel.ThesaurusTest.testAddElementKeywordBean()",
            "start_line": "93",
            "blame_result": "79586ad5787 core/src/test/java/org/fao/geonet/kernel/ThesaurusTest.java (Patrick Valsecchi 2019-09-09 08:42:35 +0200 94)         writableThesaurus.clear();\n42eaccee2dc web/src/test/java/org/fao/geonet/kernel/ThesaurusTest.java  (jesseeichar       2012-06-11 11:46:21 +0000 95)         String label = \"Hello\";\n42eaccee2dc web/src/test/java/org/fao/geonet/kernel/ThesaurusTest.java  (jesseeichar       2012-06-11 11:46:21 +0000 96)         String note = \"note\";\n42eaccee2dc web/src/test/java/org/fao/geonet/kernel/ThesaurusTest.java  (jesseeichar       2012-06-11 11:46:21 +0000 97)         String code = \"http://thesaurus.test#0\";\n42eaccee2dc web/src/test/java/org/fao/geonet/kernel/ThesaurusTest.java  (jesseeichar       2012-06-11 11:46:21 +0000 98)         String coordEast = \"12\";\n",
            "commit_hashes": {
                "79586ad5787": "    Fix tests",
                "42eaccee2dc": "    updated thesaurus for multilingual.  Added documentation and tests as described in #924 (take 2)"
            },
            "Commit&issueIDs": {
                "42eaccee2dc": [
                    "#924"
                ]
            },
            "links": [
                "https://github.com/geonetwork/core-geonetwork/issues/924",
                "https://github.com/geonetwork/core-geonetwork/commit/42eaccee2dc"
            ]
        },
        {
            "poj_link": "https://github.com/streamnative/aop/",
            "file_path": "streamnative/aop/tests-qpid-jms-client/src/test/java/io/streamnative/pulsar/handlers/amqp/qpid/jms_1_1/extensions/queue/LastValueQueueTest.java",
            "test_name": "testParallelProductionAndConsumption",
            "FQS": "io.streamnative.pulsar.handlers.amqp.qpid.jms_1_1.extensions.queue.LastValueQueueTest.testParallelProductionAndConsumption()",
            "start_line": "319",
            "blame_result": "a69d97d9 (ran 2020-07-28 15:37:37 +0800 320)     {\na69d97d9 (ran 2020-07-28 15:37:37 +0800 321)         final String queueName = getTestName();\na69d97d9 (ran 2020-07-28 15:37:37 +0800 322)         final Queue queue = createConflationQueue(queueName, KEY_PROPERTY, false);\na69d97d9 (ran 2020-07-28 15:37:37 +0800 323) \na69d97d9 (ran 2020-07-28 15:37:37 +0800 324)         int numberOfUniqueKeyValues = 2;\n",
            "commit_hashes": {
                "a69d97d9": "    Add Qpid-JMS test for JMS 1.1 (#133)"
            },
            "Commit&issueIDs": {
                "a69d97d9": [
                    "133"
                ]
            },
            "links": [
                "https://github.com/streamnative/aop/issues/133",
                "https://github.com/streamnative/aop/commit/a69d97d9"
            ]
        },
        {
            "poj_link": "https://github.com/alibaba/Sentinel/",
            "file_path": "alibaba/Sentinel/sentinel-core/src/test/java/com/alibaba/csp/sentinel/node/ClusterNodeTest.java",
            "test_name": "testGetOrCreateOriginNodeSingleThread",
            "FQS": "com.alibaba.csp.sentinel.node.ClusterNodeTest.testGetOrCreateOriginNodeSingleThread()",
            "start_line": "41",
            "blame_result": "6bb2de875 (Eric Zhao 2019-11-06 16:10:25 +0800 42)         ClusterNode clusterNode = new ClusterNode(\"test\");\n22e8d85a8 (cdfive    2019-01-29 10:07:17 +0800 43) \n22e8d85a8 (cdfive    2019-01-29 10:07:17 +0800 44)         String origin1 = \"origin1\";\n22e8d85a8 (cdfive    2019-01-29 10:07:17 +0800 45)         Node originNode1 = clusterNode.getOrCreateOriginNode(origin1);\n22e8d85a8 (cdfive    2019-01-29 10:07:17 +0800 46)         assertNotNull(originNode1);\n",
            "commit_hashes": {
                "6bb2de875": "    Support classification for Sentinel resources",
                "22e8d85a8": "    Add some unit test for StatisticNode, ClusterNode and DefaultNodeBuilder class (#423)"
            },
            "Commit&issueIDs": {
                "22e8d85a8": [
                    "(#423)"
                ]
            },
            "links": [
                "https://github.com/alibaba/Sentinel/issues/423",
                "https://github.com/alibaba/Sentinel/commit/22e8d85a8"
            ]
        },
        {
            "poj_link": "https://github.com/eacdy/Sentinel-Dashboard-Nacos/",
            "file_path": "eacdy/Sentinel-Dashboard-Nacos/sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeTest.java",
            "test_name": "testEquals",
            "FQS": "com.alibaba.csp.sentinel.slots.block.degrade.DegradeTest.testEquals()",
            "start_line": "154",
            "blame_result": "2eecd3ac (Lin.Liang 2019-06-14 17:42:03 +0800 155)         DegradeRule degradeRule1 = new DegradeRule();\n2eecd3ac (Lin.Liang 2019-06-14 17:42:03 +0800 156)         DegradeRule degradeRule2 = new DegradeRule();\n2eecd3ac (Lin.Liang 2019-06-14 17:42:03 +0800 157)         assertTrue(degradeRule1.equals(degradeRule2));\n2eecd3ac (Lin.Liang 2019-06-14 17:42:03 +0800 158) \n2eecd3ac (Lin.Liang 2019-06-14 17:42:03 +0800 159)         int rtSlowRequestAmount = 10;\n",
            "commit_hashes": {
                "2eecd3ac": "    Make the value of RT_MAX_EXCEED_N in DegradeRule configurable (#789)"
            },
            "Commit&issueIDs": {
                "2eecd3ac": [
                    "789"
                ]
            },
            "links": [
                "https://github.com/eacdy/Sentinel-Dashboard-Nacos/issues/789",
                "https://github.com/eacdy/Sentinel-Dashboard-Nacos/commit/2eecd3ac"
            ]
        },
        {
            "poj_link": "https://github.com/apache/ratis/",
            "file_path": "apache/ratis/ratis-common/src/test/java/org/apache/ratis/util/TestNetUtils.java",
            "test_name": "skipsUsedPort",
            "FQS": "org.apache.ratis.util.TestNetUtils.skipsUsedPort()",
            "start_line": "50",
            "blame_result": "54750b3e1 (Doroszlai, Attila 2023-12-20 16:26:43 +0100 51)     int port = NetUtils.getFreePort();\n54750b3e1 (Doroszlai, Attila 2023-12-20 16:26:43 +0100 52)     try (ServerSocket ignored = new ServerSocket(port + 1)) {\n54750b3e1 (Doroszlai, Attila 2023-12-20 16:26:43 +0100 53)       int nextPort = NetUtils.getFreePort();\n54750b3e1 (Doroszlai, Attila 2023-12-20 16:26:43 +0100 54)       Assertions.assertEquals(port + 2, nextPort);\n54750b3e1 (Doroszlai, Attila 2023-12-20 16:26:43 +0100 55)     }\n",
            "commit_hashes": {
                "54750b3e1": "    RATIS-1981. Avoid random ports in tests (#996)"
            },
            "Commit&issueIDs": {
                "54750b3e1": [
                    "(#996)"
                ]
            },
            "links": [
                "https://github.com/apache/ratis/issues/996",
                "https://github.com/apache/ratis/commit/54750b3e1"
            ]
        },
        {
            "poj_link": "https://github.com/alibaba/Sentinel/",
            "file_path": "alibaba/Sentinel/sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/statistic/metric/BucketLeapArrayTest.java",
            "test_name": "testWindowAfterOneInterval",
            "FQS": "com.alibaba.csp.sentinel.slots.statistic.metric.BucketLeapArrayTest.testWindowAfterOneInterval()",
            "start_line": "69",
            "blame_result": "044cdbb1b sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/statistic/metric/BucketLeapArrayTest.java (Eric Zhao 2019-03-14 10:04:56 +0800 70)         BucketLeapArray leapArray = new BucketLeapArray(sampleCount, intervalInMs);\n^c92fea5d sentinel-core/src/test/java/com/alibaba/csp/sentinel/base/metric/WindowLeapArrayTest.java            (Eric Zhao 2018-07-23 15:51:05 +0800 71)         long firstTime = TimeUtil.currentTimeMillis();\n^c92fea5d sentinel-core/src/test/java/com/alibaba/csp/sentinel/base/metric/WindowLeapArrayTest.java            (Eric Zhao 2018-07-23 15:51:05 +0800 72)         long previousWindowStart = firstTime - firstTime % windowLengthInMs;\n54905497d sentinel-core/src/test/java/com/alibaba/csp/sentinel/base/metric/MetricsLeapArrayTest.java           (Eric Zhao 2018-09-12 19:16:39 +0800 73)         WindowWrap<MetricBucket> window = leapArray.currentWindow(previousWindowStart);\n^c92fea5d sentinel-core/src/test/java/com/alibaba/csp/sentinel/base/metric/WindowLeapArrayTest.java            (Eric Zhao 2018-07-23 15:51:05 +0800 74) \n",
            "commit_hashes": {
                "044cdbb1b": "    Add occupy mechanism for future buckets of sliding window to support \"prioritized requests final pass\" (#568)",
                "c92fea5d": "    Welcome to the world, Sentinel",
                "54905497d": "    Refactor LeapArray to reuse code for current bucket"
            },
            "Commit&issueIDs": {
                "044cdbb1b": [
                    "(#568)"
                ]
            },
            "links": [
                "https://github.com/alibaba/Sentinel/issues/568",
                "https://github.com/alibaba/Sentinel/commit/044cdbb1b"
            ]
        },
        {
            "poj_link": "https://github.com/alibaba/Sentinel/",
            "file_path": "alibaba/Sentinel/sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/statistic/metric/BucketLeapArrayTest.java",
            "test_name": "testGetPreviousWindow",
            "FQS": "com.alibaba.csp.sentinel.slots.statistic.metric.BucketLeapArrayTest.testGetPreviousWindow()",
            "start_line": "150",
            "blame_result": "044cdbb1b sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/statistic/metric/BucketLeapArrayTest.java (Eric Zhao 2019-03-14 10:04:56 +0800 151)         BucketLeapArray leapArray = new BucketLeapArray(sampleCount, intervalInMs);\n^c92fea5d sentinel-core/src/test/java/com/alibaba/csp/sentinel/base/metric/WindowLeapArrayTest.java            (Eric Zhao 2018-07-23 15:51:05 +0800 152)         long time = TimeUtil.currentTimeMillis();\n54905497d sentinel-core/src/test/java/com/alibaba/csp/sentinel/base/metric/MetricsLeapArrayTest.java           (Eric Zhao 2018-09-12 19:16:39 +0800 153)         WindowWrap<MetricBucket> previousWindow = leapArray.currentWindow(time);\n^c92fea5d sentinel-core/src/test/java/com/alibaba/csp/sentinel/base/metric/WindowLeapArrayTest.java            (Eric Zhao 2018-07-23 15:51:05 +0800 154)         assertNull(leapArray.getPreviousWindow(time));\n^c92fea5d sentinel-core/src/test/java/com/alibaba/csp/sentinel/base/metric/WindowLeapArrayTest.java            (Eric Zhao 2018-07-23 15:51:05 +0800 155) \n",
            "commit_hashes": {
                "044cdbb1b": "    Add occupy mechanism for future buckets of sliding window to support \"prioritized requests final pass\" (#568)",
                "c92fea5d": "    Welcome to the world, Sentinel",
                "54905497d": "    Refactor LeapArray to reuse code for current bucket"
            },
            "Commit&issueIDs": {
                "044cdbb1b": [
                    "(#568)"
                ]
            },
            "links": [
                "https://github.com/alibaba/Sentinel/issues/568",
                "https://github.com/alibaba/Sentinel/commit/044cdbb1b"
            ]
        },
        {
            "poj_link": "https://github.com/alibaba/Sentinel/",
            "file_path": "alibaba/Sentinel/sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParameterMetricStorageTest.java",
            "test_name": "testInitParamMetrics",
            "FQS": "com.alibaba.csp.sentinel.slots.block.flow.param.ParameterMetricStorageTest.testInitParamMetrics()",
            "start_line": "39",
            "blame_result": "e9719d32e sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowSlotTest.java (Eric Zhao 2019-04-22 11:06:26 +0800 40)         ParamFlowRule rule = new ParamFlowRule();\ne9719d32e sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowSlotTest.java (Eric Zhao 2019-04-22 11:06:26 +0800 41)         rule.setParamIdx(1);\n88a02623a sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowSlotTest.java (Eric Zhao 2018-09-27 14:15:47 +0800 42)         int index = 1;\n88a02623a sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowSlotTest.java (Eric Zhao 2018-09-27 14:15:47 +0800 43)         String resourceName = \"res-\" + System.currentTimeMillis();\n88a02623a sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParamFlowSlotTest.java (Eric Zhao 2018-09-27 14:15:47 +0800 44)         ResourceWrapper resourceWrapper = new StringResourceWrapper(resourceName, EntryType.IN);\n",
            "commit_hashes": {
                "e9719d32e": "    Refactor flow algorithm for parameter flow control and support more traffic shaping mode (#677)",
                "88a02623a": "    Add flow control by frequent (hot spot) parameters (#156)"
            },
            "Commit&issueIDs": {
                "e9719d32e": [
                    "(#677)"
                ],
                "88a02623a": [
                    "(#156)"
                ]
            },
            "links": [
                "https://github.com/alibaba/Sentinel/issues/677",
                "https://github.com/alibaba/Sentinel/commit/e9719d32e",
                "https://github.com/alibaba/Sentinel/issues/156",
                "https://github.com/alibaba/Sentinel/commit/88a02623a"
            ]
        },
        {
            "poj_link": "https://github.com/alibaba/Sentinel/",
            "file_path": "alibaba/Sentinel/sentinel-extension/sentinel-parameter-flow-control/src/test/java/com/alibaba/csp/sentinel/slots/block/flow/param/ParameterMetricTest.java",
            "test_name": "testInitAndClearParameterMetric",
            "FQS": "com.alibaba.csp.sentinel.slots.block.flow.param.ParameterMetricTest.testInitAndClearParameterMetric()",
            "start_line": "42",
            "blame_result": "e9719d32e (Eric Zhao 2019-04-22 11:06:26 +0800 43)         // Create a parameter metric for resource \"abc\".\n88a02623a (Eric Zhao 2018-09-27 14:15:47 +0800 44)         ParameterMetric metric = new ParameterMetric();\n88a02623a (Eric Zhao 2018-09-27 14:15:47 +0800 45) \ne9719d32e (Eric Zhao 2019-04-22 11:06:26 +0800 46)         ParamFlowRule rule = new ParamFlowRule(\"abc\")\ne9719d32e (Eric Zhao 2019-04-22 11:06:26 +0800 47)             .setParamIdx(1);\n",
            "commit_hashes": {
                "e9719d32e": "    Refactor flow algorithm for parameter flow control and support more traffic shaping mode (#677)",
                "88a02623a": "    Add flow control by frequent (hot spot) parameters (#156)"
            },
            "Commit&issueIDs": {
                "e9719d32e": [
                    "(#677)"
                ],
                "88a02623a": [
                    "(#156)"
                ]
            },
            "links": [
                "https://github.com/alibaba/Sentinel/issues/677",
                "https://github.com/alibaba/Sentinel/commit/e9719d32e",
                "https://github.com/alibaba/Sentinel/issues/156",
                "https://github.com/alibaba/Sentinel/commit/88a02623a"
            ]
        },
        {
            "poj_link": "https://github.com/adobe/aem-core-cif-components/",
            "file_path": "adobe/aem-core-cif-components/bundles/core/src/test/java/com/adobe/cq/commerce/core/components/internal/models/v1/navigation/NavigationImplTest.java",
            "test_name": "testNavigationPagesHierarchySelection",
            "FQS": "com.adobe.cq.commerce.core.components.internal.models.v1.navigation.NavigationImplTest.testNavigationPagesHierarchySelection()",
            "start_line": "324",
            "blame_result": "401dd4afb (Mark J. Becker 2019-06-12 10:22:09 +0200 325)         // check the properties of a navigation item related to a normal page\n^b3fecf2b (Mark J. Becker 2019-05-03 09:27:26 +0200 326) \n^b3fecf2b (Mark J. Becker 2019-05-03 09:27:26 +0200 327)         String pageTitle = \"Page 1\";\n^b3fecf2b (Mark J. Becker 2019-05-03 09:27:26 +0200 328)         String pageURL = \"/page1\";\n^b3fecf2b (Mark J. Becker 2019-05-03 09:27:26 +0200 329)         boolean active = true;\n",
            "commit_hashes": {
                "401dd4afb": "    Introduce Code Formatting (#44)",
                "b3fecf2b": "    CIF-792 - Open-source CIF core components"
            },
            "Commit&issueIDs": {
                "401dd4afb": [
                    "44"
                ]
            },
            "links": [
                "https://github.com/adobe/aem-core-cif-components/issues/44",
                "https://github.com/adobe/aem-core-cif-components/commit/401dd4afb"
            ]
        },
        {
            "poj_link": "https://github.com/adobe/aem-core-cif-components/",
            "file_path": "adobe/aem-core-cif-components/bundles/core/src/test/java/com/adobe/cq/commerce/core/components/internal/models/v1/navigation/NavigationImplTest.java",
            "test_name": "testNavigationCategoryHierarchySelection",
            "FQS": "com.adobe.cq.commerce.core.components.internal.models.v1.navigation.NavigationImplTest.testNavigationCategoryHierarchySelection()",
            "start_line": "464",
            "blame_result": "401dd4afb (Mark J. Becker 2019-06-12 10:22:09 +0200 465)         // check the properties of a navigation item related to a category\n^b3fecf2b (Mark J. Becker 2019-05-03 09:27:26 +0200 466) \n0c0c6ba36 (Markus Haack   2021-06-30 18:01:49 +0200 467)         String categoryId = \"uid-0\";\n2cd907083 (Markus Haack   2021-07-08 12:29:19 +0200 468)         String categoryUrlPath = \"category-1\";\n^b3fecf2b (Mark J. Becker 2019-05-03 09:27:26 +0200 469)         String categoryName = \"Category 1\";\n",
            "commit_hashes": {
                "401dd4afb": "    Introduce Code Formatting (#44)",
                "b3fecf2b": "    CIF-792 - Open-source CIF core components",
                "0c0c6ba36": "    CIF-2129 - remove \"id\" support for CIF Core Components (#588)",
                "2cd907083": "    CIF-2062 - Implement simplified version of UrlProvider (#602)"
            },
            "Commit&issueIDs": {
                "401dd4afb": [
                    "44"
                ],
                "0c0c6ba36": [
                    "588"
                ],
                "2cd907083": [
                    "602"
                ]
            },
            "links": [
                "https://github.com/adobe/aem-core-cif-components/issues/44",
                "https://github.com/adobe/aem-core-cif-components/commit/401dd4afb",
                "https://github.com/adobe/aem-core-cif-components/issues/588",
                "https://github.com/adobe/aem-core-cif-components/commit/0c0c6ba36",
                "https://github.com/adobe/aem-core-cif-components/issues/602",
                "https://github.com/adobe/aem-core-cif-components/commit/2cd907083"
            ]
        },
        {
            "poj_link": "https://github.com/the-qa-company/qEndpoint/",
            "file_path": "the-qa-company/qEndpoint/qendpoint-core/src/test/java/com/the_qa_company/qendpoint/core/util/LargeFakeDataSetStreamSupplierTest.java",
            "test_name": "mergeTest",
            "FQS": "com.the_qa_company.qendpoint.core.util.LargeFakeDataSetStreamSupplierTest.mergeTest()",
            "start_line": "163",
            "blame_result": "bd30b9d1c (Antoine Willerval 2023-05-17 17:03:03 +0200 164) \t\tPath root = tempDir.newFolder().toPath();\nc2bef2a2d (qaate47           2023-01-27 13:50:49 +0100 165) \t\tlong size = 42;\nc2bef2a2d (qaate47           2023-01-27 13:50:49 +0100 166) \t\tlong seed = 54;\nc2bef2a2d (qaate47           2023-01-27 13:50:49 +0100 167) \t\tLargeFakeDataSetStreamSupplier supplier = LargeFakeDataSetStreamSupplier.createSupplierWithMaxSize(size, seed);\nc2bef2a2d (qaate47           2023-01-27 13:50:49 +0100 168) \n",
            "commit_hashes": {
                "bd30b9d1c": "    GH-336 WIP QEPCore (#361)",
                "c2bef2a2d": "    Fork RDFHDT as qendpoint-core module, update CI, add CLI/License"
            },
            "Commit&issueIDs": {
                "bd30b9d1c": [
                    "361"
                ]
            },
            "links": [
                "https://github.com/the-qa-company/qEndpoint/issues/361",
                "https://github.com/the-qa-company/qEndpoint/commit/bd30b9d1c"
            ]
        },
        {
            "poj_link": "https://github.com/jhy/jsoup/",
            "file_path": "jhy/jsoup/src/test/java/org/jsoup/internal/SoftPoolTest.java",
            "test_name": "testSoftReferenceBehavior",
            "FQS": "org.jsoup.internal.SoftPoolTest.testSoftReferenceBehavior()",
            "start_line": "89",
            "blame_result": "ec2d0c4b3 (Jonathan Hedley 2024-08-10 10:00:32 +1000 90)         SoftPool<char[]> softLocalPool = new SoftPool<>(() -> new char[BufSize]);\nec2d0c4b3 (Jonathan Hedley 2024-08-10 10:00:32 +1000 91) \nec2d0c4b3 (Jonathan Hedley 2024-08-10 10:00:32 +1000 92)         // Borrow and release an object\nec2d0c4b3 (Jonathan Hedley 2024-08-10 10:00:32 +1000 93)         char[] buffer = softLocalPool.borrow();\nec2d0c4b3 (Jonathan Hedley 2024-08-10 10:00:32 +1000 94)         assertEquals(BufSize, buffer.length);\n",
            "commit_hashes": {
                "ec2d0c4b3": "    Improve buffer management throughout the load/fetch and parse lifecycle (#2186)"
            },
            "Commit&issueIDs": {
                "ec2d0c4b3": [
                    "2186"
                ]
            },
            "links": [
                "https://github.com/jhy/jsoup/issues/2186",
                "https://github.com/jhy/jsoup/commit/ec2d0c4b3"
            ]
        },
        {
            "poj_link": "https://github.com/jhy/jsoup/",
            "file_path": "jhy/jsoup/src/test/java/org/jsoup/parser/StreamParserTest.java",
            "test_name": "select",
            "FQS": "org.jsoup.parser.StreamParserTest.select()",
            "start_line": "8",
            "blame_result": "2b443dff8 (Jonathan Hedley 2024-01-05 11:14:51 +1100  9) import org.junit.jupiter.api.Test;\n2b443dff8 (Jonathan Hedley 2024-01-05 11:14:51 +1100 10) \n2b443dff8 (Jonathan Hedley 2024-01-05 11:14:51 +1100 11) import java.io.BufferedReader;\n2b443dff8 (Jonathan Hedley 2024-01-05 11:14:51 +1100 12) import java.io.File;\n2b443dff8 (Jonathan Hedley 2024-01-05 11:14:51 +1100 13) import java.io.IOException;\n",
            "commit_hashes": {
                "2b443dff8": "    Progressive parsing with StreamParser (#2096)"
            },
            "Commit&issueIDs": {
                "2b443dff8": [
                    "(#2096)"
                ]
            },
            "links": [
                "https://github.com/jhy/jsoup/issues/2096",
                "https://github.com/jhy/jsoup/commit/2b443dff8"
            ]
        },
        {
            "poj_link": "https://github.com/OpenHFT/Chronicle-Core/",
            "file_path": "OpenHFT/Chronicle-Core/src/test/java/net/openhft/chronicle/core/MathsTest.java",
            "test_name": "testHashMethods",
            "FQS": "net.openhft.chronicle.core.MathsTest.testHashMethods()",
            "start_line": "530",
            "blame_result": "c25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 531)         Object o1 = \"test1\";\nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 532)         Object o2 = \"test2\";\nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 533)         Object o3 = \"test3\";\nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 534)         Object o4 = \"test4\";\nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 535)         Object o5 = \"test5\";\n",
            "commit_hashes": {
                "c25e2a361": "    added many tests (#608)"
            },
            "Commit&issueIDs": {
                "c25e2a361": [
                    "(#608)"
                ]
            },
            "links": [
                "https://github.com/OpenHFT/Chronicle-Core/issues/608",
                "https://github.com/OpenHFT/Chronicle-Core/commit/c25e2a361"
            ]
        },
        {
            "poj_link": "https://github.com/OpenHFT/Chronicle-Core/",
            "file_path": "OpenHFT/Chronicle-Core/src/test/java/net/openhft/chronicle/core/UnsafeMemory2Test.java",
            "test_name": "directMemoryInt",
            "FQS": "net.openhft.chronicle.core.UnsafeMemory2Test.directMemoryInt()",
            "start_line": "455",
            "blame_result": "0cabce8d3 (Peter Lawrey    2021-07-05 15:13:23 +0100 456)         long memory = this.memory.allocate(32);\n34c0f5fb3 (Per-\u00c5ke Minborg 2021-12-16 10:46:19 +0100 457)         this.memory.writeInt(null, memory, INT_VAL);\n34c0f5fb3 (Per-\u00c5ke Minborg 2021-12-16 10:46:19 +0100 458)         assertEquals(INT_VAL, this.memory.readInt(null, memory));\n0cabce8d3 (Peter Lawrey    2021-07-05 15:13:23 +0100 459)         this.memory.freeMemory(memory, 32);\n0cabce8d3 (Peter Lawrey    2021-07-05 15:13:23 +0100 460)     }\n",
            "commit_hashes": {
                "0cabce8d3": "    Improve test coverage of combinations of access to Unsafe.",
                "34c0f5fb3": "    Remove flaky tests in UnsafeMemory2Test, Fix #297 (#298)"
            },
            "Commit&issueIDs": {
                "34c0f5fb3": [
                    "#297",
                    "(#298)"
                ]
            },
            "links": [
                "https://github.com/OpenHFT/Chronicle-Core/issues/297",
                "https://github.com/OpenHFT/Chronicle-Core/commit/34c0f5fb3"
            ]
        },
        {
            "poj_link": "https://github.com/OpenHFT/Chronicle-Core/",
            "file_path": "OpenHFT/Chronicle-Core/src/test/java/net/openhft/chronicle/core/UnsafeMemory2Test.java",
            "test_name": "directMemoryVolatileInt",
            "FQS": "net.openhft.chronicle.core.UnsafeMemory2Test.directMemoryVolatileInt()",
            "start_line": "567",
            "blame_result": "0cabce8d3 (Peter Lawrey    2021-07-05 15:13:23 +0100 568)         long memory = this.memory.allocate(32);\n34c0f5fb3 (Per-\u00c5ke Minborg 2021-12-16 10:46:19 +0100 569)         this.memory.writeVolatileInt(null, memory, INT_VAL);\n34c0f5fb3 (Per-\u00c5ke Minborg 2021-12-16 10:46:19 +0100 570)         assertEquals(INT_VAL, this.memory.readVolatileInt(null, memory));\n0cabce8d3 (Peter Lawrey    2021-07-05 15:13:23 +0100 571)         this.memory.freeMemory(memory, 32);\n0cabce8d3 (Peter Lawrey    2021-07-05 15:13:23 +0100 572)     }\n",
            "commit_hashes": {
                "0cabce8d3": "    Improve test coverage of combinations of access to Unsafe.",
                "34c0f5fb3": "    Remove flaky tests in UnsafeMemory2Test, Fix #297 (#298)"
            },
            "Commit&issueIDs": {
                "34c0f5fb3": [
                    "#297",
                    "(#298)"
                ]
            },
            "links": [
                "https://github.com/OpenHFT/Chronicle-Core/issues/297",
                "https://github.com/OpenHFT/Chronicle-Core/commit/34c0f5fb3"
            ]
        },
        {
            "poj_link": "https://github.com/OpenHFT/Chronicle-Core/",
            "file_path": "OpenHFT/Chronicle-Core/src/test/java/net/openhft/chronicle/core/UnsafeMemory2Test.java",
            "test_name": "directMemoryOrderedInt",
            "FQS": "net.openhft.chronicle.core.UnsafeMemory2Test.directMemoryOrderedInt()",
            "start_line": "575",
            "blame_result": "0cabce8d3 (Peter Lawrey    2021-07-05 15:13:23 +0100 576)         long memory = this.memory.allocate(32);\n34c0f5fb3 (Per-\u00c5ke Minborg 2021-12-16 10:46:19 +0100 577)         this.memory.writeOrderedInt(null, memory, INT_VAL);\n34c0f5fb3 (Per-\u00c5ke Minborg 2021-12-16 10:46:19 +0100 578)         assertEquals(INT_VAL, this.memory.readVolatileInt(null, memory));\n0cabce8d3 (Peter Lawrey    2021-07-05 15:13:23 +0100 579)         this.memory.freeMemory(memory, 32);\n0cabce8d3 (Peter Lawrey    2021-07-05 15:13:23 +0100 580)     }\n",
            "commit_hashes": {
                "0cabce8d3": "    Improve test coverage of combinations of access to Unsafe.",
                "34c0f5fb3": "    Remove flaky tests in UnsafeMemory2Test, Fix #297 (#298)"
            },
            "Commit&issueIDs": {
                "34c0f5fb3": [
                    "#297",
                    "(#298)"
                ]
            },
            "links": [
                "https://github.com/OpenHFT/Chronicle-Core/issues/297",
                "https://github.com/OpenHFT/Chronicle-Core/commit/34c0f5fb3"
            ]
        },
        {
            "poj_link": "https://github.com/OpenHFT/Chronicle-Core/",
            "file_path": "OpenHFT/Chronicle-Core/src/test/java/net/openhft/chronicle/core/shutdown/HookletTest.java",
            "test_name": "testEqualsAndHashCode",
            "FQS": "net.openhft.chronicle.core.shutdown.HookletTest.testEqualsAndHashCode()",
            "start_line": "61",
            "blame_result": "c25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 62)         Runnable runnable = new TestRunnable();\nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 63)         Hooklet hooklet1 = Hooklet.of(10, runnable);\nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 64)         Hooklet hooklet2 = Hooklet.of(10, runnable);\nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 65) \nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 66)         assertEquals(hooklet1, hooklet2);\n",
            "commit_hashes": {
                "c25e2a361": "    added many tests (#608)"
            },
            "Commit&issueIDs": {
                "c25e2a361": [
                    "(#608)"
                ]
            },
            "links": [
                "https://github.com/OpenHFT/Chronicle-Core/issues/608",
                "https://github.com/OpenHFT/Chronicle-Core/commit/c25e2a361"
            ]
        },
        {
            "poj_link": "https://github.com/OpenHFT/Chronicle-Core/",
            "file_path": "OpenHFT/Chronicle-Core/src/test/java/net/openhft/chronicle/core/util/BuilderTest.java",
            "test_name": "buildShouldReturnNewInstanceForMutableTypes",
            "FQS": "net.openhft.chronicle.core.util.BuilderTest.buildShouldReturnNewInstanceForMutableTypes()",
            "start_line": "16",
            "blame_result": "c25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 17)         Builder<MyClass> builder = new MyClassBuilder(); // Assuming MyClass is mutable\nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 18)         MyClass firstInstance = builder.build();\nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 19)         MyClass secondInstance = builder.build();\nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 20)         assertNotSame(firstInstance, secondInstance);\nc25e2a361 (Peter Lawrey 2024-01-05 17:59:38 +0000 21)     }\n",
            "commit_hashes": {
                "c25e2a361": "    added many tests (#608)"
            },
            "Commit&issueIDs": {
                "c25e2a361": [
                    "(#608)"
                ]
            },
            "links": [
                "https://github.com/OpenHFT/Chronicle-Core/issues/608",
                "https://github.com/OpenHFT/Chronicle-Core/commit/c25e2a361"
            ]
        },
        {
            "poj_link": "https://github.com/neuland/jade4j/",
            "file_path": "neuland/jade4j/src/test/java/de/neuland/jade4j/template/JadeConfigurationTest.java",
            "test_name": "testCache",
            "FQS": "de.neuland.jade4j.template.JadeConfigurationTest.testCache()",
            "start_line": "50",
            "blame_result": "c21ed0c8 (Maxim Valyanskiy 2012-12-14 08:58:52 +0400 51)         JadeConfiguration config = new JadeConfiguration();\nc21ed0c8 (Maxim Valyanskiy 2012-12-14 08:58:52 +0400 52)         config.setCaching(true);\nf2e2d5f5 (Fabian Grote     2019-09-13 12:02:06 +0200 53)         JadeTemplate template = config.getTemplate(TEMPLATE_PATH);\nc21ed0c8 (Maxim Valyanskiy 2012-12-14 08:58:52 +0400 54)         assertNotNull(template);\nf2e2d5f5 (Fabian Grote     2019-09-13 12:02:06 +0200 55)         JadeTemplate template2 = config.getTemplate(TEMPLATE_PATH);\n",
            "commit_hashes": {
                "c21ed0c8": "    Thread safe template cache",
                "f2e2d5f5": "    Issue #170 (#175)"
            },
            "Commit&issueIDs": {
                "f2e2d5f5": [
                    "#170",
                    "(#175)"
                ]
            },
            "links": [
                "https://github.com/neuland/jade4j/issues/170",
                "https://github.com/neuland/jade4j/commit/f2e2d5f5"
            ]
        },
        {
            "poj_link": "https://github.com/opengoofy/hippo4j/",
            "file_path": "opengoofy/hippo4j/infra/common/src/test/java/cn/hippo4j/common/toolkit/MessageConvertTest.java",
            "test_name": "testMessageWrapperConvert",
            "FQS": "cn.hippo4j.common.toolkit.MessageConvertTest.testMessageWrapperConvert()",
            "start_line": "65",
            "blame_result": "5e2e3a3be (Xin Chen 2023-05-28 14:43:58 +0800 66)         AbstractMessage message = new RuntimeMessage();\n5e2e3a3be (Xin Chen 2023-05-28 14:43:58 +0800 67)         List<Message> runtimeMessages = new ArrayList<>();\n5e2e3a3be (Xin Chen 2023-05-28 14:43:58 +0800 68)         ThreadPoolRunStateInfo poolRunState = ThreadPoolRunStateInfo.builder()\n5e2e3a3be (Xin Chen 2023-05-28 14:43:58 +0800 69)                 .tpId(\"testTPid\")\n5e2e3a3be (Xin Chen 2023-05-28 14:43:58 +0800 70)                 .activeSize(4)\n",
            "commit_hashes": {
                "5e2e3a3be": "    add UnitTest about MessageConvert (#1358)"
            },
            "Commit&issueIDs": {
                "5e2e3a3be": [
                    "(#1358)"
                ]
            },
            "links": [
                "https://github.com/opengoofy/hippo4j/issues/1358",
                "https://github.com/opengoofy/hippo4j/commit/5e2e3a3be"
            ]
        },
        {
            "poj_link": "https://github.com/opengoofy/hippo4j/",
            "file_path": "opengoofy/hippo4j/infra/common/src/test/java/cn/hippo4j/common/toolkit/logtracing/LogMessageTest.java",
            "test_name": "testSetMsgShouldSetAnewMessageInLogMessage",
            "FQS": "cn.hippo4j.common.toolkit.logtracing.LogMessageTest.testSetMsgShouldSetAnewMessageInLogMessage()",
            "start_line": "53",
            "blame_result": "8ccf6ba22 (Annibale Ippolito 2023-05-26 09:07:02 +0200 54)         logMessage.setMsg(MESSAGE);\n8ccf6ba22 (Annibale Ippolito 2023-05-26 09:07:02 +0200 55)         assertEquals(MESSAGE, logMessage.toString());\n8ccf6ba22 (Annibale Ippolito 2023-05-26 09:07:02 +0200 56)     }\n8ccf6ba22 (Annibale Ippolito 2023-05-26 09:07:02 +0200 57) \n8ccf6ba22 (Annibale Ippolito 2023-05-26 09:07:02 +0200 58)     @Test\n",
            "commit_hashes": {
                "8ccf6ba22": "    test: Add test case for LogMessage #1331 (#1343)"
            },
            "Commit&issueIDs": {
                "8ccf6ba22": [
                    "#1331",
                    "(#1343)"
                ]
            },
            "links": [
                "https://github.com/opengoofy/hippo4j/issues/1331",
                "https://github.com/opengoofy/hippo4j/commit/8ccf6ba22"
            ]
        },
        {
            "poj_link": "https://github.com/opengoofy/hippo4j/",
            "file_path": "opengoofy/hippo4j/threadpool/core/src/test/java/cn/hippo4j/core/adapter/ZipkinExecutorAdapterTest.java",
            "test_name": "testReplace",
            "FQS": "cn.hippo4j.core.adapter.ZipkinExecutorAdapterTest.testReplace()",
            "start_line": "69",
            "blame_result": "41efe403e (tj2132584 2024-07-17 11:51:05 +0800 70)         Object executor = new CustomWrappingExecutorService(Executors.newCachedThreadPool());\nc521a9738 (Pan_Yujie 2024-09-30 22:04:21 +0800 71)         CustomWrappingExecutorService executorChange = (CustomWrappingExecutorService) executor;\n41efe403e (tj2132584 2024-07-17 11:51:05 +0800 72)         ExecutorService beforeReplace = executorChange.delegate();\n41efe403e (tj2132584 2024-07-17 11:51:05 +0800 73)         zipkinExecutorAdapter.replace(executor, dynamicThreadPool);\n41efe403e (tj2132584 2024-07-17 11:51:05 +0800 74)         ExecutorService afterReplace = executorChange.delegate();\n",
            "commit_hashes": {
                "41efe403e": "    Add a unit test class (#1559)",
                "c521a9738": "    Feature : Agent mode supports dynamic thread pool changes, alarm and monitoring functions without modifying code, and adapts to Nacos and Apollo Configuration Centers (#1572)"
            },
            "Commit&issueIDs": {
                "41efe403e": [
                    "1559"
                ],
                "c521a9738": [
                    "1572"
                ]
            },
            "links": [
                "https://github.com/opengoofy/hippo4j/issues/1559",
                "https://github.com/opengoofy/hippo4j/commit/41efe403e",
                "https://github.com/opengoofy/hippo4j/issues/1572",
                "https://github.com/opengoofy/hippo4j/commit/c521a9738"
            ]
        },
        {
            "poj_link": "https://github.com/opengoofy/hippo4j/",
            "file_path": "opengoofy/hippo4j/threadpool/core/src/test/java/cn/hippo4j/core/executor/plugin/manager/ThreadPoolPluginSupportTest.java",
            "test_name": "testGetThreadPoolId",
            "FQS": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetThreadPoolId()",
            "start_line": "51",
            "blame_result": "f7ce392db hippo4j-core/src/test/java/cn/hippo4j/core/plugin/manager/ThreadPoolPluginSupportTest.java (\u9ec4\u6210\u5174 2022-11-02 12:23:59 +0800 52)         Assert.assertEquals(executor.getThreadPoolId(), support.getThreadPoolId());\nf7ce392db hippo4j-core/src/test/java/cn/hippo4j/core/plugin/manager/ThreadPoolPluginSupportTest.java (\u9ec4\u6210\u5174 2022-11-02 12:23:59 +0800 53)     }\nf7ce392db hippo4j-core/src/test/java/cn/hippo4j/core/plugin/manager/ThreadPoolPluginSupportTest.java (\u9ec4\u6210\u5174 2022-11-02 12:23:59 +0800 54) \nf7ce392db hippo4j-core/src/test/java/cn/hippo4j/core/plugin/manager/ThreadPoolPluginSupportTest.java (\u9ec4\u6210\u5174 2022-11-02 12:23:59 +0800 55)     @Test\nf7ce392db hippo4j-core/src/test/java/cn/hippo4j/core/plugin/manager/ThreadPoolPluginSupportTest.java (\u9ec4\u6210\u5174 2022-11-02 12:23:59 +0800 56)     public void testGetThreadPoolPluginManager() {\n",
            "commit_hashes": {
                "f7ce392db": "    test: Add unit test about plugin manager (#892)"
            },
            "Commit&issueIDs": {
                "f7ce392db": [
                    "(#892)"
                ]
            },
            "links": [
                "https://github.com/opengoofy/hippo4j/issues/892",
                "https://github.com/opengoofy/hippo4j/commit/f7ce392db"
            ]
        },
        {
            "poj_link": "https://github.com/opengoofy/hippo4j/",
            "file_path": "opengoofy/hippo4j/threadpool/rpc/src/test/java/cn/hippo4j/rpc/handler/ConnectHandlerTest.java",
            "test_name": "testConnectHandlerDefault",
            "FQS": "cn.hippo4j.rpc.handler.ConnectHandlerTest.testConnectHandlerDefault()",
            "start_line": "73",
            "blame_result": "9a1089f64 hippo4j-rpc/src/test/java/cn/hippo4j/rpc/handler/ConnectHandlerTest.java    (pizihao 2023-05-04 16:10:17 +0800 74)         ConnectHandler handler = new TestConnectHandler();\n630e8402c threadpool/rpc/src/test/java/cn/hippo4j/rpc/handler/ConnectHandlerTest.java (pizihao 2023-05-20 14:23:22 +0800 75)         Request request = new DefaultRequest(key, take, new Object[0]);\n9a1089f64 hippo4j-rpc/src/test/java/cn/hippo4j/rpc/handler/ConnectHandlerTest.java    (pizihao 2023-05-04 16:10:17 +0800 76)         Response response = handler.sendHandler(request);\n9a1089f64 hippo4j-rpc/src/test/java/cn/hippo4j/rpc/handler/ConnectHandlerTest.java    (pizihao 2023-05-04 16:10:17 +0800 77)         Assert.assertNull(response);\n630e8402c threadpool/rpc/src/test/java/cn/hippo4j/rpc/handler/ConnectHandlerTest.java (pizihao 2023-05-20 14:23:22 +0800 78)         Response response1 = new DefaultResponse(key, test);\n",
            "commit_hashes": {
                "9a1089f64": "    Rpc simplify (#1212)",
                "630e8402c": "    Refactor the rpc module (#1309)"
            },
            "Commit&issueIDs": {
                "9a1089f64": [
                    "(#1212)"
                ],
                "630e8402c": [
                    "(#1309)"
                ]
            },
            "links": [
                "https://github.com/opengoofy/hippo4j/issues/1212",
                "https://github.com/opengoofy/hippo4j/commit/9a1089f64",
                "https://github.com/opengoofy/hippo4j/issues/1309",
                "https://github.com/opengoofy/hippo4j/commit/630e8402c"
            ]
        },
        {
            "poj_link": "https://github.com/molgenis/molgenis/",
            "file_path": "molgenis/molgenis/molgenis-util/src/test/java/org/molgenis/util/HugeSetTest.java",
            "test_name": "iterator",
            "FQS": "org.molgenis.util.HugeSetTest.iterator()",
            "start_line": "91",
            "blame_result": "46e5cf25534 (Fleur Kelpin      2018-09-03 21:32:18 +0200 92)     List<String> contents = Arrays.asList(\"test1\", \"test2\", \"test3\");\n46e5cf25534 (Fleur Kelpin      2018-09-03 21:32:18 +0200 93)     hugeSet.addAll(contents);\n46e5cf25534 (Fleur Kelpin      2018-09-03 21:32:18 +0200 94) \n46e5cf25534 (Fleur Kelpin      2018-09-03 21:32:18 +0200 95)     Iterator<String> it = hugeSet.iterator();\n81ea5185b2f (Dennis Hendriksen 2019-09-17 16:12:25 +0200 96)     assertEquals(contents.size(), size(it));\n",
            "commit_hashes": {
                "46e5cf25534": "    style: Format source code using mvn fmt:format",
                "81ea5185b2f": "    M6291 Replace TestNG with JUnit 5 (#8627)"
            },
            "Commit&issueIDs": {
                "81ea5185b2f": [
                    "8627"
                ]
            },
            "links": [
                "https://github.com/molgenis/molgenis/issues/8627",
                "https://github.com/molgenis/molgenis/commit/81ea5185b2f"
            ]
        },
        {
            "poj_link": "https://github.com/geosolutions-it/jai-ext/",
            "file_path": "geosolutions-it/jai-ext/jt-jiffle/jt-jiffle-language/src/test/java/it/geosolutions/jaiext/jiffle/runtime/ExecutorGeneralTest.java",
            "test_name": "removeEventListener",
            "FQS": "it.geosolutions.jaiext.jiffle.runtime.ExecutorGeneralTest.removeEventListener()",
            "start_line": "184",
            "blame_result": "a8471b688 (Andrea Aime 2018-06-18 17:11:50 +0200 185)         System.out.println(\"   remove event listener\");\na8471b688 (Andrea Aime 2018-06-18 17:11:50 +0200 186)         \na8471b688 (Andrea Aime 2018-06-18 17:11:50 +0200 187)         JiffleEventListener listener = createListener();\na8471b688 (Andrea Aime 2018-06-18 17:11:50 +0200 188)         executor.addEventListener(listener);\na8471b688 (Andrea Aime 2018-06-18 17:11:50 +0200 189)         \n",
            "commit_hashes": {
                "a8471b688": "    Resurrect the Jiffle language as a JAI-EXT module #192"
            },
            "Commit&issueIDs": {
                "a8471b688": [
                    "#192"
                ]
            },
            "links": [
                "https://github.com/geosolutions-it/jai-ext/issues/192",
                "https://github.com/geosolutions-it/jai-ext/commit/a8471b688"
            ]
        },
        {
            "poj_link": "https://github.com/datacleaner/DataCleaner/",
            "file_path": "datacleaner/DataCleaner/engine/core/src/test/java/org/datacleaner/util/convert/MapConverterTest.java",
            "test_name": "testHandleNullValues",
            "FQS": "org.datacleaner.util.convert.MapConverterTest.testHandleNullValues()",
            "start_line": "62",
            "blame_result": "3233121544 (kaspers          2015-12-17 21:33:34 +0100 63)         final Map<String, String> map1 = new LinkedHashMap<>();\n3233121544 (kaspers          2015-12-17 21:33:34 +0100 64)         map1.put(\"foo\", \"bar\");\n3233121544 (kaspers          2015-12-17 21:33:34 +0100 65)         map1.put(\"hello\", null);\n3233121544 (kaspers          2015-12-17 21:33:34 +0100 66)         map1.put(\"lorem\", \"ipsum\");\n70e7978fe4 (Dennis Du Kr\u00f8ger 2016-11-30 12:12:56 +0100 67) \n",
            "commit_hashes": {
                "3233121544": "    Added built-in converter for Map<String,String> properties",
                "70e7978fe4": "    Fix code format and automate checking (#1625)"
            },
            "Commit&issueIDs": {
                "70e7978fe4": [
                    "(#1625)"
                ]
            },
            "links": [
                "https://github.com/datacleaner/DataCleaner/issues/1625",
                "https://github.com/datacleaner/DataCleaner/commit/70e7978fe4"
            ]
        },
        {
            "poj_link": "https://github.com/jeremylong/DependencyCheck/",
            "file_path": "jeremylong/DependencyCheck/core/src/test/java/org/owasp/dependencycheck/utils/DependencyVersionUtilTest.java",
            "test_name": "testParseVersion_String_boolean",
            "FQS": "org.owasp.dependencycheck.utils.DependencyVersionUtilTest.testParseVersion_String_boolean()",
            "start_line": "67",
            "blame_result": "412b72540a dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/DependencyVersionUtilTest.java (Jeremy Long 2017-12-09 06:46:05 -0500 68)         //cpe:/a:playframework:play_framework:2.1.1:rc1-2.9.x-backport\n412b72540a dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/DependencyVersionUtilTest.java (Jeremy Long 2017-12-09 06:46:05 -0500 69)         String text = \"2.1.1.rc1.2.9.x-backport\";\n412b72540a dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/DependencyVersionUtilTest.java (Jeremy Long 2017-12-09 06:46:05 -0500 70)         boolean firstMatchOnly = false;\n2433c4108c core/src/test/java/org/owasp/dependencycheck/utils/DependencyVersionUtilTest.java                  (Jeremy Long 2019-05-04 17:46:38 -0400 71)         DependencyVersion expResult;\n412b72540a dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/DependencyVersionUtilTest.java (Jeremy Long 2017-12-09 06:46:05 -0500 72)         DependencyVersion result = DependencyVersionUtil.parseVersion(text, firstMatchOnly);\n",
            "commit_hashes": {
                "412b72540a": "    resolve version matching for issue #997",
                "2433c4108c": "    cleanup"
            },
            "Commit&issueIDs": {
                "412b72540a": [
                    "#997"
                ]
            },
            "links": [
                "https://github.com/jeremylong/DependencyCheck/issues/997",
                "https://github.com/jeremylong/DependencyCheck/commit/412b72540a"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/ReleaseDetailsTest.java",
            "test_name": "testGetDefaultInstance",
            "FQS": "org.verapdf.ReleaseDetailsTest.testGetDefaultInstance()",
            "start_line": "102",
            "blame_result": "a5fa854ea (Carl Wilson 2016-11-03 12:50:36 +0000 103) \t\tReleaseDetails instance = ReleaseDetails.defaultInstance();\na5fa854ea (Carl Wilson 2016-11-03 12:50:36 +0000 104) \t\tReleaseDetails secondInstance = ReleaseDetails.defaultInstance();\nc40505559 (MaximPlusov 2022-06-01 14:20:49 +0300 105) \t\tassertSame(instance, secondInstance);\na5fa854ea (Carl Wilson 2016-11-03 12:50:36 +0000 106) \t}\n864470c3a (Carl Wilson 2015-11-16 13:06:11 +0000 107) \n",
            "commit_hashes": {
                "a5fa854ea": "    REFACT - Purge old JAXB methods",
                "c40505559": "    Fix codacy issues (#1256)",
                "864470c3a": "    Added tests for ReleaseDetails."
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/veraPDF/veraPDF-library/",
            "file_path": "veraPDF/veraPDF-library/core/src/test/java/org/verapdf/component/AuditDurationImplTest.java",
            "test_name": "testDefaultInstance",
            "FQS": "org.verapdf.component.AuditDurationImplTest.testDefaultInstance()",
            "start_line": "22",
            "blame_result": "65039e240 (Carl Wilson 2017-04-15 08:36:03 +0300 23) \t\tAuditDuration defaultInstance = AuditDurationImpl.defaultInstance();\nc40505559 (MaximPlusov 2022-06-01 14:20:49 +0300 24) \t\tassertSame(defaultInstance, AuditDurationImpl.defaultInstance());\n65039e240 (Carl Wilson 2017-04-15 08:36:03 +0300 25) \t}\n65039e240 (Carl Wilson 2017-04-15 08:36:03 +0300 26) \n65039e240 (Carl Wilson 2017-04-15 08:36:03 +0300 27) \t@Test(expected=IllegalArgumentException.class)\n",
            "commit_hashes": {
                "65039e240": "    FIX - XML Report Clarity",
                "c40505559": "    Fix codacy issues (#1256)"
            },
            "Commit&issueIDs": {
                "c40505559": [
                    "(#1256)"
                ]
            },
            "links": [
                "https://github.com/veraPDF/veraPDF-library/issues/1256",
                "https://github.com/veraPDF/veraPDF-library/commit/c40505559"
            ]
        },
        {
            "poj_link": "https://github.com/tzaeschke/ode4j/",
            "file_path": "tzaeschke/ode4j/core/src/test/java/org/ode4j/math/DMatrix3Test.java",
            "test_name": "testSet",
            "FQS": "org.ode4j.math.DMatrix3Test.testSet()",
            "start_line": "73",
            "blame_result": "f1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDMatrix3.java (Tilmann 2023-05-12 15:15:07 +0200 74) \t\tDMatrix3 x = new DMatrix3();\nf1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDMatrix3.java (Tilmann 2023-05-12 15:15:07 +0200 75) \t\tDMatrix3 x2 = newM3();\nf1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDMatrix3.java (Tilmann 2023-05-12 15:15:07 +0200 76) \t\t\nf1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDMatrix3.java (Tilmann 2023-05-12 15:15:07 +0200 77) \t\t//test setIJ()\nf1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDMatrix3.java (Tilmann 2023-05-12 15:15:07 +0200 78) \t\tx.set00(1);\n",
            "commit_hashes": {
                "f1047bbd": "    move unit tests into code modules (#103)"
            },
            "Commit&issueIDs": {
                "f1047bbd": [
                    "103"
                ]
            },
            "links": [
                "https://github.com/tzaeschke/ode4j/issues/103",
                "https://github.com/tzaeschke/ode4j/commit/f1047bbd"
            ]
        },
        {
            "poj_link": "https://github.com/MyRobotLab/myrobotlab/",
            "file_path": "MyRobotLab/myrobotlab/src/test/java/org/myrobotlab/config/ConfigUtilsTest.java",
            "test_name": "testGetId",
            "FQS": "org.myrobotlab.config.ConfigUtilsTest.testGetId()",
            "start_line": "41",
            "blame_result": "c5f87ac39a (GroG 2024-03-12 19:15:19 -0700 42)     assertEquals(ConfigUtils.getId(), ConfigUtils.loadRuntimeConfig(null).id);\nc5f87ac39a (GroG 2024-03-12 19:15:19 -0700 43)   }\nc5f87ac39a (GroG 2024-03-12 19:15:19 -0700 44) \nc5f87ac39a (GroG 2024-03-12 19:15:19 -0700 45) \nc5f87ac39a (GroG 2024-03-12 19:15:19 -0700 46) }\n",
            "commit_hashes": {
                "c5f87ac39a": "    Framework updates (#1407)"
            },
            "Commit&issueIDs": {
                "c5f87ac39a": [
                    "1407"
                ]
            },
            "links": [
                "https://github.com/MyRobotLab/myrobotlab/issues/1407",
                "https://github.com/MyRobotLab/myrobotlab/commit/c5f87ac39a"
            ]
        },
        {
            "poj_link": "https://github.com/the-qa-company/qEndpoint/",
            "file_path": "the-qa-company/qEndpoint/qendpoint-core/src/test/java/com/the_qa_company/qendpoint/core/util/ProfilerTest.java",
            "test_name": "ioTest",
            "FQS": "com.the_qa_company.qendpoint.core.util.ProfilerTest.ioTest()",
            "start_line": "19",
            "blame_result": "bd30b9d1c (Antoine Willerval 2023-05-17 17:03:03 +0200 20) \t\tPath root = tempDir.newFolder().toPath();\nc2bef2a2d (qaate47           2023-01-27 13:50:49 +0100 21) \nc2bef2a2d (qaate47           2023-01-27 13:50:49 +0100 22) \t\ttry (Profiler profiler = new Profiler(\"test\")) {\nc2bef2a2d (qaate47           2023-01-27 13:50:49 +0100 23) \t\t\tprofiler.setDisabled(false);\nc2bef2a2d (qaate47           2023-01-27 13:50:49 +0100 24) \t\t\tprofiler.pushSection(\"tests1\");\n",
            "commit_hashes": {
                "bd30b9d1c": "    GH-336 WIP QEPCore (#361)",
                "c2bef2a2d": "    Fork RDFHDT as qendpoint-core module, update CI, add CLI/License"
            },
            "Commit&issueIDs": {
                "bd30b9d1c": [
                    "361"
                ]
            },
            "links": [
                "https://github.com/the-qa-company/qEndpoint/issues/361",
                "https://github.com/the-qa-company/qEndpoint/commit/bd30b9d1c"
            ]
        },
        {
            "poj_link": "https://github.com/MyRobotLab/myrobotlab/",
            "file_path": "MyRobotLab/myrobotlab/src/test/java/org/myrobotlab/service/ClockTest.java",
            "test_name": "testService",
            "FQS": "org.myrobotlab.service.ClockTest.testService()",
            "start_line": "22",
            "blame_result": "dd056c8c91 (Greg Perry 2022-10-30 11:24:00 -0700 23) \ndd056c8c91 (Greg Perry 2022-10-30 11:24:00 -0700 24)     Python python = (Python) Runtime.start(\"python\", \"Python\");\na486febb21 (GroG       2023-12-10 03:53:49 -0800 25)         \na486febb21 (GroG       2023-12-10 03:53:49 -0800 26)     MockGateway gateway = (MockGateway)Runtime.start(\"gateway\", \"MockGateway\");\na486febb21 (GroG       2023-12-10 03:53:49 -0800 27)     gateway.clear();\n",
            "commit_hashes": {
                "dd056c8c91": "    fixed clock new service script and unit test",
                "a486febb21": "    MockGateway service (#1374)"
            },
            "Commit&issueIDs": {
                "a486febb21": [
                    "(#1374)"
                ]
            },
            "links": [
                "https://github.com/MyRobotLab/myrobotlab/issues/1374",
                "https://github.com/MyRobotLab/myrobotlab/commit/a486febb21"
            ]
        },
        {
            "poj_link": "https://github.com/tzaeschke/ode4j/",
            "file_path": "tzaeschke/ode4j/core/src/test/java/org/ode4j/math/DMatrix3Test.java",
            "test_name": "testAdd",
            "FQS": "org.ode4j.math.DMatrix3Test.testAdd()",
            "start_line": "148",
            "blame_result": "f1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDMatrix3.java (Tilmann 2023-05-12 15:15:07 +0200 149) \t\tDMatrix3 x = newM3();\nf1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDMatrix3.java (Tilmann 2023-05-12 15:15:07 +0200 150) \t\tDMatrix3 t = new DMatrix3();\nd3f2dca4 core/src/test/java/org/ode4j/math/DMatrix3Test.java           (Tilmann 2023-05-14 13:36:54 +0200 151) \t\tassertFalse(x.isEq(t, 0));\nf1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDMatrix3.java (Tilmann 2023-05-12 15:15:07 +0200 152) \t\t\nf1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDMatrix3.java (Tilmann 2023-05-12 15:15:07 +0200 153) \t\tt.add(x);\n",
            "commit_hashes": {
                "f1047bbd": "    move unit tests into code modules (#103)",
                "d3f2dca4": "    Deprecated hashCode() (#107)"
            },
            "Commit&issueIDs": {
                "f1047bbd": [
                    "103"
                ],
                "d3f2dca4": [
                    "107"
                ]
            },
            "links": [
                "https://github.com/tzaeschke/ode4j/issues/103",
                "https://github.com/tzaeschke/ode4j/commit/f1047bbd",
                "https://github.com/tzaeschke/ode4j/issues/107",
                "https://github.com/tzaeschke/ode4j/commit/d3f2dca4"
            ]
        },
        {
            "poj_link": "https://github.com/tzaeschke/ode4j/",
            "file_path": "tzaeschke/ode4j/core/src/test/java/org/ode4j/math/DVector3Test.java",
            "test_name": "testSet",
            "FQS": "org.ode4j.math.DVector3Test.testSet()",
            "start_line": "121",
            "blame_result": "320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 122)         DVector3 x = new DVector3(1, 2, 3);\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 123)         DVector3 x2 = new DVector3(1, 2, 3);\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 124)         DVector3 y = new DVector3(4, 5, 6);\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 125)         DVector3 z = new DVector3(7, 8, 9);\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 126)         x.set0(7);\n",
            "commit_hashes": {
                "320fbb5b": "    more unit test cleanup (#104)"
            },
            "Commit&issueIDs": {
                "320fbb5b": [
                    "104"
                ]
            },
            "links": [
                "https://github.com/tzaeschke/ode4j/issues/104",
                "https://github.com/tzaeschke/ode4j/commit/320fbb5b"
            ]
        },
        {
            "poj_link": "https://github.com/cdk/cdk/",
            "file_path": "cdk/cdk/misc/extra/src/test/java/org/openscience/cdk/AssociationTest.java",
            "test_name": "testGetAtomAt",
            "FQS": "org.openscience.cdk.AssociationTest.testGetAtomAt()",
            "start_line": "127",
            "blame_result": "39758fd82f8 src/org/openscience/cdk/test/AssociationTest.java (egonw    2003-08-12 13:35:02 +0000 128)         Atom c = new Atom(\"C\");\n39758fd82f8 src/org/openscience/cdk/test/AssociationTest.java (egonw    2003-08-12 13:35:02 +0000 129)         Atom o = new Atom(\"O\");\n1296206972c src/test/org/openscience/cdk/AssociationTest.java (rajarshi 2008-09-18 14:57:38 +0000 130)         Atom n = new Atom(\"N\");\n39758fd82f8 src/org/openscience/cdk/test/AssociationTest.java (egonw    2003-08-12 13:35:02 +0000 131)         Association association = new Association(c, o);\n1296206972c src/test/org/openscience/cdk/AssociationTest.java (rajarshi 2008-09-18 14:57:38 +0000 132) \n",
            "commit_hashes": {
                "39758fd82f8": "    Added class for associations, e.g. hydrogen bond, implementing RFC #22",
                "1296206972c": "    Added unit tests, annotations"
            },
            "Commit&issueIDs": {
                "39758fd82f8": [
                    "#22"
                ]
            },
            "links": [
                "https://github.com/cdk/cdk/issues/22",
                "https://github.com/cdk/cdk/commit/39758fd82f8"
            ]
        },
        {
            "poj_link": "https://github.com/tzaeschke/ode4j/",
            "file_path": "tzaeschke/ode4j/core/src/test/java/org/ode4j/math/DVector3Test.java",
            "test_name": "testAddScale",
            "FQS": "org.ode4j.math.DVector3Test.testAddScale()",
            "start_line": "200",
            "blame_result": "320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 201)         DVector3 x = new DVector3(1, 2, 3);\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 202)         DVector3 y = new DVector3(1.5, 3, 4.5);\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 203)         DVector3 t = new DVector3();\nd3f2dca4 (Tilmann 2023-05-14 13:36:54 +0200 204)         assertFalse(x.isEq(y, 0));\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 205) \n",
            "commit_hashes": {
                "320fbb5b": "    more unit test cleanup (#104)",
                "d3f2dca4": "    Deprecated hashCode() (#107)"
            },
            "Commit&issueIDs": {
                "320fbb5b": [
                    "104"
                ],
                "d3f2dca4": [
                    "107"
                ]
            },
            "links": [
                "https://github.com/tzaeschke/ode4j/issues/104",
                "https://github.com/tzaeschke/ode4j/commit/320fbb5b",
                "https://github.com/tzaeschke/ode4j/issues/107",
                "https://github.com/tzaeschke/ode4j/commit/d3f2dca4"
            ]
        },
        {
            "poj_link": "https://github.com/tzaeschke/ode4j/",
            "file_path": "tzaeschke/ode4j/core/src/test/java/org/ode4j/math/DVector3Test.java",
            "test_name": "testSums",
            "FQS": "org.ode4j.math.DVector3Test.testSums()",
            "start_line": "336",
            "blame_result": "320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 337)         DVector3 x = new DVector3(1, 2, 3);\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 338)         DVector3 y = new DVector3(4, 8, -1);\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 339)         DVector3 t = new DVector3();\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 340) \n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 341) \n",
            "commit_hashes": {
                "320fbb5b": "    more unit test cleanup (#104)"
            },
            "Commit&issueIDs": {
                "320fbb5b": [
                    "104"
                ]
            },
            "links": [
                "https://github.com/tzaeschke/ode4j/issues/104",
                "https://github.com/tzaeschke/ode4j/commit/320fbb5b"
            ]
        },
        {
            "poj_link": "https://github.com/tzaeschke/ode4j/",
            "file_path": "tzaeschke/ode4j/core/src/test/java/org/ode4j/math/DVector3Test.java",
            "test_name": "testSub",
            "FQS": "org.ode4j.math.DVector3Test.testSub()",
            "start_line": "247",
            "blame_result": "320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 248)         DVector3 x = new DVector3(1, 2, 3);\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 249)         DVector3 y = new DVector3(4, 8, -1);\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 250)         DVector3 t = new DVector3();\nd3f2dca4 (Tilmann 2023-05-14 13:36:54 +0200 251)         assertFalse(x.isEq(y, 0));\n320fbb5b (Tilmann 2023-05-12 20:08:42 +0200 252) \n",
            "commit_hashes": {
                "320fbb5b": "    more unit test cleanup (#104)",
                "d3f2dca4": "    Deprecated hashCode() (#107)"
            },
            "Commit&issueIDs": {
                "320fbb5b": [
                    "104"
                ],
                "d3f2dca4": [
                    "107"
                ]
            },
            "links": [
                "https://github.com/tzaeschke/ode4j/issues/104",
                "https://github.com/tzaeschke/ode4j/commit/320fbb5b",
                "https://github.com/tzaeschke/ode4j/issues/107",
                "https://github.com/tzaeschke/ode4j/commit/d3f2dca4"
            ]
        },
        {
            "poj_link": "https://github.com/tzaeschke/ode4j/",
            "file_path": "tzaeschke/ode4j/core/src/test/java/org/ode4j/math/DVector6Test.java",
            "test_name": "testSet",
            "FQS": "org.ode4j.math.DVector6Test.testSet()",
            "start_line": "69",
            "blame_result": "f1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDVector6.java (Tilmann 2023-05-12 15:15:07 +0200 70) \t\tDVector6 x = new DVector6(1, 2, 3, 4, 5, 6);\nf1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDVector6.java (Tilmann 2023-05-12 15:15:07 +0200 71) \t\tDVector6 x2 = new DVector6(1, 2, 3, 4, 5, 6);\nf1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDVector6.java (Tilmann 2023-05-12 15:15:07 +0200 72) \t\tDVector6 y = new DVector6(7, 8, 9, 10, 11, 12);\nf1047bbd core-cpp/src/test/java/org/ode4j/tests/math/TestDVector6.java (Tilmann 2023-05-12 15:15:07 +0200 73) \t\tDVector6 z = new DVector6(13, 14, 15, 16, 17, 18);\nd3f2dca4 core/src/test/java/org/ode4j/math/DVector6Test.java           (Tilmann 2023-05-14 13:36:54 +0200 74) \n",
            "commit_hashes": {
                "f1047bbd": "    move unit tests into code modules (#103)",
                "d3f2dca4": "    Deprecated hashCode() (#107)"
            },
            "Commit&issueIDs": {
                "f1047bbd": [
                    "103"
                ],
                "d3f2dca4": [
                    "107"
                ]
            },
            "links": [
                "https://github.com/tzaeschke/ode4j/issues/103",
                "https://github.com/tzaeschke/ode4j/commit/f1047bbd",
                "https://github.com/tzaeschke/ode4j/issues/107",
                "https://github.com/tzaeschke/ode4j/commit/d3f2dca4"
            ]
        },
        {
            "poj_link": "https://github.com/JOSM/josm/",
            "file_path": "JOSM/josm/test/unit/org/openstreetmap/josm/data/gpx/WayPointTest.java",
            "test_name": "testConstructor",
            "FQS": "org.openstreetmap.josm.data.gpx.WayPointTest.testConstructor()",
            "start_line": "39",
            "blame_result": "9be49564d6 (simon04 2021-04-08 20:56:06 +0000 40)         WayPoint wp1 = new WayPoint(new LatLon(12., 34.));\n9be49564d6 (simon04 2021-04-08 20:56:06 +0000 41)         wp1.setInstant(Instant.ofEpochMilli(123_456_789));\n9be49564d6 (simon04 2021-04-08 20:56:06 +0000 42)         WayPoint wp2 = new WayPoint(wp1);\n9be49564d6 (simon04 2021-04-08 20:56:06 +0000 43)         assertEquals(wp1, wp2);\n9be49564d6 (simon04 2021-04-08 20:56:06 +0000 44)         assertEquals(wp1.getInstant(), wp2.getInstant());\n",
            "commit_hashes": {
                "9be49564d6": "    see #14176 - Migrate GPX to Instant"
            },
            "Commit&issueIDs": {
                "9be49564d6": [
                    "#14176"
                ]
            },
            "links": [
                "https://github.com/JOSM/josm/issues/14176",
                "https://github.com/JOSM/josm/commit/9be49564d6"
            ]
        },
        {
            "poj_link": "https://github.com/JOSM/josm/",
            "file_path": "JOSM/josm/test/unit/org/openstreetmap/josm/data/osm/BBoxTest.java",
            "test_name": "testBboxesAreFunctionallyEqual",
            "FQS": "org.openstreetmap.josm.data.osm.BBoxTest.testBboxesAreFunctionallyEqual()",
            "start_line": "54",
            "blame_result": "0d394fb25d (Don-vip 2019-10-29 19:17:53 +0000 55)         BBox bbox1 = new BBox(0, 1, 1, 0);\n0d394fb25d (Don-vip 2019-10-29 19:17:53 +0000 56)         BBox bbox2 = new BBox(0.1, 0.9, 0.9, 0.1);\n0d394fb25d (Don-vip 2019-10-29 19:17:53 +0000 57) \n0d394fb25d (Don-vip 2019-10-29 19:17:53 +0000 58)         assertFalse(BBox.bboxesAreFunctionallyEqual(bbox1, null, null));\n0d394fb25d (Don-vip 2019-10-29 19:17:53 +0000 59)         assertFalse(BBox.bboxesAreFunctionallyEqual(null, bbox2, null));\n",
            "commit_hashes": {
                "0d394fb25d": "    fix #18274 - BBox should have a method to determine functional equivalency (patch by taylor.smock)"
            },
            "Commit&issueIDs": {
                "0d394fb25d": [
                    "#18274"
                ]
            },
            "links": [
                "https://github.com/JOSM/josm/issues/18274",
                "https://github.com/JOSM/josm/commit/0d394fb25d"
            ]
        },
        {
            "poj_link": "https://github.com/JOSM/josm/",
            "file_path": "JOSM/josm/test/unit/org/openstreetmap/josm/data/osm/UserTest.java",
            "test_name": "testCreateOsmUser",
            "FQS": "org.openstreetmap.josm.data.osm.UserTest.testCreateOsmUser()",
            "start_line": "18",
            "blame_result": "3b736b24fa (Don-vip 2017-09-06 00:14:12 +0000 19)         User user1 = User.createOsmUser(1, \"name1\");\n3b736b24fa (Don-vip 2017-09-06 00:14:12 +0000 20)         assertEquals(1, user1.getId());\n3b736b24fa (Don-vip 2017-09-06 00:14:12 +0000 21)         assertEquals(\"name1\", user1.getName());\n3b736b24fa (Don-vip 2017-09-06 00:14:12 +0000 22)         User user2 = User.createOsmUser(1, \"name2\");\n3b736b24fa (Don-vip 2017-09-06 00:14:12 +0000 23)         assertSame(user1, user2);\n",
            "commit_hashes": {
                "3b736b24fa": "    see #15229 - see #15182 - fix unit tests"
            },
            "Commit&issueIDs": {
                "3b736b24fa": [
                    "#15229",
                    "#15182"
                ]
            },
            "links": [
                "https://github.com/JOSM/josm/issues/15229",
                "https://github.com/JOSM/josm/commit/3b736b24fa"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse/mosaic/",
            "file_path": "eclipse/mosaic/lib/mosaic-geomath/src/test/java/org/eclipse/mosaic/lib/math/Matrix3dTest.java",
            "test_name": "transpose",
            "FQS": "org.eclipse.mosaic.lib.math.Matrix3dTest.transpose()",
            "start_line": "88",
            "blame_result": "1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 89)         final Matrix3d mExpected = new Matrix3d().setIdentity();\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 90)         set(mExpected, \"[1, 2, 3], [8, 6, 7], [-9, -4, 5]\");\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 91) \n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 92)         final Matrix3d mTransposedExpected = new Matrix3d();\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 93)         set(mTransposedExpected, \"[1, 8, -9], [2, 6, -4], [3, 7, 5]\");\n",
            "commit_hashes": {
                "1e39212d": "    Cleaned up Matrix implementations and aligned method set (#161)"
            },
            "Commit&issueIDs": {
                "1e39212d": [
                    "161"
                ]
            },
            "links": [
                "https://github.com/eclipse/mosaic/issues/161",
                "https://github.com/eclipse/mosaic/commit/1e39212d"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse/mosaic/",
            "file_path": "eclipse/mosaic/lib/mosaic-geomath/src/test/java/org/eclipse/mosaic/lib/math/Matrix3dTest.java",
            "test_name": "inverse",
            "FQS": "org.eclipse.mosaic.lib.math.Matrix3dTest.inverse()",
            "start_line": "109",
            "blame_result": "1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 110)         final Matrix3d m = new Matrix3d();\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 111)         set(m, \"[1, 2, 3], [8, 6, 7], [-9, -4, 5]\");\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 112) \n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 113)         final Matrix3d mInvExpected = new Matrix3d();\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 114)         set(mInvExpected, \"[-0.707317073, 0.268292683, 0.048780488], [1.256097561, -0.390243902, -0.207317073], [-0.268292683, 0.170731707, 0.121951220]\");\n",
            "commit_hashes": {
                "1e39212d": "    Cleaned up Matrix implementations and aligned method set (#161)"
            },
            "Commit&issueIDs": {
                "1e39212d": [
                    "161"
                ]
            },
            "links": [
                "https://github.com/eclipse/mosaic/issues/161",
                "https://github.com/eclipse/mosaic/commit/1e39212d"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse/mosaic/",
            "file_path": "eclipse/mosaic/lib/mosaic-geomath/src/test/java/org/eclipse/mosaic/lib/math/Matrix4dTest.java",
            "test_name": "transpose",
            "FQS": "org.eclipse.mosaic.lib.math.Matrix4dTest.transpose()",
            "start_line": "28",
            "blame_result": "1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 29)         final Matrix4d mExpected = new Matrix4d().setIdentity();\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 30)         set(mExpected, \"[1, 2, 3, 4], [8, 6, 7, 2], [-9, -4, 5, 1], [13, 0, 2 -1]\");\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 31) \n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 32)         final Matrix4d mTransposedExpected = new Matrix4d();\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 33)         set(mTransposedExpected, \"[1, 8, -9, 13], [2, 6, -4, 0], [3, 7, 5, 2], [4, 2, 1, -1]\");\n",
            "commit_hashes": {
                "1e39212d": "    Cleaned up Matrix implementations and aligned method set (#161)"
            },
            "Commit&issueIDs": {
                "1e39212d": [
                    "161"
                ]
            },
            "links": [
                "https://github.com/eclipse/mosaic/issues/161",
                "https://github.com/eclipse/mosaic/commit/1e39212d"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse/mosaic/",
            "file_path": "eclipse/mosaic/lib/mosaic-geomath/src/test/java/org/eclipse/mosaic/lib/math/Matrix4dTest.java",
            "test_name": "inverse",
            "FQS": "org.eclipse.mosaic.lib.math.Matrix4dTest.inverse()",
            "start_line": "49",
            "blame_result": "1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 50)         final Matrix4d m = new Matrix4d();\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 51)         set(m, \"[1, 2, 3, 4], [8, 6, 7, 2], [-9, -4, 5, 1], [13, 0, 2 -1]\");\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 52) \n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 53)         final Matrix4d mInvExpected = new Matrix4d();\n1e39212d (Karl Schrab 2021-11-26 15:25:28 +0100 54)         set(mInvExpected, \"[0.0356846473, -0.0240663900, -0.0182572614, 0.0763485477], [-0.0804979253, 0.1356846473, -0.0867219917, -0.1373443983], [-0.0663900415, 0.0912863071, 0.1037344398, 0.0207468880], [0.3311203320, -0.1302904564, -0.0298755187, 0.0340248963]\");\n",
            "commit_hashes": {
                "1e39212d": "    Cleaned up Matrix implementations and aligned method set (#161)"
            },
            "Commit&issueIDs": {
                "1e39212d": [
                    "161"
                ]
            },
            "links": [
                "https://github.com/eclipse/mosaic/issues/161",
                "https://github.com/eclipse/mosaic/commit/1e39212d"
            ]
        },
        {
            "poj_link": "https://github.com/brettwooldridge/SparseBitSet/",
            "file_path": "brettwooldridge/SparseBitSet/src/test/java/com/zaxxer/sparsebits/PreviousClearBitTest.java",
            "test_name": "level1Miss",
            "FQS": "com.zaxxer.sparsebits.PreviousClearBitTest.level1Miss()",
            "start_line": "57",
            "blame_result": "0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 58)         final int i = (1 << (SHIFT1 + SHIFT3));\n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 59)         set.set(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 60)         final int ret = set.previousClearBit(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 61) \n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 62)         assertEquals(i - 1, ret);\n",
            "commit_hashes": {
                "0622dfd9": "    [#7] Fix buggy handling around array boundaries (#13)",
                "37ec0681": "    [#7] Implement previousClearBit and previousSetBit (#12)"
            },
            "Commit&issueIDs": {
                "0622dfd9": [
                    "(#13)"
                ],
                "37ec0681": [
                    "(#12)"
                ]
            },
            "links": [
                "https://github.com/brettwooldridge/SparseBitSet/issues/13",
                "https://github.com/brettwooldridge/SparseBitSet/commit/0622dfd9",
                "https://github.com/brettwooldridge/SparseBitSet/issues/12",
                "https://github.com/brettwooldridge/SparseBitSet/commit/37ec0681"
            ]
        },
        {
            "poj_link": "https://github.com/brettwooldridge/SparseBitSet/",
            "file_path": "brettwooldridge/SparseBitSet/src/test/java/com/zaxxer/sparsebits/PreviousClearBitTest.java",
            "test_name": "level1MissPlus1",
            "FQS": "com.zaxxer.sparsebits.PreviousClearBitTest.level1MissPlus1()",
            "start_line": "66",
            "blame_result": "0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 67)         final int i = (1 << (SHIFT1 + SHIFT3)) + 1;\n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 68)         set.set(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 69)         final int ret = set.previousClearBit(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 70) \n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 71)         assertEquals(i - 1, ret);\n",
            "commit_hashes": {
                "0622dfd9": "    [#7] Fix buggy handling around array boundaries (#13)",
                "37ec0681": "    [#7] Implement previousClearBit and previousSetBit (#12)"
            },
            "Commit&issueIDs": {
                "0622dfd9": [
                    "(#13)"
                ],
                "37ec0681": [
                    "(#12)"
                ]
            },
            "links": [
                "https://github.com/brettwooldridge/SparseBitSet/issues/13",
                "https://github.com/brettwooldridge/SparseBitSet/commit/0622dfd9",
                "https://github.com/brettwooldridge/SparseBitSet/issues/12",
                "https://github.com/brettwooldridge/SparseBitSet/commit/37ec0681"
            ]
        },
        {
            "poj_link": "https://github.com/brettwooldridge/SparseBitSet/",
            "file_path": "brettwooldridge/SparseBitSet/src/test/java/com/zaxxer/sparsebits/PreviousClearBitTest.java",
            "test_name": "level1MissMinus1",
            "FQS": "com.zaxxer.sparsebits.PreviousClearBitTest.level1MissMinus1()",
            "start_line": "75",
            "blame_result": "0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 76)         final int i = (1 << (SHIFT1 + SHIFT3)) - 1;\n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 77)         set.set(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 78)         final int ret = set.previousClearBit(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 79) \n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 80)         assertEquals(i - 1, ret);\n",
            "commit_hashes": {
                "0622dfd9": "    [#7] Fix buggy handling around array boundaries (#13)",
                "37ec0681": "    [#7] Implement previousClearBit and previousSetBit (#12)"
            },
            "Commit&issueIDs": {
                "0622dfd9": [
                    "(#13)"
                ],
                "37ec0681": [
                    "(#12)"
                ]
            },
            "links": [
                "https://github.com/brettwooldridge/SparseBitSet/issues/13",
                "https://github.com/brettwooldridge/SparseBitSet/commit/0622dfd9",
                "https://github.com/brettwooldridge/SparseBitSet/issues/12",
                "https://github.com/brettwooldridge/SparseBitSet/commit/37ec0681"
            ]
        },
        {
            "poj_link": "https://github.com/brettwooldridge/SparseBitSet/",
            "file_path": "brettwooldridge/SparseBitSet/src/test/java/com/zaxxer/sparsebits/PreviousClearBitTest.java",
            "test_name": "level2Miss",
            "FQS": "com.zaxxer.sparsebits.PreviousClearBitTest.level2Miss()",
            "start_line": "84",
            "blame_result": "0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 85)         final int i = (1 << (SHIFT3 + SHIFT2));\n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 86)         set.set(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 87)         final int ret = set.previousClearBit(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 88) \n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 89)         assertEquals(i - 1, ret);\n",
            "commit_hashes": {
                "0622dfd9": "    [#7] Fix buggy handling around array boundaries (#13)",
                "37ec0681": "    [#7] Implement previousClearBit and previousSetBit (#12)"
            },
            "Commit&issueIDs": {
                "0622dfd9": [
                    "(#13)"
                ],
                "37ec0681": [
                    "(#12)"
                ]
            },
            "links": [
                "https://github.com/brettwooldridge/SparseBitSet/issues/13",
                "https://github.com/brettwooldridge/SparseBitSet/commit/0622dfd9",
                "https://github.com/brettwooldridge/SparseBitSet/issues/12",
                "https://github.com/brettwooldridge/SparseBitSet/commit/37ec0681"
            ]
        },
        {
            "poj_link": "https://github.com/brettwooldridge/SparseBitSet/",
            "file_path": "brettwooldridge/SparseBitSet/src/test/java/com/zaxxer/sparsebits/PreviousClearBitTest.java",
            "test_name": "level2MissPlus1",
            "FQS": "com.zaxxer.sparsebits.PreviousClearBitTest.level2MissPlus1()",
            "start_line": "93",
            "blame_result": "0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 94)         final int i = (1 << (SHIFT3 + SHIFT2)) + 1;\n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 95)         set.set(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 96)         final int ret = set.previousClearBit(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 97) \n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 98)         assertEquals(i - 1, ret);\n",
            "commit_hashes": {
                "0622dfd9": "    [#7] Fix buggy handling around array boundaries (#13)",
                "37ec0681": "    [#7] Implement previousClearBit and previousSetBit (#12)"
            },
            "Commit&issueIDs": {
                "0622dfd9": [
                    "(#13)"
                ],
                "37ec0681": [
                    "(#12)"
                ]
            },
            "links": [
                "https://github.com/brettwooldridge/SparseBitSet/issues/13",
                "https://github.com/brettwooldridge/SparseBitSet/commit/0622dfd9",
                "https://github.com/brettwooldridge/SparseBitSet/issues/12",
                "https://github.com/brettwooldridge/SparseBitSet/commit/37ec0681"
            ]
        },
        {
            "poj_link": "https://github.com/brettwooldridge/SparseBitSet/",
            "file_path": "brettwooldridge/SparseBitSet/src/test/java/com/zaxxer/sparsebits/PreviousClearBitTest.java",
            "test_name": "level2MissMinus1",
            "FQS": "com.zaxxer.sparsebits.PreviousClearBitTest.level2MissMinus1()",
            "start_line": "102",
            "blame_result": "0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 103)         final int i = (1 << (SHIFT3 + SHIFT2)) - 1;\n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 104)         set.set(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 105)         final int ret = set.previousClearBit(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 106) \n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 107)         assertEquals(i - 1, ret);\n",
            "commit_hashes": {
                "0622dfd9": "    [#7] Fix buggy handling around array boundaries (#13)",
                "37ec0681": "    [#7] Implement previousClearBit and previousSetBit (#12)"
            },
            "Commit&issueIDs": {
                "0622dfd9": [
                    "(#13)"
                ],
                "37ec0681": [
                    "(#12)"
                ]
            },
            "links": [
                "https://github.com/brettwooldridge/SparseBitSet/issues/13",
                "https://github.com/brettwooldridge/SparseBitSet/commit/0622dfd9",
                "https://github.com/brettwooldridge/SparseBitSet/issues/12",
                "https://github.com/brettwooldridge/SparseBitSet/commit/37ec0681"
            ]
        },
        {
            "poj_link": "https://github.com/brettwooldridge/SparseBitSet/",
            "file_path": "brettwooldridge/SparseBitSet/src/test/java/com/zaxxer/sparsebits/PreviousClearBitTest.java",
            "test_name": "level3Miss",
            "FQS": "com.zaxxer.sparsebits.PreviousClearBitTest.level3Miss()",
            "start_line": "111",
            "blame_result": "0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 112)         final int i = (1 << SHIFT3);\n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 113)         set.set(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 114)         final int ret = set.previousClearBit(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 115) \n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 116)         assertEquals(i - 1, ret);\n",
            "commit_hashes": {
                "0622dfd9": "    [#7] Fix buggy handling around array boundaries (#13)",
                "37ec0681": "    [#7] Implement previousClearBit and previousSetBit (#12)"
            },
            "Commit&issueIDs": {
                "0622dfd9": [
                    "(#13)"
                ],
                "37ec0681": [
                    "(#12)"
                ]
            },
            "links": [
                "https://github.com/brettwooldridge/SparseBitSet/issues/13",
                "https://github.com/brettwooldridge/SparseBitSet/commit/0622dfd9",
                "https://github.com/brettwooldridge/SparseBitSet/issues/12",
                "https://github.com/brettwooldridge/SparseBitSet/commit/37ec0681"
            ]
        },
        {
            "poj_link": "https://github.com/brettwooldridge/SparseBitSet/",
            "file_path": "brettwooldridge/SparseBitSet/src/test/java/com/zaxxer/sparsebits/PreviousClearBitTest.java",
            "test_name": "level3MissPlus1",
            "FQS": "com.zaxxer.sparsebits.PreviousClearBitTest.level3MissPlus1()",
            "start_line": "120",
            "blame_result": "0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 121)         final int i = (1 << SHIFT3) + 1;\n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 122)         set.set(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 123)         final int ret = set.previousClearBit(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 124) \n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 125)         assertEquals(i - 1, ret);\n",
            "commit_hashes": {
                "0622dfd9": "    [#7] Fix buggy handling around array boundaries (#13)",
                "37ec0681": "    [#7] Implement previousClearBit and previousSetBit (#12)"
            },
            "Commit&issueIDs": {
                "0622dfd9": [
                    "(#13)"
                ],
                "37ec0681": [
                    "(#12)"
                ]
            },
            "links": [
                "https://github.com/brettwooldridge/SparseBitSet/issues/13",
                "https://github.com/brettwooldridge/SparseBitSet/commit/0622dfd9",
                "https://github.com/brettwooldridge/SparseBitSet/issues/12",
                "https://github.com/brettwooldridge/SparseBitSet/commit/37ec0681"
            ]
        },
        {
            "poj_link": "https://github.com/brettwooldridge/SparseBitSet/",
            "file_path": "brettwooldridge/SparseBitSet/src/test/java/com/zaxxer/sparsebits/PreviousClearBitTest.java",
            "test_name": "level3MissMinus1",
            "FQS": "com.zaxxer.sparsebits.PreviousClearBitTest.level3MissMinus1()",
            "start_line": "129",
            "blame_result": "0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 130)         final int i = (1 << SHIFT3) - 1;\n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 131)         set.set(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 132)         final int ret = set.previousClearBit(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 133) \n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800 134)         assertEquals(i - 1, ret);\n",
            "commit_hashes": {
                "0622dfd9": "    [#7] Fix buggy handling around array boundaries (#13)",
                "37ec0681": "    [#7] Implement previousClearBit and previousSetBit (#12)"
            },
            "Commit&issueIDs": {
                "0622dfd9": [
                    "(#13)"
                ],
                "37ec0681": [
                    "(#12)"
                ]
            },
            "links": [
                "https://github.com/brettwooldridge/SparseBitSet/issues/13",
                "https://github.com/brettwooldridge/SparseBitSet/commit/0622dfd9",
                "https://github.com/brettwooldridge/SparseBitSet/issues/12",
                "https://github.com/brettwooldridge/SparseBitSet/commit/37ec0681"
            ]
        },
        {
            "poj_link": "https://github.com/brettwooldridge/SparseBitSet/",
            "file_path": "brettwooldridge/SparseBitSet/src/test/java/com/zaxxer/sparsebits/PreviousSetBitTest.java",
            "test_name": "topBit",
            "FQS": "com.zaxxer.sparsebits.PreviousSetBitTest.topBit()",
            "start_line": "97",
            "blame_result": "37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800  98)         final int i = Integer.MAX_VALUE - 1;\n0622dfd9 (Brent Douglas 2017-11-06 07:37:03 +0800  99)         set.set(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 100)         final int ret = set.previousSetBit(i);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 101) \n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 102)         assertEquals(i, ret);\n",
            "commit_hashes": {
                "37ec0681": "    [#7] Implement previousClearBit and previousSetBit (#12)",
                "0622dfd9": "    [#7] Fix buggy handling around array boundaries (#13)"
            },
            "Commit&issueIDs": {
                "37ec0681": [
                    "(#12)"
                ],
                "0622dfd9": [
                    "(#13)"
                ]
            },
            "links": [
                "https://github.com/brettwooldridge/SparseBitSet/issues/12",
                "https://github.com/brettwooldridge/SparseBitSet/commit/37ec0681",
                "https://github.com/brettwooldridge/SparseBitSet/issues/13",
                "https://github.com/brettwooldridge/SparseBitSet/commit/0622dfd9"
            ]
        },
        {
            "poj_link": "https://github.com/brettwooldridge/SparseBitSet/",
            "file_path": "brettwooldridge/SparseBitSet/src/test/java/com/zaxxer/sparsebits/PreviousSetBitTest.java",
            "test_name": "randomSingleEntry",
            "FQS": "com.zaxxer.sparsebits.PreviousSetBitTest.randomSingleEntry()",
            "start_line": "187",
            "blame_result": "37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 188)         final int max = Integer.MAX_VALUE - 1;\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 189)         final Random random = new Random(0);\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 190)         for (int i = 0; i < 10000; ++i) {\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 191)             set = new SparseBitSet();\n37ec0681 (Brent Douglas 2017-11-05 21:05:15 +0800 192)             final int x = Math.abs(random.nextInt() + 1);\n",
            "commit_hashes": {
                "37ec0681": "    [#7] Implement previousClearBit and previousSetBit (#12)"
            },
            "Commit&issueIDs": {
                "37ec0681": [
                    "(#12)"
                ]
            },
            "links": [
                "https://github.com/brettwooldridge/SparseBitSet/issues/12",
                "https://github.com/brettwooldridge/SparseBitSet/commit/37ec0681"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse/mosaic/",
            "file_path": "eclipse/mosaic/lib/mosaic-geomath/src/test/java/org/eclipse/mosaic/lib/transform/Wgs84ProjectionTest.java",
            "test_name": "conversion_Europe_UtmBorder",
            "FQS": "org.eclipse.mosaic.lib.transform.Wgs84ProjectionTest.conversion_Europe_UtmBorder()",
            "start_line": "41",
            "blame_result": "84a4eac4 (Karl Schrab 2021-03-10 10:59:52 +0100 42)         GeoPoint aGeo = GeoPoint.latLon(52.236397, 12.003500); // -> is in zone 33u\n84a4eac4 (Karl Schrab 2021-03-10 10:59:52 +0100 43)         GeoPoint bGeo = GeoPoint.latLon(52.236397, 11.909200); // -> is in zone 32u\n84a4eac4 (Karl Schrab 2021-03-10 10:59:52 +0100 44) \n84a4eac4 (Karl Schrab 2021-03-10 10:59:52 +0100 45)         Wgs84Projection projection = new Wgs84Projection(aGeo).useZoneOfUtmOrigin();\n84a4eac4 (Karl Schrab 2021-03-10 10:59:52 +0100 46) \n",
            "commit_hashes": {
                "84a4eac4": "    Simplify road model by removing Edge entity (#45)"
            },
            "Commit&issueIDs": {
                "84a4eac4": [
                    "45"
                ]
            },
            "links": [
                "https://github.com/eclipse/mosaic/issues/45",
                "https://github.com/eclipse/mosaic/commit/84a4eac4"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-modules-java8/",
            "file_path": "FasterXML/jackson-modules-java8/datetime/src/test/java/com/fasterxml/jackson/datatype/jsr310/key/YearAsKeyTest.java",
            "test_name": "testKeySerialization",
            "FQS": "com.fasterxml.jackson.datatype.jsr310.key.YearAsKeyTest.testKeySerialization()",
            "start_line": "24",
            "blame_result": "54010cf1 (Tatu Saloranta 2019-09-04 22:07:33 -0700 24)     public void testKeySerialization() throws Exception {\n710b0519 (Mike           2019-09-04 23:56:38 -0500 25)         assertEquals(\"Value is incorrect\", mapAsString(\"3141\", \"test\"),\nbb8ad7fa (Tatu Saloranta 2019-08-17 14:13:05 -0700 26)                 MAPPER.writeValueAsString(asMap(Year.of(3141), \"test\")));\n",
            "commit_hashes": {
                "54010cf1": "    Update release notes wrt #51",
                "710b0519": "    Year key deser fix (#134)",
                "bb8ad7fa": "    Complete refactoring of key-ser/deser tests"
            },
            "Commit&issueIDs": {
                "54010cf1": [
                    "#51"
                ],
                "710b0519": [
                    "(#134)"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-modules-java8/issues/51",
                "https://github.com/FasterXML/jackson-modules-java8/commit/54010cf1",
                "https://github.com/FasterXML/jackson-modules-java8/issues/134",
                "https://github.com/FasterXML/jackson-modules-java8/commit/710b0519"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-modules-java8/",
            "file_path": "FasterXML/jackson-modules-java8/datetime/src/test/java/com/fasterxml/jackson/datatype/jsr310/key/YearAsKeyTest.java",
            "test_name": "testKeyDeserialization",
            "FQS": "com.fasterxml.jackson.datatype.jsr310.key.YearAsKeyTest.testKeyDeserialization()",
            "start_line": "30",
            "blame_result": "54010cf1 (Tatu Saloranta 2019-09-04 22:07:33 -0700 30)     public void testKeyDeserialization() throws Exception {\n710b0519 (Mike           2019-09-04 23:56:38 -0500 31)         assertEquals(\"Value is incorrect\", asMap(Year.of(3141), \"test\"),\nbb8ad7fa (Tatu Saloranta 2019-08-17 14:13:05 -0700 32)                 READER.readValue(mapAsString(\"3141\", \"test\")));\n",
            "commit_hashes": {
                "54010cf1": "    Update release notes wrt #51",
                "710b0519": "    Year key deser fix (#134)",
                "bb8ad7fa": "    Complete refactoring of key-ser/deser tests"
            },
            "Commit&issueIDs": {
                "54010cf1": [
                    "#51"
                ],
                "710b0519": [
                    "(#134)"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-modules-java8/issues/51",
                "https://github.com/FasterXML/jackson-modules-java8/commit/54010cf1",
                "https://github.com/FasterXML/jackson-modules-java8/issues/134",
                "https://github.com/FasterXML/jackson-modules-java8/commit/710b0519"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-modules-java8/",
            "file_path": "FasterXML/jackson-modules-java8/datetime/src/test/java/com/fasterxml/jackson/datatype/jsr310/misc/UnsupportedTypesTest.java",
            "test_name": "testTemporalAdjusterSerialization",
            "FQS": "com.fasterxml.jackson.datatype.jsr310.misc.UnsupportedTypesTest.testTemporalAdjusterSerialization()",
            "start_line": "25",
            "blame_result": "5b307c10 (Tatu Saloranta 2021-03-25 18:25:31 -0700 25)     public void testTemporalAdjusterSerialization() throws Exception\n5b307c10 (Tatu Saloranta 2021-03-25 18:25:31 -0700 26)     {\n5b307c10 (Tatu Saloranta 2021-03-25 18:25:31 -0700 27)         ObjectMapper mapper = newMapper();\n",
            "commit_hashes": {
                "5b307c10": "    Fixed #207 (actual fix in jackson-databind, added test here, notes)"
            },
            "Commit&issueIDs": {
                "5b307c10": [
                    "#207"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-modules-java8/issues/207",
                "https://github.com/FasterXML/jackson-modules-java8/commit/5b307c10"
            ]
        },
        {
            "poj_link": "https://github.com/addthis/stream-lib/",
            "file_path": "addthis/stream-lib/src/test/java/com/clearspring/analytics/stream/cardinality/TestHyperLogLogPlus.java",
            "test_name": "testMergeSelf",
            "FQS": "com.clearspring.analytics.stream.cardinality.TestHyperLogLogPlus.testMergeSelf()",
            "start_line": "258",
            "blame_result": "9f1bf8bd (ian         2014-03-17 14:00:35 -0400 259)         final int[] cardinalities = {0, 1, 10, 100, 1000, 10000, 100000, 1000000};\n9f1bf8bd (ian         2014-03-17 14:00:35 -0400 260)         for (int cardinality : cardinalities) {\n9f1bf8bd (ian         2014-03-17 14:00:35 -0400 261)             for (int j = 4; j < 24; j++) {\n3269b02e (Matt Abrams 2013-07-23 17:30:09 -0400 262)                 System.out.println(\"p=\" + j);\n3269b02e (Matt Abrams 2013-07-23 17:30:09 -0400 263)                 HyperLogLogPlus hllPlus = new HyperLogLogPlus(j, 0);\n",
            "commit_hashes": {
                "9f1bf8bd": "    AddThis OSS code style applied",
                "3269b02e": "    fixes #44"
            },
            "Commit&issueIDs": {
                "3269b02e": [
                    "#44"
                ]
            },
            "links": [
                "https://github.com/addthis/stream-lib/issues/44",
                "https://github.com/addthis/stream-lib/commit/3269b02e"
            ]
        },
        {
            "poj_link": "https://github.com/EsotericSoftware/yamlbeans/",
            "file_path": "EsotericSoftware/yamlbeans/test/com/esotericsoftware/yamlbeans/document/YamlMappingTest.java",
            "test_name": "testAddEntry",
            "FQS": "com.esotericsoftware.yamlbeans.document.YamlMappingTest.testAddEntry()",
            "start_line": "29",
            "blame_result": "c8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 30) \t\tYamlScalar key = new YamlScalar();\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 31) \t\tkey.setValue(\"test\");\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 32) \t\tYamlScalar value = new YamlScalar();\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 33) \t\tvalue.setValue(\"111\");\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 34) \t\tYamlEntry entry = new YamlEntry(key, value);\n",
            "commit_hashes": {
                "c8a5f8cd": "    Support reading multiple documents, and adding test cases (#138)"
            },
            "Commit&issueIDs": {
                "c8a5f8cd": [
                    "(#138)"
                ]
            },
            "links": [
                "https://github.com/EsotericSoftware/yamlbeans/issues/138",
                "https://github.com/EsotericSoftware/yamlbeans/commit/c8a5f8cd"
            ]
        },
        {
            "poj_link": "https://github.com/EsotericSoftware/yamlbeans/",
            "file_path": "EsotericSoftware/yamlbeans/test/com/esotericsoftware/yamlbeans/document/YamlSequenceTest.java",
            "test_name": "testAddElement",
            "FQS": "com.esotericsoftware.yamlbeans.document.YamlSequenceTest.testAddElement()",
            "start_line": "28",
            "blame_result": "c8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 29) \t\tYamlElement yamlElement = new YamlScalar();\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 30) \t\tyamlSequence.addElement(yamlElement);\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 31) \t\tassertEquals(yamlElement, yamlSequence.getElement(3));\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 32) \t}\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 33) \n",
            "commit_hashes": {
                "c8a5f8cd": "    Support reading multiple documents, and adding test cases (#138)"
            },
            "Commit&issueIDs": {
                "c8a5f8cd": [
                    "(#138)"
                ]
            },
            "links": [
                "https://github.com/EsotericSoftware/yamlbeans/issues/138",
                "https://github.com/EsotericSoftware/yamlbeans/commit/c8a5f8cd"
            ]
        },
        {
            "poj_link": "https://github.com/EsotericSoftware/yamlbeans/",
            "file_path": "EsotericSoftware/yamlbeans/test/com/esotericsoftware/yamlbeans/document/YamlSequenceTest.java",
            "test_name": "testSetElementUseYamlElementValue",
            "FQS": "com.esotericsoftware.yamlbeans.document.YamlSequenceTest.testSetElementUseYamlElementValue()",
            "start_line": "103",
            "blame_result": "c8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 104) \t\tYamlElement yamlElement = new YamlScalar();\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 105) \t\tyamlSequence.setElement(0, yamlElement);\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 106) \t\tassertEquals(yamlElement, yamlSequence.getElement(0));\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 107) \t}\nc8a5f8cd (Mr14huashao 2020-06-15 18:50:44 +0800 108) \n",
            "commit_hashes": {
                "c8a5f8cd": "    Support reading multiple documents, and adding test cases (#138)"
            },
            "Commit&issueIDs": {
                "c8a5f8cd": [
                    "(#138)"
                ]
            },
            "links": [
                "https://github.com/EsotericSoftware/yamlbeans/issues/138",
                "https://github.com/EsotericSoftware/yamlbeans/commit/c8a5f8cd"
            ]
        },
        {
            "poj_link": "https://github.com/EsotericSoftware/yamlbeans/",
            "file_path": "EsotericSoftware/yamlbeans/test/com/esotericsoftware/yamlbeans/tokenizer/TokenizerTest.java",
            "test_name": "testTokenizerReader",
            "FQS": "com.esotericsoftware.yamlbeans.tokenizer.TokenizerTest.testTokenizerReader()",
            "start_line": "58",
            "blame_result": "c6df1de7 (gihwan 2017-05-04 21:54:40 -0700 59)         Tokenizer tokenizer = new Tokenizer(new FileReader(\"test/test1.yml\"));\nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 60)         assertEquals(tokenizer.peekNextToken() + \"\", STREAM_START + \"\");\nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 61)         Tokenizer tokenizer_nbuffered = new Tokenizer((new BufferedReader(new FileReader(\"test/test1.yml\"))));\nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 62) \nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 63)         Iterator tokenizer_iter = tokenizer.iterator();\n",
            "commit_hashes": {
                "c6df1de7": "    Add test (#71)"
            },
            "Commit&issueIDs": {
                "c6df1de7": [
                    "(#71)"
                ]
            },
            "links": [
                "https://github.com/EsotericSoftware/yamlbeans/issues/71",
                "https://github.com/EsotericSoftware/yamlbeans/commit/c6df1de7"
            ]
        },
        {
            "poj_link": "https://github.com/EsotericSoftware/yamlbeans/",
            "file_path": "EsotericSoftware/yamlbeans/test/com/esotericsoftware/yamlbeans/tokenizer/TokenizerTest.java",
            "test_name": "testTokenizerString",
            "FQS": "com.esotericsoftware.yamlbeans.tokenizer.TokenizerTest.testTokenizerString()",
            "start_line": "80",
            "blame_result": "c6df1de7 (gihwan 2017-05-04 21:54:40 -0700 81)         Iterator tokenizer_iter = new Tokenizer(new FileReader(\"test/test1.yml\")).iterator();\nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 82)         Iterator tokenizer_string_iter = new Tokenizer(\"12: 13\").iterator();\nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 83) \nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 84)         while (tokenizer_iter.hasNext() || tokenizer_string_iter.hasNext()) {\nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 85)             assertEquals(tokenizer_iter.next() + \"\", tokenizer_string_iter.next() + \"\");\n",
            "commit_hashes": {
                "c6df1de7": "    Add test (#71)"
            },
            "Commit&issueIDs": {
                "c6df1de7": [
                    "(#71)"
                ]
            },
            "links": [
                "https://github.com/EsotericSoftware/yamlbeans/issues/71",
                "https://github.com/EsotericSoftware/yamlbeans/commit/c6df1de7"
            ]
        },
        {
            "poj_link": "https://github.com/EsotericSoftware/yamlbeans/",
            "file_path": "EsotericSoftware/yamlbeans/test/com/esotericsoftware/yamlbeans/tokenizer/TokenizerTest.java",
            "test_name": "testIterator",
            "FQS": "com.esotericsoftware.yamlbeans.tokenizer.TokenizerTest.testIterator()",
            "start_line": "174",
            "blame_result": "c6df1de7 (gihwan 2017-05-04 21:54:40 -0700 175)         Tokenizer tokenizer = new Tokenizer(new FileReader(\"test/test1.yml\"));\nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 176)         Iterator iter = new Tokenizer(new FileReader(\"test/test1.yml\")).iterator();\nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 177)         assertEquals(iter.hasNext(), tokenizer.peekNextToken() != null);\nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 178)         assertEquals(iter.next(), tokenizer.getNextToken());\nc6df1de7 (gihwan 2017-05-04 21:54:40 -0700 179)         iter.remove();\n",
            "commit_hashes": {
                "c6df1de7": "    Add test (#71)"
            },
            "Commit&issueIDs": {
                "c6df1de7": [
                    "(#71)"
                ]
            },
            "links": [
                "https://github.com/EsotericSoftware/yamlbeans/issues/71",
                "https://github.com/EsotericSoftware/yamlbeans/commit/c6df1de7"
            ]
        },
        {
            "poj_link": "https://github.com/steveohara/j2mod/",
            "file_path": "steveohara/j2mod/src/test/java/com/ghgande/j2mod/modbus/TestModbusSerialASCIIMasterWrite.java",
            "test_name": "testWriteMultipleRegisters",
            "FQS": "com.ghgande.j2mod.modbus.TestModbusSerialASCIIMasterWrite.testWriteMultipleRegisters()",
            "start_line": "70",
            "blame_result": "ada3b902 (dvk2018 2018-12-17 19:34:21 +0500 71)         try {\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 72)             int registerCount = 3;\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 73)             Register[] beforeRegisters = master.readMultipleRegisters(UNIT_ID, 1, registerCount);\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 74) \nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 75)             Register[] writeRegisters = new Register[registerCount];\n",
            "commit_hashes": {
                "ada3b902": "    Fix WriteMultipleRegisterRequest data length. Return the number of registers that have been written. Fix docs. (#93)"
            },
            "Commit&issueIDs": {
                "ada3b902": [
                    "(#93)"
                ]
            },
            "links": [
                "https://github.com/steveohara/j2mod/issues/93",
                "https://github.com/steveohara/j2mod/commit/ada3b902"
            ]
        },
        {
            "poj_link": "https://github.com/steveohara/j2mod/",
            "file_path": "steveohara/j2mod/src/test/java/com/ghgande/j2mod/modbus/TestModbusSerialRTUMasterWrite.java",
            "test_name": "testWriteMultipleRegisters",
            "FQS": "com.ghgande.j2mod.modbus.TestModbusSerialRTUMasterWrite.testWriteMultipleRegisters()",
            "start_line": "70",
            "blame_result": "ada3b902 (dvk2018 2018-12-17 19:34:21 +0500 71)         try {\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 72)             int registerCount = 3;\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 73)             Register[] beforeRegisters = master.readMultipleRegisters(UNIT_ID, 1, registerCount);\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 74) \nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 75)             Register[] writeRegisters = new Register[registerCount];\n",
            "commit_hashes": {
                "ada3b902": "    Fix WriteMultipleRegisterRequest data length. Return the number of registers that have been written. Fix docs. (#93)"
            },
            "Commit&issueIDs": {
                "ada3b902": [
                    "(#93)"
                ]
            },
            "links": [
                "https://github.com/steveohara/j2mod/issues/93",
                "https://github.com/steveohara/j2mod/commit/ada3b902"
            ]
        },
        {
            "poj_link": "https://github.com/steveohara/j2mod/",
            "file_path": "steveohara/j2mod/src/test/java/com/ghgande/j2mod/modbus/TestModbusTCPMasterWrite.java",
            "test_name": "testWriteMultipleRegisters",
            "FQS": "com.ghgande.j2mod.modbus.TestModbusTCPMasterWrite.testWriteMultipleRegisters()",
            "start_line": "64",
            "blame_result": "ada3b902 (dvk2018 2018-12-17 19:34:21 +0500 65)         try {\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 66)             int registerCount = 3;\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 67)             Register[] beforeRegisters = master.readMultipleRegisters(UNIT_ID, 1, registerCount);\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 68) \nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 69)             Register[] writeRegisters = new Register[registerCount];\n",
            "commit_hashes": {
                "ada3b902": "    Fix WriteMultipleRegisterRequest data length. Return the number of registers that have been written. Fix docs. (#93)"
            },
            "Commit&issueIDs": {
                "ada3b902": [
                    "(#93)"
                ]
            },
            "links": [
                "https://github.com/steveohara/j2mod/issues/93",
                "https://github.com/steveohara/j2mod/commit/ada3b902"
            ]
        },
        {
            "poj_link": "https://github.com/steveohara/j2mod/",
            "file_path": "steveohara/j2mod/src/test/java/com/ghgande/j2mod/modbus/TestModbusUDPMasterWrite.java",
            "test_name": "testWriteMultipleRegisters",
            "FQS": "com.ghgande.j2mod.modbus.TestModbusUDPMasterWrite.testWriteMultipleRegisters()",
            "start_line": "64",
            "blame_result": "ada3b902 (dvk2018 2018-12-17 19:34:21 +0500 65)         try {\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 66)             int registerCount = 3;\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 67)             Register[] beforeRegisters = master.readMultipleRegisters(UNIT_ID, 1, registerCount);\nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 68) \nada3b902 (dvk2018 2018-12-17 19:34:21 +0500 69)             Register[] writeRegisters = new Register[registerCount];\n",
            "commit_hashes": {
                "ada3b902": "    Fix WriteMultipleRegisterRequest data length. Return the number of registers that have been written. Fix docs. (#93)"
            },
            "Commit&issueIDs": {
                "ada3b902": [
                    "(#93)"
                ]
            },
            "links": [
                "https://github.com/steveohara/j2mod/issues/93",
                "https://github.com/steveohara/j2mod/commit/ada3b902"
            ]
        },
        {
            "poj_link": "https://github.com/tigase/tigase-server/",
            "file_path": "tigase/tigase-server/src/test/java/tigase/xmpp/impl/MessageAmpTest.java",
            "test_name": "testMessageProcessingWithAmp",
            "FQS": "tigase.xmpp.impl.MessageAmpTest.testMessageProcessingWithAmp()",
            "start_line": "71",
            "blame_result": "84db83a37e src/test/java/tigase/xmpp/impl/MessageAmpTest.java        (Andrzej Wo\u0301jcik 2015-05-24 17:04:42 +0200 72) \t\tJID senderJid = JID.jidInstance(\"sender@example.com/res-1\");\n84db83a37e src/test/java/tigase/xmpp/impl/MessageAmpTest.java        (Andrzej Wo\u0301jcik 2015-05-24 17:04:42 +0200 73) \t\tJID recipientJid = JID.jidInstance(\"recipient@example.com/res-2\");\n8a3ba3f057 server/src/test/java/tigase/xmpp/impl/MessageAmpTest.java (Andrzej Wo\u0301jcik 2017-10-29 13:24:31 +0100 74) \t\tXMPPResourceConnection senderSession = getSession(\n8a3ba3f057 server/src/test/java/tigase/xmpp/impl/MessageAmpTest.java (Andrzej Wo\u0301jcik 2017-10-29 13:24:31 +0100 75) \t\t\t\tJID.jidInstance(\"c2s@example.com/\" + UUID.randomUUID().toString()), senderJid);\n8a3ba3f057 server/src/test/java/tigase/xmpp/impl/MessageAmpTest.java (Andrzej Wo\u0301jcik 2017-10-29 13:24:31 +0100 76) \t\tXMPPResourceConnection recipientSession = getSession(\n",
            "commit_hashes": {
                "84db83a37e": "    Fixes #3131 - Issue with processing outgoing messages with AMP payload by SessionManager",
                "8a3ba3f057": "    #2750: code reformat"
            },
            "Commit&issueIDs": {
                "84db83a37e": [
                    "#3131"
                ]
            },
            "links": [
                "https://github.com/tigase/tigase-server/issues/3131",
                "https://github.com/tigase/tigase-server/commit/84db83a37e"
            ]
        },
        {
            "poj_link": "https://github.com/tigase/tigase-server/",
            "file_path": "tigase/tigase-server/src/test/java/tigase/xmpp/impl/OfflineMessagesTest.java",
            "test_name": "testIsAllowedForOfflineStorage",
            "FQS": "tigase.xmpp.impl.OfflineMessagesTest.testIsAllowedForOfflineStorage()",
            "start_line": "201",
            "blame_result": "8a3ba3f057 server/src/test/java/tigase/xmpp/impl/OfflineMessagesTest.java (Andrzej Wo\u0301jcik 2017-10-29 13:24:31 +0100 202) \t\tPacket packet = Packet.packetInstance(\n8a3ba3f057 server/src/test/java/tigase/xmpp/impl/OfflineMessagesTest.java (Andrzej Wo\u0301jcik 2017-10-29 13:24:31 +0100 203) \t\t\t\tnew Element(\"message\", new Element[]{new Element(\"body\", \"Test message\")}, new String[]{\"from\", \"to\"},\n8a3ba3f057 server/src/test/java/tigase/xmpp/impl/OfflineMessagesTest.java (Andrzej Wo\u0301jcik 2017-10-29 13:24:31 +0100 204) \t\t\t\t\t\t\tnew String[]{\"from@example.com/res1\", \"to@example.com/res2\"}));\n7dc3c84fac src/test/java/tigase/xmpp/impl/OfflineMessagesTest.java        (Andrzej Wo\u0301jcik 2015-07-10 22:03:51 +0200 205) \t\tassertTrue(offlineProcessor.isAllowedForOfflineStorage(packet));\n8a3ba3f057 server/src/test/java/tigase/xmpp/impl/OfflineMessagesTest.java (Andrzej Wo\u0301jcik 2017-10-29 13:24:31 +0100 206) \n",
            "commit_hashes": {
                "8a3ba3f057": "    #2750: code reformat",
                "7dc3c84fac": "    Issue #2426 - added support for setting list of XML paths and namespaces for which packets should also be stored in offline storage"
            },
            "Commit&issueIDs": {
                "7dc3c84fac": [
                    "#2426"
                ]
            },
            "links": [
                "https://github.com/tigase/tigase-server/issues/2426",
                "https://github.com/tigase/tigase-server/commit/7dc3c84fac"
            ]
        },
        {
            "poj_link": "https://github.com/Alfresco/alfresco-community-repo/",
            "file_path": "Alfresco/alfresco-community-repo/repository/src/test/java/org/alfresco/repo/cache/lookup/EntityLookupCacheTest.java",
            "test_name": "testNullLookups",
            "FQS": "org.alfresco.repo.cache.lookup.EntityLookupCacheTest.testNullLookups()",
            "start_line": "166",
            "blame_result": "f4103c242fe (Eva Vasques 2024-10-09 17:07:10 +0100 167)     {\nf4103c242fe (Eva Vasques 2024-10-09 17:07:10 +0100 168)         TestValue valueNull = null;\nf4103c242fe (Eva Vasques 2024-10-09 17:07:10 +0100 169)         Pair<Long, Object> entityPairNull = entityLookupCacheA.getOrCreateByValue(valueNull);\nf4103c242fe (Eva Vasques 2024-10-09 17:07:10 +0100 170)         assertNotNull(entityPairNull);\nf4103c242fe (Eva Vasques 2024-10-09 17:07:10 +0100 171)         assertTrue(database.containsKey(entityPairNull.getFirst()));\n",
            "commit_hashes": {
                "f4103c242fe": "    MNT-24641 Avoid duplicate key error on content upload (#2984)"
            },
            "Commit&issueIDs": {
                "f4103c242fe": [
                    "2984"
                ]
            },
            "links": [
                "https://github.com/Alfresco/alfresco-community-repo/issues/2984",
                "https://github.com/Alfresco/alfresco-community-repo/commit/f4103c242fe"
            ]
        },
        {
            "poj_link": "https://github.com/THLfi/koronavilkku-backend/",
            "file_path": "THLfi/koronavilkku-backend/exposure-notification/src/test/java/fi/thl/covid19/exposurenotification/diagnosiskey/IntervalNumberTest.java",
            "test_name": "dayFirstIntervalWorks",
            "FQS": "fi.thl.covid19.exposurenotification.diagnosiskey.IntervalNumberTest.dayFirstIntervalWorks()",
            "start_line": "39",
            "blame_result": "43919f10 (Jyrki Jakobsson 2020-10-01 17:19:17 +0300 40)         assertEquals(to10MinInterval(Instant.parse(\"2020-10-01T00:00:00Z\")),\n43919f10 (Jyrki Jakobsson 2020-10-01 17:19:17 +0300 41)                 dayFirst10MinInterval(Instant.parse(\"2020-10-01T12:00:00Z\")));\n43919f10 (Jyrki Jakobsson 2020-10-01 17:19:17 +0300 42)     }\n43919f10 (Jyrki Jakobsson 2020-10-01 17:19:17 +0300 43) \n43919f10 (Jyrki Jakobsson 2020-10-01 17:19:17 +0300 44)     @Test\n",
            "commit_hashes": {
                "43919f10": "    Fix potential interval number muplications overflow (#30)"
            },
            "Commit&issueIDs": {
                "43919f10": [
                    "30"
                ]
            },
            "links": [
                "https://github.com/THLfi/koronavilkku-backend/issues/30",
                "https://github.com/THLfi/koronavilkku-backend/commit/43919f10"
            ]
        },
        {
            "poj_link": "https://github.com/THLfi/koronavilkku-backend/",
            "file_path": "THLfi/koronavilkku-backend/exposure-notification/src/test/java/fi/thl/covid19/exposurenotification/diagnosiskey/IntervalNumberTest.java",
            "test_name": "dayLastIntervalWorks",
            "FQS": "fi.thl.covid19.exposurenotification.diagnosiskey.IntervalNumberTest.dayLastIntervalWorks()",
            "start_line": "45",
            "blame_result": "43919f10 (Jyrki Jakobsson 2020-10-01 17:19:17 +0300 46)         assertEquals(to10MinInterval(Instant.parse(\"2020-10-01T23:55:00Z\")),\n43919f10 (Jyrki Jakobsson 2020-10-01 17:19:17 +0300 47)                 dayLast10MinInterval(Instant.parse(\"2020-10-01T12:00:00Z\")));\n43919f10 (Jyrki Jakobsson 2020-10-01 17:19:17 +0300 48)     }\n43919f10 (Jyrki Jakobsson 2020-10-01 17:19:17 +0300 49) \n43919f10 (Jyrki Jakobsson 2020-10-01 17:19:17 +0300 50)     @Test\n",
            "commit_hashes": {
                "43919f10": "    Fix potential interval number muplications overflow (#30)"
            },
            "Commit&issueIDs": {
                "43919f10": [
                    "30"
                ]
            },
            "links": [
                "https://github.com/THLfi/koronavilkku-backend/issues/30",
                "https://github.com/THLfi/koronavilkku-backend/commit/43919f10"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/aop/asm/AsmClassAgentTest.java",
            "test_name": "test_duplicate_class_exception",
            "FQS": "org.nutz.aop.asm.AsmClassAgentTest.test_duplicate_class_exception()",
            "start_line": "37",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 38)         int[] cc = new int[4];\n7f94d5ae49 (Wendal Chen 2018-01-08 20:43:40 +0800 39)         AsmClassAgent ca = getNewClassAgent();\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 40)         ca.addInterceptor(MethodMatcherFactory.matcher(\".*\"), new MethodCounter(cc));\n7f94d5ae49 (Wendal Chen 2018-01-08 20:43:40 +0800 41)         AsmClassAgent ca2 = getNewClassAgent();\n7f94d5ae49 (Wendal Chen 2018-01-08 20:43:40 +0800 42)         ca2.id = ca.id;\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c",
                "7f94d5ae49": "    add: Aop\u7c7b\u4e0eNutIoc\u5bb9\u5668\u4e00\u5bf9\u4e00\u7ed1\u5b9a\u7684\u529f\u80fd,\u4f46\u9ed8\u8ba4\u7981\u7528"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/aop/asm/ClassXTest.java",
            "test_name": "testCreate2",
            "FQS": "org.nutz.aop.asm.ClassXTest.testCreate2()",
            "start_line": "62",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 63)         ClassDefiner cd = Nutzs.cd();\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 64) \n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 65)         Class<?> obj = classAgent.define(cd, Aop1.class);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 66)         Class<?> obj2 = classAgent.define(cd, Aop1.class);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 67)         assertEquals(obj, obj2);\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/ioc/json/ScopeJsonIocTest.java",
            "test_name": "test_simple_scope",
            "FQS": "org.nutz.ioc.json.ScopeJsonIocTest.test_simple_scope()",
            "start_line": "17",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 18)         Ioc2 ioc = I(    J(\"f1\", \"scope:'app',fields:{name:'F1'}\"),\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 19)                         J(\"f2\", \"scope:'MyScope',fields:{name:'F2'}\"));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 20) \n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 21)         Animal f1 = ioc.get(Animal.class, \"f1\");\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 22)         assertEquals(\"F1\", f1.getName());\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/ioc/json/SimpleJsonIocTest.java",
            "test_name": "test_singleon",
            "FQS": "org.nutz.ioc.json.SimpleJsonIocTest.test_singleon()",
            "start_line": "97",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800  98)         Ioc ioc = I(J(\"fox\", \"name:'Fox'\"));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800  99)         Animal f = ioc.get(Animal.class, \"fox\");\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 100)         Animal f2 = ioc.get(Animal.class, \"fox\");\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 101)         assertTrue(f == f2);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 102) \n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/ioc/json/SimpleJsonIocTest.java",
            "test_name": "test_refer",
            "FQS": "org.nutz.ioc.json.SimpleJsonIocTest.test_refer()",
            "start_line": "73",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 74)         Ioc ioc = I(J(\"fox\", \"name:'Fox',another:{refer:'fox'}\"));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 75)         Animal f = ioc.get(Animal.class, \"fox\");\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 76)         assertEquals(\"Fox\", f.getName());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 77)         assertTrue(f == f.getAnother());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 78)     }\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/ioc/json/SimpleJsonIocTest.java",
            "test_name": "test_array_and_refer",
            "FQS": "org.nutz.ioc.json.SimpleJsonIocTest.test_array_and_refer()",
            "start_line": "123",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 124)         Ioc ioc = I(J(\"fox\", \"name:'Fox'\"),\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 125)                     J(    \"rabit\",\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 126)                         \"name:'Rabit',enemies:[{refer:'fox:org.nutz.ioc.json.pojo.Animal'},null]\"));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 127) \n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 128)         Animal r = ioc.get(Animal.class, \"rabit\");\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/ioc/json/SimpleJsonIocTest.java",
            "test_name": "test_java_with_arguments",
            "FQS": "org.nutz.ioc.json.SimpleJsonIocTest.test_java_with_arguments()",
            "start_line": "188",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 189)         Ioc ioc = I(J(\"fox\", \"name:'Fox',age:10\"),\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 190)                     J(\"wolf\", \"name:{java:'$fox.showName(\\\"_\\\", 2, \\\"W\\\")'},age:{java:'$fox.age'}\"));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 191)         Animal fox = ioc.get(Animal.class, \"fox\");\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 192)         Animal wolf = ioc.get(Animal.class, \"wolf\");\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 193)         assertEquals(\"Fox\", fox.getName());\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/json/JsonRecursiveTest.java",
            "test_name": "test_nutz_json_parents",
            "FQS": "org.nutz.json.JsonRecursiveTest.test_nutz_json_parents()",
            "start_line": "55",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 56)         R r = new R(1);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 57)         r.parents = Lang.array(new R(-1), new R(-2), new R(-3));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 58)         r.recur = r.parents[1];\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 59) \n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 60)         String json = Json.toJson(r);\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/json/JsonRecursiveTest.java",
            "test_name": "testSimpleNode",
            "FQS": "org.nutz.json.JsonRecursiveTest.testSimpleNode()",
            "start_line": "111",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 112)         int i = 1;\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 113)         Node root = new Node(i++, null);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 114)         Node chd1 = new Node(i++, root);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 115)         Node chd11 = new Node(i++, chd1);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 116)         Node chd12 = new Node(i++, chd1);\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/LangTest.java",
            "test_name": "test_map_equles",
            "FQS": "org.nutz.lang.LangTest.test_map_equles()",
            "start_line": "143",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 144)         Map<?, ?> map1 = Lang.map(\"{a:1,b:2}\");\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 145)         Map<?, ?> map2 = Lang.map(\"{b:2,a:1}\");\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 146) \n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 147)         assertTrue(Lang.equals(map1, map2));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 148) \n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/MathsTest.java",
            "test_name": "testIsMask",
            "FQS": "org.nutz.lang.MathsTest.testIsMask()",
            "start_line": "22",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 23)         assertTrue(isMask(bit(\"100\"), bit(\"110\")));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 24)         assertFalse(isMask(bit(\"100\"), bit(\"10010\")));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 25)     }\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 26) \n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 27)     @Test\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/MathsTest.java",
            "test_name": "testIsMaskAll",
            "FQS": "org.nutz.lang.MathsTest.testIsMaskAll()",
            "start_line": "28",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 29)         assertFalse(isMaskAll(bit(\"100\"), bit(\"110\")));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 30)         assertTrue(isMaskAll(bit(\"100101111\"), bit(\"001110\")));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 31)     }\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 32) \n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 33)     @Test\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/MathsTest.java",
            "test_name": "test_is_not_mask_all",
            "FQS": "org.nutz.lang.MathsTest.test_is_not_mask_all()",
            "start_line": "41",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 42)         assertFalse(isNoMask(bit(\"0110\"), bit(\"1100\")));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 43)         assertFalse(isNoMask(bit(\"0100\"), bit(\"1100\")));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 44)         assertFalse(isNoMask(bit(\"1000\"), bit(\"1100\")));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 45)         assertTrue(isNoMask(bit(\"110011\"), bit(\"1100\")));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 46)         assertFalse(isNoMask(bit(\"111011\"), bit(\"1100\")));\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/TimesTest.java",
            "test_name": "test_sep_by_T",
            "FQS": "org.nutz.lang.TimesTest.test_sep_by_T()",
            "start_line": "81",
            "blame_result": "bccb01a5b8 (Peter Zhang 2013-09-17 17:25:08 +0800 82)         Date d0 = Times.D(\"2013-09-14 12:33:14\");\nbccb01a5b8 (Peter Zhang 2013-09-17 17:25:08 +0800 83)         Date d1 = Times.D(\"2013-09-14T12:33:14\");\nbccb01a5b8 (Peter Zhang 2013-09-17 17:25:08 +0800 84)         assertEquals(d0.getTime(), d1.getTime());\nbccb01a5b8 (Peter Zhang 2013-09-17 17:25:08 +0800 85)     }\nbccb01a5b8 (Peter Zhang 2013-09-17 17:25:08 +0800 86) \n",
            "commit_hashes": {
                "bccb01a5b8": "    Fix issue #524"
            },
            "Commit&issueIDs": {
                "bccb01a5b8": [
                    "#524"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/524",
                "https://github.com/nutzam/nutz/commit/bccb01a5b8"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/TimesTest.java",
            "test_name": "test_d",
            "FQS": "org.nutz.lang.TimesTest.test_d()",
            "start_line": "94",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 95)         Date d = new Date(System.currentTimeMillis());\na19c25be21 (pangwu86    2014-08-27 00:35:50 +0800 96)         assertEquals(Times.now().getTime() / 1000, Times.D(Times.sDT(d)).getTime() / 1000);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 97)     }\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 98) \n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 99)     @Test\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c",
                "a19c25be21": "    add:\u628a3m\u81ea\u52a8\u6362\u7b97\u6210120000\u6beb\u79d2\u7684\u65b9\u6cd5"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/meta/PairTest.java",
            "test_name": "test_equal",
            "FQS": "org.nutz.lang.meta.PairTest.test_equal()",
            "start_line": "10",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 11)         Pair<String> p = Pair.create(\"abc=\\\"bbb\\\"\");\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 12)         Pair<String> p2 = Pair.create(\"abc=\\\"bbb\\\"\");\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 13)         assertTrue(p.equals(p2));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 14)     }\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 15)     \n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/util/SimpleNodeTest.java",
            "test_name": "testGetAncestors",
            "FQS": "org.nutz.lang.util.SimpleNodeTest.testGetAncestors()",
            "start_line": "53",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 54)         root.add(A.add(B.add(C)));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 55) \n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 56)         assertEquals(B, C.parent());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 57)         assertEquals(A, B.parent());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 58)         assertEquals(root, A.parent());\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/util/SimpleNodeTest.java",
            "test_name": "testAdd",
            "FQS": "org.nutz.lang.util.SimpleNodeTest.testAdd()",
            "start_line": "122",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 123)         root.add(B);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 124)         assertEquals(B, root.firstChild());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 125)         assertEquals(B, root.lastChild());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 126)         List<Node<String>> ans = root.getChildren();\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 127)         assertEquals(B, ans.get(0));\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/util/SimpleNodeTest.java",
            "test_name": "testChild",
            "FQS": "org.nutz.lang.util.SimpleNodeTest.testChild()",
            "start_line": "159",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 160)         root.add(A, B, C, D, E);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 161)         assertNull(root.child(-1));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 162)         assertNull(root.child(5));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 163)         assertEquals(A, root.child(0));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 164)         assertEquals(B, root.child(1));\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/util/SimpleNodeTest.java",
            "test_name": "testDesc",
            "FQS": "org.nutz.lang.util.SimpleNodeTest.testDesc()",
            "start_line": "171",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 172)         A.add(B, C);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 173)         D.add(E, F);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 174)         root.add(A, D);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 175)         assertEquals(A, root.desc(0));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 176)         assertEquals(B, root.desc(0, 0));\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/util/SimpleNodeTest.java",
            "test_name": "testInsert",
            "FQS": "org.nutz.lang.util.SimpleNodeTest.testInsert()",
            "start_line": "184",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 185)         root.add(A, C, E);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 186)         root.insertBefore(1, B);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 187)         assertEquals(A, root.child(0));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 188)         assertEquals(B, root.child(1));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 189)         assertEquals(C, root.child(2));\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/util/SimpleNodeTest.java",
            "test_name": "testPop",
            "FQS": "org.nutz.lang.util.SimpleNodeTest.testPop()",
            "start_line": "203",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 204)         root.add(A, B, C, D, E);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 205)         assertEquals(E, root.pop());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 206)         assertEquals(D, root.pop());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 207)         assertEquals(C, root.pop());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 208)         assertEquals(B, root.pop());\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/util/SimpleNodeTest.java",
            "test_name": "testPopFirst",
            "FQS": "org.nutz.lang.util.SimpleNodeTest.testPopFirst()",
            "start_line": "217",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 218)         root.add(A, B, C, D, E);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 219)         assertEquals(A, root.popFirst());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 220)         assertEquals(B, root.popFirst());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 221)         assertEquals(C, root.popFirst());\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 222)         assertEquals(D, root.popFirst());\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/util/SimpleNodeTest.java",
            "test_name": "testRemove",
            "FQS": "org.nutz.lang.util.SimpleNodeTest.testRemove()",
            "start_line": "231",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 232)         root.add(A, B, C, D, E);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 233)         assertEquals(C, root.removeChild(2));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 234)         assertEquals(A, root.child(0));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 235)         assertEquals(B, root.child(1));\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 236)         assertEquals(D, root.child(2));\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/nutzam/nutz/",
            "file_path": "nutzam/nutz/test/org/nutz/lang/util/SimpleNodeTest.java",
            "test_name": "test_iteratoring_1",
            "FQS": "org.nutz.lang.util.SimpleNodeTest.test_iteratoring_1()",
            "start_line": "265",
            "blame_result": "71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 266)         root.add(A, C, D);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 267)         A.add(B);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 268)         D.add(E, F);\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 269)         Iterator<Node<String>> it = root.iterator();\n71ee640f99 (Wendal Chen 2012-06-28 16:20:11 +0800 270)         assertTrue(it.hasNext());\n",
            "commit_hashes": {
                "71ee640f99": "    fix #252 : \u5c06test\u4ee3\u7801\u4e2d\u7684Tab\u8f6c\u4e3a4\u4e2a\u7a7a\u683c"
            },
            "Commit&issueIDs": {
                "71ee640f99": [
                    "#252"
                ]
            },
            "links": [
                "https://github.com/nutzam/nutz/issues/252",
                "https://github.com/nutzam/nutz/commit/71ee640f99"
            ]
        },
        {
            "poj_link": "https://github.com/senbox-org/snap-engine/",
            "file_path": "senbox-org/snap-engine/snap-binning/src/test/java/org/esa/snap/binning/operator/formatter/FormatterConfigTest.java",
            "test_name": "testXmlGeneration",
            "FQS": "org.esa.snap.binning.operator.formatter.FormatterConfigTest.testXmlGeneration()",
            "start_line": "52",
            "blame_result": "f63a5fe615a snap-binning/src/test/java/org/esa/snap/binning/operator/formatter/FormatterConfigTest.java (Tom Block       2019-09-27 15:31:33 +0200 53)         final FormatterConfig config = loadConfig(\"FormatterConfigTest.xml\");\n9fde48bc03d beam-binning2/src/test/java/org/esa/beam/binning/operator/FormatterConfigTest.java          (Norman Fomferra 2012-05-22 17:06:33 +0200 54)         final String xml = config.toXml();\n9fde48bc03d beam-binning2/src/test/java/org/esa/beam/binning/operator/FormatterConfigTest.java          (Norman Fomferra 2012-05-22 17:06:33 +0200 55)         final FormatterConfig configCopy = FormatterConfig.fromXml(xml);\n9fde48bc03d beam-binning2/src/test/java/org/esa/beam/binning/operator/FormatterConfigTest.java          (Norman Fomferra 2012-05-22 17:06:33 +0200 56) \n9fde48bc03d beam-binning2/src/test/java/org/esa/beam/binning/operator/FormatterConfigTest.java          (Norman Fomferra 2012-05-22 17:06:33 +0200 57)         assertEquals(config.getOutputFile(), configCopy.getOutputFile());\n",
            "commit_hashes": {
                "f63a5fe615a": "    Tom l3 formatter extension (#152)",
                "9fde48bc03d": "    Moved new binner from Calvalus to BEAM"
            },
            "Commit&issueIDs": {
                "f63a5fe615a": [
                    "152"
                ]
            },
            "links": [
                "https://github.com/senbox-org/snap-engine/issues/152",
                "https://github.com/senbox-org/snap-engine/commit/f63a5fe615a"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse/mosaic/",
            "file_path": "eclipse/mosaic/lib/mosaic-routing/src/test/java/org/eclipse/mosaic/lib/routing/database/RouteManagerTest.java",
            "test_name": "getRouteForRTI_transformationSuccessful",
            "FQS": "org.eclipse.mosaic.lib.routing.database.RouteManagerTest.getRouteForRTI_transformationSuccessful()",
            "start_line": "85",
            "blame_result": "969fbf43 (Karl Schrab 2021-04-28 16:18:13 +0200 86)         CandidateRoute candidateRoute = new CandidateRoute(Arrays.asList(\"4609243_27537749_252864801\", \"4609243_252864801_252864802\"), 0, 0);\n4c9421ea (Karl Schrab 2020-09-23 14:20:01 +0200 87)         Route route = instance.createRouteByCandidateRoute(candidateRoute);\n4c9421ea (Karl Schrab 2020-09-23 14:20:01 +0200 88) \n4c9421ea (Karl Schrab 2020-09-23 14:20:01 +0200 89)         //RUN\n4c9421ea (Karl Schrab 2020-09-23 14:20:01 +0200 90)         VehicleRoute rtiRoute = instance.createRouteForRTI(route);\n",
            "commit_hashes": {
                "969fbf43": "    Use List of Connections in CandidateRoute (#86)",
                "4c9421ea": "    Initial Commit of Eclipse MOSAIC"
            },
            "Commit&issueIDs": {
                "969fbf43": [
                    "86"
                ]
            },
            "links": [
                "https://github.com/eclipse/mosaic/issues/86",
                "https://github.com/eclipse/mosaic/commit/969fbf43"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse/mosaic/",
            "file_path": "eclipse/mosaic/lib/mosaic-routing/src/test/java/org/eclipse/mosaic/lib/routing/database/RouteManagerTest.java",
            "test_name": "getRouteForRTI_transformationSuccessful__twoConnectionsWithSameStartEndNode",
            "FQS": "org.eclipse.mosaic.lib.routing.database.RouteManagerTest.getRouteForRTI_transformationSuccessful__twoConnectionsWithSameStartEndNode()",
            "start_line": "99",
            "blame_result": "969fbf43 (Karl Schrab 2021-04-28 16:18:13 +0200 100)         CandidateRoute candidateRoute = new CandidateRoute(Arrays.asList(\"32935480_21677261_21668930\", \"32935480_21668930_27537748\"), 0, 0);\n4c9421ea (Karl Schrab 2020-09-23 14:20:01 +0200 101)         Route route = instance.createRouteByCandidateRoute(candidateRoute);\n4c9421ea (Karl Schrab 2020-09-23 14:20:01 +0200 102) \n4c9421ea (Karl Schrab 2020-09-23 14:20:01 +0200 103)         //RUN\n4c9421ea (Karl Schrab 2020-09-23 14:20:01 +0200 104)         VehicleRoute rtiRoute = instance.createRouteForRTI(route);\n",
            "commit_hashes": {
                "969fbf43": "    Use List of Connections in CandidateRoute (#86)",
                "4c9421ea": "    Initial Commit of Eclipse MOSAIC"
            },
            "Commit&issueIDs": {
                "969fbf43": [
                    "86"
                ]
            },
            "links": [
                "https://github.com/eclipse/mosaic/issues/86",
                "https://github.com/eclipse/mosaic/commit/969fbf43"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse/mosaic/",
            "file_path": "eclipse/mosaic/lib/mosaic-routing/src/test/java/org/eclipse/mosaic/lib/routing/database/RouteManagerTest.java",
            "test_name": "getRouteForRTI_originSumo",
            "FQS": "org.eclipse.mosaic.lib.routing.database.RouteManagerTest.getRouteForRTI_originSumo()",
            "start_line": "113",
            "blame_result": "2e5ffc49 (Karl Schrab 2021-01-22 17:37:22 +0100 114)         // SETUP\n2e5ffc49 (Karl Schrab 2021-01-22 17:37:22 +0100 115)         // override behavior of getImportOrigin to simulate import origin from network file\n2e5ffc49 (Karl Schrab 2021-01-22 17:37:22 +0100 116)         doReturn(Database.IMPORT_ORIGIN_SUMO).when(database).getImportOrigin();\n2e5ffc49 (Karl Schrab 2021-01-22 17:37:22 +0100 117) \n969fbf43 (Karl Schrab 2021-04-28 16:18:13 +0200 118)         CandidateRoute candidateRoute = new CandidateRoute(Arrays.asList(\"32935480_21677261_21668930\", \"32935480_21668930_27537748\"), 0, 0);\n",
            "commit_hashes": {
                "2e5ffc49": "     Convert route to connection ids if the database originates from a Network file (#30)",
                "969fbf43": "    Use List of Connections in CandidateRoute (#86)"
            },
            "Commit&issueIDs": {
                "2e5ffc49": [
                    "30"
                ],
                "969fbf43": [
                    "86"
                ]
            },
            "links": [
                "https://github.com/eclipse/mosaic/issues/30",
                "https://github.com/eclipse/mosaic/commit/2e5ffc49",
                "https://github.com/eclipse/mosaic/issues/86",
                "https://github.com/eclipse/mosaic/commit/969fbf43"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-lookout/",
            "file_path": "sofastack/sofa-lookout/client/lookout-api/src/test/java/com/alipay/lookout/api/DefaultIdTest.java",
            "test_name": "testEquals",
            "FQS": "com.alipay.lookout.api.DefaultIdTest.testEquals()",
            "start_line": "28",
            "blame_result": "^3cf6ebd client/lookout-common/src/main/java/com/alipay/lookout/common/utils/MetricsUtil.java (luyiisme 2018-05-14 23:24:31 +0800 29) \nd0467adb client/lookout-api/src/test/java/com/alipay/lookout/api/DefaultIdTest.java           (luyi     2018-05-16 11:53:40 +0800 30)         Id id1 = new DefaultId(\"name\").withTag(new BasicTag(\"k1\", \"v1\")).withTag(\nd0467adb client/lookout-api/src/test/java/com/alipay/lookout/api/DefaultIdTest.java           (luyi     2018-05-16 11:53:40 +0800 31)             new BasicTag(\"k2\", \"v2\"));\nd0467adb client/lookout-api/src/test/java/com/alipay/lookout/api/DefaultIdTest.java           (luyi     2018-05-16 11:53:40 +0800 32) \nd0467adb client/lookout-api/src/test/java/com/alipay/lookout/api/DefaultIdTest.java           (luyi     2018-05-16 11:53:40 +0800 33)         Tag[] tags = new Tag[] { new BasicTag(\"k2\", \"v2\"), new BasicTag(\"k1\", \"v1\") };\n",
            "commit_hashes": {
                "3cf6ebd": "    init project",
                "d0467adb": "    integrate travis  and coveralls (#3)"
            },
            "Commit&issueIDs": {
                "d0467adb": [
                    "(#3)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-lookout/issues/3",
                "https://github.com/sofastack/sofa-lookout/commit/d0467adb"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-lookout/",
            "file_path": "sofastack/sofa-lookout/client/lookout-reg-server/src/test/java/com/alipay/lookout/remote/step/CompositeRegistryTest.java",
            "test_name": "testCompositeRemoteAndDefaultRegistry",
            "FQS": "com.alipay.lookout.remote.step.CompositeRegistryTest.testCompositeRemoteAndDefaultRegistry()",
            "start_line": "70",
            "blame_result": "1698b774 (xzchaoo  2018-08-17 14:16:18 +0800 71)         ManualClock clock = new ManualClock();\n^3cf6ebd (luyiisme 2018-05-14 23:24:31 +0800 72)         CompositeRegistry registry = new CompositeRegistry(clock);\n^3cf6ebd (luyiisme 2018-05-14 23:24:31 +0800 73)         MetricRegistry defaultRegistry = new DefaultRegistry(clock);\n^3cf6ebd (luyiisme 2018-05-14 23:24:31 +0800 74)         registry.add(defaultRegistry);\n^3cf6ebd (luyiisme 2018-05-14 23:24:31 +0800 75)         //config\n",
            "commit_hashes": {
                "1698b774": "    \u6dfb\u52a0\u88ab\u52a8pull metrics\u652f\u6301 (#31)",
                "3cf6ebd": "    init project"
            },
            "Commit&issueIDs": {
                "1698b774": [
                    "(#31)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-lookout/issues/31",
                "https://github.com/sofastack/sofa-lookout/commit/1698b774"
            ]
        },
        {
            "poj_link": "https://github.com/DependencyTrack/dependency-track/",
            "file_path": "DependencyTrack/dependency-track/src/test/java/org/dependencytrack/model/ComponentTest.java",
            "test_name": "testToStringWithPurl",
            "FQS": "org.dependencytrack.model.ComponentTest.testToStringWithPurl()",
            "start_line": "216",
            "blame_result": "2508a4ebd (Steve Springett 2019-01-31 17:16:03 -0600 217)         Component component = new Component();\n2508a4ebd (Steve Springett 2019-01-31 17:16:03 -0600 218)         PackageURL purl = PackageURLBuilder.aPackageURL()\n2508a4ebd (Steve Springett 2019-01-31 17:16:03 -0600 219)                 .withType(\"maven\").withNamespace(\"acme\").withName(\"product\").withVersion(\"1.0\").build();\n2508a4ebd (Steve Springett 2019-01-31 17:16:03 -0600 220)         component.setPurl(purl);\n2508a4ebd (Steve Springett 2019-01-31 17:16:03 -0600 221)         Assert.assertEquals(component.getPurl().toString(), component.toString());\n",
            "commit_hashes": {
                "2508a4ebd": "    Added additional model tests #68"
            },
            "Commit&issueIDs": {
                "2508a4ebd": [
                    "#68"
                ]
            },
            "links": [
                "https://github.com/DependencyTrack/dependency-track/issues/68",
                "https://github.com/DependencyTrack/dependency-track/commit/2508a4ebd"
            ]
        },
        {
            "poj_link": "https://github.com/twitter/hbc/",
            "file_path": "twitter/hbc/hbc-core/src/test/java/com/twitter/hbc/RateTrackerTest.java",
            "test_name": "testPausing",
            "FQS": "com.twitter.hbc.RateTrackerTest.testPausing()",
            "start_line": "109",
            "blame_result": "^0e6ebfc (Steven Liu       2013-02-06 19:49:51 -0600 110)     int millis = 100;\n^0e6ebfc (Steven Liu       2013-02-06 19:49:51 -0600 111)     int buckets = 10;\nf1e1ad0a (Jason Toffaletti 2013-04-19 14:24:45 -0700 112)     BasicRateTracker rateTracker = new BasicRateTracker(millis, buckets, false, scheduler);\n^0e6ebfc (Steven Liu       2013-02-06 19:49:51 -0600 113)     assertTrue(Double.isNaN(rateTracker.getCurrentRateSeconds()));\n^0e6ebfc (Steven Liu       2013-02-06 19:49:51 -0600 114) \n",
            "commit_hashes": {
                "0e6ebfc": "    Initial commit",
                "f1e1ad0a": "    fixes issue #53"
            },
            "Commit&issueIDs": {
                "f1e1ad0a": [
                    "#53"
                ]
            },
            "links": [
                "https://github.com/twitter/hbc/issues/53",
                "https://github.com/twitter/hbc/commit/f1e1ad0a"
            ]
        },
        {
            "poj_link": "https://github.com/yandex-qatools/postgresql-embedded/",
            "file_path": "yandex-qatools/postgresql-embedded/src/test/java/ru/yandex/qatools/embed/postgresql/config/StorageTest.java",
            "test_name": "itShouldAllowToMakeTwoStorageWithOneDatabaseName",
            "FQS": "ru.yandex.qatools.embed.postgresql.config.StorageTest.itShouldAllowToMakeTwoStorageWithOneDatabaseName()",
            "start_line": "13",
            "blame_result": "63555018 (Victor Alenkov 2017-07-19 16:29:52 +0300 14) \t\tfinal AbstractPostgresConfig.Storage storage0 = new AbstractPostgresConfig.Storage(EmbeddedPostgres.DEFAULT_DB_NAME);\n63555018 (Victor Alenkov 2017-07-19 16:29:52 +0300 15) \t\tAssert.assertTrue(storage0.dbDir().exists());\n63555018 (Victor Alenkov 2017-07-19 16:29:52 +0300 16) \n63555018 (Victor Alenkov 2017-07-19 16:29:52 +0300 17) \t\tfinal AbstractPostgresConfig.Storage storage1 = new AbstractPostgresConfig.Storage(EmbeddedPostgres.DEFAULT_DB_NAME);\n63555018 (Victor Alenkov 2017-07-19 16:29:52 +0300 18) \t\tAssert.assertTrue(storage1.dbDir().exists());\n",
            "commit_hashes": {
                "63555018": "    fixed issue #90: separated the unpacked programs for versions (#92)"
            },
            "Commit&issueIDs": {
                "63555018": [
                    "(#92)"
                ]
            },
            "links": [
                "https://github.com/yandex-qatools/postgresql-embedded/issues/92",
                "https://github.com/yandex-qatools/postgresql-embedded/commit/63555018"
            ]
        },
        {
            "poj_link": "https://github.com/crawler-commons/crawler-commons/",
            "file_path": "crawler-commons/crawler-commons/src/test/java/crawlercommons/sitemaps/extension/PageMapsTest.java",
            "test_name": "testPageMapAttributesEquals",
            "FQS": "crawlercommons.sitemaps.extension.PageMapsTest.testPageMapAttributesEquals()",
            "start_line": "27",
            "blame_result": "54576e81 (Sebastian Nagel 2023-10-28 17:09:45 +0200 28)         PageMap a = new PageMap();\n54576e81 (Sebastian Nagel 2023-10-28 17:09:45 +0200 29)         PageMapDataObject da = new PageMapDataObject(\"test\", \"a\");\n54576e81 (Sebastian Nagel 2023-10-28 17:09:45 +0200 30)         da.addAttribute(\"foo\", \"bar\");\n54576e81 (Sebastian Nagel 2023-10-28 17:09:45 +0200 31)         a.addDataObject(da);\n54576e81 (Sebastian Nagel 2023-10-28 17:09:45 +0200 32)         assertEquals(a, a);\n",
            "commit_hashes": {
                "54576e81": "    [Sitemaps] Google Sitemap PageMap extensions, implements #388 (#442)"
            },
            "Commit&issueIDs": {
                "54576e81": [
                    "#388",
                    "(#442)"
                ]
            },
            "links": [
                "https://github.com/crawler-commons/crawler-commons/issues/388",
                "https://github.com/crawler-commons/crawler-commons/commit/54576e81"
            ]
        },
        {
            "poj_link": "https://github.com/jorabin/KeePassJava2/",
            "file_path": "jorabin/KeePassJava2/kdbx/src/test/java/org/linguafranca/pwdb/kdbx/HelperTest.java",
            "test_name": "testBase64",
            "FQS": "org.linguafranca.pwdb.kdbx.HelperTest.testBase64()",
            "start_line": "34",
            "blame_result": "43459445 src/test/java/org/linguafranca/pwdb/kdbx/HelperTest.java        (Jo Rabin 2016-10-08 19:03:27 +0100 35)         String inputString = \"0tU8XFRUX2TCk5tmmrshuQ==\";\nd0353b72 kdbx/src/test/java/org/linguafranca/pwdb/kdbx/HelperTest.java   (Jo Rabin 2023-05-12 16:26:54 +0100 36)         printStream.println(\"Input string: \" + inputString);\nc1e16d87 src/test/java/org/linguafranca/keepass/dom/DomHelperTest.java   (Jo Rabin 2015-11-06 19:18:27 +0000 37)         String hexString = \"D2D53C5C54545F64C2939B669ABB21B9\";\n41697d10 src/test/java/org/linguafranca/pwdb/kdbx/dom/DomHelperTest.java (Jo Rabin 2016-10-02 19:37:29 +0100 38)         String convertedString = Helpers.hexStringFromBase64(\"0tU8XFRUX2TCk5tmmrshuQ==\");\nd0353b72 kdbx/src/test/java/org/linguafranca/pwdb/kdbx/HelperTest.java   (Jo Rabin 2023-05-12 16:26:54 +0100 39)         printStream.println(\"Converted string: \" + convertedString);\n",
            "commit_hashes": {
                "43459445": "    Jaxb implementation and tidy of tests etc",
                "d0353b72": "    Provide a \"inhibitConsoleOutput\" Maven profile and add MavenRunListener #45",
                "c1e16d87": "    Initial Commit",
                "41697d10": "    Initial jaxb development"
            },
            "Commit&issueIDs": {
                "d0353b72": [
                    "#45"
                ]
            },
            "links": [
                "https://github.com/jorabin/KeePassJava2/issues/45",
                "https://github.com/jorabin/KeePassJava2/commit/d0353b72"
            ]
        },
        {
            "poj_link": "https://github.com/senbox-org/snap-engine/",
            "file_path": "senbox-org/snap-engine/snap-core/src/test/java/org/esa/snap/core/dataio/geocoding/ComponentGeoCodingTest_transferGeoCoding.java",
            "test_name": "testTransferGeoCoding_TP_BILINEAR",
            "FQS": "org.esa.snap.core.dataio.geocoding.ComponentGeoCodingTest_transferGeoCoding.testTransferGeoCoding_TP_BILINEAR()",
            "start_line": "30",
            "blame_result": "6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 31)         //preparation\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 32)         final boolean bilinear = true;\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 33)         boolean antimeridian = false;\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 34)         final ComponentGeoCoding geoCoding = initializeWithTiePoints(srcProduct, bilinear, antimeridian);\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 35) \n",
            "commit_hashes": {
                "6bff184bf8e": "    [SNAP-999] Introducing new pixel-based geocoding (#201)"
            },
            "Commit&issueIDs": {
                "6bff184bf8e": [
                    "201"
                ]
            },
            "links": [
                "https://github.com/senbox-org/snap-engine/issues/201",
                "https://github.com/senbox-org/snap-engine/commit/6bff184bf8e"
            ]
        },
        {
            "poj_link": "https://github.com/senbox-org/snap-engine/",
            "file_path": "senbox-org/snap-engine/snap-core/src/test/java/org/esa/snap/core/dataio/geocoding/ComponentGeoCodingTest_transferGeoCoding.java",
            "test_name": "testTransferGeoCoding_TP_BILINEAR_with_ANTIMERIDIAN",
            "FQS": "org.esa.snap.core.dataio.geocoding.ComponentGeoCodingTest_transferGeoCoding.testTransferGeoCoding_TP_BILINEAR_with_ANTIMERIDIAN()",
            "start_line": "139",
            "blame_result": "6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 140)         //preparation\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 141)         final boolean bilinear = true;\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 142)         boolean antimeridian = true;\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 143)         final ComponentGeoCoding geoCoding = initializeWithTiePoints(srcProduct, bilinear, antimeridian);\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 144) \n",
            "commit_hashes": {
                "6bff184bf8e": "    [SNAP-999] Introducing new pixel-based geocoding (#201)"
            },
            "Commit&issueIDs": {
                "6bff184bf8e": [
                    "201"
                ]
            },
            "links": [
                "https://github.com/senbox-org/snap-engine/issues/201",
                "https://github.com/senbox-org/snap-engine/commit/6bff184bf8e"
            ]
        },
        {
            "poj_link": "https://github.com/senbox-org/snap-engine/",
            "file_path": "senbox-org/snap-engine/snap-core/src/test/java/org/esa/snap/core/dataio/geocoding/ComponentGeoCodingTest_transferGeoCoding.java",
            "test_name": "testTransferGeoCoding_TP_SPLINE",
            "FQS": "org.esa.snap.core.dataio.geocoding.ComponentGeoCodingTest_transferGeoCoding.testTransferGeoCoding_TP_SPLINE()",
            "start_line": "175",
            "blame_result": "6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 176)         //preparation\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 177)         final boolean bilinear = false; // = SPLINE instead\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 178)         boolean antimeridian = false;\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 179)         final ComponentGeoCoding geoCoding = initializeWithTiePoints(srcProduct, bilinear, antimeridian);\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 180) \n",
            "commit_hashes": {
                "6bff184bf8e": "    [SNAP-999] Introducing new pixel-based geocoding (#201)"
            },
            "Commit&issueIDs": {
                "6bff184bf8e": [
                    "201"
                ]
            },
            "links": [
                "https://github.com/senbox-org/snap-engine/issues/201",
                "https://github.com/senbox-org/snap-engine/commit/6bff184bf8e"
            ]
        },
        {
            "poj_link": "https://github.com/primefaces/primefaces/",
            "file_path": "primefaces/primefaces/primefaces/src/test/java/org/primefaces/model/TreeNodeTest.java",
            "test_name": "shouldHaveConsistenKeys",
            "FQS": "org.primefaces.model.TreeNodeTest.shouldHaveConsistenKeys()",
            "start_line": "97",
            "blame_result": "fe3117e510 (Thomas Andraschko 2021-07-26 15:23:53 +0200  98)         TreeNode<?> root = new DefaultTreeNode(null);\nfe3117e510 (Thomas Andraschko 2021-07-26 15:23:53 +0200  99) \nfe3117e510 (Thomas Andraschko 2021-07-26 15:23:53 +0200 100)         TreeNode child0 = new DefaultTreeNode(null, root);\nfe3117e510 (Thomas Andraschko 2021-07-26 15:23:53 +0200 101)         TreeNode child1 = new DefaultTreeNode(null, root);\nfe3117e510 (Thomas Andraschko 2021-07-26 15:23:53 +0200 102)         String childRowKey0 = child0.getRowKey();\n",
            "commit_hashes": {
                "fe3117e510": "    #7634"
            },
            "Commit&issueIDs": {
                "fe3117e510": [
                    "#7634"
                ]
            },
            "links": [
                "https://github.com/primefaces/primefaces/issues/7634",
                "https://github.com/primefaces/primefaces/commit/fe3117e510"
            ]
        },
        {
            "poj_link": "https://github.com/senbox-org/snap-engine/",
            "file_path": "senbox-org/snap-engine/snap-core/src/test/java/org/esa/snap/core/dataio/geocoding/ComponentGeoCodingTest_transferGeoCoding.java",
            "test_name": "testTransferGeoCoding_TP_SPLINE_with_ANTIMERIDIAN",
            "FQS": "org.esa.snap.core.dataio.geocoding.ComponentGeoCodingTest_transferGeoCoding.testTransferGeoCoding_TP_SPLINE_with_ANTIMERIDIAN()",
            "start_line": "249",
            "blame_result": "6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 250)         //preparation\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 251)         final boolean bilinear = false; // = SPLINE instead\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 252)         boolean antimeridian = true;\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 253)         final ComponentGeoCoding geoCoding = initializeWithTiePoints(srcProduct, bilinear, antimeridian);\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 254) \n",
            "commit_hashes": {
                "6bff184bf8e": "    [SNAP-999] Introducing new pixel-based geocoding (#201)"
            },
            "Commit&issueIDs": {
                "6bff184bf8e": [
                    "201"
                ]
            },
            "links": [
                "https://github.com/senbox-org/snap-engine/issues/201",
                "https://github.com/senbox-org/snap-engine/commit/6bff184bf8e"
            ]
        },
        {
            "poj_link": "https://github.com/senbox-org/snap-engine/",
            "file_path": "senbox-org/snap-engine/snap-core/src/test/java/org/esa/snap/core/dataio/geocoding/ComponentGeoCodingTest_transferGeoCoding.java",
            "test_name": "testTransferGeoCoding_PIXELBASED",
            "FQS": "org.esa.snap.core.dataio.geocoding.ComponentGeoCodingTest_transferGeoCoding.testTransferGeoCoding_PIXELBASED()",
            "start_line": "285",
            "blame_result": "6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 286)         //preparation\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 287)         final boolean interpolating = true;\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 288)         final boolean quadTree = true;\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 289)         final boolean antimeridian = false;\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 290)         final ComponentGeoCoding geoCoding = initializeWithBands(srcProduct, interpolating, quadTree, antimeridian);\n",
            "commit_hashes": {
                "6bff184bf8e": "    [SNAP-999] Introducing new pixel-based geocoding (#201)"
            },
            "Commit&issueIDs": {
                "6bff184bf8e": [
                    "201"
                ]
            },
            "links": [
                "https://github.com/senbox-org/snap-engine/issues/201",
                "https://github.com/senbox-org/snap-engine/commit/6bff184bf8e"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/ulid-creator/",
            "file_path": "f4b6a3/ulid-creator/src/test/java/com/github/f4b6a3/ulid/UlidTest.java",
            "test_name": "testToBytes",
            "FQS": "com.github.f4b6a3.ulid.UlidTest.testToBytes()",
            "start_line": "258",
            "blame_result": "f1eaebd3 src/test/java/com/github/f4b6a3/ulid/UlidTest.java                     (Fabio Lima 2021-01-30 06:51:27 -0300 259) \t\tRandom random = new Random();\n54cd5c05 src/test/java/com/github/f4b6a3/ulid/util/internal/UlidStructTest.java (Fabio Lima 2020-11-08 07:46:26 -0300 260) \t\tfor (int i = 0; i < DEFAULT_LOOP_MAX; i++) {\nf1eaebd3 src/test/java/com/github/f4b6a3/ulid/UlidTest.java                     (Fabio Lima 2021-01-30 06:51:27 -0300 261) \nf1eaebd3 src/test/java/com/github/f4b6a3/ulid/UlidTest.java                     (Fabio Lima 2021-01-30 06:51:27 -0300 262) \t\t\tbyte[] bytes1 = new byte[16];\nf1eaebd3 src/test/java/com/github/f4b6a3/ulid/UlidTest.java                     (Fabio Lima 2021-01-30 06:51:27 -0300 263) \t\t\trandom.nextBytes(bytes1);\n",
            "commit_hashes": {
                "f1eaebd3": "    Development of version 3.0.0 #7",
                "54cd5c05": "    [#4] Optimize the generation of ULID in string format"
            },
            "Commit&issueIDs": {
                "f1eaebd3": [
                    "#7"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/ulid-creator/issues/7",
                "https://github.com/f4b6a3/ulid-creator/commit/f1eaebd3"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/ulid-creator/",
            "file_path": "f4b6a3/ulid-creator/src/test/java/com/github/f4b6a3/ulid/UlidTest.java",
            "test_name": "testMinAndMax",
            "FQS": "com.github.f4b6a3.ulid.UlidTest.testMinAndMax()",
            "start_line": "286",
            "blame_result": "f1eaebd3 (Fabio Lima 2021-01-30 06:51:27 -0300 287) \nf1eaebd3 (Fabio Lima 2021-01-30 06:51:27 -0300 288) \t\tlong time = 0;\nf1eaebd3 (Fabio Lima 2021-01-30 06:51:27 -0300 289) \t\tRandom random = new Random();\n27a4f60c (Fabio Lima 2021-08-08 01:26:04 -0300 290) \t\tbyte[] bytes = new byte[Ulid.RANDOM_BYTES];\n41c15148 (Fabio Lima 2023-04-25 23:30:07 -0300 291) \n",
            "commit_hashes": {
                "f1eaebd3": "    Development of version 3.0.0 #7",
                "27a4f60c": "    Version 4.0.0 #15",
                "41c15148": "    Add a MIN and MAX constants and methods #26"
            },
            "Commit&issueIDs": {
                "f1eaebd3": [
                    "#7"
                ],
                "27a4f60c": [
                    "#15"
                ],
                "41c15148": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/ulid-creator/issues/7",
                "https://github.com/f4b6a3/ulid-creator/commit/f1eaebd3",
                "https://github.com/f4b6a3/ulid-creator/issues/15",
                "https://github.com/f4b6a3/ulid-creator/commit/27a4f60c",
                "https://github.com/f4b6a3/ulid-creator/issues/26",
                "https://github.com/f4b6a3/ulid-creator/commit/41c15148"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/ulid-creator/",
            "file_path": "f4b6a3/ulid-creator/src/test/java/com/github/f4b6a3/ulid/UlidTest.java",
            "test_name": "testHashCode",
            "FQS": "com.github.f4b6a3.ulid.UlidTest.testHashCode()",
            "start_line": "376",
            "blame_result": "ced08d1a (Fabio Lima 2021-11-06 10:06:14 -0300 377) \nf1eaebd3 (Fabio Lima 2021-01-30 06:51:27 -0300 378) \t\tRandom random = new Random();\nced08d1a (Fabio Lima 2021-11-06 10:06:14 -0300 379) \t\tbyte[] bytes = new byte[Ulid.ULID_BYTES];\nced08d1a (Fabio Lima 2021-11-06 10:06:14 -0300 380) \n3f56210b (Fabio Lima 2022-08-21 07:24:10 -0300 381) \t\t// invoked on the same object\n",
            "commit_hashes": {
                "ced08d1a": "    Compare internal fields as unsigned integers #17",
                "f1eaebd3": "    Development of version 3.0.0 #7",
                "3f56210b": "    Optimize comparison and hash #20"
            },
            "Commit&issueIDs": {
                "ced08d1a": [
                    "#17"
                ],
                "f1eaebd3": [
                    "#7"
                ],
                "3f56210b": [
                    "#20"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/ulid-creator/issues/17",
                "https://github.com/f4b6a3/ulid-creator/commit/ced08d1a",
                "https://github.com/f4b6a3/ulid-creator/issues/7",
                "https://github.com/f4b6a3/ulid-creator/commit/f1eaebd3",
                "https://github.com/f4b6a3/ulid-creator/issues/20",
                "https://github.com/f4b6a3/ulid-creator/commit/3f56210b"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/ulid-creator/",
            "file_path": "f4b6a3/ulid-creator/src/test/java/com/github/f4b6a3/ulid/UlidTest.java",
            "test_name": "testEquals",
            "FQS": "com.github.f4b6a3.ulid.UlidTest.testEquals()",
            "start_line": "398",
            "blame_result": "ced08d1a src/test/java/com/github/f4b6a3/ulid/UlidTest.java                     (Fabio Lima 2021-11-06 10:06:14 -0300 399) \nf1eaebd3 src/test/java/com/github/f4b6a3/ulid/UlidTest.java                     (Fabio Lima 2021-01-30 06:51:27 -0300 400) \t\tRandom random = new Random();\nced08d1a src/test/java/com/github/f4b6a3/ulid/UlidTest.java                     (Fabio Lima 2021-11-06 10:06:14 -0300 401) \t\tbyte[] bytes = new byte[Ulid.ULID_BYTES];\nced08d1a src/test/java/com/github/f4b6a3/ulid/UlidTest.java                     (Fabio Lima 2021-11-06 10:06:14 -0300 402) \n54cd5c05 src/test/java/com/github/f4b6a3/ulid/util/internal/UlidStructTest.java (Fabio Lima 2020-11-08 07:46:26 -0300 403) \t\tfor (int i = 0; i < DEFAULT_LOOP_MAX; i++) {\n",
            "commit_hashes": {
                "ced08d1a": "    Compare internal fields as unsigned integers #17",
                "f1eaebd3": "    Development of version 3.0.0 #7",
                "54cd5c05": "    [#4] Optimize the generation of ULID in string format"
            },
            "Commit&issueIDs": {
                "ced08d1a": [
                    "#17"
                ],
                "f1eaebd3": [
                    "#7"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/ulid-creator/issues/17",
                "https://github.com/f4b6a3/ulid-creator/commit/ced08d1a",
                "https://github.com/f4b6a3/ulid-creator/issues/7",
                "https://github.com/f4b6a3/ulid-creator/commit/f1eaebd3"
            ]
        },
        {
            "poj_link": "https://github.com/BentoBoxWorld/BentoBox/",
            "file_path": "BentoBoxWorld/BentoBox/src/test/java/world/bentobox/bentobox/managers/island/IslandCacheTest.java",
            "test_name": "testGetIslandById",
            "FQS": "world.bentobox.bentobox.managers.island.IslandCacheTest.testGetIslandById()",
            "start_line": "450",
            "blame_result": "5e5707f2a (tastybento 2024-05-24 16:43:55 -0700 451)         ic.addIsland(island);\n5e5707f2a (tastybento 2024-05-24 16:43:55 -0700 452)         ic.setIslandById(island);\n5e5707f2a (tastybento 2024-05-24 16:43:55 -0700 453) \n5e5707f2a (tastybento 2024-05-24 16:43:55 -0700 454)         assertEquals(island, ic.getIslandById(\"uniqueId\"));\n5e5707f2a (tastybento 2024-05-24 16:43:55 -0700 455)     }\n",
            "commit_hashes": {
                "5e5707f2a": "    Fixes #2377, was not accounting for unknown UUIDs (#2380)"
            },
            "Commit&issueIDs": {
                "5e5707f2a": [
                    "2380"
                ]
            },
            "links": [
                "https://github.com/BentoBoxWorld/BentoBox/issues/2380",
                "https://github.com/BentoBoxWorld/BentoBox/commit/5e5707f2a"
            ]
        },
        {
            "poj_link": "https://github.com/windup/windup/",
            "file_path": "windup/windup/tooling/tests/src/test/java/org/jboss/windup/tooling/ExecutionBuilderTest.java",
            "test_name": "testReloadGraph",
            "FQS": "org.jboss.windup.tooling.ExecutionBuilderTest.testReloadGraph()",
            "start_line": "204",
            "blame_result": "55b67c0f4ed (Jess Sightler  2015-04-09 20:10:09 -0400 205)         Path input = Paths.get(\"../../test-files/src_example\");\n55b67c0f4ed (Jess Sightler  2015-04-09 20:10:09 -0400 206)         Path output = getDefaultPath();\n55b67c0f4ed (Jess Sightler  2015-04-09 20:10:09 -0400 207) \n125e73db3ca (Jesse Sightler 2016-10-10 22:10:46 -0400 208)         ExecutionResults resultsOriginal = executeWindup(input, output, new TestProgressMonitor());\nfcf4dcfd1ed (Jesse Sightler 2016-08-03 09:56:24 -0400 209) \n",
            "commit_hashes": {
                "55b67c0f4ed": "    WINDUP-547: Adding a tooling API in order to properly support the Eclipse plugin",
                "125e73db3ca": "    Added a logging API for use by the tooling (#1013)",
                "fcf4dcfd1ed": "    Added the ability to reload the graph in the tooling API (#1001)"
            },
            "Commit&issueIDs": {
                "125e73db3ca": [
                    "1013"
                ],
                "fcf4dcfd1ed": [
                    "1001"
                ]
            },
            "links": [
                "https://github.com/windup/windup/issues/1013",
                "https://github.com/windup/windup/commit/125e73db3ca",
                "https://github.com/windup/windup/issues/1001",
                "https://github.com/windup/windup/commit/fcf4dcfd1ed"
            ]
        },
        {
            "poj_link": "https://github.com/mikera/vectorz/",
            "file_path": "mikera/vectorz/src/test/java/mikera/vectorz/TestVector2.java",
            "test_name": "testRotate2D",
            "FQS": "mikera.vectorz.TestVector2.testRotate2D()",
            "start_line": "9",
            "blame_result": "3f7d41edd (mikera 2018-05-04 10:57:42 +0800 10) \t\tVector2 v=Vector2.of(1,0);\n3f7d41edd (mikera 2018-05-04 10:57:42 +0800 11) \n3f7d41edd (mikera 2018-05-04 10:57:42 +0800 12) \t\tVector2 v1=v.rotate2DCopy(1.0);\n3f7d41edd (mikera 2018-05-04 10:57:42 +0800 13) \t\t\n3f7d41edd (mikera 2018-05-04 10:57:42 +0800 14) \t\tassertNotEquals(v,v1);\n",
            "commit_hashes": {
                "3f7d41edd": "    rotate2D methods, fixed #97"
            },
            "Commit&issueIDs": {
                "3f7d41edd": [
                    "#97"
                ]
            },
            "links": [
                "https://github.com/mikera/vectorz/issues/97",
                "https://github.com/mikera/vectorz/commit/3f7d41edd"
            ]
        },
        {
            "poj_link": "https://github.com/mikera/vectorz/",
            "file_path": "mikera/vectorz/src/test/java/mikera/vectorz/TestVectorMath.java",
            "test_name": "testProjection",
            "FQS": "mikera.vectorz.TestVectorMath.testProjection()",
            "start_line": "53",
            "blame_result": "de36fe046 (mikera     2012-09-29 11:40:43 +0800 54) \t\tVector3 v=Vector3.of(1,2,3);\nbb60729d8 (mikera     2012-10-08 18:08:00 +0800 55) \t\tv.projectToPlane(Vector3.of(1,0,0), 10);\nbb60729d8 (mikera     2012-10-08 18:08:00 +0800 56) \t\tassertTrue(Vector3.of(10,2,3).epsilonEquals(v));\nbb60729d8 (mikera     2012-10-08 18:08:00 +0800 57) \t}\n8135fe123 (infojunkie 2020-04-17 08:37:49 -0700 58) \n",
            "commit_hashes": {
                "de36fe046": "    Test for specialised 3d math",
                "bb60729d8": "    Implement general Matrix inverse operation",
                "8135fe123": "    Fix numerical stability + test #102"
            },
            "Commit&issueIDs": {
                "8135fe123": [
                    "#102"
                ]
            },
            "links": [
                "https://github.com/mikera/vectorz/issues/102",
                "https://github.com/mikera/vectorz/commit/8135fe123"
            ]
        },
        {
            "poj_link": "https://github.com/mikera/vectorz/",
            "file_path": "mikera/vectorz/src/test/java/mikera/vectorz/TestVectorMath.java",
            "test_name": "test3DMath",
            "FQS": "mikera.vectorz.TestVectorMath.test3DMath()",
            "start_line": "174",
            "blame_result": "de36fe046 (mikera     2012-09-29 11:40:43 +0800 175) \t\tVector3 v=Vector3.of(1,2,3);\n8135fe123 (infojunkie 2020-04-17 08:37:49 -0700 176) \nde36fe046 (mikera     2012-09-29 11:40:43 +0800 177) \t\tVector3 v2=v.clone();\nde36fe046 (mikera     2012-09-29 11:40:43 +0800 178) \t\tv2.add(v);\nde36fe046 (mikera     2012-09-29 11:40:43 +0800 179) \t\tv2.multiply(0.5);\n",
            "commit_hashes": {
                "de36fe046": "    Test for specialised 3d math",
                "8135fe123": "    Fix numerical stability + test #102"
            },
            "Commit&issueIDs": {
                "8135fe123": [
                    "#102"
                ]
            },
            "links": [
                "https://github.com/mikera/vectorz/issues/102",
                "https://github.com/mikera/vectorz/commit/8135fe123"
            ]
        },
        {
            "poj_link": "https://github.com/terasolunaorg/terasoluna-gfw/",
            "file_path": "terasolunaorg/terasoluna-gfw/terasoluna-gfw-common-libraries/terasoluna-gfw-codepoints/src/test/java/org/terasoluna/gfw/common/codepoints/CodePointsTest.java",
            "test_name": "testHashCode",
            "FQS": "org.terasoluna.gfw.common.codepoints.CodePointsTest.testHashCode()",
            "start_line": "703",
            "blame_result": "7566c8ff4 (btyanagawamg 2017-10-16 13:55:50 +0900 704)         // set up\n7566c8ff4 (btyanagawamg 2017-10-16 13:55:50 +0900 705)         CodePoints cp1 = new CodePoints(\"ABCD\");\n7566c8ff4 (btyanagawamg 2017-10-16 13:55:50 +0900 706)         CodePoints cp2 = new CodePoints(\"ABCD\");\n7566c8ff4 (btyanagawamg 2017-10-16 13:55:50 +0900 707) \n7566c8ff4 (btyanagawamg 2017-10-16 13:55:50 +0900 708)         // assert\n",
            "commit_hashes": {
                "7566c8ff4": "    unify line feed code #763"
            },
            "Commit&issueIDs": {
                "7566c8ff4": [
                    "#763"
                ]
            },
            "links": [
                "https://github.com/terasolunaorg/terasoluna-gfw/issues/763",
                "https://github.com/terasolunaorg/terasoluna-gfw/commit/7566c8ff4"
            ]
        },
        {
            "poj_link": "https://github.com/pac4j/play-pac4j/",
            "file_path": "pac4j/play-pac4j/shared/src/test/java/org/pac4j/play/store/ShiroAesDataEncrypterTests.java",
            "test_name": "testCanUseKey0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
            "FQS": "org.pac4j.play.store.ShiroAesDataEncrypterTests.testCanUseKey0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA()",
            "start_line": "22",
            "blame_result": "0d89713e (jonaskoelker-jypo 2020-01-30 13:54:51 +0100 23)         final byte[] key = new byte[16];\n0d89713e (jonaskoelker-jypo 2020-01-30 13:54:51 +0100 24)         Arrays.fill(key, (byte) 0xAA);\n0d89713e (jonaskoelker-jypo 2020-01-30 13:54:51 +0100 25) \n0d89713e (jonaskoelker-jypo 2020-01-30 13:54:51 +0100 26)         final ShiroAesDataEncrypter cryptoEngine = new ShiroAesDataEncrypter(key);\n0d89713e (jonaskoelker-jypo 2020-01-30 13:54:51 +0100 27) \n",
            "commit_hashes": {
                "0d89713e": "    Increase security in ShiroAesDataEncrypter (#273)"
            },
            "Commit&issueIDs": {
                "0d89713e": [
                    "(#273)"
                ]
            },
            "links": [
                "https://github.com/pac4j/play-pac4j/issues/273",
                "https://github.com/pac4j/play-pac4j/commit/0d89713e"
            ]
        },
        {
            "poj_link": "https://github.com/pac4j/pac4j/",
            "file_path": "pac4j/pac4j/pac4j-core/src/test/java/org/pac4j/core/profile/CommonProfileTests.java",
            "test_name": "testAddAttribute",
            "FQS": "org.pac4j.core.profile.CommonProfileTests.testAddAttribute()",
            "start_line": "41",
            "blame_result": "61b96b1f62 pac4j-core/src/test/java/org/pac4j/core/profile/CommonProfileTests.java (J\u00e9r\u00f4me LELEU   2016-03-08 11:09:58 +0100 41)     public void testAddAttribute() {\n5609ce954c pac4j-core/src/test/java/org/pac4j/core/profile/CommonProfileTests.java (Misagh Moayyed 2023-05-24 07:25:21 +0400 42)         UserProfile userProfile = new CommonProfile();\ndf6f3e2b2e src/test/java/org/scribe/up/test/profile/TestUserProfile.java           (Jerome LELEU   2012-02-15 11:44:14 +0100 43)         assertEquals(0, userProfile.getAttributes().size());\n",
            "commit_hashes": {
                "61b96b1f62": "    some profile improvements",
                "5609ce954c": "    remove constructs in favor of lombok (#2592)",
                "df6f3e2b2e": []
            },
            "Commit&issueIDs": {
                "5609ce954c": [
                    "(#2592)"
                ]
            },
            "links": [
                "https://github.com/pac4j/pac4j/issues/2592",
                "https://github.com/pac4j/pac4j/commit/5609ce954c"
            ]
        },
        {
            "poj_link": "https://github.com/pac4j/pac4j/",
            "file_path": "pac4j/pac4j/pac4j-core/src/test/java/org/pac4j/core/util/serializer/JavaSerializerTests.java",
            "test_name": "testFoundActionSerialization",
            "FQS": "org.pac4j.core.util.serializer.JavaSerializerTests.testFoundActionSerialization()",
            "start_line": "95",
            "blame_result": "f4f4493380 pac4j-core/src/test/java/org/pac4j/core/util/JavaSerializationHelperTests.java   (J\u00e9r\u00f4me LELEU   2020-02-12 09:08:18 +0100 95)     public void testFoundActionSerialization() {\n5609ce954c pac4j-core/src/test/java/org/pac4j/core/util/serializer/JavaSerializerTests.java (Misagh Moayyed 2023-05-24 07:25:21 +0400 96)         WithLocationAction action = new FoundAction(PAC4J_BASE_URL);\n8f2b930bb2 pac4j-core/src/test/java/org/pac4j/core/util/serializer/JavaSerializerTests.java (J\u00e9r\u00f4me LELEU   2022-12-01 19:53:43 +0100 97)         val serialized = helper.serializeToBytes(action);\n",
            "commit_hashes": {
                "f4f4493380": "    serialize FoundAction",
                "5609ce954c": "    remove constructs in favor of lombok (#2592)",
                "8f2b930bb2": "    use val"
            },
            "Commit&issueIDs": {
                "5609ce954c": [
                    "(#2592)"
                ]
            },
            "links": [
                "https://github.com/pac4j/pac4j/issues/2592",
                "https://github.com/pac4j/pac4j/commit/5609ce954c"
            ]
        },
        {
            "poj_link": "https://github.com/GeoLatte/geolatte-geom/",
            "file_path": "GeoLatte/geolatte-geom/json/src/test/java/org/geolatte/geom/json/FeatureDeserializationTest.java",
            "test_name": "testDeSerializeWithNullGeometry",
            "FQS": "org.geolatte.geom.json.FeatureDeserializationTest.testDeSerializeWithNullGeometry()",
            "start_line": "49",
            "blame_result": "777bafdb (Gabriel Landais 2022-01-26 09:05:19 +0100 50)         Feature<?,?> rec = mapper.readValue(featureNullGeometry, Feature.class);\n4be34133 (Karel Maesen    2018-07-13 17:39:46 +0200 51)         Map<String, Object> map = new HashMap<>();\n4be34133 (Karel Maesen    2018-07-13 17:39:46 +0200 52)         map.put(\"a\", 1);\n777bafdb (Gabriel Landais 2022-01-26 09:05:19 +0100 53)         Feature<?, ?> feature = new GeoJsonFeature<>(null, \"1\", map);\n4be34133 (Karel Maesen    2018-07-13 17:39:46 +0200 54)         assertEquals(feature,rec) ;\n",
            "commit_hashes": {
                "777bafdb": "    Fix for #143 : Parsing a GeoJSON feature with null geometry fails",
                "4be34133": "    Adds support for GeoJsonFeature"
            },
            "Commit&issueIDs": {
                "777bafdb": [
                    "#143"
                ]
            },
            "links": [
                "https://github.com/GeoLatte/geolatte-geom/issues/143",
                "https://github.com/GeoLatte/geolatte-geom/commit/777bafdb"
            ]
        },
        {
            "poj_link": "https://github.com/OpenGamma/Strata/",
            "file_path": "OpenGamma/Strata/modules/collect/src/test/java/com/opengamma/strata/collect/DecimalTest.java",
            "test_name": "testComparison",
            "FQS": "com.opengamma.strata.collect.DecimalTest.testComparison()",
            "start_line": "603",
            "blame_result": "1e7910e755 (Anand 2022-10-12 16:29:03 +0100 604)     assertTrue(Decimal.of(1.000009d).isGreaterThan(Decimal.of(1d)));\n1e7910e755 (Anand 2022-10-12 16:29:03 +0100 605)     assertTrue(Decimal.of(1.000009d).isGreaterThanEqualTo(Decimal.of(1d)));\n1e7910e755 (Anand 2022-10-12 16:29:03 +0100 606)     assertTrue(Decimal.of(1d).isGreaterThanEqualTo(Decimal.of(1d)));\n1e7910e755 (Anand 2022-10-12 16:29:03 +0100 607)     assertFalse(Decimal.of(1d).isGreaterThan(Decimal.of(1.000009d)));\n1e7910e755 (Anand 2022-10-12 16:29:03 +0100 608)     assertFalse(Decimal.of(1d).isGreaterThanEqualTo(Decimal.of(1.000009d)));\n",
            "commit_hashes": {
                "1e7910e755": "    adding commonly used convenience methods to Decimal and BigMoney (#2525)"
            },
            "Commit&issueIDs": {
                "1e7910e755": [
                    "(#2525)"
                ]
            },
            "links": [
                "https://github.com/OpenGamma/Strata/issues/2525",
                "https://github.com/OpenGamma/Strata/commit/1e7910e755"
            ]
        },
        {
            "poj_link": "https://github.com/alibaba/Sentinel/",
            "file_path": "alibaba/Sentinel/sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRuleTest.java",
            "test_name": "testRuleEquals",
            "FQS": "com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleTest.testRuleEquals()",
            "start_line": "30",
            "blame_result": "2eecd3ac6 sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeTest.java     (Lin.Liang 2019-06-14 17:42:03 +0800 31)         DegradeRule degradeRule1 = new DegradeRule();\n2eecd3ac6 sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeTest.java     (Lin.Liang 2019-06-14 17:42:03 +0800 32)         DegradeRule degradeRule2 = new DegradeRule();\n07b811196 sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRuleTest.java (Eric Zhao 2020-05-18 23:00:59 +0800 33) \n07b811196 sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRuleTest.java (Eric Zhao 2020-05-18 23:00:59 +0800 34)         int minRequestAmount = 20;\n07b811196 sentinel-core/src/test/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRuleTest.java (Eric Zhao 2020-05-18 23:00:59 +0800 35)         double count = 1.0;\n",
            "commit_hashes": {
                "2eecd3ac6": "    Make the value of RT_MAX_EXCEED_N in DegradeRule configurable (#789)",
                "07b811196": "    Update test cases for circuit breaking"
            },
            "Commit&issueIDs": {
                "2eecd3ac6": [
                    "(#789)"
                ]
            },
            "links": [
                "https://github.com/alibaba/Sentinel/issues/789",
                "https://github.com/alibaba/Sentinel/commit/2eecd3ac6"
            ]
        },
        {
            "poj_link": "https://github.com/alibaba/Sentinel/",
            "file_path": "alibaba/Sentinel/sentinel-core/src/test/java/com/alibaba/csp/sentinel/spi/SpiLoaderTest.java",
            "test_name": "testCreateSpiLoader",
            "FQS": "com.alibaba.csp.sentinel.spi.SpiLoaderTest.testCreateSpiLoader()",
            "start_line": "61",
            "blame_result": "62efb78d4 (cdfive 2021-01-27 09:45:56 +0800 62)         SpiLoader slotLoader1 = SpiLoader.of(ProcessorSlot.class);\n62efb78d4 (cdfive 2021-01-27 09:45:56 +0800 63)         assertNotNull(slotLoader1);\n62efb78d4 (cdfive 2021-01-27 09:45:56 +0800 64) \n62efb78d4 (cdfive 2021-01-27 09:45:56 +0800 65)         SpiLoader slotLoader2 = SpiLoader.of(ProcessorSlot.class);\n62efb78d4 (cdfive 2021-01-27 09:45:56 +0800 66)         assertNotNull(slotLoader2);\n",
            "commit_hashes": {
                "62efb78d4": "    Refactor SpiLoader and enhance SPI mechanism (#1383)"
            },
            "Commit&issueIDs": {
                "62efb78d4": [
                    "(#1383)"
                ]
            },
            "links": [
                "https://github.com/alibaba/Sentinel/issues/1383",
                "https://github.com/alibaba/Sentinel/commit/62efb78d4"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/FaxResponseTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.FaxResponseTest.testXmlAttributesDeserialization()",
            "start_line": "152",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 153)         final FaxResponse elem = new FaxResponse.Builder().build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 154) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 155)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 156)             FaxResponse.Builder.fromXml(\"<Response/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 157)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/MessagingResponseTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.MessagingResponseTest.testXmlAttributesDeserialization()",
            "start_line": "156",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 157)         final MessagingResponse elem = new MessagingResponse.Builder().build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 158) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 159)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 160)             MessagingResponse.Builder.fromXml(\"<Response/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 161)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/MessagingResponseTest.java",
            "test_name": "testXmlChildrenDeserialization",
            "FQS": "com.twilio.twiml.MessagingResponseTest.testXmlChildrenDeserialization()",
            "start_line": "166",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 167)         final MessagingResponse.Builder builder = new MessagingResponse.Builder();\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 168) \n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 169)         builder.message(new Message.Builder(\"body\")\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 170)                     .to(\"to\")\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 171)                     .from(\"from\")\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "6e3fddb257": "    [Librarian] Regenerated @ 9e369cf9a8faca3a4590250f768d8ce69a65d0e8"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/VoiceResponseTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.VoiceResponseTest.testXmlAttributesDeserialization()",
            "start_line": "317",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 318)         final VoiceResponse elem = new VoiceResponse.Builder().build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 319) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 320)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 321)             VoiceResponse.Builder.fromXml(\"<Response/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 322)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/fax/ReceiveTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.fax.ReceiveTest.testXmlAttributesDeserialization()",
            "start_line": "127",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 128)         final Receive elem = new Receive.Builder()\necb04a5853 (Twilio        2019-12-04 22:14:04 +0000 129)             .action(URI.create(\"https://example.com\"))\necb04a5853 (Twilio        2019-12-04 22:14:04 +0000 130)             .method(HttpMethod.GET)\necb04a5853 (Twilio        2019-12-04 22:14:04 +0000 131)             .mediaType(Receive.MediaType.APPLICATION_PDF)\necb04a5853 (Twilio        2019-12-04 22:14:04 +0000 132)             .pageSize(Receive.PageSize.LETTER)\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "ecb04a5853": "    [Librarian] Regenerated @ 693f2468914b6bc7e248e9cf4a515a0f6183779e"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/messaging/BodyTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.messaging.BodyTest.testXmlAttributesDeserialization()",
            "start_line": "29",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 30)         final Body elem = new Body.Builder(\"message\").build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 31) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 32)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33)             Body.Builder.fromXml(\"<Body>message</Body>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/messaging/MediaTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.messaging.MediaTest.testXmlAttributesDeserialization()",
            "start_line": "31",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 32)         final Media elem = new Media.Builder(URI.create(\"https://example.com\")).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 35)             Media.Builder.fromXml(\"<Media>https://example.com</Media>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 36)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/messaging/RedirectTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.messaging.RedirectTest.testXmlAttributesDeserialization()",
            "start_line": "32",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33)         final Redirect elem = new Redirect.Builder(URI.create(\"https://example.com\")).method(HttpMethod.GET).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 35)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 36)             Redirect.Builder.fromXml(\"<Redirect method=\\\"GET\\\">https://example.com</Redirect>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 37)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/AutopilotTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.AutopilotTest.testXmlAttributesDeserialization()",
            "start_line": "29",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 30)         final Autopilot elem = new Autopilot.Builder(\"name\").build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 31) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 32)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33)             Autopilot.Builder.fromXml(\"<Autopilot>name</Autopilot>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/ClientTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.ClientTest.testXmlAttributesDeserialization()",
            "start_line": "168",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 169)         final Client elem = new Client.Builder(\"identity\")\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 170)             .url(URI.create(\"https://example.com\"))\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 171)             .method(HttpMethod.GET)\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 172)             .statusCallbackEvents(Promoter.listOfOne(Client.Event.INITIATED))\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 173)             .statusCallback(URI.create(\"https://example.com\"))\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "6e3fddb257": "    [Librarian] Regenerated @ 9e369cf9a8faca3a4590250f768d8ce69a65d0e8"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/ClientTest.java",
            "test_name": "testXmlChildrenDeserialization",
            "FQS": "com.twilio.twiml.voice.ClientTest.testXmlChildrenDeserialization()",
            "start_line": "184",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 185)         final Client.Builder builder = new Client.Builder();\n1c5c08a94a (Twilio        2018-10-15 09:38:35 -0700 186) \n1c5c08a94a (Twilio        2018-10-15 09:38:35 -0700 187)         builder.identity(new Identity.Builder(\"client_identity\").build());\n1c5c08a94a (Twilio        2018-10-15 09:38:35 -0700 188) \n1c5c08a94a (Twilio        2018-10-15 09:38:35 -0700 189)         builder.parameter(new Parameter.Builder().name(\"name\").value(\"value\").build());\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "1c5c08a94a": "    [Librarian] Regenerated @ 1fcecde51d0f6119db09fc31da74676010cccbc3"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/ConnectTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.ConnectTest.testXmlAttributesDeserialization()",
            "start_line": "199",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 200)         final Connect elem = new Connect.Builder().action(URI.create(\"https://example.com\")).method(HttpMethod.GET).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 201) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 202)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 203)             Connect.Builder.fromXml(\"<Connect action=\\\"https://example.com\\\" method=\\\"GET\\\"/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 204)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/DialTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.DialTest.testXmlAttributesDeserialization()",
            "start_line": "265",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 266)         final Dial elem = new Dial.Builder(\"number\")\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 267)             .action(URI.create(\"https://example.com\"))\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 268)             .method(HttpMethod.GET)\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 269)             .timeout(1)\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 270)             .hangupOnStar(true)\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "6e3fddb257": "    [Librarian] Regenerated @ 9e369cf9a8faca3a4590250f768d8ce69a65d0e8"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/EchoTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.EchoTest.testXmlAttributesDeserialization()",
            "start_line": "107",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 108)         final Echo elem = new Echo.Builder().build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 109) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 110)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 111)             Echo.Builder.fromXml(\"<Echo/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 112)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/EnqueueTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.EnqueueTest.testXmlAttributesDeserialization()",
            "start_line": "164",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 165)         final Enqueue elem = new Enqueue.Builder(\"name\")\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 166)             .action(URI.create(\"https://example.com\"))\ne7cc54d7d5 (Twilio        2022-06-29 11:51:29 -0700 167)             .maxQueueSize(1)\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 168)             .method(HttpMethod.GET)\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 169)             .waitUrl(URI.create(\"https://example.com\"))\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "6e3fddb257": "    [Librarian] Regenerated @ 9e369cf9a8faca3a4590250f768d8ce69a65d0e8",
                "e7cc54d7d5": "    [Librarian] Regenerated @ b1da2810ac9def6e9282b52c1aa794ebefde64e0"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/GatherTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.GatherTest.testXmlAttributesDeserialization()",
            "start_line": "184",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 185)         final Gather elem = new Gather.Builder()\n29cfac5e77 (Evan Fossier  2018-03-12 11:04:52 -0700 186)             .inputs(Promoter.listOfOne(Gather.Input.DTMF))\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 187)             .action(URI.create(\"https://example.com\"))\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 188)             .method(HttpMethod.GET)\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 189)             .timeout(1)\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "29cfac5e77": "    [Librarian] Regenerated @ ffacdca4676a6b497016d64a881c854bbb1af883",
                "6e3fddb257": "    [Librarian] Regenerated @ 9e369cf9a8faca3a4590250f768d8ce69a65d0e8"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/GatherTest.java",
            "test_name": "testXmlChildrenDeserialization",
            "FQS": "com.twilio.twiml.voice.GatherTest.testXmlChildrenDeserialization()",
            "start_line": "213",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 214)         final Gather.Builder builder = new Gather.Builder();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 215) \n399d2af405 (Twilio        2023-07-14 03:27:15 -0700 216)         builder.say(new Say.Builder(\"message\").voice(Say.Voice.MAN).loop(1).language(Say.Language.AF_ZA).build());\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 217) \n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 218)         builder.pause(new Pause.Builder().length(1).build());\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "399d2af405": "    [Librarian] Regenerated @ 5627c63bd23f159fdbe112bf727f87b79c3d4f74",
                "6e3fddb257": "    [Librarian] Regenerated @ 9e369cf9a8faca3a4590250f768d8ce69a65d0e8"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/HangupTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.HangupTest.testXmlAttributesDeserialization()",
            "start_line": "143",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 144)         final Hangup elem = new Hangup.Builder().build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 145) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 146)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 147)             Hangup.Builder.fromXml(\"<Hangup/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 148)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/IdentityTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.IdentityTest.testXmlAttributesDeserialization()",
            "start_line": "29",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 30)         final Identity elem = new Identity.Builder(\"client_identity\").build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 31) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 32)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33)             Identity.Builder.fromXml(\"<Identity>client_identity</Identity>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/LeaveTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.LeaveTest.testXmlAttributesDeserialization()",
            "start_line": "107",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 108)         final Leave elem = new Leave.Builder().build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 109) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 110)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 111)             Leave.Builder.fromXml(\"<Leave/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 112)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/PauseTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.PauseTest.testXmlAttributesDeserialization()",
            "start_line": "118",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 119)         final Pause elem = new Pause.Builder().length(1).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 120) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 121)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 122)             Pause.Builder.fromXml(\"<Pause length=\\\"1\\\"/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 123)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/PayTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.PayTest.testXmlAttributesDeserialization()",
            "start_line": "186",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 187)         final Pay elem = new Pay.Builder()\nd57e33cd6e (Twilio        2018-10-15 14:31:32 -0700 188)             .input(Pay.Input.DTMF)\nd57e33cd6e (Twilio        2018-10-15 14:31:32 -0700 189)             .action(URI.create(\"https://example.com\"))\n31efff5400 (Twilio        2019-08-21 12:49:27 -0700 190)             .bankAccountType(Pay.BankAccountType.CONSUMER_CHECKING)\nd57e33cd6e (Twilio        2018-10-15 14:31:32 -0700 191)             .statusCallback(URI.create(\"https://example.com\"))\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "d57e33cd6e": "    [Librarian] Regenerated @ 9767d8ab92d042fcd26966478065c074cd24fedd",
                "31efff5400": "    [Librarian] Regenerated @ 818fad501069a2989517cc3cb239029a96106949"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/PlayTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.PlayTest.testXmlAttributesDeserialization()",
            "start_line": "31",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 32)         final Play elem = new Play.Builder(URI.create(\"https://example.com\")).loop(1).digits(\"digits\").build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 35)             Play.Builder.fromXml(\"<Play digits=\\\"digits\\\" loop=\\\"1\\\">https://example.com</Play>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 36)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/QueueTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.QueueTest.testXmlAttributesDeserialization()",
            "start_line": "37",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 38)         final Queue elem = new Queue.Builder(\"name\")\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 39)             .url(URI.create(\"https://example.com\"))\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 40)             .method(HttpMethod.GET)\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 41)             .reservationSid(\"reservation_sid\")\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 42)             .postWorkActivitySid(\"post_work_activity_sid\")\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "6e3fddb257": "    [Librarian] Regenerated @ 9e369cf9a8faca3a4590250f768d8ce69a65d0e8"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/RecordTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.RecordTest.testXmlAttributesDeserialization()",
            "start_line": "136",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 137)         final Record elem = new Record.Builder()\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 138)             .action(URI.create(\"https://example.com\"))\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 139)             .method(HttpMethod.GET)\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 140)             .timeout(1)\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 141)             .finishOnKey(\"finish_on_key\")\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "6e3fddb257": "    [Librarian] Regenerated @ 9e369cf9a8faca3a4590250f768d8ce69a65d0e8"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/RedirectTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.RedirectTest.testXmlAttributesDeserialization()",
            "start_line": "32",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33)         final Redirect elem = new Redirect.Builder(URI.create(\"https://example.com\")).method(HttpMethod.GET).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 35)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 36)             Redirect.Builder.fromXml(\"<Redirect method=\\\"GET\\\">https://example.com</Redirect>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 37)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/ReferSipTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.ReferSipTest.testXmlAttributesDeserialization()",
            "start_line": "31",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 32)         final ReferSip elem = new ReferSip.Builder(URI.create(\"https://example.com\")).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 35)             ReferSip.Builder.fromXml(\"<Sip>https://example.com</Sip>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 36)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/ReferTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.ReferTest.testXmlAttributesDeserialization()",
            "start_line": "157",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 158)         final Refer elem = new Refer.Builder().action(URI.create(\"https://example.com\")).method(HttpMethod.GET).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 159) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 160)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 161)             Refer.Builder.fromXml(\"<Refer action=\\\"https://example.com\\\" method=\\\"GET\\\"/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 162)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/RejectTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.RejectTest.testXmlAttributesDeserialization()",
            "start_line": "154",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 155)         final Reject elem = new Reject.Builder().reason(Reject.Reason.REJECTED).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 156) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 157)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 158)             Reject.Builder.fromXml(\"<Reject reason=\\\"rejected\\\"/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 159)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/RoomTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.RoomTest.testXmlAttributesDeserialization()",
            "start_line": "29",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 30)         final Room elem = new Room.Builder(\"name\").participantIdentity(\"participant_identity\").build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 31) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 32)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33)             Room.Builder.fromXml(\"<Room participantIdentity=\\\"participant_identity\\\">name</Room>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SayTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SayTest.testXmlAttributesDeserialization()",
            "start_line": "184",
            "blame_result": "399d2af405 (Twilio        2023-07-14 03:27:15 -0700 185)         final Say elem = new Say.Builder(\"message\").voice(Say.Voice.MAN).loop(1).language(Say.Language.AF_ZA).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 186) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 187)         Assert.assertEquals(\n399d2af405 (Twilio        2023-07-14 03:27:15 -0700 188)             Say.Builder.fromXml(\"<Say language=\\\"af-ZA\\\" loop=\\\"1\\\" voice=\\\"man\\\">message</Say>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 189)             elem.toXml()\n",
            "commit_hashes": {
                "399d2af405": "    [Librarian] Regenerated @ 5627c63bd23f159fdbe112bf727f87b79c3d4f74",
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SimTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SimTest.testXmlAttributesDeserialization()",
            "start_line": "29",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 30)         final Sim elem = new Sim.Builder(\"DEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\").build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 31) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 32)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33)             Sim.Builder.fromXml(\"<Sim>DEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</Sim>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SipTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SipTest.testXmlAttributesDeserialization()",
            "start_line": "49",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 50)         final Sip elem = new Sip.Builder(URI.create(\"https://example.com\"))\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 51)             .username(\"username\")\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 52)             .password(\"password\")\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 53)             .url(URI.create(\"https://example.com\"))\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 54)             .method(HttpMethod.GET)\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "6e3fddb257": "    [Librarian] Regenerated @ 9e369cf9a8faca3a4590250f768d8ce69a65d0e8"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SiprecTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SiprecTest.testXmlAttributesDeserialization()",
            "start_line": "160",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 161)         final Siprec elem = new Siprec.Builder()\n692691f6fa (Twilio        2020-01-23 04:41:50 +0000 162)             .name(\"name\")\n692691f6fa (Twilio        2020-01-23 04:41:50 +0000 163)             .connectorName(\"connector_name\")\n692691f6fa (Twilio        2020-01-23 04:41:50 +0000 164)             .track(Siprec.Track.INBOUND_TRACK)\na2eb53f9e1 (Twilio        2023-07-27 02:33:24 -0700 165)             .statusCallback(\"status_callback\")\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "692691f6fa": "    [Librarian] Regenerated @ d279b32f822f241b774d58939b2c4c04ca4152e9",
                "a2eb53f9e1": "    [Librarian] Regenerated @ 07a9a183b1077d5a881e6cd53ef76b0d75ccc6b0"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SiprecTest.java",
            "test_name": "testXmlChildrenDeserialization",
            "FQS": "com.twilio.twiml.voice.SiprecTest.testXmlChildrenDeserialization()",
            "start_line": "176",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 177)         final Siprec.Builder builder = new Siprec.Builder();\n0ab86628f0 (Twilio        2019-08-05 10:30:38 -0500 178) \n0ab86628f0 (Twilio        2019-08-05 10:30:38 -0500 179)         builder.parameter(new Parameter.Builder().name(\"name\").value(\"value\").build());\n0ab86628f0 (Twilio        2019-08-05 10:30:38 -0500 180) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 181)         final Siprec elem = builder.build();\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "0ab86628f0": "    [Librarian] Regenerated @ df5d9406a2962eb0d0876f669fd29d290f66e69a"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SmsTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SmsTest.testXmlAttributesDeserialization()",
            "start_line": "38",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 39)         final Sms elem = new Sms.Builder(\"message\")\nc7710238e2 (Evan Fossier  2018-01-22 12:50:20 -0800 40)             .to(new com.twilio.type.PhoneNumber(\"+15558675310\"))\nc7710238e2 (Evan Fossier  2018-01-22 12:50:20 -0800 41)             .from(new com.twilio.type.PhoneNumber(\"+15017122661\"))\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 42)             .action(URI.create(\"https://example.com\"))\n6e3fddb257 (Evan Fossier  2017-12-15 16:28:55 -0800 43)             .method(HttpMethod.GET)\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "c7710238e2": "    [Librarian] Regenerated @ a4cb3dcc12627f0ab0fcc6104a6bed708e9375c4",
                "6e3fddb257": "    [Librarian] Regenerated @ 9e369cf9a8faca3a4590250f768d8ce69a65d0e8"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SsmlEmphasisTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SsmlEmphasisTest.testXmlAttributesDeserialization()",
            "start_line": "178",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 179)         final SsmlEmphasis elem = new SsmlEmphasis.Builder(\"words\").level(SsmlEmphasis.Level.STRONG).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 180) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 181)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 182)             SsmlEmphasis.Builder.fromXml(\"<emphasis level=\\\"strong\\\">words</emphasis>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 183)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SsmlLangTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SsmlLangTest.testXmlAttributesDeserialization()",
            "start_line": "184",
            "blame_result": "3a935e6fc0 (Twilio        2022-08-24 13:08:46 -0700 185)         final SsmlLang elem = new SsmlLang.Builder(\"words\").xmlLang(SsmlLang.XmlLang.ARB).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 186) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 187)         Assert.assertEquals(\n3a935e6fc0 (Twilio        2022-08-24 13:08:46 -0700 188)             SsmlLang.Builder.fromXml(\"<lang xml:lang=\\\"arb\\\">words</lang>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 189)             elem.toXml()\n",
            "commit_hashes": {
                "3a935e6fc0": "    [Librarian] Regenerated @ 9419ae9766a1f3421c32308ef0a457ca0c0248fd",
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SsmlPTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SsmlPTest.testXmlAttributesDeserialization()",
            "start_line": "181",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 182)         final SsmlP elem = new SsmlP.Builder(\"words\").build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 183) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 184)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 185)             SsmlP.Builder.fromXml(\"<p>words</p>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 186)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SsmlPhonemeTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SsmlPhonemeTest.testXmlAttributesDeserialization()",
            "start_line": "29",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 30)         final SsmlPhoneme elem = new SsmlPhoneme.Builder(\"words\").alphabet(SsmlPhoneme.Alphabet.IPA).ph(\"ph\").build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 31) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 32)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33)             SsmlPhoneme.Builder.fromXml(\"<phoneme alphabet=\\\"ipa\\\" ph=\\\"ph\\\">words</phoneme>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SsmlProsodyTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SsmlProsodyTest.testXmlAttributesDeserialization()",
            "start_line": "184",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 185)         final SsmlProsody elem = new SsmlProsody.Builder(\"words\").volume(\"volume\").rate(\"rate\").pitch(\"pitch\").build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 186) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 187)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 188)             SsmlProsody.Builder.fromXml(\"<prosody pitch=\\\"pitch\\\" rate=\\\"rate\\\" volume=\\\"volume\\\">words</prosody>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 189)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SsmlSTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SsmlSTest.testXmlAttributesDeserialization()",
            "start_line": "178",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 179)         final SsmlS elem = new SsmlS.Builder(\"words\").build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 180) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 181)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 182)             SsmlS.Builder.fromXml(\"<s>words</s>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 183)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SsmlSayAsTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SsmlSayAsTest.testXmlAttributesDeserialization()",
            "start_line": "32",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33)         final SsmlSayAs elem = new SsmlSayAs.Builder(\"words\")\n739e281c42 (Twilio        2022-12-14 14:09:32 -0800 34)             .interpretAs(SsmlSayAs.InterpretAs.CHARACTERS)\n739e281c42 (Twilio        2022-12-14 14:09:32 -0800 35)             .format(SsmlSayAs.Format.MDY)\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 36)             .build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 37) \n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "739e281c42": "    [Librarian] Regenerated @ 964f1611ab7481d828261f49551385a276499e30"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/SsmlWTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.SsmlWTest.testXmlAttributesDeserialization()",
            "start_line": "172",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 173)         final SsmlW elem = new SsmlW.Builder(\"words\").role(\"role\").build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 174) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 175)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 176)             SsmlW.Builder.fromXml(\"<w role=\\\"role\\\">words</w>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 177)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/StartTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.StartTest.testXmlAttributesDeserialization()",
            "start_line": "173",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 174)         final Start elem = new Start.Builder().action(URI.create(\"https://example.com\")).method(HttpMethod.GET).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 175) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 176)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 177)             Start.Builder.fromXml(\"<Start action=\\\"https://example.com\\\" method=\\\"GET\\\"/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 178)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/StopTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.StopTest.testXmlAttributesDeserialization()",
            "start_line": "159",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 160)         final Stop elem = new Stop.Builder().build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 161) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 162)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 163)             Stop.Builder.fromXml(\"<Stop/>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 164)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/StreamTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.StreamTest.testXmlAttributesDeserialization()",
            "start_line": "161",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 162)         final Stream elem = new Stream.Builder()\n0ab86628f0 (Twilio        2019-08-05 10:30:38 -0500 163)             .name(\"name\")\n0ab86628f0 (Twilio        2019-08-05 10:30:38 -0500 164)             .connectorName(\"connector_name\")\n0ab86628f0 (Twilio        2019-08-05 10:30:38 -0500 165)             .url(\"url\")\n0ab86628f0 (Twilio        2019-08-05 10:30:38 -0500 166)             .track(Stream.Track.INBOUND_TRACK)\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "0ab86628f0": "    [Librarian] Regenerated @ df5d9406a2962eb0d0876f669fd29d290f66e69a"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/StreamTest.java",
            "test_name": "testXmlChildrenDeserialization",
            "FQS": "com.twilio.twiml.voice.StreamTest.testXmlChildrenDeserialization()",
            "start_line": "178",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 179)         final Stream.Builder builder = new Stream.Builder();\n0ab86628f0 (Twilio        2019-08-05 10:30:38 -0500 180) \n0ab86628f0 (Twilio        2019-08-05 10:30:38 -0500 181)         builder.parameter(new Parameter.Builder().name(\"name\").value(\"value\").build());\n0ab86628f0 (Twilio        2019-08-05 10:30:38 -0500 182) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 183)         final Stream elem = builder.build();\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "0ab86628f0": "    [Librarian] Regenerated @ df5d9406a2962eb0d0876f669fd29d290f66e69a"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/TaskTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.TaskTest.testXmlAttributesDeserialization()",
            "start_line": "29",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 30)         final Task elem = new Task.Builder(\"body\").priority(1).timeout(1).build();\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 31) \nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 32)         Assert.assertEquals(\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 33)             Task.Builder.fromXml(\"<Task priority=\\\"1\\\" timeout=\\\"1\\\">body</Task>\").build().toXml(),\nc215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 34)             elem.toXml()\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/twilio/twilio-java/",
            "file_path": "twilio/twilio-java/src/test/java/com/twilio/twiml/voice/VirtualAgentTest.java",
            "test_name": "testXmlAttributesDeserialization",
            "FQS": "com.twilio.twiml.voice.VirtualAgentTest.testXmlAttributesDeserialization()",
            "start_line": "164",
            "blame_result": "c215e0c724 (Borja Canseco 2021-11-30 15:46:59 -0700 165)         final VirtualAgent elem = new VirtualAgent.Builder()\n4cd2939edf (Twilio        2021-03-15 21:37:47 +0000 166)             .connectorName(\"connector_name\")\n4cd2939edf (Twilio        2021-03-15 21:37:47 +0000 167)             .language(\"language\")\n4cd2939edf (Twilio        2021-03-15 21:37:47 +0000 168)             .sentimentAnalysis(true)\n4cd2939edf (Twilio        2021-03-15 21:37:47 +0000 169)             .statusCallback(\"status_callback\")\n",
            "commit_hashes": {
                "c215e0c724": "    feat: add fromXml method on builders (twiml) (#661)",
                "4cd2939edf": "    [Librarian] Regenerated @ ea687051c299d913d47e5ccde2b85955dc738246"
            },
            "Commit&issueIDs": {
                "c215e0c724": [
                    "(#661)"
                ]
            },
            "links": [
                "https://github.com/twilio/twilio-java/issues/661",
                "https://github.com/twilio/twilio-java/commit/c215e0c724"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-tracer/",
            "file_path": "sofastack/sofa-tracer/tracer-core/src/test/java/com/alipay/common/tracer/core/tracertest/SofaTracerTest.java",
            "test_name": "testAsChildOfParent",
            "FQS": "com.alipay.common.tracer.core.tracertest.SofaTracerTest.testAsChildOfParent()",
            "start_line": "265",
            "blame_result": "^80449a6 (\u6768\u51a0\u8d85       2018-05-16 00:23:57 +0800 266)         //create\nca868465 (Khotyn Huang 2021-04-16 08:24:54 +0800 267)         Map<String, String> bizBaggage = new HashMap<>();\n^80449a6 (\u6768\u51a0\u8d85       2018-05-16 00:23:57 +0800 268)         bizBaggage.put(\"biz\", \"value\");\n^80449a6 (\u6768\u51a0\u8d85       2018-05-16 00:23:57 +0800 269)         bizBaggage.put(\"biz1\", \"value1\");\n^80449a6 (\u6768\u51a0\u8d85       2018-05-16 00:23:57 +0800 270)         bizBaggage.put(\"biz2\", \"value2\");\n",
            "commit_hashes": {
                "80449a6": "    GitHub Commit",
                "ca868465": "    Speed up test case by remove sleep code (#427)"
            },
            "Commit&issueIDs": {
                "ca868465": [
                    "(#427)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-tracer/issues/427",
                "https://github.com/sofastack/sofa-tracer/commit/ca868465"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-tracer/",
            "file_path": "sofastack/sofa-tracer/tracer-core/src/test/java/com/alipay/common/tracer/core/utils/StringUtilsTest.java",
            "test_name": "testEscapePercentEqualAnd",
            "FQS": "com.alipay.common.tracer.core.utils.StringUtilsTest.testEscapePercentEqualAnd()",
            "start_line": "186",
            "blame_result": "aedf03dd (evenliu 2024-08-16 15:34:45 +0800 187)         String replaceStr = \"test%test2&test3=\";\naedf03dd (evenliu 2024-08-16 15:34:45 +0800 188)         String replacedStr = StringUtils.escapePercentEqualAnd(replaceStr);\naedf03dd (evenliu 2024-08-16 15:34:45 +0800 189)         Assert.assertEquals(\"test%25test2%26test3%3D\", replacedStr);\naedf03dd (evenliu 2024-08-16 15:34:45 +0800 190)         String replaceRevertStr = StringUtils.unescapeEqualAndPercent(replacedStr);\naedf03dd (evenliu 2024-08-16 15:34:45 +0800 191)         Assert.assertEquals(replaceStr, replaceRevertStr);\n",
            "commit_hashes": {
                "aedf03dd": "    enhance escape and replace method. (#531)"
            },
            "Commit&issueIDs": {
                "aedf03dd": [
                    "531"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-tracer/issues/531",
                "https://github.com/sofastack/sofa-tracer/commit/aedf03dd"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-tracer/",
            "file_path": "sofastack/sofa-tracer/tracer-core/src/test/java/com/alipay/disruptor/SequenceGroupTest.java",
            "test_name": "shouldAddOneSequenceToGroup",
            "FQS": "com.alipay.disruptor.SequenceGroupTest.shouldAddOneSequenceToGroup()",
            "start_line": "40",
            "blame_result": "8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 41)         final Sequence sequence = new Sequence(7L);\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 42)         final SequenceGroup sequenceGroup = new SequenceGroup();\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 43)         sequenceGroup.add(sequence);\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 44)         assertEquals(sequence.get(), sequenceGroup.get());\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 45)     }\n",
            "commit_hashes": {
                "8bceaa02": "    Add test case (#45)"
            },
            "Commit&issueIDs": {
                "8bceaa02": [
                    "(#45)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-tracer/issues/45",
                "https://github.com/sofastack/sofa-tracer/commit/8bceaa02"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-tracer/",
            "file_path": "sofastack/sofa-tracer/tracer-core/src/test/java/com/alipay/disruptor/SequenceGroupTest.java",
            "test_name": "shouldReportTheMinimumSequenceForGroupOfTwo",
            "FQS": "com.alipay.disruptor.SequenceGroupTest.shouldReportTheMinimumSequenceForGroupOfTwo()",
            "start_line": "56",
            "blame_result": "8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 57)         final Sequence sequenceThree = new Sequence(3L);\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 58)         final Sequence sequenceSeven = new Sequence(7L);\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 59)         final SequenceGroup sequenceGroup = new SequenceGroup();\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 60)         sequenceGroup.add(sequenceSeven);\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 61)         sequenceGroup.add(sequenceThree);\n",
            "commit_hashes": {
                "8bceaa02": "    Add test case (#45)"
            },
            "Commit&issueIDs": {
                "8bceaa02": [
                    "(#45)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-tracer/issues/45",
                "https://github.com/sofastack/sofa-tracer/commit/8bceaa02"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-tracer/",
            "file_path": "sofastack/sofa-tracer/tracer-core/src/test/java/com/alipay/disruptor/SequenceGroupTest.java",
            "test_name": "shouldRemoveSequenceFromGroup",
            "FQS": "com.alipay.disruptor.SequenceGroupTest.shouldRemoveSequenceFromGroup()",
            "start_line": "75",
            "blame_result": "8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 76)         final Sequence sequenceThree = new Sequence(3L);\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 77)         final Sequence sequenceSeven = new Sequence(7L);\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 78)         final SequenceGroup sequenceGroup = new SequenceGroup();\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 79)         sequenceGroup.add(sequenceSeven);\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 80)         sequenceGroup.add(sequenceThree);\n",
            "commit_hashes": {
                "8bceaa02": "    Add test case (#45)"
            },
            "Commit&issueIDs": {
                "8bceaa02": [
                    "(#45)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-tracer/issues/45",
                "https://github.com/sofastack/sofa-tracer/commit/8bceaa02"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-tracer/",
            "file_path": "sofastack/sofa-tracer/tracer-core/src/test/java/com/alipay/disruptor/SequenceGroupTest.java",
            "test_name": "shouldRemoveSequenceFromGroupWhereItBeenAddedMultipleTimes",
            "FQS": "com.alipay.disruptor.SequenceGroupTest.shouldRemoveSequenceFromGroupWhereItBeenAddedMultipleTimes()",
            "start_line": "88",
            "blame_result": "8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 89)         final Sequence sequenceThree = new Sequence(3L);\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 90)         final Sequence sequenceSeven = new Sequence(7L);\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 91)         final SequenceGroup sequenceGroup = new SequenceGroup();\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 92)         sequenceGroup.add(sequenceThree);\n8bceaa02 (GuoLei Song 2018-08-03 16:02:49 +0800 93)         sequenceGroup.add(sequenceSeven);\n",
            "commit_hashes": {
                "8bceaa02": "    Add test case (#45)"
            },
            "Commit&issueIDs": {
                "8bceaa02": [
                    "(#45)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-tracer/issues/45",
                "https://github.com/sofastack/sofa-tracer/commit/8bceaa02"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq-mqtt/",
            "file_path": "apache/rocketmq-mqtt/mqtt-cs/src/test/java/org/apache/rocketmq/mqtt/cs/test/session/infly/TestInFlyCache.java",
            "test_name": "test",
            "FQS": "org.apache.rocketmq.mqtt.cs.test.session.infly.TestInFlyCache.test()",
            "start_line": "20",
            "blame_result": "4dedf82c mqtt-cs/src/test/java/org/apache/rocketmq/mqtt/cs/test/TestInFlyCache.java (pingww      2022-03-08 12:04:07 +0800 21) \n6e54f317 mqtt-cs/src/test/java/org/apache/rocketmq/mqtt/cs/test/TestInFlyCache.java (AhaThinking 2022-04-23 22:05:27 +0800 22) import org.apache.commons.lang3.reflect.FieldUtils;\n4dedf82c mqtt-cs/src/test/java/org/apache/rocketmq/mqtt/cs/test/TestInFlyCache.java (pingww      2022-03-08 12:04:07 +0800 23) import org.apache.rocketmq.mqtt.common.model.Message;\n4dedf82c mqtt-cs/src/test/java/org/apache/rocketmq/mqtt/cs/test/TestInFlyCache.java (pingww      2022-03-08 12:04:07 +0800 24) import org.apache.rocketmq.mqtt.common.model.Queue;\n4dedf82c mqtt-cs/src/test/java/org/apache/rocketmq/mqtt/cs/test/TestInFlyCache.java (pingww      2022-03-08 12:04:07 +0800 25) import org.apache.rocketmq.mqtt.common.model.Subscription;\n",
            "commit_hashes": {
                "4dedf82c": "    init",
                "6e54f317": "    continuously improve codeCov for #22"
            },
            "Commit&issueIDs": {
                "6e54f317": [
                    "#22"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq-mqtt/issues/22",
                "https://github.com/apache/rocketmq-mqtt/commit/6e54f317"
            ]
        },
        {
            "poj_link": "https://github.com/apache/shenyu/",
            "file_path": "apache/shenyu/shenyu-common/src/test/java/org/apache/shenyu/common/concurrent/MemoryLimitCalculatorTest.java",
            "test_name": "testDefaultCalculate",
            "FQS": "org.apache.shenyu.common.concurrent.MemoryLimitCalculatorTest.testDefaultCalculate()",
            "start_line": "47",
            "blame_result": "ea475afbda (Zihao Huang 2022-05-05 14:05:57 +0800 48)         assertEquals((long) (MemoryLimitCalculator.maxAvailable() * 0.8), MemoryLimitCalculator.defaultLimit());\nea475afbda (Zihao Huang 2022-05-05 14:05:57 +0800 49)     }\nea475afbda (Zihao Huang 2022-05-05 14:05:57 +0800 50) }\n",
            "commit_hashes": {
                "ea475afbda": "    [ISSUE #3275]test common: add unit test cases  (#3371)"
            },
            "Commit&issueIDs": {
                "ea475afbda": [
                    "(#3371)"
                ]
            },
            "links": [
                "https://github.com/apache/shenyu/issues/3371",
                "https://github.com/apache/shenyu/commit/ea475afbda"
            ]
        },
        {
            "poj_link": "https://github.com/smallrye/smallrye-config/",
            "file_path": "smallrye/smallrye-config/implementation/src/test/java/io/smallrye/config/PropertyNameTest.java",
            "test_name": "mappingNameEquals",
            "FQS": "io.smallrye.config.PropertyNameTest.mappingNameEquals()",
            "start_line": "11",
            "blame_result": "bd40d1abc (Roberto Cortez 2024-04-19 20:00:54 +0100 12)         assertEquals(name(new String(\"foo\")), name(new String(\"foo\")));\nbd40d1abc (Roberto Cortez 2024-04-19 20:00:54 +0100 13)         assertEquals(name(new String(\"foo.bar\")), name(new String(\"foo.bar\")));\nbd40d1abc (Roberto Cortez 2024-04-19 20:00:54 +0100 14)         assertEquals(name(\"foo.*\"), name(\"foo.bar\"));\nbd40d1abc (Roberto Cortez 2024-04-19 20:00:54 +0100 15)         assertEquals(name(new String(\"foo.*\")), name(new String(\"foo.*\")));\nbd40d1abc (Roberto Cortez 2024-04-19 20:00:54 +0100 16)         assertEquals(name(\"*\"), name(\"foo\"));\n",
            "commit_hashes": {
                "bd40d1abc": "    PropertyName do not match star with empty (#1147)"
            },
            "Commit&issueIDs": {
                "bd40d1abc": [
                    "1147"
                ]
            },
            "links": [
                "https://github.com/smallrye/smallrye-config/issues/1147",
                "https://github.com/smallrye/smallrye-config/commit/bd40d1abc"
            ]
        },
        {
            "poj_link": "https://github.com/ProgrammerAnthony/RocketMQC/",
            "file_path": "ProgrammerAnthony/RocketMQC/common/src/test/java/org/apache/rocketmq/common/protocol/topic/OffsetMovedEventTest.java",
            "test_name": "testFromBytes",
            "FQS": "org.apache.rocketmq.common.protocol.topic.OffsetMovedEventTest.testFromBytes()",
            "start_line": "39",
            "blame_result": "142b3c835 (zhanghongchao 2019-05-14 16:13:04 +0800 40)     OffsetMovedEvent event = mockOffsetMovedEvent();\n142b3c835 (zhanghongchao 2019-05-14 16:13:04 +0800 41) \n142b3c835 (zhanghongchao 2019-05-14 16:13:04 +0800 42)     byte[] encodeData = event.encode();\n142b3c835 (zhanghongchao 2019-05-14 16:13:04 +0800 43)     OffsetMovedEvent decodeData = RemotingSerializable.decode(encodeData, OffsetMovedEvent.class);\n142b3c835 (zhanghongchao 2019-05-14 16:13:04 +0800 44) \n",
            "commit_hashes": {
                "142b3c835": "    [RIP-10]Add test cases for OffsetMovedEvent (#895)"
            },
            "Commit&issueIDs": {
                "142b3c835": [
                    "(#895)"
                ]
            },
            "links": [
                "https://github.com/ProgrammerAnthony/RocketMQC/issues/895",
                "https://github.com/ProgrammerAnthony/RocketMQC/commit/142b3c835"
            ]
        },
        {
            "poj_link": "https://github.com/apache/shenyu/",
            "file_path": "apache/shenyu/shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/spi/P2cLoadBalancerTest.java",
            "test_name": "testResponseTimeBalancerSameLag",
            "FQS": "org.apache.shenyu.loadbalancer.spi.P2cLoadBalancerTest.testResponseTimeBalancerSameLag()",
            "start_line": "47",
            "blame_result": "1363524ad4 (SeaChess 2023-03-09 18:03:22 +0800 48)         buildUpstreamList();\n1363524ad4 (SeaChess 2023-03-09 18:03:22 +0800 49)         final P2cLoadBalancer p2cLoadBalancer = new P2cLoadBalancer();\n1363524ad4 (SeaChess 2023-03-09 18:03:22 +0800 50)         Upstream upstream = p2cLoadBalancer.doSelect(upstreamList, \"localhost\");\n1363524ad4 (SeaChess 2023-03-09 18:03:22 +0800 51)         Upstream upstream1 = p2cLoadBalancer.doSelect(upstreamList, \"localhost\");\n1363524ad4 (SeaChess 2023-03-09 18:03:22 +0800 52)         Assertions.assertTrue((upstream.getUrl().equals(\"baidu.com\") && upstream1.getUrl().equals(\"pro.jd.com\"))\n",
            "commit_hashes": {
                "1363524ad4": "    add p2cLoadBalancer (#4451)"
            },
            "Commit&issueIDs": {
                "1363524ad4": [
                    "(#4451)"
                ]
            },
            "links": [
                "https://github.com/apache/shenyu/issues/4451",
                "https://github.com/apache/shenyu/commit/1363524ad4"
            ]
        },
        {
            "poj_link": "https://github.com/apache/shenyu/",
            "file_path": "apache/shenyu/shenyu-loadbalancer/src/test/java/org/apache/shenyu/loadbalancer/spi/P2cLoadBalancerTest.java",
            "test_name": "testResponseTimeBalancerSameInflight",
            "FQS": "org.apache.shenyu.loadbalancer.spi.P2cLoadBalancerTest.testResponseTimeBalancerSameInflight()",
            "start_line": "57",
            "blame_result": "1363524ad4 (SeaChess 2023-03-09 18:03:22 +0800 58)         buildUpstreamList();\n1363524ad4 (SeaChess 2023-03-09 18:03:22 +0800 59)         final P2cLoadBalancer p2cLoadBalancer = new P2cLoadBalancer();\n1363524ad4 (SeaChess 2023-03-09 18:03:22 +0800 60)         upstreamList.get(0).setLag(1);\n1363524ad4 (SeaChess 2023-03-09 18:03:22 +0800 61)         Upstream upstream = p2cLoadBalancer.doSelect(upstreamList, \"localhost\");\n1363524ad4 (SeaChess 2023-03-09 18:03:22 +0800 62)         Upstream upstream1 = p2cLoadBalancer.doSelect(upstreamList, \"localhost\");\n",
            "commit_hashes": {
                "1363524ad4": "    add p2cLoadBalancer (#4451)"
            },
            "Commit&issueIDs": {
                "1363524ad4": [
                    "(#4451)"
                ]
            },
            "links": [
                "https://github.com/apache/shenyu/issues/4451",
                "https://github.com/apache/shenyu/commit/1363524ad4"
            ]
        },
        {
            "poj_link": "https://github.com/SourceLabOrg/kafka-webview/",
            "file_path": "SourceLabOrg/kafka-webview/kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/encryption/SecretManagerTest.java",
            "test_name": "doTest",
            "FQS": "org.sourcelab.kafka.webview.ui.manager.encryption.SecretManagerTest.doTest()",
            "start_line": "46",
            "blame_result": "dc56a20e kafka-webview/src/test/java/com/darksci/kafkaview/manager/encryption/SecretManagerTest.java (Steviep 2017-10-18 23:08:48 +0900 47)         final SecretManager secretManager = new SecretManager(\"key\");\ndc56a20e kafka-webview/src/test/java/com/darksci/kafkaview/manager/encryption/SecretManagerTest.java (Steviep 2017-10-18 23:08:48 +0900 48) \ndc56a20e kafka-webview/src/test/java/com/darksci/kafkaview/manager/encryption/SecretManagerTest.java (Steviep 2017-10-18 23:08:48 +0900 49)         final String input = \"My Test Input String\";\ndc56a20e kafka-webview/src/test/java/com/darksci/kafkaview/manager/encryption/SecretManagerTest.java (Steviep 2017-10-18 23:08:48 +0900 50)         final String encrypted = secretManager.encrypt(input);\ndc56a20e kafka-webview/src/test/java/com/darksci/kafkaview/manager/encryption/SecretManagerTest.java (Steviep 2017-10-18 23:08:48 +0900 51)         final String output = secretManager.decrypt(encrypted);\n",
            "commit_hashes": {
                "dc56a20e": "    Sp/cleanup (#13)"
            },
            "Commit&issueIDs": {
                "dc56a20e": [
                    "(#13)"
                ]
            },
            "links": [
                "https://github.com/SourceLabOrg/kafka-webview/issues/13",
                "https://github.com/SourceLabOrg/kafka-webview/commit/dc56a20e"
            ]
        },
        {
            "poj_link": "https://github.com/sweble/sweble-wikitext/",
            "file_path": "sweble/sweble-wikitext/sweble-wikitext-components-parent/swc-engine/src/test/java/org/sweble/wikitext/engine/PageTitleTest.java",
            "test_name": "testName",
            "FQS": "org.sweble.wikitext.engine.PageTitleTest.testName()",
            "start_line": "29",
            "blame_result": "d55405b4d (Hannes Dohrn 2017-02-03 14:56:53 +0100 30) \t{\nd55405b4d (Hannes Dohrn 2017-02-03 14:56:53 +0100 31) \t\tWikiConfigImpl config = DefaultConfigEnWp.generate();\n4c83de30b (Hannes Dohrn 2017-02-03 15:12:12 +0100 32) \n4c83de30b (Hannes Dohrn 2017-02-03 15:12:12 +0100 33) \t\t// Must not fail with illegal entity error\n4c83de30b (Hannes Dohrn 2017-02-03 15:12:12 +0100 34) \t\tPageTitle title = PageTitle.make(\n",
            "commit_hashes": {
                "d55405b4d": "    Fixes #45 The title `Template:Did you know nominations/Steve Taylor & The Perfect Foil; Wow to the Deadness' contains invalid entities: &_The_Perfect_Foil;",
                "4c83de30b": "    Further improved fix for issue #45 and improved unit test"
            },
            "Commit&issueIDs": {
                "d55405b4d": [
                    "#45"
                ],
                "4c83de30b": [
                    "#45"
                ]
            },
            "links": [
                "https://github.com/sweble/sweble-wikitext/issues/45",
                "https://github.com/sweble/sweble-wikitext/commit/d55405b4d",
                "https://github.com/sweble/sweble-wikitext/issues/45",
                "https://github.com/sweble/sweble-wikitext/commit/4c83de30b"
            ]
        },
        {
            "poj_link": "https://github.com/ctran/TinyRadius/",
            "file_path": "ctran/TinyRadius/src/test/java/org/tinyradius/attribute/IntegerAttributeTest.java",
            "test_name": "test",
            "FQS": "org.tinyradius.attribute.IntegerAttributeTest.test()",
            "start_line": "10",
            "blame_result": "be7306bf (Ivan F. Martinez 2017-11-08 16:41:05 -0200 11) \t\tfinal IntegerAttribute intAttr = new IntegerAttribute(27, 0);\nbe7306bf (Ivan F. Martinez 2017-11-08 16:41:05 -0200 12) \t\tfinal long bigValue = 0xffffffffl; // big value with highest bit set\nbe7306bf (Ivan F. Martinez 2017-11-08 16:41:05 -0200 13) \t\tSystem.err.println((int)bigValue);\nbe7306bf (Ivan F. Martinez 2017-11-08 16:41:05 -0200 14) \t\tSystem.err.println(bigValue);\nbe7306bf (Ivan F. Martinez 2017-11-08 16:41:05 -0200 15) \t\tfinal String bigValueSt = Long.toString(bigValue);\n",
            "commit_hashes": {
                "be7306bf": "    Use unsigned values when converting to/from string in IntegerAttribute (#13)"
            },
            "Commit&issueIDs": {
                "be7306bf": [
                    "13"
                ]
            },
            "links": [
                "https://github.com/ctran/TinyRadius/issues/13",
                "https://github.com/ctran/TinyRadius/commit/be7306bf"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/codec/codec-msgpack/src/test/java/com/alipay/sofa/rpc/codec/msgpack/MsgPackSerializerTest.java",
            "test_name": "testSofaRequest",
            "FQS": "com.alipay.sofa.rpc.codec.msgpack.MsgPackSerializerTest.testSofaRequest()",
            "start_line": "100",
            "blame_result": "f543cac92 extension-impl/codec-msgpack/src/test/java/com/alipay/sofa/rpc/codec/msgpack/MsgPackSerializerTest.java (leyou240 2019-11-18 17:59:20 +0800 101)         SofaRequest request = buildRequest();\nf543cac92 extension-impl/codec-msgpack/src/test/java/com/alipay/sofa/rpc/codec/msgpack/MsgPackSerializerTest.java (leyou240 2019-11-18 17:59:20 +0800 102)         AbstractByteBuf data = serializer.encode(request, null);\nf543cac92 extension-impl/codec-msgpack/src/test/java/com/alipay/sofa/rpc/codec/msgpack/MsgPackSerializerTest.java (leyou240 2019-11-18 17:59:20 +0800 103)         boolean error = false;\nf543cac92 extension-impl/codec-msgpack/src/test/java/com/alipay/sofa/rpc/codec/msgpack/MsgPackSerializerTest.java (leyou240 2019-11-18 17:59:20 +0800 104)         try {\nf543cac92 extension-impl/codec-msgpack/src/test/java/com/alipay/sofa/rpc/codec/msgpack/MsgPackSerializerTest.java (leyou240 2019-11-18 17:59:20 +0800 105)             serializer.decode(data, SofaRequest.class, null);\n",
            "commit_hashes": {
                "f543cac92": "    support msgpack serialization. (#788)"
            },
            "Commit&issueIDs": {
                "f543cac92": [
                    "(#788)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/788",
                "https://github.com/sofastack/sofa-rpc/commit/f543cac92"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/codec/codec-protobuf/src/test/java/com/alipay/sofa/rpc/codec/protobuf/ProtobufSerializerTest.java",
            "test_name": "testSofaRequest",
            "FQS": "com.alipay.sofa.rpc.codec.protobuf.ProtobufSerializerTest.testSofaRequest()",
            "start_line": "87",
            "blame_result": "19cf47e09 extension-impl/codec-protobuf/src/test/java/com/alipay/sofa/rpc/codec/protobuf/ProtobufSerializerTest.java (Geng Zhang 2018-05-14 01:50:27 +0800 88)         SofaRequest request = buildRequest();\n19cf47e09 extension-impl/codec-protobuf/src/test/java/com/alipay/sofa/rpc/codec/protobuf/ProtobufSerializerTest.java (Geng Zhang 2018-05-14 01:50:27 +0800 89)         AbstractByteBuf data = serializer.encode(request, null);\n19cf47e09 extension-impl/codec-protobuf/src/test/java/com/alipay/sofa/rpc/codec/protobuf/ProtobufSerializerTest.java (Geng Zhang 2018-05-14 01:50:27 +0800 90)         boolean error = false;\n19cf47e09 extension-impl/codec-protobuf/src/test/java/com/alipay/sofa/rpc/codec/protobuf/ProtobufSerializerTest.java (Geng Zhang 2018-05-14 01:50:27 +0800 91)         try {\n19cf47e09 extension-impl/codec-protobuf/src/test/java/com/alipay/sofa/rpc/codec/protobuf/ProtobufSerializerTest.java (Geng Zhang 2018-05-14 01:50:27 +0800 92)             serializer.decode(data, SofaRequest.class, null);\n",
            "commit_hashes": {
                "19cf47e09": "    Refactor the serializer of hessian and protobuf. (#116)"
            },
            "Commit&issueIDs": {
                "19cf47e09": [
                    "(#116)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/116",
                "https://github.com/sofastack/sofa-rpc/commit/19cf47e09"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/core/api/src/test/java/com/alipay/sofa/rpc/client/ProviderHelperTest.java",
            "test_name": "toUrl",
            "FQS": "com.alipay.sofa.rpc.client.ProviderHelperTest.toUrl()",
            "start_line": "214",
            "blame_result": "b6ba2407f core/api/src/test/java/com/alipay/sofa/rpc/client/ProviderHelperTest.java (Geng Zhang 2018-05-05 01:37:34 +0800 215)         {\nb6ba2407f core/api/src/test/java/com/alipay/sofa/rpc/client/ProviderHelperTest.java (Geng Zhang 2018-05-05 01:37:34 +0800 216)             String src = \"10.15.233.114:12200\";\nb6ba2407f core/api/src/test/java/com/alipay/sofa/rpc/client/ProviderHelperTest.java (Geng Zhang 2018-05-05 01:37:34 +0800 217)             ProviderInfo providerInfo = ProviderHelper.toProviderInfo(src);\nc9242bb1f core/api/src/test/java/com/alipay/sofa/rpc/client/ProviderInfoTest.java   (Geng Zhang 2018-04-11 11:35:28 +0800 218)             Assert.assertEquals(providerInfo.getHost(), \"10.15.233.114\");\nc9242bb1f core/api/src/test/java/com/alipay/sofa/rpc/client/ProviderInfoTest.java   (Geng Zhang 2018-04-11 11:35:28 +0800 219)             Assert.assertEquals(providerInfo.getPort(), 12200);\n",
            "commit_hashes": {
                "b6ba2407f": "    Make the responsibilities of ProviderInfo more clearer. (#88)",
                "c9242bb1f": "    Code base on v5.3.0."
            },
            "Commit&issueIDs": {
                "b6ba2407f": [
                    "(#88)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/88",
                "https://github.com/sofastack/sofa-rpc/commit/b6ba2407f"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/core/api/src/test/java/com/alipay/sofa/rpc/config/RegistryConfigTest.java",
            "test_name": "testAll",
            "FQS": "com.alipay.sofa.rpc.config.RegistryConfigTest.testAll()",
            "start_line": "30",
            "blame_result": "3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 31)         RegistryConfig config = new RegistryConfig();\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 32)         config.setProtocol(\"xx\")\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 33)             .setAddress(\"127.0.0.1\")\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 34)             .setFile(\"file\")\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 35)             .setRegister(true)\n",
            "commit_hashes": {
                "3e63253d5": "    Code cleanup and add more test cases. (#177)"
            },
            "Commit&issueIDs": {
                "3e63253d5": [
                    "(#177)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/177",
                "https://github.com/sofastack/sofa-rpc/commit/3e63253d5"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/core/api/src/test/java/com/alipay/sofa/rpc/config/RegistryConfigTest.java",
            "test_name": "testEquals",
            "FQS": "com.alipay.sofa.rpc.config.RegistryConfigTest.testEquals()",
            "start_line": "71",
            "blame_result": "3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 72)         RegistryConfig config1 = new RegistryConfig();\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 73)         Assert.assertTrue(config1.equals(config1));\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 74)         Assert.assertFalse(config1.equals(null));\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 75)         Assert.assertFalse(config1.equals(\"\"));\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 76) \n",
            "commit_hashes": {
                "3e63253d5": "    Code cleanup and add more test cases. (#177)"
            },
            "Commit&issueIDs": {
                "3e63253d5": [
                    "(#177)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/177",
                "https://github.com/sofastack/sofa-rpc/commit/3e63253d5"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/core/api/src/test/java/com/alipay/sofa/rpc/config/RegistryConfigTest.java",
            "test_name": "testHashCode",
            "FQS": "com.alipay.sofa.rpc.config.RegistryConfigTest.testHashCode()",
            "start_line": "167",
            "blame_result": "3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 168)         RegistryConfig config1 = new RegistryConfig();\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 169)         RegistryConfig config2 = new RegistryConfig();\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 170)         config1.setAddress(\"127.0.0.1:1234\").setProtocol(\"xxx\");\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 171)         config2.setAddress(\"127.0.0.1:1234\").setProtocol(\"yyy\");\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 172)         Assert.assertFalse(config1.hashCode() == config2.hashCode());\n",
            "commit_hashes": {
                "3e63253d5": "    Code cleanup and add more test cases. (#177)"
            },
            "Commit&issueIDs": {
                "3e63253d5": [
                    "(#177)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/177",
                "https://github.com/sofastack/sofa-rpc/commit/3e63253d5"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/core/api/src/test/java/com/alipay/sofa/rpc/config/ServerConfigTest.java",
            "test_name": "testEquals",
            "FQS": "com.alipay.sofa.rpc.config.ServerConfigTest.testEquals()",
            "start_line": "109",
            "blame_result": "3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 110)         ServerConfig config1 = new ServerConfig();\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 111)         Assert.assertTrue(config1.equals(config1));\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 112)         Assert.assertFalse(config1.equals(null));\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 113)         Assert.assertFalse(config1.equals(\"\"));\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 114) \n",
            "commit_hashes": {
                "3e63253d5": "    Code cleanup and add more test cases. (#177)"
            },
            "Commit&issueIDs": {
                "3e63253d5": [
                    "(#177)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/177",
                "https://github.com/sofastack/sofa-rpc/commit/3e63253d5"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/core/api/src/test/java/com/alipay/sofa/rpc/config/ServerConfigTest.java",
            "test_name": "testHashCode",
            "FQS": "com.alipay.sofa.rpc.config.ServerConfigTest.testHashCode()",
            "start_line": "141",
            "blame_result": "3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 142)         ServerConfig config1 = new ServerConfig();\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 143)         ServerConfig config2 = new ServerConfig();\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 144)         config1.setHost(\"127.0.0.1\").setPort(1234).setProtocol(\"xxx\");\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 145)         config2.setHost(\"127.0.0.1\").setPort(1235).setProtocol(\"xxx\");\n3e63253d5 (Geng Zhang 2018-06-15 11:47:30 +0800 146)         Assert.assertFalse(config1.hashCode() == config2.hashCode());\n",
            "commit_hashes": {
                "3e63253d5": "    Code cleanup and add more test cases. (#177)"
            },
            "Commit&issueIDs": {
                "3e63253d5": [
                    "(#177)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/177",
                "https://github.com/sofastack/sofa-rpc/commit/3e63253d5"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/core/common/src/test/java/com/alipay/sofa/rpc/common/utils/CodecUtilsTest.java",
            "test_name": "byte2Booleans",
            "FQS": "com.alipay.sofa.rpc.common.utils.CodecUtilsTest.byte2Booleans()",
            "start_line": "143",
            "blame_result": "83c476eac (Geng Zhang 2018-09-18 13:15:24 +0800 144)         Assert.assertEquals(0, CodecUtils.booleansToByte(null));\n83c476eac (Geng Zhang 2018-09-18 13:15:24 +0800 145)         Assert.assertEquals(0, CodecUtils.booleansToByte(new boolean[0]));\n83c476eac (Geng Zhang 2018-09-18 13:15:24 +0800 146) \n83c476eac (Geng Zhang 2018-09-18 13:15:24 +0800 147)         // 01010101\n83c476eac (Geng Zhang 2018-09-18 13:15:24 +0800 148)         boolean[] bs = new boolean[] { false, true, false, true, false, true, false, true };\n",
            "commit_hashes": {
                "83c476eac": "    Code clean up. (#313)"
            },
            "Commit&issueIDs": {
                "83c476eac": [
                    "(#313)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/313",
                "https://github.com/sofastack/sofa-rpc/commit/83c476eac"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/fault/fault-tolerance/src/test/java/com/alipay/sofa/rpc/client/aft/InvocationStatDimensionStatTest.java",
            "test_name": "testInvocationStatFactory",
            "FQS": "com.alipay.sofa.rpc.client.aft.InvocationStatDimensionStatTest.testInvocationStatFactory()",
            "start_line": "55",
            "blame_result": "b6ba2407f extension-impl/fault-tolerance/src/test/java/com/alipay/sofa/rpc/client/aft/InvocationStatDimensionStatTest.java (Geng Zhang 2018-05-05 01:37:34 +0800 56)         InvocationStatDimension invocation = new InvocationStatDimension(ProviderHelper.toProviderInfo(\"ip\"),\nb6ba2407f extension-impl/fault-tolerance/src/test/java/com/alipay/sofa/rpc/client/aft/InvocationStatDimensionStatTest.java (Geng Zhang 2018-05-05 01:37:34 +0800 57)             consumerConfig);\nc9242bb1f extension-impl/fault-tolerance/src/test/java/com/alipay/sofa/rpc/client/aft/InvocationStatDimensionStatTest.java (Geng Zhang 2018-04-11 11:35:28 +0800 58)         InvocationStat InvocationStat1Result = InvocationStatFactory.getInvocationStat(invocation);\nc9242bb1f extension-impl/fault-tolerance/src/test/java/com/alipay/sofa/rpc/client/aft/InvocationStatDimensionStatTest.java (Geng Zhang 2018-04-11 11:35:28 +0800 59)         InvocationStat InvocationStat2Result = InvocationStatFactory.getInvocationStat(invocation);\nc9242bb1f extension-impl/fault-tolerance/src/test/java/com/alipay/sofa/rpc/client/aft/InvocationStatDimensionStatTest.java (Geng Zhang 2018-04-11 11:35:28 +0800 60) \n",
            "commit_hashes": {
                "b6ba2407f": "    Make the responsibilities of ProviderInfo more clearer. (#88)",
                "c9242bb1f": "    Code base on v5.3.0."
            },
            "Commit&issueIDs": {
                "b6ba2407f": [
                    "(#88)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/88",
                "https://github.com/sofastack/sofa-rpc/commit/b6ba2407f"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/registry/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java",
            "test_name": "testModify",
            "FQS": "com.alipay.sofa.rpc.registry.local.LocalRegistryHelperTest.testModify()",
            "start_line": "37",
            "blame_result": "0f6f528b3 extension-impl/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java (Lei Zhiyuan 2018-11-08 08:20:18 +0800 38) \n0f6f528b3 extension-impl/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java (Lei Zhiyuan 2018-11-08 08:20:18 +0800 39)         final File file = new File(filePath);\n0f6f528b3 extension-impl/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java (Lei Zhiyuan 2018-11-08 08:20:18 +0800 40)         FileUtils.cleanDirectory(file);\n0f6f528b3 extension-impl/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java (Lei Zhiyuan 2018-11-08 08:20:18 +0800 41) \n0f6f528b3 extension-impl/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java (Lei Zhiyuan 2018-11-08 08:20:18 +0800 42)         try {\n",
            "commit_hashes": {
                "0f6f528b3": "    Fix data rigorous. (#356)"
            },
            "Commit&issueIDs": {
                "0f6f528b3": [
                    "(#356)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/356",
                "https://github.com/sofastack/sofa-rpc/commit/0f6f528b3"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/registry/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java",
            "test_name": "testNotModify",
            "FQS": "com.alipay.sofa.rpc.registry.local.LocalRegistryHelperTest.testNotModify()",
            "start_line": "64",
            "blame_result": "0f6f528b3 extension-impl/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java (Lei Zhiyuan 2018-11-08 08:20:18 +0800 65) \n0f6f528b3 extension-impl/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java (Lei Zhiyuan 2018-11-08 08:20:18 +0800 66)         final File file = new File(filePath);\n0f6f528b3 extension-impl/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java (Lei Zhiyuan 2018-11-08 08:20:18 +0800 67)         FileUtils.cleanDirectory(file);\n0f6f528b3 extension-impl/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java (Lei Zhiyuan 2018-11-08 08:20:18 +0800 68) \n0f6f528b3 extension-impl/registry-local/src/test/java/com/alipay/sofa/rpc/registry/local/LocalRegistryHelperTest.java (Lei Zhiyuan 2018-11-08 08:20:18 +0800 69)         try {\n",
            "commit_hashes": {
                "0f6f528b3": "    Fix data rigorous. (#356)"
            },
            "Commit&issueIDs": {
                "0f6f528b3": [
                    "(#356)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/356",
                "https://github.com/sofastack/sofa-rpc/commit/0f6f528b3"
            ]
        },
        {
            "poj_link": "https://github.com/dflib/dflib/",
            "file_path": "dflib/dflib/dflib-jdbc/src/test/java/org/dflib/jdbc/connector/metadata/TableFQNameTest.java",
            "test_name": "equals_CatalogSchemaName",
            "FQS": "org.dflib.jdbc.connector.metadata.TableFQNameTest.equals_CatalogSchemaName()",
            "start_line": "11",
            "blame_result": "9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 12) \n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 13)         TableFQName n1 = TableFQName.forCatalogSchemaAndName(\"c1\", \"s1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 14)         TableFQName n2 = TableFQName.forCatalogSchemaAndName(\"c1\", \"s1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 15)         TableFQName n3 = TableFQName.forCatalogSchemaAndName(\"c2\", \"s1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 16)         TableFQName n4 = TableFQName.forCatalogSchemaAndName(\"c1\", \"s2\", \"t1\");\n",
            "commit_hashes": {
                "9b21c73dc": "     TableSaver: apply quotes to schema/catalog/table name separately #69"
            },
            "Commit&issueIDs": {
                "9b21c73dc": [
                    "#69"
                ]
            },
            "links": [
                "https://github.com/dflib/dflib/issues/69",
                "https://github.com/dflib/dflib/commit/9b21c73dc"
            ]
        },
        {
            "poj_link": "https://github.com/dflib/dflib/",
            "file_path": "dflib/dflib/dflib-jdbc/src/test/java/org/dflib/jdbc/connector/metadata/TableFQNameTest.java",
            "test_name": "equals_CatalogName",
            "FQS": "org.dflib.jdbc.connector.metadata.TableFQNameTest.equals_CatalogName()",
            "start_line": "27",
            "blame_result": "9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 28) \n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 29)         TableFQName n1 = TableFQName.forCatalogAndName(\"c1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 30)         TableFQName n2 = TableFQName.forCatalogAndName(\"c1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 31)         TableFQName n3 = TableFQName.forCatalogAndName(\"c2\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 32)         TableFQName n4 = TableFQName.forCatalogAndName(\"c1\", \"t2\");\n",
            "commit_hashes": {
                "9b21c73dc": "     TableSaver: apply quotes to schema/catalog/table name separately #69"
            },
            "Commit&issueIDs": {
                "9b21c73dc": [
                    "#69"
                ]
            },
            "links": [
                "https://github.com/dflib/dflib/issues/69",
                "https://github.com/dflib/dflib/commit/9b21c73dc"
            ]
        },
        {
            "poj_link": "https://github.com/dflib/dflib/",
            "file_path": "dflib/dflib/dflib-jdbc/src/test/java/org/dflib/jdbc/connector/metadata/TableFQNameTest.java",
            "test_name": "equals_SchemaName",
            "FQS": "org.dflib.jdbc.connector.metadata.TableFQNameTest.equals_SchemaName()",
            "start_line": "41",
            "blame_result": "9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 42) \n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 43)         TableFQName n1 = TableFQName.forSchemaAndName(\"s1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 44)         TableFQName n2 = TableFQName.forSchemaAndName(\"s1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 45)         TableFQName n3 = TableFQName.forSchemaAndName(\"s2\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 46)         TableFQName n4 = TableFQName.forSchemaAndName(\"s1\", \"t2\");\n",
            "commit_hashes": {
                "9b21c73dc": "     TableSaver: apply quotes to schema/catalog/table name separately #69"
            },
            "Commit&issueIDs": {
                "9b21c73dc": [
                    "#69"
                ]
            },
            "links": [
                "https://github.com/dflib/dflib/issues/69",
                "https://github.com/dflib/dflib/commit/9b21c73dc"
            ]
        },
        {
            "poj_link": "https://github.com/dflib/dflib/",
            "file_path": "dflib/dflib/dflib-jdbc/src/test/java/org/dflib/jdbc/connector/metadata/TableFQNameTest.java",
            "test_name": "equals_Name",
            "FQS": "org.dflib.jdbc.connector.metadata.TableFQNameTest.equals_Name()",
            "start_line": "55",
            "blame_result": "9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 56) \n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 57)         TableFQName n1 = TableFQName.forName(\"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 58)         TableFQName n2 = TableFQName.forName(\"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 59)         TableFQName n3 = TableFQName.forName(\"t2\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 60) \n",
            "commit_hashes": {
                "9b21c73dc": "     TableSaver: apply quotes to schema/catalog/table name separately #69"
            },
            "Commit&issueIDs": {
                "9b21c73dc": [
                    "#69"
                ]
            },
            "links": [
                "https://github.com/dflib/dflib/issues/69",
                "https://github.com/dflib/dflib/commit/9b21c73dc"
            ]
        },
        {
            "poj_link": "https://github.com/dflib/dflib/",
            "file_path": "dflib/dflib/dflib-jdbc/src/test/java/org/dflib/jdbc/connector/metadata/TableFQNameTest.java",
            "test_name": "hashCode_CatalogSchemaName",
            "FQS": "org.dflib.jdbc.connector.metadata.TableFQNameTest.hashCode_CatalogSchemaName()",
            "start_line": "67",
            "blame_result": "9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 68) \n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 69)         TableFQName n1 = TableFQName.forCatalogSchemaAndName(\"c1\", \"s1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 70)         TableFQName n2 = TableFQName.forCatalogSchemaAndName(\"c1\", \"s1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 71)         TableFQName n3 = TableFQName.forCatalogSchemaAndName(\"c2\", \"s1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 72)         TableFQName n4 = TableFQName.forCatalogSchemaAndName(\"c1\", \"s2\", \"t1\");\n",
            "commit_hashes": {
                "9b21c73dc": "     TableSaver: apply quotes to schema/catalog/table name separately #69"
            },
            "Commit&issueIDs": {
                "9b21c73dc": [
                    "#69"
                ]
            },
            "links": [
                "https://github.com/dflib/dflib/issues/69",
                "https://github.com/dflib/dflib/commit/9b21c73dc"
            ]
        },
        {
            "poj_link": "https://github.com/dflib/dflib/",
            "file_path": "dflib/dflib/dflib-jdbc/src/test/java/org/dflib/jdbc/connector/metadata/TableFQNameTest.java",
            "test_name": "hashCode_CatalogName",
            "FQS": "org.dflib.jdbc.connector.metadata.TableFQNameTest.hashCode_CatalogName()",
            "start_line": "83",
            "blame_result": "9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 84) \n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 85)         TableFQName n1 = TableFQName.forCatalogAndName(\"c1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 86)         TableFQName n2 = TableFQName.forCatalogAndName(\"c1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 87)         TableFQName n3 = TableFQName.forCatalogAndName(\"c2\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 88)         TableFQName n4 = TableFQName.forCatalogAndName(\"c1\", \"t2\");\n",
            "commit_hashes": {
                "9b21c73dc": "     TableSaver: apply quotes to schema/catalog/table name separately #69"
            },
            "Commit&issueIDs": {
                "9b21c73dc": [
                    "#69"
                ]
            },
            "links": [
                "https://github.com/dflib/dflib/issues/69",
                "https://github.com/dflib/dflib/commit/9b21c73dc"
            ]
        },
        {
            "poj_link": "https://github.com/dflib/dflib/",
            "file_path": "dflib/dflib/dflib-jdbc/src/test/java/org/dflib/jdbc/connector/metadata/TableFQNameTest.java",
            "test_name": "hashCode_SchemaName",
            "FQS": "org.dflib.jdbc.connector.metadata.TableFQNameTest.hashCode_SchemaName()",
            "start_line": "97",
            "blame_result": "9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400  98) \n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400  99)         TableFQName n1 = TableFQName.forSchemaAndName(\"s1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 100)         TableFQName n2 = TableFQName.forSchemaAndName(\"s1\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 101)         TableFQName n3 = TableFQName.forSchemaAndName(\"s2\", \"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 102)         TableFQName n4 = TableFQName.forSchemaAndName(\"s1\", \"t2\");\n",
            "commit_hashes": {
                "9b21c73dc": "     TableSaver: apply quotes to schema/catalog/table name separately #69"
            },
            "Commit&issueIDs": {
                "9b21c73dc": [
                    "#69"
                ]
            },
            "links": [
                "https://github.com/dflib/dflib/issues/69",
                "https://github.com/dflib/dflib/commit/9b21c73dc"
            ]
        },
        {
            "poj_link": "https://github.com/dflib/dflib/",
            "file_path": "dflib/dflib/dflib-jdbc/src/test/java/org/dflib/jdbc/connector/metadata/TableFQNameTest.java",
            "test_name": "hashCode_Name",
            "FQS": "org.dflib.jdbc.connector.metadata.TableFQNameTest.hashCode_Name()",
            "start_line": "111",
            "blame_result": "9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 112) \n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 113)         TableFQName n1 = TableFQName.forName(\"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 114)         TableFQName n2 = TableFQName.forName(\"t1\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 115)         TableFQName n3 = TableFQName.forName(\"t2\");\n9b21c73dc dflib-jdbc/src/test/java/com/nhl/dflib/jdbc/connector/metadata/TableFQNameTest.java (Andrus Adamchik 2019-08-01 15:43:24 -0400 116) \n",
            "commit_hashes": {
                "9b21c73dc": "     TableSaver: apply quotes to schema/catalog/table name separately #69"
            },
            "Commit&issueIDs": {
                "9b21c73dc": [
                    "#69"
                ]
            },
            "links": [
                "https://github.com/dflib/dflib/issues/69",
                "https://github.com/dflib/dflib/commit/9b21c73dc"
            ]
        },
        {
            "poj_link": "https://github.com/dapr/java-sdk/",
            "file_path": "dapr/java-sdk/sdk/src/test/java/io/dapr/client/domain/StateTest.java",
            "test_name": "testEqualsAndHashcode",
            "FQS": "io.dapr.client.domain.StateTest.testEqualsAndHashcode()",
            "start_line": "88",
            "blame_result": "5d7700b57 (Artur Souza 2021-02-01 19:03:25 -0800 89)     State<String> state1 = new State<>(KEY, \"value\", ETAG, new HashMap<>(METADATA), OPTIONS);\n5d7700b57 (Artur Souza 2021-02-01 19:03:25 -0800 90)     State<String> state2 = new State<>(KEY, \"value\", ETAG, new HashMap<>(METADATA), OPTIONS);\n912ff7a78 (Sky/\u6556\u5c0f\u5251  2020-12-02 13:13:25 +0800 91)     assertEquals(state1.toString(), state2.toString());\n912ff7a78 (Sky/\u6556\u5c0f\u5251  2020-12-02 13:13:25 +0800 92)     assertEquals(state1.hashCode(), state2.hashCode());\n912ff7a78 (Sky/\u6556\u5c0f\u5251  2020-12-02 13:13:25 +0800 93)     assertEquals(state1, state2);\n",
            "commit_hashes": {
                "5d7700b57": "    Refactor params for State class + Unit test example (#473)",
                "912ff7a78": "    Add metadata for state save operation (#397)"
            },
            "Commit&issueIDs": {
                "5d7700b57": [
                    "(#473)"
                ],
                "912ff7a78": [
                    "(#397)"
                ]
            },
            "links": [
                "https://github.com/dapr/java-sdk/issues/473",
                "https://github.com/dapr/java-sdk/commit/5d7700b57",
                "https://github.com/dapr/java-sdk/issues/397",
                "https://github.com/dapr/java-sdk/commit/912ff7a78"
            ]
        },
        {
            "poj_link": "https://github.com/jmrozanec/cron-utils/",
            "file_path": "jmrozanec/cron-utils/src/test/java/com/cronutils/Issue200Test.java",
            "test_name": "testMustMatchCronEvenIfNanoSecondsVaries",
            "FQS": "com.cronutils.Issue200Test.testMustMatchCronEvenIfNanoSecondsVaries()",
            "start_line": "35",
            "blame_result": "bb55dffc src/test/java/com/cronutils/Issue200Test.java                  (Matthias Kolley     2017-11-30 12:45:43 +0100 36)         final CronDefinition cronDefinition =\n487d226b src/test/java/com/cronutils/Issue200Test.java                  (John Patrick Manalo 2017-06-20 09:55:15 +0900 37)                 CronDefinitionBuilder.instanceDefinitionFor(QUARTZ);\n487d226b src/test/java/com/cronutils/Issue200Test.java                  (John Patrick Manalo 2017-06-20 09:55:15 +0900 38) \nd86e6b3f src/test/java/com/cronutils/utils/descriptor/Issue281Test.java (Matthias Kolley     2017-11-23 08:05:16 +0100 39)         final CronParser parser = new CronParser(cronDefinition);\nbb55dffc src/test/java/com/cronutils/Issue200Test.java                  (Matthias Kolley     2017-11-30 12:45:43 +0100 40)         final Cron quartzCron = parser.parse(\"00 00 10 * * ?\");\n",
            "commit_hashes": {
                "bb55dffc": "    #285 Fix sonarqube issues in test files.",
                "487d226b": "    Add test for issue 200.",
                "d86e6b3f": "    #Issue281 added a testcase."
            },
            "Commit&issueIDs": {
                "bb55dffc": [
                    "#285"
                ]
            },
            "links": [
                "https://github.com/jmrozanec/cron-utils/issues/285",
                "https://github.com/jmrozanec/cron-utils/commit/bb55dffc"
            ]
        },
        {
            "poj_link": "https://github.com/jmrozanec/cron-utils/",
            "file_path": "jmrozanec/cron-utils/src/test/java/com/cronutils/Issue200Test.java",
            "test_name": "testMatchExact",
            "FQS": "com.cronutils.Issue200Test.testMatchExact()",
            "start_line": "53",
            "blame_result": "bb55dffc src/test/java/com/cronutils/Issue200Test.java                  (Matthias Kolley     2017-11-30 12:45:43 +0100 54)         final CronDefinition cronDefinition =\n487d226b src/test/java/com/cronutils/Issue200Test.java                  (John Patrick Manalo 2017-06-20 09:55:15 +0900 55)                 CronDefinitionBuilder.instanceDefinitionFor(QUARTZ);\n487d226b src/test/java/com/cronutils/Issue200Test.java                  (John Patrick Manalo 2017-06-20 09:55:15 +0900 56) \nd86e6b3f src/test/java/com/cronutils/utils/descriptor/Issue281Test.java (Matthias Kolley     2017-11-23 08:05:16 +0100 57)         final CronParser parser = new CronParser(cronDefinition);\nbb55dffc src/test/java/com/cronutils/Issue200Test.java                  (Matthias Kolley     2017-11-30 12:45:43 +0100 58)         final Cron quartzCron = parser.parse(\"00 00 10 * * ?\");\n",
            "commit_hashes": {
                "bb55dffc": "    #285 Fix sonarqube issues in test files.",
                "487d226b": "    Add test for issue 200.",
                "d86e6b3f": "    #Issue281 added a testcase."
            },
            "Commit&issueIDs": {
                "bb55dffc": [
                    "#285"
                ]
            },
            "links": [
                "https://github.com/jmrozanec/cron-utils/issues/285",
                "https://github.com/jmrozanec/cron-utils/commit/bb55dffc"
            ]
        },
        {
            "poj_link": "https://github.com/jmrozanec/cron-utils/",
            "file_path": "jmrozanec/cron-utils/src/test/java/com/cronutils/Issue528Test.java",
            "test_name": "testCronMapperRebootSupportedOnTarget",
            "FQS": "com.cronutils.Issue528Test.testCronMapperRebootSupportedOnTarget()",
            "start_line": "38",
            "blame_result": "33f1b077 (Jonas 2022-07-30 12:35:36 +0200 39)         Cron cron = new CronParser(REBOOT_CRON_DEFINITION).parse(\"@reboot\");\n1cf9247a (Jonas 2022-07-30 12:58:04 +0200 40)         CronDefinition unix = CronDefinitionBuilder.defineCron()\n1cf9247a (Jonas 2022-07-30 12:58:04 +0200 41)                 .withMinutes().withValidRange(0, 59).withStrictRange().and()\n1cf9247a (Jonas 2022-07-30 12:58:04 +0200 42)                 .withHours().withValidRange(0, 23).withStrictRange().and()\n1cf9247a (Jonas 2022-07-30 12:58:04 +0200 43)                 .withDayOfMonth().withValidRange(1, 31).withStrictRange().and()\n",
            "commit_hashes": {
                "33f1b077": "    Add unit test for #528",
                "1cf9247a": "    Add unit tests for CronDescriptor & CronMapper"
            },
            "Commit&issueIDs": {
                "33f1b077": [
                    "#528"
                ]
            },
            "links": [
                "https://github.com/jmrozanec/cron-utils/issues/528",
                "https://github.com/jmrozanec/cron-utils/commit/33f1b077"
            ]
        },
        {
            "poj_link": "https://github.com/jmrozanec/cron-utils/",
            "file_path": "jmrozanec/cron-utils/src/test/java/com/cronutils/model/time/ExecutionTimeQuartzIntegrationTest.java",
            "test_name": "testDayOfWeekMapping",
            "FQS": "com.cronutils.model.time.ExecutionTimeQuartzIntegrationTest.testDayOfWeekMapping()",
            "start_line": "503",
            "blame_result": "bb55dffc (Matthias Kolley  2017-11-30 12:45:43 +0100 504)         final ZonedDateTime fridayMorning = ZonedDateTime.of(2016, 4, 22, 0, 0, 0, 0, UTC);\nbb55dffc (Matthias Kolley  2017-11-30 12:45:43 +0100 505)         final ExecutionTime numberExec = ExecutionTime.forCron(parser.parse(\"0 0 12 ? * 2,3,4,5,6 *\"));\nbb55dffc (Matthias Kolley  2017-11-30 12:45:43 +0100 506)         final ExecutionTime nameExec = ExecutionTime.forCron(parser.parse(\"0 0 12 ? * MON,TUE,WED,THU,FRI *\"));\n345f3381 (Allon Mureinik   2022-10-04 21:47:49 +0300 507)         assertEquals(numberExec.nextExecution(fridayMorning), nameExec.nextExecution(fridayMorning), \"same generated dates\");\n41ac8abf (Fredrik Svensson 2017-11-13 23:35:33 +0100 508)     }\n",
            "commit_hashes": {
                "bb55dffc": "    #285 Fix sonarqube issues in test files.",
                "345f3381": "    Standardize testing framework to JUnit Jupiter",
                "41ac8abf": "    Reformat test code in accordance with checkstyle.xml"
            },
            "Commit&issueIDs": {
                "bb55dffc": [
                    "#285"
                ]
            },
            "links": [
                "https://github.com/jmrozanec/cron-utils/issues/285",
                "https://github.com/jmrozanec/cron-utils/commit/bb55dffc"
            ]
        },
        {
            "poj_link": "https://github.com/SAP/cloud-security-services-integration-library/",
            "file_path": "SAP/cloud-security-services-integration-library/spring-security/src/test/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationPropertiesTest.java",
            "test_name": "setGetClientId",
            "FQS": "com.sap.cloud.security.spring.config.OAuth2ServiceConfigurationPropertiesTest.setGetClientId()",
            "start_line": "22",
            "blame_result": "f78f43b9c (nenaraab    2021-02-16 12:31:05 +0100 23) \t\tcutIas.setClientId(ANY_VALUE);\nf78f43b9c (nenaraab    2021-02-16 12:31:05 +0100 24) \t\tassertEquals(ANY_VALUE, cutIas.getClientId());\nb6d5239d8 (Manuel Fink 2023-03-21 10:24:16 +0100 25) \t\tassertTrue(cutIas.hasProperty(ServiceConstants.CLIENT_ID));\nb6d5239d8 (Manuel Fink 2023-03-21 10:24:16 +0100 26) \t\tassertEquals(ANY_VALUE, cutIas.getProperty(ServiceConstants.CLIENT_ID));\nf78f43b9c (nenaraab    2021-02-16 12:31:05 +0100 27) \n",
            "commit_hashes": {
                "f78f43b9c": "    [spring-security] Spring Security Client Library that supports Hybrid JWT Validation (#450)",
                "b6d5239d8": "    3.0.0 Preparation (JDK17, Deprecated code removal) (#1104)"
            },
            "Commit&issueIDs": {
                "f78f43b9c": [
                    "450"
                ],
                "b6d5239d8": [
                    "1104"
                ]
            },
            "links": [
                "https://github.com/SAP/cloud-security-services-integration-library/issues/450",
                "https://github.com/SAP/cloud-security-services-integration-library/commit/f78f43b9c",
                "https://github.com/SAP/cloud-security-services-integration-library/issues/1104",
                "https://github.com/SAP/cloud-security-services-integration-library/commit/b6d5239d8"
            ]
        },
        {
            "poj_link": "https://github.com/SAP/cloud-security-services-integration-library/",
            "file_path": "SAP/cloud-security-services-integration-library/spring-security/src/test/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationPropertiesTest.java",
            "test_name": "setGetClientSecret",
            "FQS": "com.sap.cloud.security.spring.config.OAuth2ServiceConfigurationPropertiesTest.setGetClientSecret()",
            "start_line": "35",
            "blame_result": "f78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 36) \t\tcutIas.setClientSecret(ANY_VALUE);\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 37) \t\tassertEquals(ANY_VALUE, cutIas.getClientSecret());\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 38) \t\tassertTrue(cutIas.hasProperty(CLIENT_SECRET));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 39) \t\tassertEquals(ANY_VALUE, cutIas.getProperty(CLIENT_SECRET));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 40) \n",
            "commit_hashes": {
                "f78f43b9c": "    [spring-security] Spring Security Client Library that supports Hybrid JWT Validation (#450)"
            },
            "Commit&issueIDs": {
                "f78f43b9c": [
                    "450"
                ]
            },
            "links": [
                "https://github.com/SAP/cloud-security-services-integration-library/issues/450",
                "https://github.com/SAP/cloud-security-services-integration-library/commit/f78f43b9c"
            ]
        },
        {
            "poj_link": "https://github.com/SAP/cloud-security-services-integration-library/",
            "file_path": "SAP/cloud-security-services-integration-library/spring-security/src/test/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationPropertiesTest.java",
            "test_name": "setGetUrl",
            "FQS": "com.sap.cloud.security.spring.config.OAuth2ServiceConfigurationPropertiesTest.setGetUrl()",
            "start_line": "112",
            "blame_result": "f78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 113) \t\tcutIas.setUrl(ANY_VALUE);\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 114) \t\tassertEquals(ANY_VALUE, cutIas.getUrl().toString());\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 115) \t\tassertTrue(cutIas.hasProperty(URL));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 116) \t\tassertEquals(ANY_VALUE, cutIas.getProperty(URL));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 117) \n",
            "commit_hashes": {
                "f78f43b9c": "    [spring-security] Spring Security Client Library that supports Hybrid JWT Validation (#450)"
            },
            "Commit&issueIDs": {
                "f78f43b9c": [
                    "450"
                ]
            },
            "links": [
                "https://github.com/SAP/cloud-security-services-integration-library/issues/450",
                "https://github.com/SAP/cloud-security-services-integration-library/commit/f78f43b9c"
            ]
        },
        {
            "poj_link": "https://github.com/SAP/cloud-security-services-integration-library/",
            "file_path": "SAP/cloud-security-services-integration-library/spring-security/src/test/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationPropertiesTest.java",
            "test_name": "setGetCertUrl",
            "FQS": "com.sap.cloud.security.spring.config.OAuth2ServiceConfigurationPropertiesTest.setGetCertUrl()",
            "start_line": "125",
            "blame_result": "75eed64d4 (L\u012bga 2021-06-21 10:39:12 +0200 126) \t\tcutXsuaa.setCertUrl(ANY_VALUE);\n75eed64d4 (L\u012bga 2021-06-21 10:39:12 +0200 127) \t\tassertEquals(ANY_VALUE, cutXsuaa.getCertUrl().toString());\n75eed64d4 (L\u012bga 2021-06-21 10:39:12 +0200 128) \t\tassertTrue(cutXsuaa.hasProperty(XSUAA.CERT_URL));\n75eed64d4 (L\u012bga 2021-06-21 10:39:12 +0200 129) \t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(XSUAA.CERT_URL));\n75eed64d4 (L\u012bga 2021-06-21 10:39:12 +0200 130) \t}\n",
            "commit_hashes": {
                "75eed64d4": "    Token xchange with x509 (#534)"
            },
            "Commit&issueIDs": {
                "75eed64d4": [
                    "534"
                ]
            },
            "links": [
                "https://github.com/SAP/cloud-security-services-integration-library/issues/534",
                "https://github.com/SAP/cloud-security-services-integration-library/commit/75eed64d4"
            ]
        },
        {
            "poj_link": "https://github.com/SAP/cloud-security-services-integration-library/",
            "file_path": "SAP/cloud-security-services-integration-library/spring-security/src/test/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationPropertiesTest.java",
            "test_name": "getProperties",
            "FQS": "com.sap.cloud.security.spring.config.OAuth2ServiceConfigurationPropertiesTest.getProperties()",
            "start_line": "133",
            "blame_result": "f78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 134) \t\tcutIas.setClientId(ANY_VALUE);\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 135) \t\tcutIas.setClientSecret(ANY_VALUE);\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 136) \t\tassertEquals(ANY_VALUE, cutIas.getProperties().get(CLIENT_ID));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 137) \t\tassertEquals(ANY_VALUE, cutIas.getProperties().get(CLIENT_SECRET));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 138) \t\tassertNull(cutIas.getProperties().get(URL));\n",
            "commit_hashes": {
                "f78f43b9c": "    [spring-security] Spring Security Client Library that supports Hybrid JWT Validation (#450)"
            },
            "Commit&issueIDs": {
                "f78f43b9c": [
                    "450"
                ]
            },
            "links": [
                "https://github.com/SAP/cloud-security-services-integration-library/issues/450",
                "https://github.com/SAP/cloud-security-services-integration-library/commit/f78f43b9c"
            ]
        },
        {
            "poj_link": "https://github.com/SAP/cloud-security-services-integration-library/",
            "file_path": "SAP/cloud-security-services-integration-library/spring-security/src/test/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationPropertiesTest.java",
            "test_name": "setGetUaaDomain",
            "FQS": "com.sap.cloud.security.spring.config.OAuth2ServiceConfigurationPropertiesTest.setGetUaaDomain()",
            "start_line": "148",
            "blame_result": "f78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 149) \t\tcutXsuaa.setUaaDomain(ANY_VALUE);\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 150) \t\tassertTrue(cutXsuaa.hasProperty(XSUAA.UAA_DOMAIN));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 151) \t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(XSUAA.UAA_DOMAIN));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 152) \t}\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 153) \n",
            "commit_hashes": {
                "f78f43b9c": "    [spring-security] Spring Security Client Library that supports Hybrid JWT Validation (#450)"
            },
            "Commit&issueIDs": {
                "f78f43b9c": [
                    "450"
                ]
            },
            "links": [
                "https://github.com/SAP/cloud-security-services-integration-library/issues/450",
                "https://github.com/SAP/cloud-security-services-integration-library/commit/f78f43b9c"
            ]
        },
        {
            "poj_link": "https://github.com/pippo-java/pippo/",
            "file_path": "pippo-java/pippo/pippo-session-parent/pippo-session/src/test/java/ro/pippo/session/EncryptedSessionDataTranscoderTest.java",
            "test_name": "test",
            "FQS": "ro.pippo.session.EncryptedSessionDataTranscoderTest.test()",
            "start_line": "32",
            "blame_result": "7304924d9 (Adam Brown 2018-10-08 22:57:04 -0700 33)         System.out.println(\"encode\");\n7304924d9 (Adam Brown 2018-10-08 22:57:04 -0700 34)         SessionData sessionData = new DefaultSessionData();\n7304924d9 (Adam Brown 2018-10-08 22:57:04 -0700 35)         String sessionId = sessionData.getId();\n7304924d9 (Adam Brown 2018-10-08 22:57:04 -0700 36)         sessionData.put(\"KEY\", \"VALUE\");\n7304924d9 (Adam Brown 2018-10-08 22:57:04 -0700 37)         EncryptedSessionDataTranscoder instance = new EncryptedSessionDataTranscoder.Builder().secretKey(\"PasswordPassword\").build();\n",
            "commit_hashes": {
                "7304924d9": "    Made SessionData an interface, and introduced DefaultSessionData (#465)"
            },
            "Commit&issueIDs": {
                "7304924d9": [
                    "(#465)"
                ]
            },
            "links": [
                "https://github.com/pippo-java/pippo/issues/465",
                "https://github.com/pippo-java/pippo/commit/7304924d9"
            ]
        },
        {
            "poj_link": "https://github.com/SAP/cloud-security-services-integration-library/",
            "file_path": "SAP/cloud-security-services-integration-library/spring-security/src/test/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationPropertiesTest.java",
            "test_name": "setGetXsAppName",
            "FQS": "com.sap.cloud.security.spring.config.OAuth2ServiceConfigurationPropertiesTest.setGetXsAppName()",
            "start_line": "155",
            "blame_result": "f78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 156) \t\tcutXsuaa.setXsAppName(ANY_VALUE);\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 157) \t\tassertTrue(cutXsuaa.hasProperty(XSUAA.APP_ID));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 158) \t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(XSUAA.APP_ID));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 159) \t}\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 160) \n",
            "commit_hashes": {
                "f78f43b9c": "    [spring-security] Spring Security Client Library that supports Hybrid JWT Validation (#450)"
            },
            "Commit&issueIDs": {
                "f78f43b9c": [
                    "450"
                ]
            },
            "links": [
                "https://github.com/SAP/cloud-security-services-integration-library/issues/450",
                "https://github.com/SAP/cloud-security-services-integration-library/commit/f78f43b9c"
            ]
        },
        {
            "poj_link": "https://github.com/SAP/cloud-security-services-integration-library/",
            "file_path": "SAP/cloud-security-services-integration-library/spring-security/src/test/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationPropertiesTest.java",
            "test_name": "setGetVerificationKey",
            "FQS": "com.sap.cloud.security.spring.config.OAuth2ServiceConfigurationPropertiesTest.setGetVerificationKey()",
            "start_line": "162",
            "blame_result": "f78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 163) \t\tcutXsuaa.setVerificationKey(ANY_VALUE);\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 164) \t\tassertTrue(cutXsuaa.hasProperty(XSUAA.VERIFICATION_KEY));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 165) \t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(XSUAA.VERIFICATION_KEY));\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 166) \t}\nf78f43b9c (nenaraab 2021-02-16 12:31:05 +0100 167) \n",
            "commit_hashes": {
                "f78f43b9c": "    [spring-security] Spring Security Client Library that supports Hybrid JWT Validation (#450)"
            },
            "Commit&issueIDs": {
                "f78f43b9c": [
                    "450"
                ]
            },
            "links": [
                "https://github.com/SAP/cloud-security-services-integration-library/issues/450",
                "https://github.com/SAP/cloud-security-services-integration-library/commit/f78f43b9c"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-firestore/",
            "file_path": "googleapis/java-firestore/google-cloud-firestore/src/test/java/com/google/cloud/firestore/DocumentReferenceTest.java",
            "test_name": "equals",
            "FQS": "com.google.cloud.firestore.DocumentReferenceTest.equals()",
            "start_line": "124",
            "blame_result": "bebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 125)     DocumentReference doc1 = documentReference.collection(\"subcoll\").document(\"doc\");\nbebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 126)     DocumentReference doc2 = documentReference.collection(\"subcoll\").document(\"doc\");\nbebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 127)     assertEquals(doc1, doc2);\nbebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 128)   }\nbebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 129) \n",
            "commit_hashes": {
                "bebde44e2": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "bebde44e2": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-firestore/issues/3251",
                "https://github.com/googleapis/java-firestore/commit/bebde44e2"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-firestore/",
            "file_path": "googleapis/java-firestore/google-cloud-firestore/src/test/java/com/google/cloud/firestore/DocumentReferenceTest.java",
            "test_name": "deserializeBasicTypes",
            "FQS": "com.google.cloud.firestore.DocumentReferenceTest.deserializeBasicTypes()",
            "start_line": "216",
            "blame_result": "bebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 217)     doAnswer(getAllResponse(ALL_SUPPORTED_TYPES_PROTO))\nbebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 218)         .when(firestoreMock)\nbebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 219)         .streamRequest(\nbebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 220)             getAllCapture.capture(),\nbebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 221)             streamObserverCapture.capture(),\n",
            "commit_hashes": {
                "bebde44e2": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "bebde44e2": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-firestore/issues/3251",
                "https://github.com/googleapis/java-firestore/commit/bebde44e2"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-firestore/",
            "file_path": "googleapis/java-firestore/google-cloud-firestore/src/test/java/com/google/cloud/firestore/FirestoreTest.java",
            "test_name": "arrayUnionEquals",
            "FQS": "com.google.cloud.firestore.FirestoreTest.arrayUnionEquals()",
            "start_line": "153",
            "blame_result": "b8013819d (Sebastian Schmidt 2018-08-15 08:03:25 -0700 154)     FieldValue arrayUnion1 = FieldValue.arrayUnion(\"foo\", \"bar\");\nb8013819d (Sebastian Schmidt 2018-08-15 08:03:25 -0700 155)     FieldValue arrayUnion2 = FieldValue.arrayUnion(\"foo\", \"bar\");\nb8013819d (Sebastian Schmidt 2018-08-15 08:03:25 -0700 156)     FieldValue arrayUnion3 = FieldValue.arrayUnion(\"foo\", \"baz\");\nb8013819d (Sebastian Schmidt 2018-08-15 08:03:25 -0700 157)     FieldValue arrayRemove = FieldValue.arrayRemove(\"foo\", \"bar\");\nb8013819d (Sebastian Schmidt 2018-08-15 08:03:25 -0700 158)     assertEquals(arrayUnion1, arrayUnion1);\n",
            "commit_hashes": {
                "b8013819d": "    Add Array Features to Firestore Java (#3561)"
            },
            "Commit&issueIDs": {
                "b8013819d": [
                    "3561"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-firestore/issues/3561",
                "https://github.com/googleapis/java-firestore/commit/b8013819d"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-firestore/",
            "file_path": "googleapis/java-firestore/google-cloud-firestore/src/test/java/com/google/cloud/firestore/FirestoreTest.java",
            "test_name": "arrayRemoveEquals",
            "FQS": "com.google.cloud.firestore.FirestoreTest.arrayRemoveEquals()",
            "start_line": "165",
            "blame_result": "b8013819d (Sebastian Schmidt 2018-08-15 08:03:25 -0700 166)     FieldValue arrayRemove1 = FieldValue.arrayRemove(\"foo\", \"bar\");\nb8013819d (Sebastian Schmidt 2018-08-15 08:03:25 -0700 167)     FieldValue arrayRemove2 = FieldValue.arrayRemove(\"foo\", \"bar\");\nb8013819d (Sebastian Schmidt 2018-08-15 08:03:25 -0700 168)     FieldValue arrayRemove3 = FieldValue.arrayRemove(\"foo\", \"baz\");\nb8013819d (Sebastian Schmidt 2018-08-15 08:03:25 -0700 169)     FieldValue arrayUnion = FieldValue.arrayUnion(\"foo\", \"bar\");\nb8013819d (Sebastian Schmidt 2018-08-15 08:03:25 -0700 170)     assertEquals(arrayRemove1, arrayRemove1);\n",
            "commit_hashes": {
                "b8013819d": "    Add Array Features to Firestore Java (#3561)"
            },
            "Commit&issueIDs": {
                "b8013819d": [
                    "3561"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-firestore/issues/3561",
                "https://github.com/googleapis/java-firestore/commit/b8013819d"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-firestore/",
            "file_path": "googleapis/java-firestore/google-cloud-firestore/src/test/java/com/google/cloud/firestore/FirestoreTest.java",
            "test_name": "incrementEquals",
            "FQS": "com.google.cloud.firestore.FirestoreTest.incrementEquals()",
            "start_line": "177",
            "blame_result": "942c550c7 (Sebastian Schmidt 2019-03-08 11:47:33 -0800 178)     FieldValue increment1 = FieldValue.increment(42);\n942c550c7 (Sebastian Schmidt 2019-03-08 11:47:33 -0800 179)     FieldValue increment2 = FieldValue.increment(42);\n942c550c7 (Sebastian Schmidt 2019-03-08 11:47:33 -0800 180)     FieldValue increment3 = FieldValue.increment(42.0);\n942c550c7 (Sebastian Schmidt 2019-03-08 11:47:33 -0800 181)     FieldValue increment4 = FieldValue.increment(42.0);\n942c550c7 (Sebastian Schmidt 2019-03-08 11:47:33 -0800 182)     assertEquals(increment1, increment2);\n",
            "commit_hashes": {
                "942c550c7": "    Adding FieldValue.increment() (#4018)"
            },
            "Commit&issueIDs": {
                "942c550c7": [
                    "4018"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-firestore/issues/4018",
                "https://github.com/googleapis/java-firestore/commit/942c550c7"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-firestore/",
            "file_path": "googleapis/java-firestore/google-cloud-firestore/src/test/java/com/google/cloud/firestore/QueryTest.java",
            "test_name": "equalsTest",
            "FQS": "com.google.cloud.firestore.QueryTest.equalsTest()",
            "start_line": "1157",
            "blame_result": "bebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 1158)     assertEquals(query.limit(42).offset(1337), query.offset(1337).limit(42));\nbebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 1159)     assertEquals(query.limit(42).offset(1337).hashCode(), query.offset(1337).limit(42).hashCode());\nbebde44e2 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 1160)   }\nbae22e083 (Sebastian Schmidt   2020-06-16 16:53:53 -0700 1161) \nbae22e083 (Sebastian Schmidt   2020-06-16 16:53:53 -0700 1162)   @Test\n",
            "commit_hashes": {
                "bebde44e2": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)",
                "bae22e083": "    feat: ability to serialize Query to Proto (#241)"
            },
            "Commit&issueIDs": {
                "bebde44e2": [
                    "3251"
                ],
                "bae22e083": [
                    "241"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-firestore/issues/3251",
                "https://github.com/googleapis/java-firestore/commit/bebde44e2",
                "https://github.com/googleapis/java-firestore/issues/241",
                "https://github.com/googleapis/java-firestore/commit/bae22e083"
            ]
        },
        {
            "poj_link": "https://github.com/tomp2p/TomP2P/",
            "file_path": "tomp2p/TomP2P/core/src/test/java/net/tomp2p/message/TestMessage.java",
            "test_name": "testRelayFlag",
            "FQS": "net.tomp2p.message.TestMessage.testRelayFlag()",
            "start_line": "520",
            "blame_result": "7e864b8e8 (Thomas Bocek 2013-12-28 18:51:45 +0100 521) \t\tMessage m1 = Utils2.createDummyMessage();\ndb4df75a9 (Thomas Bocek 2014-10-30 23:29:57 +0100 522) \t\tm1.sender(m1.sender().changeRelayed(true));\ndb4df75a9 (Thomas Bocek 2014-10-30 23:29:57 +0100 523) \t\t\n7e864b8e8 (Thomas Bocek 2013-12-28 18:51:45 +0100 524) \t\tMessage m2 = encodeDecode(m1);\ndb4df75a9 (Thomas Bocek 2014-10-30 23:29:57 +0100 525) \t\tAssert.assertEquals(m1.sender().isRelayed(), m2.sender().isRelayed());\n",
            "commit_hashes": {
                "7e864b8e8": "    new Buffer handling, replaced the cumalative buffer with an alternative",
                "db4df75a9": "    merged pull request #52"
            },
            "Commit&issueIDs": {
                "db4df75a9": [
                    "#52"
                ]
            },
            "links": [
                "https://github.com/tomp2p/TomP2P/issues/52",
                "https://github.com/tomp2p/TomP2P/commit/db4df75a9"
            ]
        },
        {
            "poj_link": "https://github.com/tomp2p/TomP2P/",
            "file_path": "tomp2p/TomP2P/core/src/test/java/net/tomp2p/message/TestMessage.java",
            "test_name": "testSlowFlag",
            "FQS": "net.tomp2p.message.TestMessage.testSlowFlag()",
            "start_line": "530",
            "blame_result": "7e864b8e8 (Thomas Bocek 2013-12-28 18:51:45 +0100 531) \t\tMessage m1 = Utils2.createDummyMessage();\ndb4df75a9 (Thomas Bocek 2014-10-30 23:29:57 +0100 532) \t\tm1.sender(m1.sender().changeSlow(true));\ndb4df75a9 (Thomas Bocek 2014-10-30 23:29:57 +0100 533) \t\t\n7e864b8e8 (Thomas Bocek 2013-12-28 18:51:45 +0100 534) \t\tMessage m2 = encodeDecode(m1);\ndb4df75a9 (Thomas Bocek 2014-10-30 23:29:57 +0100 535) \t\tAssert.assertEquals(m1.sender().isSlow(), m2.sender().isSlow());\n",
            "commit_hashes": {
                "7e864b8e8": "    new Buffer handling, replaced the cumalative buffer with an alternative",
                "db4df75a9": "    merged pull request #52"
            },
            "Commit&issueIDs": {
                "db4df75a9": [
                    "#52"
                ]
            },
            "links": [
                "https://github.com/tomp2p/TomP2P/issues/52",
                "https://github.com/tomp2p/TomP2P/commit/db4df75a9"
            ]
        },
        {
            "poj_link": "https://github.com/tomp2p/TomP2P/",
            "file_path": "tomp2p/TomP2P/nat/src/test/java/net/tomp2p/relay/TestRelayUtils.java",
            "test_name": "testEncodeDecodeString",
            "FQS": "net.tomp2p.relay.TestRelayUtils.testEncodeDecodeString()",
            "start_line": "74",
            "blame_result": "db4df75a9 (Thomas Bocek 2014-10-30 23:29:57 +0100 75) \t\tString test = \"dummy\";\ndb4df75a9 (Thomas Bocek 2014-10-30 23:29:57 +0100 76) \t\tBuffer encoded = RelayUtils.encodeString(test);\ndb4df75a9 (Thomas Bocek 2014-10-30 23:29:57 +0100 77) \t\tString decoded = RelayUtils.decodeString(encoded);\ndb4df75a9 (Thomas Bocek 2014-10-30 23:29:57 +0100 78) \t\tAssert.assertEquals(test, decoded);\ndb4df75a9 (Thomas Bocek 2014-10-30 23:29:57 +0100 79) \t}\n",
            "commit_hashes": {
                "db4df75a9": "    merged pull request #52"
            },
            "Commit&issueIDs": {
                "db4df75a9": [
                    "#52"
                ]
            },
            "links": [
                "https://github.com/tomp2p/TomP2P/issues/52",
                "https://github.com/tomp2p/TomP2P/commit/db4df75a9"
            ]
        },
        {
            "poj_link": "https://github.com/querqy/querqy/",
            "file_path": "querqy/querqy/querqy-for-lucene/querqy-lucene/src/test/java/querqy/lucene/rewrite/AdditiveBoostFunctionTest.java",
            "test_name": "testHashCode",
            "FQS": "querqy.lucene.rewrite.AdditiveBoostFunctionTest.testHashCode()",
            "start_line": "164",
            "blame_result": "dedd90c70 (Rene\u0301 Kriegler 2019-06-09 22:59:26 +0100 165)         final AdditiveBoostFunction func1 = new AdditiveBoostFunction(new DoubleConstValueSource(Math.PI), 1f);\ndedd90c70 (Rene\u0301 Kriegler 2019-06-09 22:59:26 +0100 166)         final AdditiveBoostFunction func2 = new AdditiveBoostFunction(new DoubleConstValueSource(Math.PI), 1f);\ndedd90c70 (Rene\u0301 Kriegler 2019-06-09 22:59:26 +0100 167)         final AdditiveBoostFunction func3 = new AdditiveBoostFunction(new DoubleConstValueSource(Math.E), 1f);\ndedd90c70 (Rene\u0301 Kriegler 2019-06-09 22:59:26 +0100 168)         final AdditiveBoostFunction func4 = new AdditiveBoostFunction(new DoubleConstValueSource(Math.E), 2f);\ndedd90c70 (Rene\u0301 Kriegler 2019-06-09 22:59:26 +0100 169) \n",
            "commit_hashes": {
                "dedd90c70": "    Creating AdditiveBoostFunction for pos/neg additive boosts #50"
            },
            "Commit&issueIDs": {
                "dedd90c70": [
                    "#50"
                ]
            },
            "links": [
                "https://github.com/querqy/querqy/issues/50",
                "https://github.com/querqy/querqy/commit/dedd90c70"
            ]
        },
        {
            "poj_link": "https://github.com/UnquietCode/JState/",
            "file_path": "UnquietCode/JState/src/test/java/unquietcode/tools/esm/EnumStateMachine_T.java",
            "test_name": "stringParsingFromExistingEnumMachine",
            "FQS": "unquietcode.tools.esm.EnumStateMachine_T.stringParsingFromExistingEnumMachine()",
            "start_line": "55",
            "blame_result": "02b50ea4 (Ben Fagin      2018-04-27 12:51:19 -0700 56) \t\tEnumStateMachine<Something> esm1 = new EnumStateMachine<>();\nb13be6f4 (Benjamin Fagin 2013-07-26 19:01:55 -0700 57) \nb13be6f4 (Benjamin Fagin 2013-07-26 19:01:55 -0700 58) \t\t// single\nb13be6f4 (Benjamin Fagin 2013-07-26 19:01:55 -0700 59) \t\tesm1.addTransition(Something.One, Something.Two);\nb13be6f4 (Benjamin Fagin 2013-07-26 19:01:55 -0700 60) \n",
            "commit_hashes": {
                "02b50ea4": "    last bits of #9",
                "b13be6f4": "    String parsing is back, and this time it's in POG form!"
            },
            "Commit&issueIDs": {
                "02b50ea4": [
                    "#9"
                ]
            },
            "links": [
                "https://github.com/UnquietCode/JState/issues/9",
                "https://github.com/UnquietCode/JState/commit/02b50ea4"
            ]
        },
        {
            "poj_link": "https://github.com/oshi/oshi/",
            "file_path": "oshi/oshi/oshi-core/src/test/java/oshi/util/FileUtilTest.java",
            "test_name": "testReadBytesFromURL",
            "FQS": "oshi.util.FileUtilTest.testReadBytesFromURL()",
            "start_line": "176",
            "blame_result": "45bab762c0d (Daniel Widdis 2024-06-14 23:52:21 -0700 177)         // Create temporary files\n45bab762c0d (Daniel Widdis 2024-06-14 23:52:21 -0700 178)         Path file1 = Files.createTempFile(\"oshitest.file1\", null);\n45bab762c0d (Daniel Widdis 2024-06-14 23:52:21 -0700 179)         Path file2 = Files.createTempFile(\"oshitest.file2\", null);\n45bab762c0d (Daniel Widdis 2024-06-14 23:52:21 -0700 180)         Path file3 = Files.createTempFile(\"oshitest.file3\", null);\n45bab762c0d (Daniel Widdis 2024-06-14 23:52:21 -0700 181) \n",
            "commit_hashes": {
                "45bab762c0d": "    Only warn on duplicate properties files if they differ (#2662)"
            },
            "Commit&issueIDs": {
                "45bab762c0d": [
                    "2662"
                ]
            },
            "links": [
                "https://github.com/oshi/oshi/issues/2662",
                "https://github.com/oshi/oshi/commit/45bab762c0d"
            ]
        },
        {
            "poj_link": "https://github.com/streamnative/rop/",
            "file_path": "streamnative/rop/rocketmq-impl/src/test/java/org/streamnative/pulsar/handlers/rocketmq/inner/consumer/metadata/GroupOffsetValueTest.java",
            "test_name": "encodeDecodeTest",
            "FQS": "org.streamnative.pulsar.handlers.rocketmq.inner.consumer.metadata.GroupOffsetValueTest.encodeDecodeTest()",
            "start_line": "40",
            "blame_result": "2efad268 (xiaolong ran 2021-09-01 21:25:44 +0800 41)         ByteBuffer buffer = groupOffsetValue.encode();\n2efad268 (xiaolong ran 2021-09-01 21:25:44 +0800 42)         buffer.rewind();\n2efad268 (xiaolong ran 2021-09-01 21:25:44 +0800 43)         GroupOffsetValue temp = new GroupOffsetValue();\n2efad268 (xiaolong ran 2021-09-01 21:25:44 +0800 44)         temp.decode(buffer);\n2efad268 (xiaolong ran 2021-09-01 21:25:44 +0800 45)         assertEquals(groupOffsetValue, temp);\n",
            "commit_hashes": {
                "2efad268": "    Consumer offset management (#47)"
            },
            "Commit&issueIDs": {
                "2efad268": [
                    "47"
                ]
            },
            "links": [
                "https://github.com/streamnative/rop/issues/47",
                "https://github.com/streamnative/rop/commit/2efad268"
            ]
        },
        {
            "poj_link": "https://github.com/julman99/gson-fire/",
            "file_path": "julman99/gson-fire/src/test/java/io/gsonfire/util/reflection/CachedReflectionFactoryTest.java",
            "test_name": "get",
            "FQS": "io.gsonfire.util.reflection.CachedReflectionFactoryTest.get()",
            "start_line": "14",
            "blame_result": "9ccc01a2 (Julio Viera 2016-10-01 23:09:22 -0400 15)         CachedReflectionFactory factory = new CachedReflectionFactory();\n9ccc01a2 (Julio Viera 2016-10-01 23:09:22 -0400 16)         Object obj1 = factory.get(Object.class);\n9ccc01a2 (Julio Viera 2016-10-01 23:09:22 -0400 17)         Object obj2 = factory.get(Object.class);\n9ccc01a2 (Julio Viera 2016-10-01 23:09:22 -0400 18)         Object obj3 = factory.get(HashMap.class);\n9ccc01a2 (Julio Viera 2016-10-01 23:09:22 -0400 19) \n",
            "commit_hashes": {
                "9ccc01a2": "    Caches the instances of `ExclusionByValueStrategy` #31"
            },
            "Commit&issueIDs": {
                "9ccc01a2": [
                    "#31"
                ]
            },
            "links": [
                "https://github.com/julman99/gson-fire/issues/31",
                "https://github.com/julman99/gson-fire/commit/9ccc01a2"
            ]
        },
        {
            "poj_link": "https://github.com/tikv/client-java/",
            "file_path": "tikv/client-java/src/test/java/org/tikv/common/TiConfigurationTest.java",
            "test_name": "testGrpcHealthCheckTimeoutValue",
            "FQS": "org.tikv.common.TiConfigurationTest.testGrpcHealthCheckTimeoutValue()",
            "start_line": "49",
            "blame_result": "d8841e7fed1 (Xiaoguang Sun 2021-12-10 03:53:39 +0800 50)     TiConfiguration conf = TiConfiguration.createDefault();\nd8841e7fed1 (Xiaoguang Sun 2021-12-10 03:53:39 +0800 51)     // default value\n2eb77d68919 (humengyu      2021-12-10 23:55:11 +0800 52)     Assert.assertEquals(\n2eb77d68919 (humengyu      2021-12-10 23:55:11 +0800 53)         TiConfiguration.getInt(TIKV_GRPC_HEALTH_CHECK_TIMEOUT), conf.getGrpcHealthCheckTimeout());\n2eb77d68919 (humengyu      2021-12-10 23:55:11 +0800 54)     // new value\n",
            "commit_hashes": {
                "d8841e7fed1": "    [close #380] make gRPC idle timeout configurable (#379)",
                "2eb77d68919": "    [close #370] make gRPC and TiKV health check configurable (#369)"
            },
            "Commit&issueIDs": {
                "d8841e7fed1": [
                    "379"
                ],
                "2eb77d68919": [
                    "369"
                ]
            },
            "links": [
                "https://github.com/tikv/client-java/issues/379",
                "https://github.com/tikv/client-java/commit/d8841e7fed1",
                "https://github.com/tikv/client-java/issues/369",
                "https://github.com/tikv/client-java/commit/2eb77d68919"
            ]
        },
        {
            "poj_link": "https://github.com/tikv/client-java/",
            "file_path": "tikv/client-java/src/test/java/org/tikv/common/TiConfigurationTest.java",
            "test_name": "testHealthCheckPeriodDurationValue",
            "FQS": "org.tikv.common.TiConfigurationTest.testHealthCheckPeriodDurationValue()",
            "start_line": "61",
            "blame_result": "d8841e7fed1 (Xiaoguang Sun 2021-12-10 03:53:39 +0800 62)     TiConfiguration conf = TiConfiguration.createDefault();\nd8841e7fed1 (Xiaoguang Sun 2021-12-10 03:53:39 +0800 63)     // default value\n2eb77d68919 (humengyu      2021-12-10 23:55:11 +0800 64)     Assert.assertEquals(\n2eb77d68919 (humengyu      2021-12-10 23:55:11 +0800 65)         TiConfiguration.getInt(TIKV_HEALTH_CHECK_PERIOD_DURATION),\n2eb77d68919 (humengyu      2021-12-10 23:55:11 +0800 66)         conf.getHealthCheckPeriodDuration());\n",
            "commit_hashes": {
                "d8841e7fed1": "    [close #380] make gRPC idle timeout configurable (#379)",
                "2eb77d68919": "    [close #370] make gRPC and TiKV health check configurable (#369)"
            },
            "Commit&issueIDs": {
                "d8841e7fed1": [
                    "379"
                ],
                "2eb77d68919": [
                    "369"
                ]
            },
            "links": [
                "https://github.com/tikv/client-java/issues/379",
                "https://github.com/tikv/client-java/commit/d8841e7fed1",
                "https://github.com/tikv/client-java/issues/369",
                "https://github.com/tikv/client-java/commit/2eb77d68919"
            ]
        },
        {
            "poj_link": "https://github.com/tikv/client-java/",
            "file_path": "tikv/client-java/src/test/java/org/tikv/common/TiConfigurationTest.java",
            "test_name": "testGrpcIdleTimeoutValue",
            "FQS": "org.tikv.common.TiConfigurationTest.testGrpcIdleTimeoutValue()",
            "start_line": "74",
            "blame_result": "d8841e7fed1 (Xiaoguang Sun 2021-12-10 03:53:39 +0800 75)     TiConfiguration conf = TiConfiguration.createDefault();\nd8841e7fed1 (Xiaoguang Sun 2021-12-10 03:53:39 +0800 76)     // default value\nd8841e7fed1 (Xiaoguang Sun 2021-12-10 03:53:39 +0800 77)     assertEquals(TiConfiguration.getInt(ConfigUtils.TIKV_GRPC_IDLE_TIMEOUT), conf.getIdleTimeout());\nd8841e7fed1 (Xiaoguang Sun 2021-12-10 03:53:39 +0800 78)     // new value\nd8841e7fed1 (Xiaoguang Sun 2021-12-10 03:53:39 +0800 79)     int newValue = 100000;\n",
            "commit_hashes": {
                "d8841e7fed1": "    [close #380] make gRPC idle timeout configurable (#379)"
            },
            "Commit&issueIDs": {
                "d8841e7fed1": [
                    "379"
                ]
            },
            "links": [
                "https://github.com/tikv/client-java/issues/379",
                "https://github.com/tikv/client-java/commit/d8841e7fed1"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-databind/",
            "file_path": "FasterXML/jackson-databind/src/test/java/com/fasterxml/jackson/databind/PropertyNameTest.java",
            "test_name": "testMerging",
            "FQS": "com.fasterxml.jackson.databind.PropertyNameTest.testMerging()",
            "start_line": "11",
            "blame_result": "54ad6a20b3 (Tatu Saloranta 2024-02-02 22:08:13 -0800 12)         PropertyName name1 = PropertyName.construct(\"name1\", \"ns1\");\n54ad6a20b3 (Tatu Saloranta 2024-02-02 22:08:13 -0800 13)         PropertyName name2 = PropertyName.construct(\"name2\", \"ns2\");\n54ad6a20b3 (Tatu Saloranta 2024-02-02 22:08:13 -0800 14)         PropertyName empty = PropertyName.construct(\"\", null);\n54ad6a20b3 (Tatu Saloranta 2024-02-02 22:08:13 -0800 15)         PropertyName nsX = PropertyName.construct(\"\", \"nsX\");\n54ad6a20b3 (Tatu Saloranta 2024-02-02 22:08:13 -0800 16) \n",
            "commit_hashes": {
                "54ad6a20b3": "    Fix #4364: add `PropertyName.merge()`, use by AnnotationIntrospectorPair (#4365)"
            },
            "Commit&issueIDs": {
                "54ad6a20b3": [
                    "4365"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-databind/issues/4365",
                "https://github.com/FasterXML/jackson-databind/commit/54ad6a20b3"
            ]
        },
        {
            "poj_link": "https://github.com/CorfuDB/CorfuDB/",
            "file_path": "CorfuDB/CorfuDB/infrastructure/src/test/java/org/corfudb/infrastructure/log/StreamLogDataStoreTest.java",
            "test_name": "testReset",
            "FQS": "org.corfudb.infrastructure.log.StreamLogDataStoreTest.testReset()",
            "start_line": "57",
            "blame_result": "ad018381771c (Viacheslav 2023-06-21 10:22:15 -0700 58)         final int latestAddress = 3;\nad018381771c (Viacheslav 2023-06-21 10:22:15 -0700 59) \n713862808718 (Viacheslav 2019-02-28 17:36:11 -0800 60)         StreamLogDataStore streamLogDs = getStreamLogDataStore();\nad018381771c (Viacheslav 2023-06-21 10:22:15 -0700 61)         streamLogDs.updateStartingAddress(latestAddress);\nad018381771c (Viacheslav 2023-06-21 10:22:15 -0700 62)         assertEquals(latestAddress, streamLogDs.getStartingAddress());\n",
            "commit_hashes": {
                "ad018381771c": "    Delta reset (#3637)",
                "713862808718": "    StreamLogFiles rename variables, catch stream log exceptions, extract StreamLogDataStore (#1759)"
            },
            "Commit&issueIDs": {
                "ad018381771c": [
                    "(#3637)"
                ],
                "713862808718": [
                    "(#1759)"
                ]
            },
            "links": [
                "https://github.com/CorfuDB/CorfuDB/issues/3637",
                "https://github.com/CorfuDB/CorfuDB/commit/ad018381771c",
                "https://github.com/CorfuDB/CorfuDB/issues/1759",
                "https://github.com/CorfuDB/CorfuDB/commit/713862808718"
            ]
        },
        {
            "poj_link": "https://github.com/CorfuDB/CorfuDB/",
            "file_path": "CorfuDB/CorfuDB/test/src/test/java/org/corfudb/runtime/LogReplicationLogicalGroupClientTest.java",
            "test_name": "testClientOperations",
            "FQS": "org.corfudb.runtime.LogReplicationLogicalGroupClientTest.testClientOperations()",
            "start_line": "299",
            "blame_result": "7ee5ed74c399 (Shreay Patel 2023-02-27 09:11:53 -0800 300)         final List<String> destinationsToAdd = Collections.singletonList(destination);\n7ee5ed74c399 (Shreay Patel 2023-02-27 09:11:53 -0800 301)         final List<String> destinationsToAdd1 = Arrays.asList(destination, destination1);\n7ee5ed74c399 (Shreay Patel 2023-02-27 09:11:53 -0800 302)         // Test addDestination does not add same destination twice.\n7ee5ed74c399 (Shreay Patel 2023-02-27 09:11:53 -0800 303)         client.addDestinations(logicalGroup, destinationsToAdd);\n7ee5ed74c399 (Shreay Patel 2023-02-27 09:11:53 -0800 304)         client.addDestinations(logicalGroup, destinationsToAdd1);\n",
            "commit_hashes": {
                "7ee5ed74c399": "    Additional APIs for LR Client: setDestination (#3518)"
            },
            "Commit&issueIDs": {
                "7ee5ed74c399": [
                    "(#3518)"
                ]
            },
            "links": [
                "https://github.com/CorfuDB/CorfuDB/issues/3518",
                "https://github.com/CorfuDB/CorfuDB/commit/7ee5ed74c399"
            ]
        },
        {
            "poj_link": "https://github.com/orientechnologies/orientdb/",
            "file_path": "orientechnologies/orientdb/core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java",
            "test_name": "testEqualSameKeys",
            "FQS": "com.orientechnologies.orient.core.index.OCompositeKeyTest.testEqualSameKeys()",
            "start_line": "25",
            "blame_result": "ff115a5d705 (laa 2014-03-27 16:53:12 +0200 26)     final OCompositeKey compositeKey = new OCompositeKey();\nff115a5d705 (laa 2014-03-27 16:53:12 +0200 27) \nff115a5d705 (laa 2014-03-27 16:53:12 +0200 28)     compositeKey.addKey(\"a\");\nff115a5d705 (laa 2014-03-27 16:53:12 +0200 29)     compositeKey.addKey(\"b\");\nff115a5d705 (laa 2014-03-27 16:53:12 +0200 30) \n",
            "commit_hashes": {
                "ff115a5d705": "    Issue #1707 was fixed."
            },
            "Commit&issueIDs": {
                "ff115a5d705": [
                    "#1707"
                ]
            },
            "links": [
                "https://github.com/orientechnologies/orientdb/issues/1707",
                "https://github.com/orientechnologies/orientdb/commit/ff115a5d705"
            ]
        },
        {
            "poj_link": "https://github.com/orientechnologies/orientdb/",
            "file_path": "orientechnologies/orientdb/core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OClassImplTest.java",
            "test_name": "testCreatePropertyIdKeep",
            "FQS": "com.orientechnologies.orient.core.metadata.schema.OClassImplTest.testCreatePropertyIdKeep()",
            "start_line": "242",
            "blame_result": "b209928741f (enisher 2014-07-10 10:51:41 +0300 243)     final OSchema oSchema = db.getMetadata().getSchema();\n403d5409a63 (tglman  2014-08-19 13:42:08 +0100 244)     OClass oClass = oSchema.createClass(\"Test12\");\n403d5409a63 (tglman  2014-08-19 13:42:08 +0100 245)     OProperty prop = oClass.createProperty(\"test2\", OType.STRING);\n403d5409a63 (tglman  2014-08-19 13:42:08 +0100 246)     Integer id = prop.getId();\n403d5409a63 (tglman  2014-08-19 13:42:08 +0100 247)     oClass.dropProperty(\"test2\");\n",
            "commit_hashes": {
                "b209928741f": "    Fixed issue #2558",
                "403d5409a63": "    first basic global property implementation."
            },
            "Commit&issueIDs": {
                "b209928741f": [
                    "#2558"
                ]
            },
            "links": [
                "https://github.com/orientechnologies/orientdb/issues/2558",
                "https://github.com/orientechnologies/orientdb/commit/b209928741f"
            ]
        },
        {
            "poj_link": "https://github.com/orientechnologies/orientdb/",
            "file_path": "orientechnologies/orientdb/core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java",
            "test_name": "testPartialNotFound",
            "FQS": "com.orientechnologies.orient.core.record.impl.ODocumentSchemalessBinarySerializationTest.testPartialNotFound()",
            "start_line": "961",
            "blame_result": "26a5205aa81 (laa            2020-06-17 13:39:56 +0300 962)     // this test want to do only for ORecordSerializerNetworkV37\na9e2eabe3d2 (Tglman         2019-06-20 14:26:16 +0100 963)     if (serializer instanceof ORecordSerializerNetworkV37) {\ne9a13bf3df1 (tglman         2014-06-30 12:00:16 +0100 964)       ODocument document = new ODocument();\ndacc7784938 (Marko Djurovic 2018-02-23 12:50:25 +0100 965)       document.field(\"name\", \"name\");\ndacc7784938 (Marko Djurovic 2018-02-23 12:50:25 +0100 966)       document.field(\"age\", 20);\n",
            "commit_hashes": {
                "26a5205aa81": "    Code is reformatted using Google code standard.",
                "a9e2eabe3d2": "    t refactor to introduce in the serialization the encryption concepts, side refactors",
                "e9a13bf3df1": "    fixed serializatio tests in the way that they work with both serialization. issue #681",
                "dacc7784938": "    added missing test for ORecordSerializerNetworkV37 serializer"
            },
            "Commit&issueIDs": {
                "e9a13bf3df1": [
                    "#681"
                ]
            },
            "links": [
                "https://github.com/orientechnologies/orientdb/issues/681",
                "https://github.com/orientechnologies/orientdb/commit/e9a13bf3df1"
            ]
        },
        {
            "poj_link": "https://github.com/orientechnologies/orientdb/",
            "file_path": "orientechnologies/orientdb/core/src/test/java/com/orientechnologies/orient/core/storage/index/hashindex/local/v2/HashTableDirectoryV2Test.java",
            "test_name": "changeFirstLevel",
            "FQS": "com.orientechnologies.orient.core.storage.index.hashindex.local.v2.HashTableDirectoryV2Test.changeFirstLevel()",
            "start_line": "108",
            "blame_result": "37ab80ad841 core/src/test/java/com/orientechnologies/orient/core/storage/index/hashindex/local/OHashTableDirectoryTest.java      (laa 2018-10-24 16:07:55 +0300 109)     OAtomicOperation atomicOperation = startTx();\nc3ee1391bb6 core/src/test/java/com/orientechnologies/orient/core/storage/index/hashindex/local/v2/OHashTableDirectoryV2Test.java (laa 2019-10-11 14:52:31 +0300 110)     long[] level = new long[LocalHashTableV2.MAX_LEVEL_SIZE];\n26a5205aa81 core/src/test/java/com/orientechnologies/orient/core/storage/index/hashindex/local/v2/HashTableDirectoryV2Test.java  (laa 2020-06-17 13:39:56 +0300 111)     for (int i = 0; i < level.length; i++) level[i] = i;\nf37c28f481d core/src/test/java/com/orientechnologies/orient/core/index/hashindex/local/OHashTableDirectoryTest.java              (laa 2014-05-16 12:06:03 +0300 112) \n37ab80ad841 core/src/test/java/com/orientechnologies/orient/core/storage/index/hashindex/local/OHashTableDirectoryTest.java      (laa 2018-10-24 16:07:55 +0300 113)     directory.addNewNode((byte) 2, (byte) 3, (byte) 4, level, atomicOperation);\n",
            "commit_hashes": {
                "37ab80ad841": "    Tracking of transactions is made more durable.",
                "c3ee1391bb6": "    Issue #9022 : \"init\" operation was added for bucket of LocalHashTableV2",
                "26a5205aa81": "    Code is reformatted using Google code standard.",
                "f37c28f481d": "    Issue # 1605 hash index directory was moved to direct memory."
            },
            "Commit&issueIDs": {
                "c3ee1391bb6": [
                    "#9022"
                ]
            },
            "links": [
                "https://github.com/orientechnologies/orientdb/issues/9022",
                "https://github.com/orientechnologies/orientdb/commit/c3ee1391bb6"
            ]
        },
        {
            "poj_link": "https://github.com/OpenHFT/Chronicle-Bytes/",
            "file_path": "OpenHFT/Chronicle-Bytes/src/test/java/net/openhft/chronicle/bytes/BytesTest.java",
            "test_name": "testToStringDoesNotChange",
            "FQS": "net.openhft.chronicle.bytes.BytesTest.testToStringDoesNotChange()",
            "start_line": "863",
            "blame_result": "2579bd42d (Peter Lawrey 2022-04-12 10:35:46 +0100 864)         @NotNull Bytes<?> a = alloc1.elasticBytes(16);\n2579bd42d (Peter Lawrey 2022-04-12 10:35:46 +0100 865)         @NotNull Bytes<?> b = alloc1.elasticBytes(16);\n6ff0a65bd (Jerry Shea   2018-11-15 17:22:49 +1100 866)         try {\n6ff0a65bd (Jerry Shea   2018-11-15 17:22:49 +1100 867)             String hello = \"hello\";\n6ff0a65bd (Jerry Shea   2018-11-15 17:22:49 +1100 868)             a.append(hello);\n",
            "commit_hashes": {
                "2579bd42d": "    Make Bytes, BytesIn and ByteOut generic to fix raw type warning https://github.com/OpenHFT/Chronicle-Bytes/issues/358",
                "6ff0a65bd": "    EnumInterner calls toString and can get \"Not available\" when running in debugger #552"
            },
            "Commit&issueIDs": {
                "6ff0a65bd": [
                    "#552"
                ]
            },
            "links": [
                "https://github.com/OpenHFT/Chronicle-Bytes/issues/552",
                "https://github.com/OpenHFT/Chronicle-Bytes/commit/6ff0a65bd"
            ]
        },
        {
            "poj_link": "https://github.com/OpenHFT/Chronicle-Bytes/",
            "file_path": "OpenHFT/Chronicle-Bytes/src/test/java/net/openhft/chronicle/bytes/algo/XxHashTest.java",
            "test_name": "testHashConsistency",
            "FQS": "net.openhft.chronicle.bytes.algo.XxHashTest.testHashConsistency()",
            "start_line": "37",
            "blame_result": "911bad137 (Peter Lawrey 2024-07-01 13:20:26 +0100 38)         byte[] data = \"test data\".getBytes();\n911bad137 (Peter Lawrey 2024-07-01 13:20:26 +0100 39)         BytesStore<?, ?> bytesStore1 = BytesStore.wrap(data);\n911bad137 (Peter Lawrey 2024-07-01 13:20:26 +0100 40)         BytesStore<?, ?> bytesStore2 = BytesStore.wrap(data.clone());\n911bad137 (Peter Lawrey 2024-07-01 13:20:26 +0100 41) \n911bad137 (Peter Lawrey 2024-07-01 13:20:26 +0100 42)         long hash1 = XxHash.INSTANCE.applyAsLong(bytesStore1);\n",
            "commit_hashes": {
                "911bad137": "    Gen/tests (#636)"
            },
            "Commit&issueIDs": {
                "911bad137": [
                    "636"
                ]
            },
            "links": [
                "https://github.com/OpenHFT/Chronicle-Bytes/issues/636",
                "https://github.com/OpenHFT/Chronicle-Bytes/commit/911bad137"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j-contrib/neo4j-graph-algorithms/",
            "file_path": "neo4j-contrib/neo4j-graph-algorithms/tests/src/test/java/org/neo4j/graphalgo/core/utils/paged/HugeLongArrayTest.java",
            "test_name": "shouldHaveSinglePageCursor",
            "FQS": "org.neo4j.graphalgo.core.utils.paged.HugeLongArrayTest.shouldHaveSinglePageCursor()",
            "start_line": "220",
            "blame_result": "bd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 221)         int size = between(100, 200);\nbd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 222)         HugeLongArray array = HugeLongArray.newSingleArray(size, AllocationTracker.EMPTY);\nbd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 223)         array.fill(42L);\na9c5eff01 (Paul Horn 2018-03-15 10:47:12 +0100 224)         HugeLongArray.Cursor cursor = array.cursor(array.newCursor());\nbd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 225) \n",
            "commit_hashes": {
                "bd85f774c": "    optimised long array implementation (#574)",
                "a9c5eff01": "    More HugeLongArray improvements (#578)"
            },
            "Commit&issueIDs": {
                "bd85f774c": [
                    "(#574)"
                ],
                "a9c5eff01": [
                    "(#578)"
                ]
            },
            "links": [
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/574",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/bd85f774c",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/578",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/a9c5eff01"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j-contrib/neo4j-graph-algorithms/",
            "file_path": "neo4j-contrib/neo4j-graph-algorithms/tests/src/test/java/org/neo4j/graphalgo/core/utils/paged/HugeLongArrayTest.java",
            "test_name": "shouldHaveCursorForSinglePage",
            "FQS": "org.neo4j.graphalgo.core.utils.paged.HugeLongArrayTest.shouldHaveCursorForSinglePage()",
            "start_line": "240",
            "blame_result": "bd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 241)         int size = between(100, 200);\nbd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 242)         HugeLongArray array = HugeLongArray.newPagedArray(size, AllocationTracker.EMPTY);\nbd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 243)         array.fill(42L);\na9c5eff01 (Paul Horn 2018-03-15 10:47:12 +0100 244)         HugeLongArray.Cursor cursor = array.cursor(array.newCursor());\nbd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 245) \n",
            "commit_hashes": {
                "bd85f774c": "    optimised long array implementation (#574)",
                "a9c5eff01": "    More HugeLongArray improvements (#578)"
            },
            "Commit&issueIDs": {
                "bd85f774c": [
                    "(#574)"
                ],
                "a9c5eff01": [
                    "(#578)"
                ]
            },
            "links": [
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/574",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/bd85f774c",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/578",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/a9c5eff01"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j-contrib/neo4j-graph-algorithms/",
            "file_path": "neo4j-contrib/neo4j-graph-algorithms/tests/src/test/java/org/neo4j/graphalgo/core/utils/paged/HugeLongArrayTest.java",
            "test_name": "shouldHaveCursorForMultiplePages",
            "FQS": "org.neo4j.graphalgo.core.utils.paged.HugeLongArrayTest.shouldHaveCursorForMultiplePages()",
            "start_line": "260",
            "blame_result": "bd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 261)         int size = between(100_000, 200_000);\nbd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 262)         HugeLongArray array = HugeLongArray.newPagedArray(size, AllocationTracker.EMPTY);\nbd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 263)         array.fill(42L);\na9c5eff01 (Paul Horn 2018-03-15 10:47:12 +0100 264)         HugeLongArray.Cursor cursor = array.cursor(array.newCursor());\nbd85f774c (Paul Horn 2018-03-12 12:35:32 +0100 265) \n",
            "commit_hashes": {
                "bd85f774c": "    optimised long array implementation (#574)",
                "a9c5eff01": "    More HugeLongArray improvements (#578)"
            },
            "Commit&issueIDs": {
                "bd85f774c": [
                    "(#574)"
                ],
                "a9c5eff01": [
                    "(#578)"
                ]
            },
            "links": [
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/574",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/bd85f774c",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/578",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/a9c5eff01"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j-contrib/neo4j-graph-algorithms/",
            "file_path": "neo4j-contrib/neo4j-graph-algorithms/tests/src/test/java/org/neo4j/graphalgo/core/utils/queue/IntMinPriorityQueueTest.java",
            "test_name": "testUpdateIncreasing",
            "FQS": "org.neo4j.graphalgo.core.utils.queue.IntMinPriorityQueueTest.testUpdateIncreasing()",
            "start_line": "154",
            "blame_result": "f10a43719 tests/src/test/java/org/neo4j/graphalgo/core/utils/queue/IntMinPriorityQueueTest.java (Martin    2017-12-13 17:02:26 +0100 155)         final IntPriorityQueue queue = IntPriorityQueue.min();\n9dd0e2dc0 tests/src/test/java/org/neo4j/graphalgo/core/utils/IntMinPriorityQueueTest.java       (Paul Horn 2017-03-24 11:11:28 +0100 156)         final int iterations = RandomizedTest.between(5, 50);\n9dd0e2dc0 tests/src/test/java/org/neo4j/graphalgo/core/utils/IntMinPriorityQueueTest.java       (Paul Horn 2017-03-24 11:11:28 +0100 157)         for (int i = 1; i <= iterations; i++) {\nb24b58c5e tests/src/test/java/org/neo4j/graphalgo/core/utils/queue/IntMinPriorityQueueTest.java (Paul Horn 2018-04-14 23:26:47 +0200 158)             queue.add(i, exclusiveDouble(50d, 100d));\nb24b58c5e tests/src/test/java/org/neo4j/graphalgo/core/utils/queue/IntMinPriorityQueueTest.java (Paul Horn 2018-04-14 23:26:47 +0200 159)         }\n",
            "commit_hashes": {
                "f10a43719": "    Fix MinimumSpanningTree for huge graphs (#511)",
                "9dd0e2dc0": "    First Draft Graph Loaders and API first algorithms (#4)",
                "b24b58c5e": "    Fixing SSSP/D for cases where a node is queued multiple times before being traversed. (#600)"
            },
            "Commit&issueIDs": {
                "f10a43719": [
                    "(#511)"
                ],
                "9dd0e2dc0": [
                    "(#4)"
                ],
                "b24b58c5e": [
                    "(#600)"
                ]
            },
            "links": [
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/511",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/f10a43719",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/4",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/9dd0e2dc0",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/600",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/b24b58c5e"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j-contrib/neo4j-graph-algorithms/",
            "file_path": "neo4j-contrib/neo4j-graph-algorithms/tests/src/test/java/org/neo4j/graphalgo/core/utils/queue/IntMinPriorityQueueTest.java",
            "test_name": "testUpdateNotExisting",
            "FQS": "org.neo4j.graphalgo.core.utils.queue.IntMinPriorityQueueTest.testUpdateNotExisting()",
            "start_line": "170",
            "blame_result": "f10a43719 tests/src/test/java/org/neo4j/graphalgo/core/utils/queue/IntMinPriorityQueueTest.java (Martin    2017-12-13 17:02:26 +0100 171)         final IntPriorityQueue queue = IntPriorityQueue.min();\nb24b58c5e tests/src/test/java/org/neo4j/graphalgo/core/utils/queue/IntMinPriorityQueueTest.java (Paul Horn 2018-04-14 23:26:47 +0200 172) \n9dd0e2dc0 tests/src/test/java/org/neo4j/graphalgo/core/utils/IntMinPriorityQueueTest.java       (Paul Horn 2017-03-24 11:11:28 +0100 173)         final int iterations = RandomizedTest.between(5, 50);\nb24b58c5e tests/src/test/java/org/neo4j/graphalgo/core/utils/queue/IntMinPriorityQueueTest.java (Paul Horn 2018-04-14 23:26:47 +0200 174)         double maxWeight = Double.NEGATIVE_INFINITY;\n9dd0e2dc0 tests/src/test/java/org/neo4j/graphalgo/core/utils/IntMinPriorityQueueTest.java       (Paul Horn 2017-03-24 11:11:28 +0100 175)         for (int i = 1; i <= iterations; i++) {\n",
            "commit_hashes": {
                "f10a43719": "    Fix MinimumSpanningTree for huge graphs (#511)",
                "b24b58c5e": "    Fixing SSSP/D for cases where a node is queued multiple times before being traversed. (#600)",
                "9dd0e2dc0": "    First Draft Graph Loaders and API first algorithms (#4)"
            },
            "Commit&issueIDs": {
                "f10a43719": [
                    "(#511)"
                ],
                "b24b58c5e": [
                    "(#600)"
                ],
                "9dd0e2dc0": [
                    "(#4)"
                ]
            },
            "links": [
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/511",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/f10a43719",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/600",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/b24b58c5e",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/4",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/9dd0e2dc0"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j-contrib/neo4j-graph-algorithms/",
            "file_path": "neo4j-contrib/neo4j-graph-algorithms/tests/src/test/java/org/neo4j/graphalgo/impl/KSpanningTreeTest.java",
            "test_name": "testMaximumKSpanningTree",
            "FQS": "org.neo4j.graphalgo.impl.KSpanningTreeTest.testMaximumKSpanningTree()",
            "start_line": "112",
            "blame_result": "c84ec35e8 (Martin 2017-12-19 09:34:33 +0100 113)         final SpanningTree spanningTree = new KSpanningTree(graph, graph, graph)\nc84ec35e8 (Martin 2017-12-19 09:34:33 +0100 114)                 .compute(a, 2, true)\nc84ec35e8 (Martin 2017-12-19 09:34:33 +0100 115)                 .getSpanningTree();\nc84ec35e8 (Martin 2017-12-19 09:34:33 +0100 116) \nc84ec35e8 (Martin 2017-12-19 09:34:33 +0100 117)         assertEquals(spanningTree.head(a), spanningTree.head(b));\n",
            "commit_hashes": {
                "c84ec35e8": "    K spanning tree (#516)"
            },
            "Commit&issueIDs": {
                "c84ec35e8": [
                    "(#516)"
                ]
            },
            "links": [
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/516",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/c84ec35e8"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j-contrib/neo4j-graph-algorithms/",
            "file_path": "neo4j-contrib/neo4j-graph-algorithms/tests/src/test/java/org/neo4j/graphalgo/impl/KSpanningTreeTest.java",
            "test_name": "testMinimumKSpanningTree",
            "FQS": "org.neo4j.graphalgo.impl.KSpanningTreeTest.testMinimumKSpanningTree()",
            "start_line": "125",
            "blame_result": "c84ec35e8 (Martin 2017-12-19 09:34:33 +0100 126)         final SpanningTree spanningTree = new KSpanningTree(graph, graph, graph)\nc84ec35e8 (Martin 2017-12-19 09:34:33 +0100 127)                 .compute(a, 2, false)\nc84ec35e8 (Martin 2017-12-19 09:34:33 +0100 128)                 .getSpanningTree();\nc84ec35e8 (Martin 2017-12-19 09:34:33 +0100 129) \nc84ec35e8 (Martin 2017-12-19 09:34:33 +0100 130)         assertEquals(spanningTree.head(a), spanningTree.head(d));\n",
            "commit_hashes": {
                "c84ec35e8": "    K spanning tree (#516)"
            },
            "Commit&issueIDs": {
                "c84ec35e8": [
                    "(#516)"
                ]
            },
            "links": [
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/516",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/c84ec35e8"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j-contrib/neo4j-graph-algorithms/",
            "file_path": "neo4j-contrib/neo4j-graph-algorithms/tests/src/test/java/org/neo4j/graphalgo/impl/WeightedPathTest.java",
            "test_name": "testEquality",
            "FQS": "org.neo4j.graphalgo.impl.WeightedPathTest.testEquality()",
            "start_line": "66",
            "blame_result": "f6c4a557f (Martin 2018-05-02 14:15:17 +0200 67)         final WeightedPath a = new WeightedPath(3);\nf6c4a557f (Martin 2018-05-02 14:15:17 +0200 68)         final WeightedPath b = new WeightedPath(3);\nf6c4a557f (Martin 2018-05-02 14:15:17 +0200 69)         a.append(0);\nf6c4a557f (Martin 2018-05-02 14:15:17 +0200 70)         a.append(1);\nf6c4a557f (Martin 2018-05-02 14:15:17 +0200 71)         b.append(0);\n",
            "commit_hashes": {
                "f6c4a557f": "    Yens K shortest paths algorithm (#575)"
            },
            "Commit&issueIDs": {
                "f6c4a557f": [
                    "(#575)"
                ]
            },
            "links": [
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/issues/575",
                "https://github.com/neo4j-contrib/neo4j-graph-algorithms/commit/f6c4a557f"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-databind/",
            "file_path": "FasterXML/jackson-databind/src/test/java/com/fasterxml/jackson/databind/type/TypeBindingsTest.java",
            "test_name": "testEqualityAndHashCode",
            "FQS": "com.fasterxml.jackson.databind.type.TypeBindingsTest.testEqualityAndHashCode()",
            "start_line": "100",
            "blame_result": "9906b135a0 src/test/java/com/fasterxml/jackson/databind/type/TestTypeBindings.java (Carter Kozak 2023-04-12 23:16:07 -0400 101)     {\n9906b135a0 src/test/java/com/fasterxml/jackson/databind/type/TestTypeBindings.java (Carter Kozak 2023-04-12 23:16:07 -0400 102)         JavaType stringType = DEFAULT_TF.constructType(String.class);\n9906b135a0 src/test/java/com/fasterxml/jackson/databind/type/TestTypeBindings.java (Carter Kozak 2023-04-12 23:16:07 -0400 103)         JavaType integerType = DEFAULT_TF.constructType(Integer.class);\n9906b135a0 src/test/java/com/fasterxml/jackson/databind/type/TestTypeBindings.java (Carter Kozak 2023-04-12 23:16:07 -0400 104)         TypeBindings listStringBindings = TypeBindings.create(List.class, stringType);\n9906b135a0 src/test/java/com/fasterxml/jackson/databind/type/TestTypeBindings.java (Carter Kozak 2023-04-12 23:16:07 -0400 105)         TypeBindings listStringBindingsWithUnbound = listStringBindings.withUnboundVariable(\"X\");\n",
            "commit_hashes": {
                "9906b135a0": "    #3876 Fix TypeFactory cache performance degradation with `constructSpecializedType` (#3875)"
            },
            "Commit&issueIDs": {
                "9906b135a0": [
                    "#3876",
                    "3875"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-databind/issues/3876",
                "https://github.com/FasterXML/jackson-databind/commit/9906b135a0"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-databind/",
            "file_path": "FasterXML/jackson-databind/src/test/java/com/fasterxml/jackson/databind/type/TypeFactoryTest.java",
            "test_name": "testMoreSpecificType",
            "FQS": "com.fasterxml.jackson.databind.type.TypeFactoryTest.testMoreSpecificType()",
            "start_line": "719",
            "blame_result": "7a324d69d1 src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java (Tatu Saloranta 2012-11-19 20:26:11 -0800 720)     {\n9920240fe7 src/test/java/com/fasterxml/jackson/databind/type/TypeFactoryTest.java (Tatu Saloranta 2024-10-11 13:40:54 -0700 721)         JavaType t1 = TF.constructCollectionType(Collection.class, Object.class);\n9920240fe7 src/test/java/com/fasterxml/jackson/databind/type/TypeFactoryTest.java (Tatu Saloranta 2024-10-11 13:40:54 -0700 722)         JavaType t2 = TF.constructCollectionType(List.class, Object.class);\n9920240fe7 src/test/java/com/fasterxml/jackson/databind/type/TypeFactoryTest.java (Tatu Saloranta 2024-10-11 13:40:54 -0700 723)         assertSame(t2, TF.moreSpecificType(t1, t2));\n9920240fe7 src/test/java/com/fasterxml/jackson/databind/type/TypeFactoryTest.java (Tatu Saloranta 2024-10-11 13:40:54 -0700 724)         assertSame(t2, TF.moreSpecificType(t2, t1));\n",
            "commit_hashes": {
                "7a324d69d1": "    Trying to straighten out type handling, related to schema generation",
                "9920240fe7": "    Convert rest of TypeFactory.defaultInstance() for test code (#4746)"
            },
            "Commit&issueIDs": {
                "9920240fe7": [
                    "4746"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-databind/issues/4746",
                "https://github.com/FasterXML/jackson-databind/commit/9920240fe7"
            ]
        },
        {
            "poj_link": "https://github.com/trivago/cluecumber/",
            "file_path": "trivago/cluecumber/engine/src/test/java/com/trivago/cluecumber/engine/files/FileIOTest.java",
            "test_name": "fileReadWriteTest",
            "FQS": "com.trivago.cluecumber.engine.files.FileIOTest.fileReadWriteTest()",
            "start_line": "29",
            "blame_result": "9d831d86 (Benjamin Bischoff 2022-12-02 15:20:53 +0100 30)         String testString = \"This is a test!\";\n9d831d86 (Benjamin Bischoff 2022-12-02 15:20:53 +0100 31)         String path = testFolder.toString().concat(\"/test.tmp\");\n9d831d86 (Benjamin Bischoff 2022-12-02 15:20:53 +0100 32)         fileIO.writeContentToFile(testString, path);\n9d831d86 (Benjamin Bischoff 2022-12-02 15:20:53 +0100 33)         assertEquals(fileIO.readContentFromFile(path), testString);\n9d831d86 (Benjamin Bischoff 2022-12-02 15:20:53 +0100 34)     }\n",
            "commit_hashes": {
                "9d831d86": "    cluecumber 3.0.0 (#298)"
            },
            "Commit&issueIDs": {
                "9d831d86": [
                    "(#298)"
                ]
            },
            "links": [
                "https://github.com/trivago/cluecumber/issues/298",
                "https://github.com/trivago/cluecumber/commit/9d831d86"
            ]
        },
        {
            "poj_link": "https://github.com/patrickfav/bcrypt/",
            "file_path": "patrickfav/bcrypt/modules/bcrypt/src/test/java/at/favre/lib/crypto/bcrypt/BcryptTest.java",
            "test_name": "testVersionPojoMethods",
            "FQS": "at.favre.lib.crypto.bcrypt.BcryptTest.testVersionPojoMethods()",
            "start_line": "402",
            "blame_result": "d77987ee modules/bcrypt/src/test/java/at/favre/lib/crypto/bcrypt/BcryptTest.java (Thomas Quinot       2023-02-06 23:27:38 +0100 403)         assertEquals(BCrypt.Version.VERSION_2A, new BCrypt.Version(new byte[]{MAJOR_VERSION, 0x61}, true, true, BCrypt.Version.MAX_PW_LENGTH_BYTE, null, null));\nd77987ee modules/bcrypt/src/test/java/at/favre/lib/crypto/bcrypt/BcryptTest.java (Thomas Quinot       2023-02-06 23:27:38 +0100 404)         assertEquals(BCrypt.Version.VERSION_2Y, new BCrypt.Version(new byte[]{MAJOR_VERSION, 0x79}, true, true, BCrypt.Version.MAX_PW_LENGTH_BYTE, null, null));\n994c8c6d modules/bcrypt/src/test/java/at/favre/lib/crypto/bcrypt/BcryptTest.java (Patrick Favre-Bulle 2019-10-21 23:15:33 +0200 405)         assertEquals(BCrypt.Version.VERSION_2Y_NO_NULL_TERMINATOR, new BCrypt.Version(new byte[]{MAJOR_VERSION, 0x79}, true, false, BCrypt.Version.MAX_PW_LENGTH_BYTE, null, null));\n0eeb0a82 src/test/java/at/favre/lib/crypto/bcrypt/BcryptTest.java                (Patrick Favre-Bulle 2018-07-12 17:32:06 +0200 406)         assertNotEquals(BCrypt.Version.VERSION_2Y, BCrypt.Version.VERSION_2A);\n0eeb0a82 src/test/java/at/favre/lib/crypto/bcrypt/BcryptTest.java                (Patrick Favre-Bulle 2018-07-12 17:32:06 +0200 407)         assertNotEquals(BCrypt.Version.VERSION_2A, BCrypt.Version.VERSION_2B);\n",
            "commit_hashes": {
                "d77987ee": "    Fix maximum password length enforcement",
                "994c8c6d": "    Allow for custom max password length in 'Version' #22",
                "0eeb0a82": "    Add test for BcryptTest.Version Pojo Methods"
            },
            "Commit&issueIDs": {
                "994c8c6d": [
                    "#22"
                ]
            },
            "links": [
                "https://github.com/patrickfav/bcrypt/issues/22",
                "https://github.com/patrickfav/bcrypt/commit/994c8c6d"
            ]
        },
        {
            "poj_link": "https://github.com/microsoft/botbuilder-java/",
            "file_path": "microsoft/botbuilder-java/libraries/bot-ai-qna/src/test/java/com/microsoft/bot/ai/qna/QnAMakerTraceInfoTests.java",
            "test_name": "qnaMakerTraceInfoSerialization",
            "FQS": "com.microsoft.bot.ai.qna.QnAMakerTraceInfoTests.qnaMakerTraceInfoSerialization()",
            "start_line": "19",
            "blame_result": "e01aef132 (Martin Battaglino 2021-03-29 10:43:15 -0300 20)         QueryResult queryResult = new QueryResult();\ne01aef132 (Martin Battaglino 2021-03-29 10:43:15 -0300 21)         queryResult.setQuestions(new String[] { \"What's your name?\" });\ne01aef132 (Martin Battaglino 2021-03-29 10:43:15 -0300 22)         queryResult.setAnswer(\"My name is Mike\");\ne01aef132 (Martin Battaglino 2021-03-29 10:43:15 -0300 23)         queryResult.setScore(0.9f);\ne01aef132 (Martin Battaglino 2021-03-29 10:43:15 -0300 24)         QueryResult[] queryResults = new QueryResult[] { queryResult };\n",
            "commit_hashes": {
                "e01aef132": "    [Samples & SDK] Replace Double Brace initialization with Standard Initialization (#1103)"
            },
            "Commit&issueIDs": {
                "e01aef132": [
                    "1103"
                ]
            },
            "links": [
                "https://github.com/microsoft/botbuilder-java/issues/1103",
                "https://github.com/microsoft/botbuilder-java/commit/e01aef132"
            ]
        },
        {
            "poj_link": "https://github.com/microsoft/botbuilder-java/",
            "file_path": "microsoft/botbuilder-java/libraries/bot-azure/src/test/java/com/microsoft/bot/azure/CosmosDBKeyEscapeTests.java",
            "test_name": "collisionsShouldNotHappen",
            "FQS": "com.microsoft.bot.azure.CosmosDBKeyEscapeTests.collisionsShouldNotHappen()",
            "start_line": "98",
            "blame_result": "5066b5747 (Victor Grycuk 2021-02-26 18:39:53 -0300  99)     {\n5066b5747 (Victor Grycuk 2021-02-26 18:39:53 -0300 100)         String validKey = \"*2atest*2a\";\n5066b5747 (Victor Grycuk 2021-02-26 18:39:53 -0300 101)         String validKey2 = \"*test*\";\n5066b5747 (Victor Grycuk 2021-02-26 18:39:53 -0300 102) \n5066b5747 (Victor Grycuk 2021-02-26 18:39:53 -0300 103)         // If we failed to esacpe the \"*\", then validKey2 would\n",
            "commit_hashes": {
                "5066b5747": "    [SDK][Bot-Azure] Add CosmosDbPartitionedStorage component (#1024)"
            },
            "Commit&issueIDs": {
                "5066b5747": [
                    "1024"
                ]
            },
            "links": [
                "https://github.com/microsoft/botbuilder-java/issues/1024",
                "https://github.com/microsoft/botbuilder-java/commit/5066b5747"
            ]
        },
        {
            "poj_link": "https://github.com/microsoft/botbuilder-java/",
            "file_path": "microsoft/botbuilder-java/libraries/bot-schema/src/test/java/com/microsoft/bot/schema/ActivityTest.java",
            "test_name": "ActivityCloneTest",
            "FQS": "com.microsoft.bot.schema.ActivityTest.ActivityCloneTest()",
            "start_line": "798",
            "blame_result": "2574aa61f libraries/bot-schema/src/main/java/com/microsoft/bot/schema/Activity.java     (Martin Battaglino 2021-03-12 16:48:15 -0300 799)         Activity activity = new Activity(ActivityTypes.MESSAGE);\nff7caa4dd libraries/bot-schema/src/test/java/com/microsoft/bot/schema/ActivityTest.java (Lee Parrish       2021-04-26 10:04:33 -0500 800)         activity.setAction(\"TestAction\");\nff7caa4dd libraries/bot-schema/src/test/java/com/microsoft/bot/schema/ActivityTest.java (Lee Parrish       2021-04-26 10:04:33 -0500 801) \n5a5271cc4 libraries/bot-schema/src/test/java/com/microsoft/bot/schema/ActivityTest.java (Cecilia Avila     2020-06-26 14:46:03 -0300 802)         Attachment attachment = new Attachment();\nff7caa4dd libraries/bot-schema/src/test/java/com/microsoft/bot/schema/ActivityTest.java (Lee Parrish       2021-04-26 10:04:33 -0500 803)         attachment.setContentType(\"testContentType\");\n",
            "commit_hashes": {
                "2574aa61f": "    [Samples] Add 25.message-reaction sample (#1055)",
                "ff7caa4dd": "    Add additional unit test coverage (#1185)",
                "5a5271cc4": "    Add tests for HasContent method"
            },
            "Commit&issueIDs": {
                "2574aa61f": [
                    "1055"
                ],
                "ff7caa4dd": [
                    "1185"
                ]
            },
            "links": [
                "https://github.com/microsoft/botbuilder-java/issues/1055",
                "https://github.com/microsoft/botbuilder-java/commit/2574aa61f",
                "https://github.com/microsoft/botbuilder-java/issues/1185",
                "https://github.com/microsoft/botbuilder-java/commit/ff7caa4dd"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/ExternalTableDefinitionTest.java",
            "test_name": "testToBuilderIncomplete",
            "FQS": "com.google.cloud.bigquery.ExternalTableDefinitionTest.testToBuilderIncomplete()",
            "start_line": "107",
            "blame_result": "ec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 108)     ExternalTableDefinition externalTableDefinition =\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 109)         ExternalTableDefinition.of(SOURCE_URIS, TABLE_SCHEMA, FormatOptions.json());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 110)     assertEquals(externalTableDefinition, externalTableDefinition.toBuilder().build());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 111)   }\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 112) \n",
            "commit_hashes": {
                "ec0dc4908": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "ec0dc4908": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/3251",
                "https://github.com/googleapis/java-bigquery/commit/ec0dc4908"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j/neo4j-java-driver/",
            "file_path": "neo4j/neo4j-java-driver/driver/src/test/java/org/neo4j/driver/SessionConfigTest.java",
            "test_name": "shouldTwoConfigBeEqual",
            "FQS": "org.neo4j.driver.SessionConfigTest.shouldTwoConfigBeEqual()",
            "start_line": "191",
            "blame_result": "41b0d568f (Dmitriy Tverdiakov 2023-07-07 15:57:04 +0100 192)         var config1 = builder().withFetchSize(100).build();\n41b0d568f (Dmitriy Tverdiakov 2023-07-07 15:57:04 +0100 193)         var config2 = builder().withFetchSize(100).build();\n36eb748f1 (Zhen Li            2019-10-10 17:57:16 +0200 194) \n7c2fb47fb (injectives         2022-05-19 15:52:11 +0100 195)         assertEquals(config1, config2);\n36eb748f1 (Zhen Li            2019-10-10 17:57:16 +0200 196)     }\n",
            "commit_hashes": {
                "41b0d568f": "    Update to using the local variable type inference in tests (#1448)",
                "36eb748f1": "    Adding `fetchSize` at driver config and session config.",
                "7c2fb47fb": "    Add spotless-maven-plugin for Java formatting (#1227)"
            },
            "Commit&issueIDs": {
                "41b0d568f": [
                    "(#1448)"
                ],
                "7c2fb47fb": [
                    "(#1227)"
                ]
            },
            "links": [
                "https://github.com/neo4j/neo4j-java-driver/issues/1448",
                "https://github.com/neo4j/neo4j-java-driver/commit/41b0d568f",
                "https://github.com/neo4j/neo4j-java-driver/issues/1227",
                "https://github.com/neo4j/neo4j-java-driver/commit/7c2fb47fb"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j/neo4j-java-driver/",
            "file_path": "neo4j/neo4j-java-driver/driver/src/test/java/org/neo4j/driver/internal/InternalBookmarkTest.java",
            "test_name": "shouldSetToEmptyForEmptyBookmarkIterator",
            "FQS": "org.neo4j.driver.internal.InternalBookmarkTest.shouldSetToEmptyForEmptyBookmarkIterator()",
            "start_line": "55",
            "blame_result": "41b0d568f (Dmitriy Tverdiakov 2023-07-07 15:57:04 +0100 56)         var bookmark = InternalBookmark.from(emptyList());\n7c2fb47fb (injectives         2022-05-19 15:52:11 +0100 57)         assertEquals(InternalBookmark.empty(), bookmark);\n143cc473b (Zhen Li            2019-07-25 17:26:22 +0200 58)     }\n143cc473b (Zhen Li            2019-07-25 17:26:22 +0200 59) \n143cc473b (Zhen Li            2019-07-25 17:26:22 +0200 60)     @Test\n",
            "commit_hashes": {
                "41b0d568f": "    Update to using the local variable type inference in tests (#1448)",
                "7c2fb47fb": "    Add spotless-maven-plugin for Java formatting (#1227)",
                "143cc473b": "    Passing bookmark to rediscover service"
            },
            "Commit&issueIDs": {
                "41b0d568f": [
                    "(#1448)"
                ],
                "7c2fb47fb": [
                    "(#1227)"
                ]
            },
            "links": [
                "https://github.com/neo4j/neo4j-java-driver/issues/1448",
                "https://github.com/neo4j/neo4j-java-driver/commit/41b0d568f",
                "https://github.com/neo4j/neo4j-java-driver/issues/1227",
                "https://github.com/neo4j/neo4j-java-driver/commit/7c2fb47fb"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j/neo4j-java-driver/",
            "file_path": "neo4j/neo4j-java-driver/driver/src/test/java/org/neo4j/driver/internal/InternalBookmarkTest.java",
            "test_name": "shouldIgnoreNullAndEmptyInBookmarkList",
            "FQS": "org.neo4j.driver.internal.InternalBookmarkTest.shouldIgnoreNullAndEmptyInBookmarkList()",
            "start_line": "67",
            "blame_result": "41b0d568f (Dmitriy Tverdiakov 2023-07-07 15:57:04 +0100 68)         var bookmark = InternalBookmark.from(Arrays.asList(InternalBookmark.empty(), null, null));\n7c2fb47fb (injectives         2022-05-19 15:52:11 +0100 69)         assertEquals(InternalBookmark.empty(), bookmark);\n143cc473b (Zhen Li            2019-07-25 17:26:22 +0200 70)     }\n143cc473b (Zhen Li            2019-07-25 17:26:22 +0200 71) \n143cc473b (Zhen Li            2019-07-25 17:26:22 +0200 72)     @Test\n",
            "commit_hashes": {
                "41b0d568f": "    Update to using the local variable type inference in tests (#1448)",
                "7c2fb47fb": "    Add spotless-maven-plugin for Java formatting (#1227)",
                "143cc473b": "    Passing bookmark to rediscover service"
            },
            "Commit&issueIDs": {
                "41b0d568f": [
                    "(#1448)"
                ],
                "7c2fb47fb": [
                    "(#1227)"
                ]
            },
            "links": [
                "https://github.com/neo4j/neo4j-java-driver/issues/1448",
                "https://github.com/neo4j/neo4j-java-driver/commit/41b0d568f",
                "https://github.com/neo4j/neo4j-java-driver/issues/1227",
                "https://github.com/neo4j/neo4j-java-driver/commit/7c2fb47fb"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j/neo4j-java-driver/",
            "file_path": "neo4j/neo4j-java-driver/driver/src/test/java/org/neo4j/driver/internal/ValuesTest.java",
            "test_name": "shouldConvertPrimitiveArrays",
            "FQS": "org.neo4j.driver.internal.ValuesTest.shouldConvertPrimitiveArrays()",
            "start_line": "77",
            "blame_result": "7c2fb47fb (injectives  2022-05-19 15:52:11 +0100 78)         assertThat(value(new short[] {1, 2, 3}), equalTo(new ListValue(values(1, 2, 3))));\ncecaddf38 (Dirk Mahler 2021-07-26 15:02:46 +0200 79) \n7c2fb47fb (injectives  2022-05-19 15:52:11 +0100 80)         assertThat(value(new int[] {1, 2, 3}), equalTo(new ListValue(values(1, 2, 3))));\nfa6bbd173 (Zhen        2015-04-23 17:02:07 +0200 81) \n7c2fb47fb (injectives  2022-05-19 15:52:11 +0100 82)         assertThat(value(new long[] {1, 2, 3}), equalTo(new ListValue(values(1, 2, 3))));\n",
            "commit_hashes": {
                "7c2fb47fb": "    Add spotless-maven-plugin for Java formatting (#1227)",
                "cecaddf38": "    Added value conversion for char[] and short[] (#966)",
                "fa6bbd173": "    Java client driver for neo4j"
            },
            "Commit&issueIDs": {
                "7c2fb47fb": [
                    "(#1227)"
                ],
                "cecaddf38": [
                    "(#966)"
                ]
            },
            "links": [
                "https://github.com/neo4j/neo4j-java-driver/issues/1227",
                "https://github.com/neo4j/neo4j-java-driver/commit/7c2fb47fb",
                "https://github.com/neo4j/neo4j-java-driver/issues/966",
                "https://github.com/neo4j/neo4j-java-driver/commit/cecaddf38"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j/neo4j-java-driver/",
            "file_path": "neo4j/neo4j-java-driver/driver/src/test/java/org/neo4j/driver/internal/ValuesTest.java",
            "test_name": "shouldConvertPrimitiveArraysFromObject",
            "FQS": "org.neo4j.driver.internal.ValuesTest.shouldConvertPrimitiveArraysFromObject()",
            "start_line": "96",
            "blame_result": "7c2fb47fb (injectives  2022-05-19 15:52:11 +0100  97)         assertThat(value((Object) new short[] {1, 2, 3}), equalTo(new ListValue(values(1, 2, 3))));\ncecaddf38 (Dirk Mahler 2021-07-26 15:02:46 +0200  98) \n7c2fb47fb (injectives  2022-05-19 15:52:11 +0100  99)         assertThat(value((Object) new int[] {1, 2, 3}), equalTo(new ListValue(values(1, 2, 3))));\ncecaddf38 (Dirk Mahler 2021-07-26 15:02:46 +0200 100) \n7c2fb47fb (injectives  2022-05-19 15:52:11 +0100 101)         assertThat(value((Object) new long[] {1, 2, 3}), equalTo(new ListValue(values(1, 2, 3))));\n",
            "commit_hashes": {
                "7c2fb47fb": "    Add spotless-maven-plugin for Java formatting (#1227)",
                "cecaddf38": "    Added value conversion for char[] and short[] (#966)"
            },
            "Commit&issueIDs": {
                "7c2fb47fb": [
                    "(#1227)"
                ],
                "cecaddf38": [
                    "(#966)"
                ]
            },
            "links": [
                "https://github.com/neo4j/neo4j-java-driver/issues/1227",
                "https://github.com/neo4j/neo4j-java-driver/commit/7c2fb47fb",
                "https://github.com/neo4j/neo4j-java-driver/issues/966",
                "https://github.com/neo4j/neo4j-java-driver/commit/cecaddf38"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j/neo4j-java-driver/",
            "file_path": "neo4j/neo4j-java-driver/driver/src/test/java/org/neo4j/driver/internal/ValuesTest.java",
            "test_name": "equalityRules",
            "FQS": "org.neo4j.driver.internal.ValuesTest.equalityRules()",
            "start_line": "123",
            "blame_result": "7c2fb47fb (injectives 2022-05-19 15:52:11 +0100 124)         assertEquals(value(1), value(1));\n7c2fb47fb (injectives 2022-05-19 15:52:11 +0100 125)         assertEquals(value(Long.MAX_VALUE), value(Long.MAX_VALUE));\n7c2fb47fb (injectives 2022-05-19 15:52:11 +0100 126)         assertEquals(value(Long.MIN_VALUE), value(Long.MIN_VALUE));\n7c2fb47fb (injectives 2022-05-19 15:52:11 +0100 127)         assertNotEquals(value(1), value(2));\nfa6bbd173 (Zhen       2015-04-23 17:02:07 +0200 128) \n",
            "commit_hashes": {
                "7c2fb47fb": "    Add spotless-maven-plugin for Java formatting (#1227)",
                "fa6bbd173": "    Java client driver for neo4j"
            },
            "Commit&issueIDs": {
                "7c2fb47fb": [
                    "(#1227)"
                ]
            },
            "links": [
                "https://github.com/neo4j/neo4j-java-driver/issues/1227",
                "https://github.com/neo4j/neo4j-java-driver/commit/7c2fb47fb"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/FieldValueTest.java",
            "test_name": "testFromPb",
            "FQS": "com.google.cloud.bigquery.FieldValueTest.testFromPb()",
            "start_line": "68",
            "blame_result": "ec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 69)     FieldValue value = FieldValue.fromPb(BOOLEAN_FIELD);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 70)     assertEquals(FieldValue.Attribute.PRIMITIVE, value.getAttribute());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 71)     assertFalse(value.getBooleanValue());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 72)     value = FieldValue.fromPb(INTEGER_FIELD);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 73)     assertEquals(FieldValue.Attribute.PRIMITIVE, value.getAttribute());\n",
            "commit_hashes": {
                "ec0dc4908": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "ec0dc4908": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/3251",
                "https://github.com/googleapis/java-bigquery/commit/ec0dc4908"
            ]
        },
        {
            "poj_link": "https://github.com/neo4j/neo4j-java-driver/",
            "file_path": "neo4j/neo4j-java-driver/driver/src/test/java/org/neo4j/driver/internal/bolt/api/DatabaseNameUtilTest.java",
            "test_name": "shouldDatabaseNameBeEqual",
            "FQS": "org.neo4j.driver.internal.bolt.api.DatabaseNameUtilTest.shouldDatabaseNameBeEqual()",
            "start_line": "31",
            "blame_result": "7c2fb47fbe driver/src/test/java/org/neo4j/driver/internal/DatabaseNameUtilTest.java (injectives 2022-05-19 15:52:11 +0100 32)         assertEquals(defaultDatabase(), defaultDatabase());\n7c2fb47fbe driver/src/test/java/org/neo4j/driver/internal/DatabaseNameUtilTest.java (injectives 2022-05-19 15:52:11 +0100 33)         assertEquals(defaultDatabase(), database(null));\n7c2fb47fbe driver/src/test/java/org/neo4j/driver/internal/DatabaseNameUtilTest.java (injectives 2022-05-19 15:52:11 +0100 34)         assertEquals(defaultDatabase(), database(DEFAULT_DATABASE_NAME));\n26aff781f4 driver/src/test/java/org/neo4j/driver/internal/DatabaseNameUtilTest.java (Zhen Li    2019-09-27 16:01:21 +0200 35) \n7c2fb47fbe driver/src/test/java/org/neo4j/driver/internal/DatabaseNameUtilTest.java (injectives 2022-05-19 15:52:11 +0100 36)         assertEquals(systemDatabase(), systemDatabase());\n",
            "commit_hashes": {
                "7c2fb47fbe": "    Add spotless-maven-plugin for Java formatting (#1227)",
                "26aff781f4": "    Better error message for default database routing table update"
            },
            "Commit&issueIDs": {
                "7c2fb47fbe": [
                    "1227"
                ]
            },
            "links": [
                "https://github.com/neo4j/neo4j-java-driver/issues/1227",
                "https://github.com/neo4j/neo4j-java-driver/commit/7c2fb47fbe"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/JobInfoTest.java",
            "test_name": "testOf",
            "FQS": "com.google.cloud.bigquery.JobInfoTest.testOf()",
            "start_line": "231",
            "blame_result": "ec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 232)     JobInfo job = JobInfo.of(COPY_CONFIGURATION);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 233)     assertEquals(COPY_CONFIGURATION, job.getConfiguration());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 234)     job = JobInfo.of(EXTRACT_CONFIGURATION);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 235)     assertEquals(EXTRACT_CONFIGURATION, job.getConfiguration());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 236)     job = JobInfo.of(LOAD_CONFIGURATION);\n",
            "commit_hashes": {
                "ec0dc4908": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "ec0dc4908": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/3251",
                "https://github.com/googleapis/java-bigquery/commit/ec0dc4908"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/LoadJobConfigurationTest.java",
            "test_name": "testOf",
            "FQS": "com.google.cloud.bigquery.LoadJobConfigurationTest.testOf()",
            "start_line": "186",
            "blame_result": "ec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 187)     LoadJobConfiguration configuration = LoadJobConfiguration.of(TABLE_ID, SOURCE_URIS);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 188)     assertEquals(TABLE_ID, configuration.getDestinationTable());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 189)     assertEquals(SOURCE_URIS, configuration.getSourceUris());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 190)     configuration = LoadJobConfiguration.of(TABLE_ID, SOURCE_URIS, CSV_OPTIONS);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 191)     assertEquals(TABLE_ID, configuration.getDestinationTable());\n",
            "commit_hashes": {
                "ec0dc4908": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "ec0dc4908": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/3251",
                "https://github.com/googleapis/java-bigquery/commit/ec0dc4908"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/ModelIdTest.java",
            "test_name": "testSetProjectId",
            "FQS": "com.google.cloud.bigquery.ModelIdTest.testSetProjectId()",
            "start_line": "52",
            "blame_result": "caa52c330 (shollyman 2019-05-09 10:37:18 -0700 53)     ModelId differentProjectTable = ModelId.of(\"differentProject\", \"dataset\", \"model\");\ncaa52c330 (shollyman 2019-05-09 10:37:18 -0700 54)     assertEquals(differentProjectTable, MODEL.setProjectId(\"differentProject\"));\ncaa52c330 (shollyman 2019-05-09 10:37:18 -0700 55)   }\ncaa52c330 (shollyman 2019-05-09 10:37:18 -0700 56) \ncaa52c330 (shollyman 2019-05-09 10:37:18 -0700 57)   private void compareModelIds(ModelId expected, ModelId value) {\n",
            "commit_hashes": {
                "caa52c330": "    BigQuery: adds models API implementation. (#5021)"
            },
            "Commit&issueIDs": {
                "caa52c330": [
                    "5021"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/5021",
                "https://github.com/googleapis/java-bigquery/commit/caa52c330"
            ]
        },
        {
            "poj_link": "https://github.com/undera/jmeter-plugins/",
            "file_path": "undera/jmeter-plugins/plugins/prmctl/src/test/java/kg/apc/jmeter/control/sampler/SetVariablesActionGuiTest.java",
            "test_name": "testGui",
            "FQS": "kg.apc.jmeter.control.sampler.SetVariablesActionGuiTest.testGui()",
            "start_line": "50",
            "blame_result": "84392cdb0 (Artem Fedorov 2018-04-11 18:09:59 +0300 51)         SetVariablesActionGui gui = new SetVariablesActionGui();\n84392cdb0 (Artem Fedorov 2018-04-11 18:09:59 +0300 52) \n84392cdb0 (Artem Fedorov 2018-04-11 18:09:59 +0300 53)         SetVariablesAction element1 = (SetVariablesAction) gui.createTestElement();\n84392cdb0 (Artem Fedorov 2018-04-11 18:09:59 +0300 54)         SetVariablesAction element2 = (SetVariablesAction) gui.createTestElement();\n84392cdb0 (Artem Fedorov 2018-04-11 18:09:59 +0300 55) \n",
            "commit_hashes": {
                "84392cdb0": "    Add Set Varibles Action (#242)"
            },
            "Commit&issueIDs": {
                "84392cdb0": [
                    "(#242)"
                ]
            },
            "links": [
                "https://github.com/undera/jmeter-plugins/issues/242",
                "https://github.com/undera/jmeter-plugins/commit/84392cdb0"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/ModelInfoTest.java",
            "test_name": "testToBuilderIncomplete",
            "FQS": "com.google.cloud.bigquery.ModelInfoTest.testToBuilderIncomplete()",
            "start_line": "65",
            "blame_result": "caa52c330 (shollyman 2019-05-09 10:37:18 -0700 66)     ModelInfo modelInfo = ModelInfo.of(MODEL_ID);\ncaa52c330 (shollyman 2019-05-09 10:37:18 -0700 67)     assertEquals(modelInfo, modelInfo.toBuilder().build());\ncaa52c330 (shollyman 2019-05-09 10:37:18 -0700 68)   }\ncaa52c330 (shollyman 2019-05-09 10:37:18 -0700 69) \ncaa52c330 (shollyman 2019-05-09 10:37:18 -0700 70)   @Test\n",
            "commit_hashes": {
                "caa52c330": "    BigQuery: adds models API implementation. (#5021)"
            },
            "Commit&issueIDs": {
                "caa52c330": [
                    "5021"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/5021",
                "https://github.com/googleapis/java-bigquery/commit/caa52c330"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/ModelTableDefinitionTest.java",
            "test_name": "testToBuilderIncomplete",
            "FQS": "com.google.cloud.bigquery.ModelTableDefinitionTest.testToBuilderIncomplete()",
            "start_line": "70",
            "blame_result": "117b49e92 (Praful Makani 2020-05-28 22:02:08 +0530 71)     ModelTableDefinition modelTableDefinition = ModelTableDefinition.newBuilder().build();\n117b49e92 (Praful Makani 2020-05-28 22:02:08 +0530 72)     assertEquals(modelTableDefinition, modelTableDefinition.toBuilder().build());\n117b49e92 (Praful Makani 2020-05-28 22:02:08 +0530 73)   }\n117b49e92 (Praful Makani 2020-05-28 22:02:08 +0530 74) \n117b49e92 (Praful Makani 2020-05-28 22:02:08 +0530 75)   @Test\n",
            "commit_hashes": {
                "117b49e92": "    chore: cover code coverage (#395)"
            },
            "Commit&issueIDs": {
                "117b49e92": [
                    "395"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/395",
                "https://github.com/googleapis/java-bigquery/commit/117b49e92"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/OptionTest.java",
            "test_name": "testHashCode",
            "FQS": "com.google.cloud.bigquery.OptionTest.testHashCode()",
            "start_line": "46",
            "blame_result": "ec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 47)     assertEquals(OPTION.hashCode(), OPTION_EQUALS.hashCode());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 48)   }\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 49) \nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 50)   @Test\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 51)   public void testConstructor() {\n",
            "commit_hashes": {
                "ec0dc4908": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "ec0dc4908": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/3251",
                "https://github.com/googleapis/java-bigquery/commit/ec0dc4908"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/QueryRequestInfoTest.java",
            "test_name": "testToPb",
            "FQS": "com.google.cloud.bigquery.QueryRequestInfoTest.testToPb()",
            "start_line": "166",
            "blame_result": "64a7d65ff (Stephanie Wang 2020-09-22 12:20:36 -0400 167)     QueryRequest requestPb = REQUEST_INFO.toPb();\n64a7d65ff (Stephanie Wang 2020-09-22 12:20:36 -0400 168)     assertEquals(requestPb, REQUEST_INFO.toPb());\n64a7d65ff (Stephanie Wang 2020-09-22 12:20:36 -0400 169)   }\n64a7d65ff (Stephanie Wang 2020-09-22 12:20:36 -0400 170) \n64a7d65ff (Stephanie Wang 2020-09-22 12:20:36 -0400 171)   @Test\n",
            "commit_hashes": {
                "64a7d65ff": "    feat: sql fast path impl (#509)"
            },
            "Commit&issueIDs": {
                "64a7d65ff": [
                    "509"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/509",
                "https://github.com/googleapis/java-bigquery/commit/64a7d65ff"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/RoutineIdTest.java",
            "test_name": "testSetProjectId",
            "FQS": "com.google.cloud.bigquery.RoutineIdTest.testSetProjectId()",
            "start_line": "51",
            "blame_result": "c7fd1a879 (shollyman 2019-07-12 09:01:03 -0700 52)     RoutineId differentProjectTable = RoutineId.of(\"differentProject\", \"dataset\", \"routine\");\nc7fd1a879 (shollyman 2019-07-12 09:01:03 -0700 53)     assertEquals(differentProjectTable, ROUTINE.setProjectId(\"differentProject\"));\nc7fd1a879 (shollyman 2019-07-12 09:01:03 -0700 54)   }\nc7fd1a879 (shollyman 2019-07-12 09:01:03 -0700 55) \nc7fd1a879 (shollyman 2019-07-12 09:01:03 -0700 56)   private void compareRoutineIds(RoutineId expected, RoutineId value) {\n",
            "commit_hashes": {
                "c7fd1a879": "    BigQuery: Add routines support  (#5591)"
            },
            "Commit&issueIDs": {
                "c7fd1a879": [
                    "5591"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/5591",
                "https://github.com/googleapis/java-bigquery/commit/c7fd1a879"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/RoutineInfoTest.java",
            "test_name": "testBuilderIncomplete",
            "FQS": "com.google.cloud.bigquery.RoutineInfoTest.testBuilderIncomplete()",
            "start_line": "77",
            "blame_result": "c7fd1a879 (shollyman 2019-07-12 09:01:03 -0700 78)     RoutineInfo routineInfo = RoutineInfo.of(ROUTINE_ID);\nc7fd1a879 (shollyman 2019-07-12 09:01:03 -0700 79)     assertEquals(routineInfo, routineInfo.toBuilder().build());\nc7fd1a879 (shollyman 2019-07-12 09:01:03 -0700 80)   }\nc7fd1a879 (shollyman 2019-07-12 09:01:03 -0700 81) \nc7fd1a879 (shollyman 2019-07-12 09:01:03 -0700 82)   @Test\n",
            "commit_hashes": {
                "c7fd1a879": "    BigQuery: Add routines support  (#5591)"
            },
            "Commit&issueIDs": {
                "c7fd1a879": [
                    "5591"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/5591",
                "https://github.com/googleapis/java-bigquery/commit/c7fd1a879"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/StandardTableDefinitionTest.java",
            "test_name": "testToBuilderIncomplete",
            "FQS": "com.google.cloud.bigquery.StandardTableDefinitionTest.testToBuilderIncomplete()",
            "start_line": "106",
            "blame_result": "ec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 107)     StandardTableDefinition tableDefinition = StandardTableDefinition.of(TABLE_SCHEMA);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 108)     assertEquals(tableDefinition, tableDefinition.toBuilder().build());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 109)   }\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 110) \nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 111)   @Test\n",
            "commit_hashes": {
                "ec0dc4908": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "ec0dc4908": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/3251",
                "https://github.com/googleapis/java-bigquery/commit/ec0dc4908"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/TableIdTest.java",
            "test_name": "testSetProjectId",
            "FQS": "com.google.cloud.bigquery.TableIdTest.testSetProjectId()",
            "start_line": "54",
            "blame_result": "31615eca6 (Marcello Steiner    2018-09-18 21:28:28 +0200 55)     TableId differentProjectTable = TableId.of(\"differentProject\", \"dataset\", \"table\");\n31615eca6 (Marcello Steiner    2018-09-18 21:28:28 +0200 56)     assertEquals(differentProjectTable, TABLE.setProjectId(\"differentProject\"));\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 57)   }\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 58) \nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 59)   private void compareTableIds(TableId expected, TableId value) {\n",
            "commit_hashes": {
                "31615eca6": "    bigquery: properly fail when setting TableId's project twice (#3694)",
                "ec0dc4908": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "31615eca6": [
                    "3694"
                ],
                "ec0dc4908": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/3694",
                "https://github.com/googleapis/java-bigquery/commit/31615eca6",
                "https://github.com/googleapis/java-bigquery/issues/3251",
                "https://github.com/googleapis/java-bigquery/commit/ec0dc4908"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/TableInfoTest.java",
            "test_name": "testToBuilderIncomplete",
            "FQS": "com.google.cloud.bigquery.TableInfoTest.testToBuilderIncomplete()",
            "start_line": "167",
            "blame_result": "ec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 168)     TableInfo tableInfo = TableInfo.of(TABLE_ID, TABLE_DEFINITION);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 169)     assertEquals(tableInfo, tableInfo.toBuilder().build());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 170)     tableInfo = TableInfo.of(TABLE_ID, VIEW_DEFINITION);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 171)     assertEquals(tableInfo, tableInfo.toBuilder().build());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 172)     tableInfo = TableInfo.of(TABLE_ID, EXTERNAL_TABLE_DEFINITION);\n",
            "commit_hashes": {
                "ec0dc4908": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "ec0dc4908": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/3251",
                "https://github.com/googleapis/java-bigquery/commit/ec0dc4908"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/TableInfoTest.java",
            "test_name": "testOf",
            "FQS": "com.google.cloud.bigquery.TableInfoTest.testOf()",
            "start_line": "226",
            "blame_result": "ec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 227)     TableInfo tableInfo = TableInfo.of(TABLE_ID, TABLE_DEFINITION);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 228)     assertEquals(TABLE_ID, tableInfo.getTableId());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 229)     assertNull(tableInfo.getCreationTime());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 230)     assertNull(tableInfo.getDescription());\n3e51ea02b (Praful Makani       2020-02-28 00:10:34 +0530 231)     assertNull(tableInfo.getEncryptionConfiguration());\n",
            "commit_hashes": {
                "ec0dc4908": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)",
                "3e51ea02b": "    feat: expose requirepartitionfilter field in table (#158)"
            },
            "Commit&issueIDs": {
                "ec0dc4908": [
                    "3251"
                ],
                "3e51ea02b": [
                    "158"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/3251",
                "https://github.com/googleapis/java-bigquery/commit/ec0dc4908",
                "https://github.com/googleapis/java-bigquery/issues/158",
                "https://github.com/googleapis/java-bigquery/commit/3e51ea02b"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/TimePartitioningTest.java",
            "test_name": "testOf",
            "FQS": "com.google.cloud.bigquery.TimePartitioningTest.testOf()",
            "start_line": "63",
            "blame_result": "90f998040 (Stephanie Wang 2020-05-11 19:30:10 -0400 64)     assertEquals(TYPE_DAY, TIME_PARTITIONING_DAY.getType());\n90f998040 (Stephanie Wang 2020-05-11 19:30:10 -0400 65)     assertEquals(TYPE_HOUR, TIME_PARTITIONING_HOUR.getType());\na57dbdf96 (Stephanie Wang 2020-09-17 15:57:42 -0400 66)     assertEquals(TYPE_MONTH, TIME_PARTITIONING_MONTH.getType());\na57dbdf96 (Stephanie Wang 2020-09-17 15:57:42 -0400 67)     assertEquals(TYPE_YEAR, TIME_PARTITIONING_YEAR.getType());\n90f998040 (Stephanie Wang 2020-05-11 19:30:10 -0400 68)     assertEquals(EXPIRATION_MS, TIME_PARTITIONING_DAY.getExpirationMs().longValue());\n",
            "commit_hashes": {
                "90f998040": "    feat: add hourly partitioning support (#336)",
                "a57dbdf96": "    feat: add additional time partitioning intervals (#737)"
            },
            "Commit&issueIDs": {
                "90f998040": [
                    "336"
                ],
                "a57dbdf96": [
                    "737"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/336",
                "https://github.com/googleapis/java-bigquery/commit/90f998040",
                "https://github.com/googleapis/java-bigquery/issues/737",
                "https://github.com/googleapis/java-bigquery/commit/a57dbdf96"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-bigquery/",
            "file_path": "googleapis/java-bigquery/google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/WriteChannelConfigurationTest.java",
            "test_name": "testOf",
            "FQS": "com.google.cloud.bigquery.WriteChannelConfigurationTest.testOf()",
            "start_line": "147",
            "blame_result": "ec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 148)     WriteChannelConfiguration configuration = WriteChannelConfiguration.of(TABLE_ID);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 149)     assertEquals(TABLE_ID, configuration.getDestinationTable());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 150)     configuration = WriteChannelConfiguration.of(TABLE_ID, CSV_OPTIONS);\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 151)     assertEquals(TABLE_ID, configuration.getDestinationTable());\nec0dc4908 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 152)     assertEquals(FORMAT, configuration.getFormat());\n",
            "commit_hashes": {
                "ec0dc4908": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "ec0dc4908": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-bigquery/issues/3251",
                "https://github.com/googleapis/java-bigquery/commit/ec0dc4908"
            ]
        },
        {
            "poj_link": "https://github.com/biojava/biojava/",
            "file_path": "biojava/biojava/biojava-integrationtest/src/test/java/org/biojava/nbio/structure/test/io/TestAtomCachePerformance.java",
            "test_name": "testDownload",
            "FQS": "org.biojava.nbio.structure.test.io.TestAtomCachePerformance.testDownload()",
            "start_line": "75",
            "blame_result": "bbdd683fd0 integrationtest/src/test/java/org/biojava/structure/test/io/TestAtomCachePerformance.java (josemduarte 2015-01-13 19:22:36 +0100 76) \t\tSystem.out.println(\"Starting performance test for \"+PDB_IDS.length+\" PDB ids\");\nbbdd683fd0 integrationtest/src/test/java/org/biojava/structure/test/io/TestAtomCachePerformance.java (josemduarte 2015-01-13 19:22:36 +0100 77) \t\tlong start = System.currentTimeMillis();\nbbdd683fd0 integrationtest/src/test/java/org/biojava/structure/test/io/TestAtomCachePerformance.java (josemduarte 2015-01-13 19:22:36 +0100 78) \t\tfor (String pdbId:PDB_IDS) {\nbbdd683fd0 integrationtest/src/test/java/org/biojava/structure/test/io/TestAtomCachePerformance.java (josemduarte 2015-01-13 19:22:36 +0100 79) \t\t\tStructure cifS = getCifStructure(pdbId);\nbbdd683fd0 integrationtest/src/test/java/org/biojava/structure/test/io/TestAtomCachePerformance.java (josemduarte 2015-01-13 19:22:36 +0100 80) \t\t\tStructure pdbS = getPdbStructure(pdbId);\n",
            "commit_hashes": {
                "bbdd683fd0": "    Improvements in file downloading, trying to address #227"
            },
            "Commit&issueIDs": {
                "bbdd683fd0": [
                    "#227"
                ]
            },
            "links": [
                "https://github.com/biojava/biojava/issues/227",
                "https://github.com/biojava/biojava/commit/bbdd683fd0"
            ]
        },
        {
            "poj_link": "https://github.com/biojava/biojava/",
            "file_path": "biojava/biojava/biojava-structure/src/test/java/org/biojava/nbio/structure/TestParsingCalcium.java",
            "test_name": "testCalciumParsing",
            "FQS": "org.biojava.nbio.structure.TestParsingCalcium.testCalciumParsing()",
            "start_line": "41",
            "blame_result": "43fb0d8109 biojava3-structure/src/test/java/org/biojava/bio/structure/TestParsingCalcium.java (Andreas Prlic  2013-11-01 21:02:27 -0700 42) \n43fb0d8109 biojava3-structure/src/test/java/org/biojava/bio/structure/TestParsingCalcium.java (Andreas Prlic  2013-11-01 21:02:27 -0700 43) \t\tString pdbID = \"1SU4\";\n43fb0d8109 biojava3-structure/src/test/java/org/biojava/bio/structure/TestParsingCalcium.java (Andreas Prlic  2013-11-01 21:02:27 -0700 44) \n43fb0d8109 biojava3-structure/src/test/java/org/biojava/bio/structure/TestParsingCalcium.java (Andreas Prlic  2013-11-01 21:02:27 -0700 45) \t\t// Calcium is at position 995\n809312e8c3 biojava-structure/src/test/java/org/biojava/nbio/structure/TestParsingCalcium.java (Spencer Bliven 2016-03-09 11:47:13 +0100 46) \t\t// HETATM 7673 CA    CA A 995      64.194  12.588   7.315  1.00 41.55          CA\n",
            "commit_hashes": {
                "43fb0d8109": "    adding a unit test fot #68",
                "809312e8c3": "    Remove trailing whitespace globally from .java files"
            },
            "Commit&issueIDs": {
                "43fb0d8109": [
                    "#68"
                ]
            },
            "links": [
                "https://github.com/biojava/biojava/issues/68",
                "https://github.com/biojava/biojava/commit/43fb0d8109"
            ]
        },
        {
            "poj_link": "https://github.com/biojava/biojava/",
            "file_path": "biojava/biojava/biojava-structure/src/test/java/org/biojava/nbio/structure/TestPdbId.java",
            "test_name": "testHashCodeAndEquals",
            "FQS": "org.biojava.nbio.structure.TestPdbId.testHashCodeAndEquals()",
            "start_line": "165",
            "blame_result": "12d348d0ad (Amr ALHOSSARY 2021-10-30 05:42:41 +0800 166) \t\tPdbId id1, id2, id3/* , id4 */;\n12d348d0ad (Amr ALHOSSARY 2021-10-30 05:42:41 +0800 167) \t\tPdbId other;\n12d348d0ad (Amr ALHOSSARY 2021-10-30 05:42:41 +0800 168) \t\tid1 = new PdbId(\"1abc\");\n12d348d0ad (Amr ALHOSSARY 2021-10-30 05:42:41 +0800 169) \t\tid2 = new PdbId(\"PDB_00001ABC\");\n12d348d0ad (Amr ALHOSSARY 2021-10-30 05:42:41 +0800 170) \t\tid3 = new PdbId(\"1ABC\");\n",
            "commit_hashes": {
                "12d348d0ad": "    Support extended pdbid (#950)"
            },
            "Commit&issueIDs": {
                "12d348d0ad": [
                    "(#950)"
                ]
            },
            "links": [
                "https://github.com/biojava/biojava/issues/950",
                "https://github.com/biojava/biojava/commit/12d348d0ad"
            ]
        },
        {
            "poj_link": "https://github.com/hyperledger/fabric-sdk-java/",
            "file_path": "hyperledger/fabric-sdk-java/src/test/java/org/hyperledger/fabric/sdk/TransactionRequestTest.java",
            "test_name": "testSetTransactionContext",
            "FQS": "org.hyperledger.fabric.sdk.TransactionRequestTest.testSetTransactionContext()",
            "start_line": "40",
            "blame_result": "3b323673 (Mark S. Lewis 2020-05-15 07:29:54 +0100 41)         User user = TestUtils.getMockUser(\"user\", \"mspId\");\n3b323673 (Mark S. Lewis 2020-05-15 07:29:54 +0100 42)         TransactionRequest request = new TransactionRequest(user);\n3b323673 (Mark S. Lewis 2020-05-15 07:29:54 +0100 43) \n3b323673 (Mark S. Lewis 2020-05-15 07:29:54 +0100 44)         TransactionContext context = Mockito.mock(TransactionContext.class);\n3b323673 (Mark S. Lewis 2020-05-15 07:29:54 +0100 45)         Mockito.when(context.getUser()).thenReturn(user);\n",
            "commit_hashes": {
                "3b323673": "    FGJ-86: Allow client to specify transaction ID (#57)"
            },
            "Commit&issueIDs": {
                "3b323673": [
                    "(#57)"
                ]
            },
            "links": [
                "https://github.com/hyperledger/fabric-sdk-java/issues/57",
                "https://github.com/hyperledger/fabric-sdk-java/commit/3b323673"
            ]
        },
        {
            "poj_link": "https://github.com/cucumber/cucumber-jvm/",
            "file_path": "cucumber/cucumber-jvm/cucumber-core/src/test/java/io/cucumber/core/eventbus/RandomUuidGeneratorTest.java",
            "test_name": "generates_different_non_null_uuids",
            "FQS": "io.cucumber.core.eventbus.RandomUuidGeneratorTest.generates_different_non_null_uuids()",
            "start_line": "12",
            "blame_result": "5691d3006f (Julien Kronegg 2023-04-06 21:18:41 +0200 13)         // Given\n5691d3006f (Julien Kronegg 2023-04-06 21:18:41 +0200 14)         UuidGenerator generator = new RandomUuidGenerator();\n5691d3006f (Julien Kronegg 2023-04-06 21:18:41 +0200 15)         UUID uuid1 = generator.generateId();\n5691d3006f (Julien Kronegg 2023-04-06 21:18:41 +0200 16) \n5691d3006f (Julien Kronegg 2023-04-06 21:18:41 +0200 17)         // When\n",
            "commit_hashes": {
                "5691d3006f": "    [Core] Add faster UUID generator selectable through SPI (#2703)"
            },
            "Commit&issueIDs": {
                "5691d3006f": [
                    "(#2703)"
                ]
            },
            "links": [
                "https://github.com/cucumber/cucumber-jvm/issues/2703",
                "https://github.com/cucumber/cucumber-jvm/commit/5691d3006f"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestDayOfMonth.java",
            "test_name": "test_from_TemporalAccessor_DayOfMonth",
            "FQS": "org.threeten.extra.TestDayOfMonth.test_from_TemporalAccessor_DayOfMonth()",
            "start_line": "310",
            "blame_result": "467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 311)         DayOfMonth dom = DayOfMonth.of(6);\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 312)         assertEquals(dom, DayOfMonth.from(dom));\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 313)     }\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 314) \n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 315)     @Test\n",
            "commit_hashes": {
                "467cd401": "    Increase test coverage and fix PMD issues (#119)"
            },
            "Commit&issueIDs": {
                "467cd401": [
                    "(#119)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/119",
                "https://github.com/ThreeTen/threeten-extra/commit/467cd401"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestDayOfYear.java",
            "test_name": "test_of_int",
            "FQS": "org.threeten.extra.TestDayOfYear.test_of_int()",
            "start_line": "206",
            "blame_result": "6e5765cb (Stephen Colebourne 2012-11-18 01:35:10 +0000 207)         for (int i = 1; i <= LEAP_YEAR_LENGTH; i++) {\n6e5765cb (Stephen Colebourne 2012-11-18 01:35:10 +0000 208)             DayOfYear test = DayOfYear.of(i);\n33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 209)             assertEquals(i, test.getValue());\n1b318c13 (Micha\u0142 Sobkiewicz  2022-12-18 00:24:14 +0100 210)             assertSame(test, DayOfYear.of(i));\n6e5765cb (Stephen Colebourne 2012-11-18 01:35:10 +0000 211)         }\n",
            "commit_hashes": {
                "6e5765cb": "    Initial checkin of files copied from threeten project",
                "33cb9dbe": "    Fix assertions order",
                "1b318c13": "    Fix assertions (#243)"
            },
            "Commit&issueIDs": {
                "1b318c13": [
                    "(#243)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/243",
                "https://github.com/ThreeTen/threeten-extra/commit/1b318c13"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestDayOfYear.java",
            "test_name": "test_from_TemporalAccessor_DayOfYear",
            "FQS": "org.threeten.extra.TestDayOfYear.test_from_TemporalAccessor_DayOfYear()",
            "start_line": "250",
            "blame_result": "467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 251)         DayOfYear dom = DayOfYear.of(6);\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 252)         assertEquals(dom, DayOfYear.from(dom));\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 253)     }\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 254) \n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 255)     @Test\n",
            "commit_hashes": {
                "467cd401": "    Increase test coverage and fix PMD issues (#119)"
            },
            "Commit&issueIDs": {
                "467cd401": [
                    "(#119)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/119",
                "https://github.com/ThreeTen/threeten-extra/commit/467cd401"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestDays.java",
            "test_name": "test_from_Duration",
            "FQS": "org.threeten.extra.TestDays.test_from_Duration()",
            "start_line": "165",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 166)         assertEquals(Days.of(2), Days.from(Duration.ofDays(2)));\n71b39846 (Stephen Colebourne 2014-03-22 22:56:02 +0000 167)     }\n71b39846 (Stephen Colebourne 2014-03-22 22:56:02 +0000 168) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 169)     @Test\n71b39846 (Stephen Colebourne 2014-03-22 22:56:02 +0000 170)     public void test_from_wrongUnit_remainder() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "71b39846": "    Extend conversion between amount types",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestDays.java",
            "test_name": "test_between",
            "FQS": "org.threeten.extra.TestDays.test_between()",
            "start_line": "276",
            "blame_result": "467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 277)         assertEquals(Days.of(365 + 366), Days.between(LocalDate.of(2019, 1, 1), LocalDate.of(2021, 1, 1)));\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 278)     }\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 279) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 280)     @Test\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 281)     public void test_between_date_null() {\n",
            "commit_hashes": {
                "467cd401": "    Increase test coverage and fix PMD issues (#119)",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "467cd401": [
                    "(#119)"
                ],
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/119",
                "https://github.com/ThreeTen/threeten-extra/commit/467cd401",
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/dromara/hmily/",
            "file_path": "dromara/hmily/hmily-spi/src/test/java/org/dromara/hmily/spi/ExtensionLoaderFactoryTest.java",
            "test_name": "testSPI",
            "FQS": "org.dromara.hmily.spi.ExtensionLoaderFactoryTest.testSPI()",
            "start_line": "30",
            "blame_result": "52a25e48f (yu199195 2020-07-23 19:51:49 +0800 31)         HmilyTestSPI hmilyTestSPI = ExtensionLoaderFactory.load(HmilyTestSPI.class);\n01cae1c1d (Archer   2021-10-22 19:34:38 +0800 32)         assertThat(hmilyTestSPI.getClass().getName(), is(HelloWorldTestSPI.class.getName()));\n52a25e48f (yu199195 2020-07-23 19:51:49 +0800 33)         \n52a25e48f (yu199195 2020-07-23 19:51:49 +0800 34)         HmilyTestSPI test2 = ExtensionLoaderFactory.load(HmilyTestSPI.class);\n01cae1c1d (Archer   2021-10-22 19:34:38 +0800 35)         assertThat(test2.getClass().getName(), is(HelloWorldTestSPI.class.getName()));\n",
            "commit_hashes": {
                "52a25e48f": "    add hmily spi module.",
                "01cae1c1d": "    Comment HmilySPI#order() (#323)"
            },
            "Commit&issueIDs": {
                "01cae1c1d": [
                    "(#323)"
                ]
            },
            "links": [
                "https://github.com/dromara/hmily/issues/323",
                "https://github.com/dromara/hmily/commit/01cae1c1d"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestInterval.java",
            "test_name": "test_union_disconnected",
            "FQS": "org.threeten.extra.TestInterval.test_union_disconnected()",
            "start_line": "676",
            "blame_result": "73c28d82 (Stephen Colebourne 2016-08-04 01:22:03 +0100 677)         Interval test1 = Interval.of(NOW1, NOW2);\n73c28d82 (Stephen Colebourne 2016-08-04 01:22:03 +0100 678)         Interval test2 = Interval.of(NOW3, NOW4);\n73c28d82 (Stephen Colebourne 2016-08-04 01:22:03 +0100 679)         assertFalse(test1.isConnected(test2));\n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 680)         assertThrows(DateTimeException.class, () -> test1.union(test2));\n73c28d82 (Stephen Colebourne 2016-08-04 01:22:03 +0100 681)     }\n",
            "commit_hashes": {
                "73c28d82": "    Add LocalDateRange, enhance Interval",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestLocalDateRange.java",
            "test_name": "test_union_disconnected",
            "FQS": "org.threeten.extra.TestLocalDateRange.test_union_disconnected()",
            "start_line": "955",
            "blame_result": "73c28d82 (Stephen Colebourne 2016-08-04 01:22:03 +0100 956)         LocalDateRange test1 = LocalDateRange.of(DATE_2012_07_01, DATE_2012_07_28);\n73c28d82 (Stephen Colebourne 2016-08-04 01:22:03 +0100 957)         LocalDateRange test2 = LocalDateRange.of(DATE_2012_07_29, DATE_2012_07_30);\n73c28d82 (Stephen Colebourne 2016-08-04 01:22:03 +0100 958)         assertFalse(test1.isConnected(test2));\n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 959)         assertThrows(DateTimeException.class, () -> test1.union(test2));\n73c28d82 (Stephen Colebourne 2016-08-04 01:22:03 +0100 960)     }\n",
            "commit_hashes": {
                "73c28d82": "    Add LocalDateRange, enhance Interval",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestMonths.java",
            "test_name": "test_from_yearsAndMonths",
            "FQS": "org.threeten.extra.TestMonths.test_from_yearsAndMonths()",
            "start_line": "165",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 166)         assertEquals(Months.of(41), Months.from(Period.of(3, 5, 0)));\n71b39846 (Stephen Colebourne 2014-03-22 22:56:02 +0000 167)     }\n71b39846 (Stephen Colebourne 2014-03-22 22:56:02 +0000 168) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 169)     @Test\n71b39846 (Stephen Colebourne 2014-03-22 22:56:02 +0000 170)     public void test_from_wrongUnit_noConversion() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "71b39846": "    Extend conversion between amount types",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestMonths.java",
            "test_name": "test_between",
            "FQS": "org.threeten.extra.TestMonths.test_between()",
            "start_line": "258",
            "blame_result": "467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 259)         assertEquals(Months.of(24), Months.between(LocalDate.of(2019, 1, 1), LocalDate.of(2021, 1, 1)));\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 260)     }\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 261) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 262)     @Test\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 263)     public void test_between_date_null() {\n",
            "commit_hashes": {
                "467cd401": "    Increase test coverage and fix PMD issues (#119)",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "467cd401": [
                    "(#119)"
                ],
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/119",
                "https://github.com/ThreeTen/threeten-extra/commit/467cd401",
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestOffsetDate.java",
            "test_name": "test_withDayOfMonth_noChange",
            "FQS": "org.threeten.extra.TestOffsetDate.test_withDayOfMonth_noChange()",
            "start_line": "735",
            "blame_result": "c47d7f30 (Martin Kr\u00f6ning     2019-04-03 17:17:52 +0200 736)         OffsetDate t = TEST_2007_07_15_PONE.withDayOfMonth(15);\n0f56b86c (Stephen Colebourne 2021-04-02 10:33:05 +0100 737)         assertEquals(OffsetDate.of(2007, 7, 15, OFFSET_PONE), t);\nc47d7f30 (Martin Kr\u00f6ning     2019-04-03 17:17:52 +0200 738)     }\nc47d7f30 (Martin Kr\u00f6ning     2019-04-03 17:17:52 +0200 739) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 740)     @Test\n",
            "commit_hashes": {
                "c47d7f30": "    Add TestOffsetDate",
                "0f56b86c": "    Enhance OffsetDate tests",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestPeriodDuration.java",
            "test_name": "test_negated",
            "FQS": "org.threeten.extra.TestPeriodDuration.test_negated()",
            "start_line": "335",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 336)         assertEquals(PeriodDuration.of(P1Y2M3D.negated(), DUR_5.negated()), PeriodDuration.of(P1Y2M3D, DUR_5).negated());\n9a9622c6 (Stephen Colebourne 2017-04-01 23:46:02 +0100 337)     }\n9a9622c6 (Stephen Colebourne 2017-04-01 23:46:02 +0100 338) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 339)     @Test\n9a9622c6 (Stephen Colebourne 2017-04-01 23:46:02 +0100 340)     public void test_negated_overflow() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "9a9622c6": "    Add PeriodDuration combining Period and Duration",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestTemporalFields.java",
            "test_name": "test_HALF_YEARS",
            "FQS": "org.threeten.extra.TestTemporalFields.test_HALF_YEARS()",
            "start_line": "120",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 121)         assertEquals(true, HALF_YEARS.isDateBased());\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 122)         assertEquals(false, HALF_YEARS.isTimeBased());\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 123)         assertEquals(\"HalfYears\", HALF_YEARS.toString());\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 124) \n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 125)         assertEquals(true, HALF_YEARS.isSupportedBy(LocalDate.of(2023, 6, 30)));\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestWeeks.java",
            "test_name": "test_from_Duration",
            "FQS": "org.threeten.extra.TestWeeks.test_from_Duration()",
            "start_line": "142",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 143)         assertEquals(Weeks.of(2), Weeks.from(Duration.ofDays(14)));\n1898c82f (Stephen Colebourne 2014-03-22 23:03:30 +0000 144)     }\n1898c82f (Stephen Colebourne 2014-03-22 23:03:30 +0000 145) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 146)     @Test\n1898c82f (Stephen Colebourne 2014-03-22 23:03:30 +0000 147)     public void test_from_wrongUnit_remainder() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "1898c82f": "    Add Weeks class",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestWeeks.java",
            "test_name": "test_between",
            "FQS": "org.threeten.extra.TestWeeks.test_between()",
            "start_line": "202",
            "blame_result": "467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 203)         assertEquals(Weeks.of(104), Weeks.between(LocalDate.of(2019, 1, 1), LocalDate.of(2021, 1, 1)));\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 204)     }\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 205) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 206)     @Test\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 207)     public void test_between_date_null() {\n",
            "commit_hashes": {
                "467cd401": "    Increase test coverage and fix PMD issues (#119)",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "467cd401": [
                    "(#119)"
                ],
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/119",
                "https://github.com/ThreeTen/threeten-extra/commit/467cd401",
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_of_int_int",
            "FQS": "org.threeten.extra.TestYearHalf.test_of_int_int()",
            "start_line": "235",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 236)         for (int year = -100; year <= 100; year++) {\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 237)             for (int half = 1; half <= 2; half++) {\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 238)                 YearHalf test = YearHalf.of(year, half);\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 239)                 assertEquals(year, test.getYear());\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 240)                 assertEquals(half, test.getHalfValue());\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_from_TemporalAccessor_notLeapYear",
            "FQS": "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_notLeapYear()",
            "start_line": "272",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 273)         LocalDate date = LocalDate.of(2007, 1, 1);\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 274)         for (int i = 1; i <= STANDARD_YEAR_LENGTH; i++) {\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 275)             YearHalf test = YearHalf.from(date);\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 276)             int expected = ((date.getMonthValue() - 1) / 6) + 1;\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 277)             assertEquals(YearHalf.of(2007, expected), test);\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_from_TemporalAccessor_leapYear",
            "FQS": "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_leapYear()",
            "start_line": "283",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 284)         LocalDate date = LocalDate.of(2008, 1, 1);\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 285)         for (int i = 1; i <= LEAP_YEAR_LENGTH; i++) {\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 286)             YearHalf test = YearHalf.from(date);\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 287)             int expected = ((date.getMonthValue() - 1) / 6) + 1;\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 288)             assertEquals(YearHalf.of(2008, expected), test);\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_parse_CharSequence",
            "FQS": "org.threeten.extra.TestYearHalf.test_parse_CharSequence()",
            "start_line": "307",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 308)         assertEquals(YearHalf.of(2012, H2), YearHalf.parse(\"2012-H2\"));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 309)     }\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 310) \n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 311)     @Test\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 312)     public void test_parse_CharSequence_caseInsensitive() {\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_parse_CharSequence_caseInsensitive",
            "FQS": "org.threeten.extra.TestYearHalf.test_parse_CharSequence_caseInsensitive()",
            "start_line": "312",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 313)         assertEquals(YearHalf.of(2012, H1), YearHalf.parse(\"2012-h1\"));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 314)     }\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 315) \n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 316)     @Test\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 317)     public void test_parse_CharSequenceDate_invalidYear() {\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_parse_CharSequenceDateTimeFormatter",
            "FQS": "org.threeten.extra.TestYearHalf.test_parse_CharSequenceDateTimeFormatter()",
            "start_line": "335",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 336)         DateTimeFormatter f = new DateTimeFormatterBuilder()\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 337)                 .appendLiteral('H')\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 338)                 .appendValue(HALF_OF_YEAR, 1)\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 339)                 .appendLiteral(' ')\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 340)                 .appendValue(YEAR)\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_isLeapYear_int",
            "FQS": "org.threeten.extra.TestYearHalf.test_isLeapYear_int()",
            "start_line": "506",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 507)         for (int year = -500; year <= 500; year++) {\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 508)             for (Half half : Half.values()) {\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 509)                 YearHalf test = YearHalf.of(year, half);\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 510)                 assertEquals(Year.isLeap(year), test.isLeapYear());\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 511)             }\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_with_TemporalAdjuster_Half",
            "FQS": "org.threeten.extra.TestYearHalf.test_with_TemporalAdjuster_Half()",
            "start_line": "564",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 565)         assertEquals(YearHalf.of(2007, H1), YearHalf.of(2007, H2).with(H1));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 566)     }\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 567) \n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 568)     @Test\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 569)     public void test_with_TemporalAdjuster_Year() {\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_with_TemporalAdjuster_Year",
            "FQS": "org.threeten.extra.TestYearHalf.test_with_TemporalAdjuster_Year()",
            "start_line": "569",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 570)         assertEquals(YearHalf.of(2012, H2), YearHalf.of(2007, H2).with(Year.of(2012)));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 571)     }\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 572) \n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 573)     @Test\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 574)     public void test_with_TemporalAdjuster_YearHalf() {\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_with_TemporalAdjuster_YearHalf",
            "FQS": "org.threeten.extra.TestYearHalf.test_with_TemporalAdjuster_YearHalf()",
            "start_line": "574",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 575)         assertEquals(YearHalf.of(2012, H1), YearHalf.of(2007, H2).with(YearHalf.of(2012, H1)));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 576)     }\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 577) \n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 578)     @Test\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 579)     public void test_with_TemporalAdjuster_LocalDate() {\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_withYear",
            "FQS": "org.threeten.extra.TestYearHalf.test_withYear()",
            "start_line": "592",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 593)         assertEquals(YearHalf.of(2012, H2), YearHalf.of(2007, H2).withYear(2012));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 594)     }\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 595) \n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 596)     @Test\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 597)     public void test_withYear_int_halfTooLow() {\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_withHalf_int",
            "FQS": "org.threeten.extra.TestYearHalf.test_withHalf_int()",
            "start_line": "610",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 611)         assertEquals(YearHalf.of(2007, H1), YearHalf.of(2007, H2).withHalf(1));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 612)     }\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 613) \n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 614)     @Test\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 615)     public void test_withHalf_int_halfTooLow() {\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_plusYears",
            "FQS": "org.threeten.extra.TestYearHalf.test_plusYears()",
            "start_line": "641",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 642)         assertEquals(YearHalf.of(2012, H2), YearHalf.of(2007, H2).plusYears(5));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 643)         assertEquals(YearHalf.of(2007, H2), YearHalf.of(2007, H2).plusYears(0));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 644)         assertEquals(YearHalf.of(2002, H2), YearHalf.of(2007, H2).plusYears(-5));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 645)     }\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 646) \n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_plusHalves",
            "FQS": "org.threeten.extra.TestYearHalf.test_plusHalves()",
            "start_line": "651",
            "blame_result": "1860c5e7 (Stephen Colebourne 2023-12-06 15:29:45 +0000 652)         assertEquals(YearHalf.of(2010, H1), YearHalf.of(2007, H2).plusHalves(5));\n1860c5e7 (Stephen Colebourne 2023-12-06 15:29:45 +0000 653)         assertEquals(YearHalf.of(2007, H2), YearHalf.of(2007, H2).plusHalves(0));\n1860c5e7 (Stephen Colebourne 2023-12-06 15:29:45 +0000 654)         assertEquals(YearHalf.of(2005, H1), YearHalf.of(2007, H2).plusHalves(-5));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 655)     }\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 656) \n",
            "commit_hashes": {
                "1860c5e7": "    Fix half year method names (#315)",
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "1860c5e7": [
                    "(#315)"
                ],
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/315",
                "https://github.com/ThreeTen/threeten-extra/commit/1860c5e7",
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_minusYears",
            "FQS": "org.threeten.extra.TestYearHalf.test_minusYears()",
            "start_line": "674",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 675)         assertEquals(YearHalf.of(2002, H2), YearHalf.of(2007, H2).minusYears(5));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 676)         assertEquals(YearHalf.of(2007, H2), YearHalf.of(2007, H2).minusYears(0));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 677)         assertEquals(YearHalf.of(2012, H2), YearHalf.of(2007, H2).minusYears(-5));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 678)     }\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 679) \n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_minusHalves",
            "FQS": "org.threeten.extra.TestYearHalf.test_minusHalves()",
            "start_line": "684",
            "blame_result": "1860c5e7 (Stephen Colebourne 2023-12-06 15:29:45 +0000 685)         assertEquals(YearHalf.of(2005, H1), YearHalf.of(2007, H2).minusHalves(5));\n1860c5e7 (Stephen Colebourne 2023-12-06 15:29:45 +0000 686)         assertEquals(YearHalf.of(2007, H2), YearHalf.of(2007, H2).minusHalves(0));\n1860c5e7 (Stephen Colebourne 2023-12-06 15:29:45 +0000 687)         assertEquals(YearHalf.of(2010, H1), YearHalf.of(2007, H2).minusHalves(-5));\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 688)     }\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 689) \n",
            "commit_hashes": {
                "1860c5e7": "    Fix half year method names (#315)",
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "1860c5e7": [
                    "(#315)"
                ],
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/315",
                "https://github.com/ThreeTen/threeten-extra/commit/1860c5e7",
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_name": "test_lengthOfYear",
            "FQS": "org.threeten.extra.TestYearHalf.test_lengthOfYear()",
            "start_line": "694",
            "blame_result": "54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 695)         for (int year = -500; year <= 500; year++) {\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 696)             for (Half half : Half.values()) {\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 697)                 YearHalf test = YearHalf.of(year, half);\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 698)                 assertEquals(Year.isLeap(year) ? 366 : 365, test.lengthOfYear());\n54e3d4f6 (Stephen Colebourne 2023-11-12 19:45:14 +0000 699)             }\n",
            "commit_hashes": {
                "54e3d4f6": "    Half years (#303)"
            },
            "Commit&issueIDs": {
                "54e3d4f6": [
                    "(#303)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/303",
                "https://github.com/ThreeTen/threeten-extra/commit/54e3d4f6"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearQuarter.java",
            "test_name": "test_parse_CharSequence_caseInsensitive",
            "FQS": "org.threeten.extra.TestYearQuarter.test_parse_CharSequence_caseInsensitive()",
            "start_line": "310",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 311)         assertEquals(YearQuarter.of(2012, Q3), YearQuarter.parse(\"2012-q3\"));\n023e41ab (Stephen Colebourne 2015-02-18 13:16:29 +0000 312)     }\n023e41ab (Stephen Colebourne 2015-02-18 13:16:29 +0000 313) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 314)     @Test\n8e2c5d36 (Stephen Colebourne 2014-02-08 18:14:31 +0000 315)     public void test_parse_CharSequenceDate_invalidYear() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "023e41ab": "    YearQuarter.parse() should be case insensitive",
                "66fd7651": "    Upgrade to JUnit 5 (#173)",
                "8e2c5d36": "    Add YearQuarter"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearQuarter.java",
            "test_name": "test_parse_CharSequenceDateTimeFormatter",
            "FQS": "org.threeten.extra.TestYearQuarter.test_parse_CharSequenceDateTimeFormatter()",
            "start_line": "333",
            "blame_result": "8e2c5d36 (Stephen Colebourne 2014-02-08 18:14:31 +0000 334)         DateTimeFormatter f = DateTimeFormatter.ofPattern(\"'Q'Q uuuu\");\n33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 335)         assertEquals(YearQuarter.of(2012, Q3), YearQuarter.parse(\"Q3 2012\", f));\n8e2c5d36 (Stephen Colebourne 2014-02-08 18:14:31 +0000 336)     }\n8e2c5d36 (Stephen Colebourne 2014-02-08 18:14:31 +0000 337) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 338)     @Test\n",
            "commit_hashes": {
                "8e2c5d36": "    Add YearQuarter",
                "33cb9dbe": "    Fix assertions order",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearQuarter.java",
            "test_name": "test_withYear",
            "FQS": "org.threeten.extra.TestYearQuarter.test_withYear()",
            "start_line": "594",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 595)         assertEquals(YearQuarter.of(2012, Q2), YearQuarter.of(2007, Q2).withYear(2012));\n8e2c5d36 (Stephen Colebourne 2014-02-08 18:14:31 +0000 596)     }\n8e2c5d36 (Stephen Colebourne 2014-02-08 18:14:31 +0000 597) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 598)     @Test\n8e2c5d36 (Stephen Colebourne 2014-02-08 18:14:31 +0000 599)     public void test_withYear_int_quarterTooLow() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "8e2c5d36": "    Add YearQuarter",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearQuarter.java",
            "test_name": "test_withQuarter_int",
            "FQS": "org.threeten.extra.TestYearQuarter.test_withQuarter_int()",
            "start_line": "612",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 613)         assertEquals(YearQuarter.of(2007, Q1), YearQuarter.of(2007, Q2).withQuarter(1));\n8e2c5d36 (Stephen Colebourne 2014-02-08 18:14:31 +0000 614)     }\n8e2c5d36 (Stephen Colebourne 2014-02-08 18:14:31 +0000 615) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 616)     @Test\n8e2c5d36 (Stephen Colebourne 2014-02-08 18:14:31 +0000 617)     public void test_withQuarter_int_quarterTooLow() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "8e2c5d36": "    Add YearQuarter",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearWeek.java",
            "test_name": "test_carry",
            "FQS": "org.threeten.extra.TestYearWeek.test_carry()",
            "start_line": "388",
            "blame_result": "44a7f43e (Kurt Alfred Kluever 2020-11-29 18:44:42 -0500 389)         assertTrue(YearWeek.of(Year.of(2014), 53).equals(TEST));\n44a7f43e (Kurt Alfred Kluever 2020-11-29 18:44:42 -0500 390)     }\n44a7f43e (Kurt Alfred Kluever 2020-11-29 18:44:42 -0500 391) \nb9144ac5 (Bjo\u0308rn Raupach       2015-02-13 20:38:48 +0100 392)     //-----------------------------------------------------------------------\nb9144ac5 (Bjo\u0308rn Raupach       2015-02-13 20:38:48 +0100 393)     // of(int, int)\n",
            "commit_hashes": {
                "44a7f43e": "    Add Year-based static factory methods to YearWeek and YearQuarter (#156)",
                "b9144ac5": "    Initial draft of YearWeek"
            },
            "Commit&issueIDs": {
                "44a7f43e": [
                    "(#156)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/156",
                "https://github.com/ThreeTen/threeten-extra/commit/44a7f43e"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearWeek.java",
            "test_name": "test_with",
            "FQS": "org.threeten.extra.TestYearWeek.test_with()",
            "start_line": "667",
            "blame_result": "cc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 668)         assertEquals(YearWeek.of(2015, 10), TEST.with(IsoFields.WEEK_OF_WEEK_BASED_YEAR, 10));\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 669)         assertEquals(YearWeek.of(2016, 1), TEST.with(IsoFields.WEEK_BASED_YEAR, 2016));\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 670)     }\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 671) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 672)     @ParameterizedTest\n",
            "commit_hashes": {
                "cc42d328": "    Make YearWeek implement Temporal (#165)",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "cc42d328": [
                    "(#165)"
                ],
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/165",
                "https://github.com/ThreeTen/threeten-extra/commit/cc42d328",
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/asyncer-io/r2dbc-mysql/",
            "file_path": "asyncer-io/r2dbc-mysql/r2dbc-mysql/src/test/java/io/asyncer/r2dbc/mysql/collation/CharCollationTest.java",
            "test_name": "fromId",
            "FQS": "io.asyncer.r2dbc.mysql.collation.CharCollationTest.fromId()",
            "start_line": "34",
            "blame_result": "8752f669 src/test/java/io/asyncer/r2dbc/mysql/collation/CharCollationTest.java (Mirro Mutth 2024-01-17 08:04:54 +0900 35)         assertNotNull(CharCollation.fromId(33, context)); // utf8 general case insensitivity\n8752f669 src/test/java/io/asyncer/r2dbc/mysql/collation/CharCollationTest.java (Mirro Mutth 2024-01-17 08:04:54 +0900 36)         assertNotNull(CharCollation.fromId(45, context)); // utf8mb4 general case insensitivity\n8752f669 src/test/java/io/asyncer/r2dbc/mysql/collation/CharCollationTest.java (Mirro Mutth 2024-01-17 08:04:54 +0900 37)         assertNotNull(CharCollation.fromId(224, context)); // utf8mb4 unicode case insensitivity\n8752f669 src/test/java/io/asyncer/r2dbc/mysql/collation/CharCollationTest.java (Mirro Mutth 2024-01-17 08:04:54 +0900 38)         assertNotNull(CharCollation.fromId(246, context)); // utf8mb4 unicode 5.20 case insensitivity\n3e85cb4e src/test/java/dev/miku/r2dbc/mysql/collation/CharCollationTest.java   (Mirro Mutth 2021-01-22 02:57:18 +0800 39)         // utf8mb4 unicode 9.00 accent insensitivity and case insensitivity\n",
            "commit_hashes": {
                "8752f669": "    Add support for MariaDB version pattern (#204)",
                "3e85cb4e": "    Polishing for tests"
            },
            "Commit&issueIDs": {
                "8752f669": [
                    "204"
                ]
            },
            "links": [
                "https://github.com/asyncer-io/r2dbc-mysql/issues/204",
                "https://github.com/asyncer-io/r2dbc-mysql/commit/8752f669"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearWeek.java",
            "test_name": "test_withYear_resolve",
            "FQS": "org.threeten.extra.TestYearWeek.test_withYear_resolve()",
            "start_line": "842",
            "blame_result": "33cb9dbe (perceptron8   2018-05-04 20:26:24 +0200 843)         assertEquals(YearWeek.of(2014, 52), YearWeek.of(2015, 53).withYear(2014));\nb9144ac5 (Bjo\u0308rn Raupach 2015-02-13 20:38:48 +0100 844)     }\nb9144ac5 (Bjo\u0308rn Raupach 2015-02-13 20:38:48 +0100 845) \n66fd7651 (mjustin       2021-03-03 16:44:42 -0600 846)     @Test\nb9144ac5 (Bjo\u0308rn Raupach 2015-02-13 20:38:48 +0100 847)     public void test_withYear_int_max() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "b9144ac5": "    Initial draft of YearWeek",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearWeek.java",
            "test_name": "test_plus",
            "FQS": "org.threeten.extra.TestYearWeek.test_plus()",
            "start_line": "860",
            "blame_result": "cc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 861)         assertEquals(YearWeek.of(2015, 2), TEST.plus(1, ChronoUnit.WEEKS));\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 862)         assertEquals(YearWeek.of(2016, 1), TEST.plus(1, IsoFields.WEEK_BASED_YEARS));\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 863)     }\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 864) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 865)     @Test\n",
            "commit_hashes": {
                "cc42d328": "    Make YearWeek implement Temporal (#165)",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "cc42d328": [
                    "(#165)"
                ],
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/165",
                "https://github.com/ThreeTen/threeten-extra/commit/cc42d328",
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearWeek.java",
            "test_name": "test_plus_TemporalAmount",
            "FQS": "org.threeten.extra.TestYearWeek.test_plus_TemporalAmount()",
            "start_line": "874",
            "blame_result": "cc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 875)         assertEquals(YearWeek.of(2015, 2), TEST.plus(Weeks.of(1)));\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 876)     }\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 877) \n9cab84e8 (Bjo\u0308rn Raupach      2015-02-19 17:24:12 +0100 878)     //-----------------------------------------------------------------------\n9cab84e8 (Bjo\u0308rn Raupach      2015-02-19 17:24:12 +0100 879)     // withWeek(int)\n",
            "commit_hashes": {
                "cc42d328": "    Make YearWeek implement Temporal (#165)",
                "9cab84e8": "    Add YearWeek class"
            },
            "Commit&issueIDs": {
                "cc42d328": [
                    "(#165)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/165",
                "https://github.com/ThreeTen/threeten-extra/commit/cc42d328"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearWeek.java",
            "test_name": "test_minus",
            "FQS": "org.threeten.extra.TestYearWeek.test_minus()",
            "start_line": "971",
            "blame_result": "cc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 972)         assertEquals(YearWeek.of(2014, 1), YearWeek.of(2014, 2).minus(1, ChronoUnit.WEEKS));\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 973)     }\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 974) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 975)     @Test\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 976)     public void test_minus_overflow() {\n",
            "commit_hashes": {
                "cc42d328": "    Make YearWeek implement Temporal (#165)",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "cc42d328": [
                    "(#165)"
                ],
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/165",
                "https://github.com/ThreeTen/threeten-extra/commit/cc42d328",
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYearWeek.java",
            "test_name": "test_minus_TemporalAmount",
            "FQS": "org.threeten.extra.TestYearWeek.test_minus_TemporalAmount()",
            "start_line": "984",
            "blame_result": "cc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 985)         assertEquals(YearWeek.of(2014, 1), YearWeek.of(2014, 2).minus(Weeks.of(1)));\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 986)     }\ncc42d328 (Stephen Colebourne 2020-11-29 22:55:31 +0000 987) \n11a6aa6a (Stephen Colebourne 2017-06-05 22:57:56 +0100 988)     //-----------------------------------------------------------------------\n11a6aa6a (Stephen Colebourne 2017-06-05 22:57:56 +0100 989)     // minusYears(long)\n",
            "commit_hashes": {
                "cc42d328": "    Make YearWeek implement Temporal (#165)",
                "11a6aa6a": "    Add YearWeek.plusYears() minusYears()"
            },
            "Commit&issueIDs": {
                "cc42d328": [
                    "(#165)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/165",
                "https://github.com/ThreeTen/threeten-extra/commit/cc42d328"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYears.java",
            "test_name": "test_from_decadesAndMonths",
            "FQS": "org.threeten.extra.TestYears.test_from_decadesAndMonths()",
            "start_line": "147",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 148)         assertEquals(Years.of(19), Years.from(new MockDecadesMonths(2, -12)));\n71b39846 (Stephen Colebourne 2014-03-22 22:56:02 +0000 149)     }\n71b39846 (Stephen Colebourne 2014-03-22 22:56:02 +0000 150) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 151)     @Test\n71b39846 (Stephen Colebourne 2014-03-22 22:56:02 +0000 152)     public void test_from_wrongUnit_remainder() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "71b39846": "    Extend conversion between amount types",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/TestYears.java",
            "test_name": "test_between",
            "FQS": "org.threeten.extra.TestYears.test_between()",
            "start_line": "207",
            "blame_result": "467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 208)         assertEquals(Years.of(2), Years.between(LocalDate.of(2019, 1, 1), LocalDate.of(2021, 1, 1)));\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 209)     }\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 210) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 211)     @Test\n467cd401 (Stephen Colebourne 2019-01-16 16:32:40 +0000 212)     public void test_between_date_null() {\n",
            "commit_hashes": {
                "467cd401": "    Increase test coverage and fix PMD issues (#119)",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "467cd401": [
                    "(#119)"
                ],
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/119",
                "https://github.com/ThreeTen/threeten-extra/commit/467cd401",
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestAccountingChronology.java",
            "test_name": "test_plus_Period",
            "FQS": "org.threeten.extra.chrono.TestAccountingChronology.test_plus_Period()",
            "start_line": "725",
            "blame_result": "33cb9dbe (perceptron8    2018-05-04 20:26:24 +0200 726)         assertEquals(INSTANCE.date(2014, 8, 1), INSTANCE.date(2014, 5, 26).plus(INSTANCE.period(0, 2, 3)));\nd0204faf (Clockwork-Muse 2014-11-23 23:46:38 +0900 727)     }\nd0204faf (Clockwork-Muse 2014-11-23 23:46:38 +0900 728) \n66fd7651 (mjustin        2021-03-03 16:44:42 -0600 729)     @Test\nd0204faf (Clockwork-Muse 2014-11-23 23:46:38 +0900 730)     public void test_plus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "d0204faf": "    Implement Accounting 52/53 week calendar",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestAccountingChronology.java",
            "test_name": "test_minus_Period",
            "FQS": "org.threeten.extra.chrono.TestAccountingChronology.test_minus_Period()",
            "start_line": "735",
            "blame_result": "33cb9dbe (perceptron8    2018-05-04 20:26:24 +0200 736)         assertEquals(INSTANCE.date(2014, 3, 23), INSTANCE.date(2014, 5, 26).minus(INSTANCE.period(0, 2, 3)));\nd0204faf (Clockwork-Muse 2014-11-23 23:46:38 +0900 737)     }\nd0204faf (Clockwork-Muse 2014-11-23 23:46:38 +0900 738) \n66fd7651 (mjustin        2021-03-03 16:44:42 -0600 739)     @Test\nd0204faf (Clockwork-Muse 2014-11-23 23:46:38 +0900 740)     public void test_minus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "d0204faf": "    Implement Accounting 52/53 week calendar",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestCopticChronology.java",
            "test_name": "test_plus_Period",
            "FQS": "org.threeten.extra.chrono.TestCopticChronology.test_plus_Period()",
            "start_line": "616",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 617)         assertEquals(CopticDate.of(1727, 7, 29), CopticDate.of(1727, 5, 26).plus(CopticChronology.INSTANCE.period(0, 2, 3)));\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 618)     }\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 619) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 620)     @Test\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 621)     public void test_plus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "127b4329": "    Increase chrono test coverage",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestCopticChronology.java",
            "test_name": "test_minus_Period",
            "FQS": "org.threeten.extra.chrono.TestCopticChronology.test_minus_Period()",
            "start_line": "626",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 627)         assertEquals(CopticDate.of(1727, 3, 23), CopticDate.of(1727, 5, 26).minus(CopticChronology.INSTANCE.period(0, 2, 3)));\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 628)     }\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 629) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 630)     @Test\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 631)     public void test_minus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "127b4329": "    Increase chrono test coverage",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestDiscordianChronology.java",
            "test_name": "test_plus_Period",
            "FQS": "org.threeten.extra.chrono.TestDiscordianChronology.test_plus_Period()",
            "start_line": "940",
            "blame_result": "33cb9dbe (perceptron8    2018-05-04 20:26:24 +0200 941)         assertEquals(DiscordianDate.of(2015, 2, 29), DiscordianDate.of(2014, 5, 26).plus(DiscordianChronology.INSTANCE.period(0, 2, 3)));\n5cec86be (Clockwork-Muse 2014-10-07 15:42:55 +0900 942)     }\n5cec86be (Clockwork-Muse 2014-10-07 15:42:55 +0900 943) \n66fd7651 (mjustin        2021-03-03 16:44:42 -0600 944)     @Test\n5cec86be (Clockwork-Muse 2014-10-07 15:42:55 +0900 945)     public void test_plus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "5cec86be": "    Discordian calendar",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestDiscordianChronology.java",
            "test_name": "test_minus_Period",
            "FQS": "org.threeten.extra.chrono.TestDiscordianChronology.test_minus_Period()",
            "start_line": "950",
            "blame_result": "33cb9dbe (perceptron8    2018-05-04 20:26:24 +0200 951)         assertEquals(DiscordianDate.of(2014, 3, 23), DiscordianDate.of(2014, 5, 26).minus(DiscordianChronology.INSTANCE.period(0, 2, 3)));\n5cec86be (Clockwork-Muse 2014-10-07 15:42:55 +0900 952)     }\n5cec86be (Clockwork-Muse 2014-10-07 15:42:55 +0900 953) \n66fd7651 (mjustin        2021-03-03 16:44:42 -0600 954)     @Test\n5cec86be (Clockwork-Muse 2014-10-07 15:42:55 +0900 955)     public void test_minus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "5cec86be": "    Discordian calendar",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestEthiopicChronology.java",
            "test_name": "test_plus_Period",
            "FQS": "org.threeten.extra.chrono.TestEthiopicChronology.test_plus_Period()",
            "start_line": "640",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 641)         assertEquals(EthiopicDate.of(2006, 7, 29), EthiopicDate.of(2006, 5, 26).plus(EthiopicChronology.INSTANCE.period(0, 2, 3)));\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 642)     }\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 643) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 644)     @Test\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 645)     public void test_plus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "127b4329": "    Increase chrono test coverage",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestEthiopicChronology.java",
            "test_name": "test_minus_Period",
            "FQS": "org.threeten.extra.chrono.TestEthiopicChronology.test_minus_Period()",
            "start_line": "650",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 651)         assertEquals(EthiopicDate.of(2006, 3, 23), EthiopicDate.of(2006, 5, 26).minus(EthiopicChronology.INSTANCE.period(0, 2, 3)));\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 652)     }\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 653) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 654)     @Test\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 655)     public void test_minus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "127b4329": "    Increase chrono test coverage",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestInternationalFixedChronology.java",
            "test_name": "test_plus_Period",
            "FQS": "org.threeten.extra.chrono.TestInternationalFixedChronology.test_plus_Period()",
            "start_line": "1317",
            "blame_result": "33cb9dbe (perceptron8 2018-05-04 20:26:24 +0200 1318)         assertEquals(InternationalFixedDate.of(2014, 8, 1), InternationalFixedDate.of(2014, 5, 26).plus(InternationalFixedChronology.INSTANCE.period(0, 2, 3)));\nec7a5fff (Carlo Dapor 2015-02-23 09:27:07 +0100 1319)     }\nec7a5fff (Carlo Dapor 2015-02-23 09:27:07 +0100 1320) \n66fd7651 (mjustin     2021-03-03 16:44:42 -0600 1321)     @Test\nec7a5fff (Carlo Dapor 2015-02-23 09:27:07 +0100 1322)     public void test_plus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "ec7a5fff": "    Add International Fixed Chronology",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestInternationalFixedChronology.java",
            "test_name": "test_minus_Period",
            "FQS": "org.threeten.extra.chrono.TestInternationalFixedChronology.test_minus_Period()",
            "start_line": "1327",
            "blame_result": "33cb9dbe (perceptron8 2018-05-04 20:26:24 +0200 1328)         assertEquals(InternationalFixedDate.of(2014, 3, 23), InternationalFixedDate.of(2014, 5, 26).minus(InternationalFixedChronology.INSTANCE.period(0, 2, 3)));\nec7a5fff (Carlo Dapor 2015-02-23 09:27:07 +0100 1329)     }\nec7a5fff (Carlo Dapor 2015-02-23 09:27:07 +0100 1330) \n66fd7651 (mjustin     2021-03-03 16:44:42 -0600 1331)     @Test\nec7a5fff (Carlo Dapor 2015-02-23 09:27:07 +0100 1332)     public void test_minus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "ec7a5fff": "    Add International Fixed Chronology",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestJulianChronology.java",
            "test_name": "test_plus_Period",
            "FQS": "org.threeten.extra.chrono.TestJulianChronology.test_plus_Period()",
            "start_line": "693",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 694)         assertEquals(JulianDate.of(2014, 7, 29), JulianDate.of(2014, 5, 26).plus(JulianChronology.INSTANCE.period(0, 2, 3)));\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 695)     }\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 696) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 697)     @Test\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 698)     public void test_plus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "127b4329": "    Increase chrono test coverage",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestJulianChronology.java",
            "test_name": "test_minus_Period",
            "FQS": "org.threeten.extra.chrono.TestJulianChronology.test_minus_Period()",
            "start_line": "703",
            "blame_result": "33cb9dbe (perceptron8        2018-05-04 20:26:24 +0200 704)         assertEquals(JulianDate.of(2014, 3, 23), JulianDate.of(2014, 5, 26).minus(JulianChronology.INSTANCE.period(0, 2, 3)));\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 705)     }\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 706) \n66fd7651 (mjustin            2021-03-03 16:44:42 -0600 707)     @Test\n127b4329 (Stephen Colebourne 2014-06-08 22:21:54 +0100 708)     public void test_minus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "127b4329": "    Increase chrono test coverage",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestPaxChronology.java",
            "test_name": "test_plus_Period",
            "FQS": "org.threeten.extra.chrono.TestPaxChronology.test_plus_Period()",
            "start_line": "842",
            "blame_result": "33cb9dbe (perceptron8    2018-05-04 20:26:24 +0200 843)         assertEquals(PaxDate.of(2014, 7, 28), PaxDate.of(2014, 5, 26).plus(PaxChronology.INSTANCE.period(0, 2, 2)));\n75532d7a (Clockwork-Muse 2014-09-22 14:41:32 +0900 844)     }\n75532d7a (Clockwork-Muse 2014-09-22 14:41:32 +0900 845) \n66fd7651 (mjustin        2021-03-03 16:44:42 -0600 846)     @Test\n75532d7a (Clockwork-Muse 2014-09-22 14:41:32 +0900 847)     public void test_plus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "75532d7a": "    Add plus/minus tests.",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestPaxChronology.java",
            "test_name": "test_minus_Period",
            "FQS": "org.threeten.extra.chrono.TestPaxChronology.test_minus_Period()",
            "start_line": "852",
            "blame_result": "33cb9dbe (perceptron8    2018-05-04 20:26:24 +0200 853)         assertEquals(PaxDate.of(2014, 3, 23), PaxDate.of(2014, 5, 26).minus(PaxChronology.INSTANCE.period(0, 2, 3)));\n75532d7a (Clockwork-Muse 2014-09-22 14:41:32 +0900 854)     }\n75532d7a (Clockwork-Muse 2014-09-22 14:41:32 +0900 855) \n66fd7651 (mjustin        2021-03-03 16:44:42 -0600 856)     @Test\n75532d7a (Clockwork-Muse 2014-09-22 14:41:32 +0900 857)     public void test_minus_Period_ISO() {\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "75532d7a": "    Add plus/minus tests.",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestSymmetry010Chronology.java",
            "test_name": "test_plus_Period",
            "FQS": "org.threeten.extra.chrono.TestSymmetry010Chronology.test_plus_Period()",
            "start_line": "944",
            "blame_result": "33cb9dbe (perceptron8 2018-05-04 20:26:24 +0200 945)         assertEquals(Symmetry010Date.of(2014, 7, 29),\n33cb9dbe (perceptron8 2018-05-04 20:26:24 +0200 946)                 Symmetry010Date.of(2014, 5, 21).plus(Symmetry010Chronology.INSTANCE.period(0, 2, 8)));\n7610136d (Carlo Dapor 2015-05-31 22:13:20 +0200 947)     }\n7610136d (Carlo Dapor 2015-05-31 22:13:20 +0200 948) \n66fd7651 (mjustin     2021-03-03 16:44:42 -0600 949)     @Test\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "7610136d": "    Implemented Symmetry010 chronology",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestSymmetry010Chronology.java",
            "test_name": "test_minus_Period",
            "FQS": "org.threeten.extra.chrono.TestSymmetry010Chronology.test_minus_Period()",
            "start_line": "955",
            "blame_result": "33cb9dbe (perceptron8 2018-05-04 20:26:24 +0200 956)         assertEquals(Symmetry010Date.of(2014, 3, 23),\n33cb9dbe (perceptron8 2018-05-04 20:26:24 +0200 957)                 Symmetry010Date.of(2014, 5, 26).minus(Symmetry010Chronology.INSTANCE.period(0, 2, 3)));\n7610136d (Carlo Dapor 2015-05-31 22:13:20 +0200 958)     }\n7610136d (Carlo Dapor 2015-05-31 22:13:20 +0200 959) \n66fd7651 (mjustin     2021-03-03 16:44:42 -0600 960)     @Test\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "7610136d": "    Implemented Symmetry010 chronology",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestSymmetry454Chronology.java",
            "test_name": "test_plus_Period",
            "FQS": "org.threeten.extra.chrono.TestSymmetry454Chronology.test_plus_Period()",
            "start_line": "952",
            "blame_result": "33cb9dbe (perceptron8 2018-05-04 20:26:24 +0200 953)         assertEquals(Symmetry454Date.of(2014, 8, 1),\n33cb9dbe (perceptron8 2018-05-04 20:26:24 +0200 954)                 Symmetry454Date.of(2014, 5, 21).plus(Symmetry454Chronology.INSTANCE.period(0, 2, 8)));\n90234ee2 (Carlo Dapor 2015-05-31 22:08:54 +0200 955)     }\n90234ee2 (Carlo Dapor 2015-05-31 22:08:54 +0200 956) \n66fd7651 (mjustin     2021-03-03 16:44:42 -0600 957)     @Test\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "90234ee2": "    Implemented Symmetry454 chronology",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/ThreeTen/threeten-extra/",
            "file_path": "ThreeTen/threeten-extra/src/test/java/org/threeten/extra/chrono/TestSymmetry454Chronology.java",
            "test_name": "test_minus_Period",
            "FQS": "org.threeten.extra.chrono.TestSymmetry454Chronology.test_minus_Period()",
            "start_line": "963",
            "blame_result": "33cb9dbe (perceptron8 2018-05-04 20:26:24 +0200 964)         assertEquals(Symmetry454Date.of(2014, 3, 23),\n33cb9dbe (perceptron8 2018-05-04 20:26:24 +0200 965)                 Symmetry454Date.of(2014, 5, 26).minus(Symmetry454Chronology.INSTANCE.period(0, 2, 3)));\n90234ee2 (Carlo Dapor 2015-05-31 22:08:54 +0200 966)     }\n90234ee2 (Carlo Dapor 2015-05-31 22:08:54 +0200 967) \n66fd7651 (mjustin     2021-03-03 16:44:42 -0600 968)     @Test\n",
            "commit_hashes": {
                "33cb9dbe": "    Fix assertions order",
                "90234ee2": "    Implemented Symmetry454 chronology",
                "66fd7651": "    Upgrade to JUnit 5 (#173)"
            },
            "Commit&issueIDs": {
                "66fd7651": [
                    "(#173)"
                ]
            },
            "links": [
                "https://github.com/ThreeTen/threeten-extra/issues/173",
                "https://github.com/ThreeTen/threeten-extra/commit/66fd7651"
            ]
        },
        {
            "poj_link": "https://github.com/winder/Universal-G-Code-Sender/",
            "file_path": "winder/Universal-G-Code-Sender/ugs-core/test/com/willwinder/universalgcodesender/model/PartialPositionTest.java",
            "test_name": "testUnits",
            "FQS": "com.willwinder.universalgcodesender.model.PartialPositionTest.testUnits()",
            "start_line": "66",
            "blame_result": "90fe0b869 (Daniel Weigl   2019-05-03 18:09:05 +0200 67)         PartialPosition p = new PartialPosition(1.0, 2.0, 3.0, UnitUtils.Units.MM);\n90fe0b869 (Daniel Weigl   2019-05-03 18:09:05 +0200 68)         PartialPosition same = p.getPositionIn(UnitUtils.Units.MM);\n90fe0b869 (Daniel Weigl   2019-05-03 18:09:05 +0200 69)         PartialPosition inch = p.getPositionIn(UnitUtils.Units.INCH);\n90fe0b869 (Daniel Weigl   2019-05-03 18:09:05 +0200 70) \n4744dc688 (Joacim Breiler 2022-01-05 07:20:46 +0100 71)         assertEquals(p.getX(), same.getX(), 0.1d);\n",
            "commit_hashes": {
                "90fe0b869": "    refactor Jog to use PartialPosition",
                "4744dc688": "    Minor gcode editor bugfixes (#1762)"
            },
            "Commit&issueIDs": {
                "4744dc688": [
                    "1762"
                ]
            },
            "links": [
                "https://github.com/winder/Universal-G-Code-Sender/issues/1762",
                "https://github.com/winder/Universal-G-Code-Sender/commit/4744dc688"
            ]
        },
        {
            "poj_link": "https://github.com/winder/Universal-G-Code-Sender/",
            "file_path": "winder/Universal-G-Code-Sender/ugs-platform/ugs-platform-plugin-designer/src/test/java/com/willwinder/ugs/nbp/designer/io/ugsd/UgsDesignReaderTest.java",
            "test_name": "readDesignWithGroup",
            "FQS": "com.willwinder.ugs.nbp.designer.io.ugsd.UgsDesignReaderTest.readDesignWithGroup()",
            "start_line": "176",
            "blame_result": "60686f16f (Joacim Breiler 2023-01-17 18:25:25 +0100 177)         Point point = new Point(10, 20);\n60686f16f (Joacim Breiler 2023-01-17 18:25:25 +0100 178)         Group entity = new Group();\n60686f16f (Joacim Breiler 2023-01-17 18:25:25 +0100 179)         entity.addChild(point);\nc64248260 (Joacim Breiler 2021-07-15 15:06:39 +0200 180)         String data = convertEntityToString(entity);\nc64248260 (Joacim Breiler 2021-07-15 15:06:39 +0200 181) \n",
            "commit_hashes": {
                "60686f16f": "    Add a feature for hiding objects in designer (#2128)",
                "c64248260": "    Feature/designer (#1629)"
            },
            "Commit&issueIDs": {
                "60686f16f": [
                    "2128"
                ],
                "c64248260": [
                    "1629"
                ]
            },
            "links": [
                "https://github.com/winder/Universal-G-Code-Sender/issues/2128",
                "https://github.com/winder/Universal-G-Code-Sender/commit/60686f16f",
                "https://github.com/winder/Universal-G-Code-Sender/issues/1629",
                "https://github.com/winder/Universal-G-Code-Sender/commit/c64248260"
            ]
        },
        {
            "poj_link": "https://github.com/LibrePDF/OpenPDF/",
            "file_path": "LibrePDF/OpenPDF/openpdf/src/test/java/com/lowagie/text/pdf/SimplePdfTest.java",
            "test_name": "testDocumentId",
            "FQS": "com.lowagie.text.pdf.SimplePdfTest.testDocumentId()",
            "start_line": "76",
            "blame_result": "1d5325f1a (Aleksandr Beliakov 2023-11-01 12:16:28 +0100 77)         byte[] docBytes = null;\n1d5325f1a (Aleksandr Beliakov 2023-11-01 12:16:28 +0100 78)         try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n443d0059d (Claudio Clemens    2024-03-09 08:37:52 +0100 79)                 Document document = new Document(PageSize.A4)) {\n1d5325f1a (Aleksandr Beliakov 2023-11-01 12:16:28 +0100 80)             PdfWriter pdfWriter = PdfWriter.getInstance(document, baos);\n1d5325f1a (Aleksandr Beliakov 2023-11-01 12:16:28 +0100 81)             document.open();\n",
            "commit_hashes": {
                "1d5325f1a": "    Align /ID entry creation with 14.4 File Identifiers (#876)",
                "443d0059d": "    Reformatted all Java code and other files"
            },
            "Commit&issueIDs": {
                "1d5325f1a": [
                    "876"
                ]
            },
            "links": [
                "https://github.com/LibrePDF/OpenPDF/issues/876",
                "https://github.com/LibrePDF/OpenPDF/commit/1d5325f1a"
            ]
        },
        {
            "poj_link": "https://github.com/LibrePDF/OpenPDF/",
            "file_path": "LibrePDF/OpenPDF/openpdf/src/test/java/com/lowagie/text/pdf/TableRowSpanEvenSplitTest.java",
            "test_name": "threeRowsLockedWidth",
            "FQS": "com.lowagie.text.pdf.TableRowSpanEvenSplitTest.threeRowsLockedWidth()",
            "start_line": "166",
            "blame_result": "a53892233 openpdf/src/test/java/com/lowagie/text/pdf/TableRowSpanEvenSplitTest.java  (Hanno Fellmann  2024-01-17 22:48:31 +0100 167)         Document document = new Document(PageSize.A4, 10, 10, 10, 10);\n1ef2c14c7 openpdf/src/test/java/com/lowagie/text/pdf/table/RowSpanEvenSplitTest.java (zrh-LegionLinux 2022-04-24 00:12:51 +0800 168)         ByteArrayOutputStream pdfOut = new ByteArrayOutputStream();\n1ef2c14c7 openpdf/src/test/java/com/lowagie/text/pdf/table/RowSpanEvenSplitTest.java (zrh-LegionLinux 2022-04-24 00:12:51 +0800 169)         PdfWriter.getInstance(document, pdfOut);\na53892233 openpdf/src/test/java/com/lowagie/text/pdf/TableRowSpanEvenSplitTest.java  (Hanno Fellmann  2024-01-17 22:48:31 +0100 170) \na53892233 openpdf/src/test/java/com/lowagie/text/pdf/TableRowSpanEvenSplitTest.java  (Hanno Fellmann  2024-01-17 22:48:31 +0100 171)         float width = document.getPageSize().getWidth() - 20;\n",
            "commit_hashes": {
                "a53892233": "    Fix row height calculation for tables with locked width (#1027)",
                "1ef2c14c7": "    update test"
            },
            "Commit&issueIDs": {
                "a53892233": [
                    "1027"
                ]
            },
            "links": [
                "https://github.com/LibrePDF/OpenPDF/issues/1027",
                "https://github.com/LibrePDF/OpenPDF/commit/a53892233"
            ]
        },
        {
            "poj_link": "https://github.com/mongodb/mongo-spark/",
            "file_path": "mongodb/mongo-spark/src/test/java/com/mongodb/spark/sql/connector/config/SimpleMongoConfigTest.java",
            "test_name": "configsCreateForSameMapAreEqual",
            "FQS": "com.mongodb.spark.sql.connector.config.SimpleMongoConfigTest.configsCreateForSameMapAreEqual()",
            "start_line": "46",
            "blame_result": "cb9c810e src/test/java/com/mongodb/spark/sql/connector/connection/MongoClientCacheTest.java (Ross Lawley  2024-04-03 13:45:37 +0100 47)     MongoConfig config1 = MongoConfig.createConfig(CONFIG_MAP);\ncb9c810e src/test/java/com/mongodb/spark/sql/connector/connection/MongoClientCacheTest.java (Ross Lawley  2024-04-03 13:45:37 +0100 48)     MongoConfig config2 = MongoConfig.createConfig(CONFIG_MAP);\n993834f0 src/test/java/com/mongodb/spark/sql/connector/config/SimpleMongoConfigTest.java    (Tomasz Zarna 2024-04-03 14:49:37 +0200 49) \n993834f0 src/test/java/com/mongodb/spark/sql/connector/config/SimpleMongoConfigTest.java    (Tomasz Zarna 2024-04-03 14:49:37 +0200 50)     assertEquals(config1, config2);\n993834f0 src/test/java/com/mongodb/spark/sql/connector/config/SimpleMongoConfigTest.java    (Tomasz Zarna 2024-04-03 14:49:37 +0200 51)   }\n",
            "commit_hashes": {
                "cb9c810e": "    Spotless code reformat",
                "993834f0": "    SimpleMongoConfig does not implement hashCode/equals (#113)"
            },
            "Commit&issueIDs": {
                "993834f0": [
                    "113"
                ]
            },
            "links": [
                "https://github.com/mongodb/mongo-spark/issues/113",
                "https://github.com/mongodb/mongo-spark/commit/993834f0"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CollectorFormatterTest.java",
            "test_name": "testGetSetFormat",
            "FQS": "org.eclipse.angus.mail.util.logging.CollectorFormatterTest.testGetSetFormat()",
            "start_line": "634",
            "blame_result": "216c5f80 (Lukas Jungmann 2023-05-05 13:18:48 +0200 635)         CollectorFormatter cf = new CollectorFormatter();\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 636)         final String init = cf.getFormat();\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 637)         String pattern = \"foo\";\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 638)         assertNotEquals(pattern, cf.getFormat());\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 639)         cf.setFormat(pattern);\n",
            "commit_hashes": {
                "216c5f80": "    fix code formatting through the repo",
                "76fde654": "    WildFly support for MailHandler #110 (#114)"
            },
            "Commit&issueIDs": {
                "76fde654": [
                    "#110",
                    "114"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/110",
                "https://github.com/eclipse-ee4j/angus-mail/commit/76fde654"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testGetSetFormat",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testGetSetFormat()",
            "start_line": "181",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 182)         CompactFormatter cf = new CompactFormatter();\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 183)         final String init = cf.getFormat();\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 184)         String pattern = \"foo\";\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 185)         assertNotEquals(pattern, cf.getFormat());\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 186)         cf.setFormat(pattern);\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)",
                "76fde654": "    WildFly support for MailHandler #110 (#114)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ],
                "76fde654": [
                    "#110",
                    "114"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8",
                "https://github.com/eclipse-ee4j/angus-mail/issues/110",
                "https://github.com/eclipse-ee4j/angus-mail/commit/76fde654"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatMessage_LogRecordEvil",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatMessage_LogRecordEvil()",
            "start_line": "835",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 836)         LogRecord record = new LogRecord(Level.SEVERE, \"\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 837)         record.setThrown(createEvilThrowable());\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 838)         CompactFormatter cf = new CompactFormatter(\"%5$s\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 839)         String result = cf.formatMessage(record);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 840)         assertNotNull(result);\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "excludeLastArrayInsideArray",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.excludeLastArrayInsideArray()",
            "start_line": "870",
            "blame_result": "6f810ea79 (Tatu Saloranta     2022-01-02 17:16:13 -0800 871)         JsonParser p0 = JSON_F.createParser(a2q(\n9fd899d44 (Przemyslaw Gomulka 2023-01-08 01:27:39 +0100 872)                 \"['skipped', [], ['skipped']]\"));\ne183d16b2 (Cowtowncoder       2015-04-29 16:05:00 -0700 873)         JsonParser p = new FilteringParserDelegate(p0,\n8bed4d836 (Nik Everett        2022-01-02 19:41:44 -0500 874)                 INCLUDE_EMPTY_IF_NOT_FILTERED,\n5d3a25664 (Jonathan Haber     2020-11-06 17:21:37 -0500 875)                 Inclusion.INCLUDE_ALL_AND_PATH,\n",
            "commit_hashes": {
                "6f810ea79": "    Bit of test code cleanup",
                "9fd899d44": "    Allow FilteringParserDelegate to skip last elements in array (#883)",
                "e183d16b2": "    More testing for parser/filter comb",
                "8bed4d836": "    Allow TokenFilter to preserve empty (#729)",
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)"
            },
            "Commit&issueIDs": {
                "9fd899d44": [
                    "883"
                ],
                "8bed4d836": [
                    "729"
                ],
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/883",
                "https://github.com/FasterXML/jackson-core/commit/9fd899d44",
                "https://github.com/FasterXML/jackson-core/issues/729",
                "https://github.com/FasterXML/jackson-core/commit/8bed4d836",
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "callbacksFromFilteringParserDelegate1",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.callbacksFromFilteringParserDelegate1()",
            "start_line": "882",
            "blame_result": "e2d2fc219 (Dai MIKURUBE   2023-09-24 02:27:21 +0900 883)         LoggingFilter loggingFilter = new LoggingFilter(new JsonPointerBasedFilter(\"/parent\"));\ne2d2fc219 (Dai MIKURUBE   2023-09-24 02:27:21 +0900 884) \n6f810ea79 (Tatu Saloranta 2022-01-02 17:16:13 -0800 885)         JsonParser p0 = JSON_F.createParser(a2q(\ne2d2fc219 (Dai MIKURUBE   2023-09-24 02:27:21 +0900 886)                 \"{'parent':{'child':1}}\"));\ne183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 887)         JsonParser p = new FilteringParserDelegate(p0,\n",
            "commit_hashes": {
                "e2d2fc219": "    Call the right filterFinishArray/Object from FilteringParserDelegate (#1111)",
                "6f810ea79": "    Bit of test code cleanup",
                "e183d16b2": "    More testing for parser/filter comb"
            },
            "Commit&issueIDs": {
                "e2d2fc219": [
                    "1111"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/1111",
                "https://github.com/FasterXML/jackson-core/commit/e2d2fc219"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/io/schubfach/MathUtilsTest.java",
            "test_name": "testFlog10threeQuartersPow2",
            "FQS": "com.fasterxml.jackson.core.io.schubfach.MathUtilsTest.testFlog10threeQuartersPow2()",
            "start_line": "174",
            "blame_result": "5c3d6ff17 (PJ Fanning 2022-06-22 00:48:41 +0100 175)         // First check the case e = 1\n5c3d6ff17 (PJ Fanning 2022-06-22 00:48:41 +0100 176)         assertEquals(0, flog10threeQuartersPow2(1),\n5c3d6ff17 (PJ Fanning 2022-06-22 00:48:41 +0100 177)                 \"flog10threeQuartersPow2\");\n5c3d6ff17 (PJ Fanning 2022-06-22 00:48:41 +0100 178) \n5c3d6ff17 (PJ Fanning 2022-06-22 00:48:41 +0100 179)         /*\n",
            "commit_hashes": {
                "5c3d6ff17": "    extend schubfach tests (#772)"
            },
            "Commit&issueIDs": {
                "5c3d6ff17": [
                    "(#772)"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/772",
                "https://github.com/FasterXML/jackson-core/commit/5c3d6ff17"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/io/schubfach/MathUtilsTest.java",
            "test_name": "testFlog10pow2",
            "FQS": "com.fasterxml.jackson.core.io.schubfach.MathUtilsTest.testFlog10pow2()",
            "start_line": "288",
            "blame_result": "5c3d6ff17 (PJ Fanning 2022-06-22 00:48:41 +0100 289)         // First check the case e = 0\n5c3d6ff17 (PJ Fanning 2022-06-22 00:48:41 +0100 290)         assertEquals(0, flog10pow2(0), \"flog10pow2\");\n5c3d6ff17 (PJ Fanning 2022-06-22 00:48:41 +0100 291) \n5c3d6ff17 (PJ Fanning 2022-06-22 00:48:41 +0100 292)         /*\n5c3d6ff17 (PJ Fanning 2022-06-22 00:48:41 +0100 293)         Now check the range F * Q_MIN <= e < 0.\n",
            "commit_hashes": {
                "5c3d6ff17": "    extend schubfach tests (#772)"
            },
            "Commit&issueIDs": {
                "5c3d6ff17": [
                    "(#772)"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/772",
                "https://github.com/FasterXML/jackson-core/commit/5c3d6ff17"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/jsonptr/JsonPointerTest.java",
            "test_name": "equality",
            "FQS": "com.fasterxml.jackson.core.jsonptr.JsonPointerTest.equality()",
            "start_line": "151",
            "blame_result": "fff79ea51 src/test/java/com/fasterxml/jackson/core/jsonptr/JsonPointerTest.java (timo-a         2024-03-22 22:16:22 +0100 152)         assertNotEquals(JsonPointer.empty(), JsonPointer.compile(\"/\"));\n66d935869 src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java         (Tatu Saloranta 2019-08-29 14:10:49 -0700 153) \n66d935869 src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java         (Tatu Saloranta 2019-08-29 14:10:49 -0700 154)         assertEquals(JsonPointer.compile(\"/foo/3\"), JsonPointer.compile(\"/foo/3\"));\nfff79ea51 src/test/java/com/fasterxml/jackson/core/jsonptr/JsonPointerTest.java (timo-a         2024-03-22 22:16:22 +0100 155)         assertNotEquals(JsonPointer.empty(), JsonPointer.compile(\"/12\"));\nfff79ea51 src/test/java/com/fasterxml/jackson/core/jsonptr/JsonPointerTest.java (timo-a         2024-03-22 22:16:22 +0100 156)         assertNotEquals(JsonPointer.compile(\"/12\"), JsonPointer.empty());\n",
            "commit_hashes": {
                "fff79ea51": "    update(tests): migrate JUnit 4 code to JUnit 5 in core.base64 to core.sym (#1247)",
                "66d935869": "    Improve JsonPointer tests"
            },
            "Commit&issueIDs": {
                "fff79ea51": [
                    "1247"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/1247",
                "https://github.com/FasterXML/jackson-core/commit/fff79ea51"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/jsonptr/JsonPointerTest.java",
            "test_name": "appendProperty",
            "FQS": "com.fasterxml.jackson.core.jsonptr.JsonPointerTest.appendProperty()",
            "start_line": "216",
            "blame_result": "240c45594 src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java         (Tatu Saloranta 2013-09-03 21:14:50 -0700 217)     {\n240c45594 src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java         (Tatu Saloranta 2013-09-03 21:14:50 -0700 218)         final String INPUT = \"/Image/15/name\";\nf45d03502 src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java         (ILGO0413       2021-10-19 20:48:33 +0400 219)         final String APPEND_NO_SLASH = \"extension\";\nfb6955453 src/test/java/com/fasterxml/jackson/core/jsonptr/JsonPointerTest.java (Tatu Saloranta 2023-12-14 18:45:35 -0800 220)         final String APPEND_WITH_SLASH = \"/extension~\";\nf45d03502 src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java         (ILGO0413       2021-10-19 20:48:33 +0400 221) \n",
            "commit_hashes": {
                "240c45594": "    Yet more fixes to JsonPointer handling",
                "f45d03502": "    Add appendIndex and appendProperty methods (#722)",
                "fb6955453": "    Fix #1145: escape `property` in `JsonPointer.append(String)` (#1171)"
            },
            "Commit&issueIDs": {
                "f45d03502": [
                    "722"
                ],
                "fb6955453": [
                    "1171"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/722",
                "https://github.com/FasterXML/jackson-core/commit/f45d03502",
                "https://github.com/FasterXML/jackson-core/issues/1171",
                "https://github.com/FasterXML/jackson-core/commit/fb6955453"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatServerSidetMetroException",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatServerSidetMetroException()",
            "start_line": "1042",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1043)         //com.sun.xml.ws.developer.ServerSideException\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1044)         String msg = \"server error\";\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1045)         NullPointerException npe = new NullPointerException(msg);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1046)         Throwable t = new PrefixException(npe.getClass().getName(), msg, null);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1047)         assertEquals(msg, npe.getMessage());\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/jsonptr/JsonPointerTest.java",
            "test_name": "appendPropertyEmpty",
            "FQS": "com.fasterxml.jackson.core.jsonptr.JsonPointerTest.appendPropertyEmpty()",
            "start_line": "235",
            "blame_result": "fb6955453 (Tatu Saloranta 2023-12-14 18:45:35 -0800 236)     {\nfb6955453 (Tatu Saloranta 2023-12-14 18:45:35 -0800 237)         final String BASE = \"/Image/72/src\";\nfb6955453 (Tatu Saloranta 2023-12-14 18:45:35 -0800 238) \nfb6955453 (Tatu Saloranta 2023-12-14 18:45:35 -0800 239)         JsonPointer basePtr = JsonPointer.compile(BASE);\nfb6955453 (Tatu Saloranta 2023-12-14 18:45:35 -0800 240) \n",
            "commit_hashes": {
                "fb6955453": "    Fix #1145: escape `property` in `JsonPointer.append(String)` (#1171)"
            },
            "Commit&issueIDs": {
                "fb6955453": [
                    "1171"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/1171",
                "https://github.com/FasterXML/jackson-core/commit/fb6955453"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/jsonptr/JsonPointerTest.java",
            "test_name": "longNumbers",
            "FQS": "com.fasterxml.jackson.core.jsonptr.JsonPointerTest.longNumbers()",
            "start_line": "298",
            "blame_result": "4769c36b6 src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java         (Tatu Saloranta 2014-03-14 13:26:30 -0700 299)     {\n5a22ee46c src/test/java/com/fasterxml/jackson/core/jsonptr/JsonPointerTest.java (Gary Gregory   2024-02-15 11:40:54 -0500 300)         final long LONG_ID = (Integer.MAX_VALUE) + 1L;\n31d4d85dc src/test/java/com/fasterxml/jackson/core/jsonptr/JsonPointerTest.java (Tatu Saloranta 2023-02-02 19:31:16 -0800 301) \n4769c36b6 src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java         (Tatu Saloranta 2014-03-14 13:26:30 -0700 302)         final String INPUT = \"/User/\"+LONG_ID;\n4769c36b6 src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java         (Tatu Saloranta 2014-03-14 13:26:30 -0700 303) \n",
            "commit_hashes": {
                "4769c36b6": "    addressing #133",
                "5a22ee46c": "    Use String#isEmpty(), remove redundancies, and reduce verbose code (#1225)",
                "31d4d85dc": "    Remove trailing whitespace from sources"
            },
            "Commit&issueIDs": {
                "4769c36b6": [
                    "#133"
                ],
                "5a22ee46c": [
                    "1225"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/133",
                "https://github.com/FasterXML/jackson-core/commit/4769c36b6",
                "https://github.com/FasterXML/jackson-core/issues/1225",
                "https://github.com/FasterXML/jackson-core/commit/5a22ee46c"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/sym/SymbolTableMergingTest.java",
            "test_name": "hashCalc",
            "FQS": "com.fasterxml.jackson.core.sym.SymbolTableMergingTest.hashCalc()",
            "start_line": "56",
            "blame_result": "b6b164880 src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java  (Tatu Saloranta 2014-05-24 00:39:49 -0700 57)     {\n48c478362 src/test/java/com/fasterxml/jackson/core/sym/SymbolTableMergingTest.java (Tatu Saloranta 2023-08-23 21:31:22 -0700 58)         CharsToNameCanonicalizer sym = CharsToNameCanonicalizer.createRoot(new JsonFactory());\nb6b164880 src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java  (Tatu Saloranta 2014-05-24 00:39:49 -0700 59)         char[] str1 = \"foo\".toCharArray();\nb6b164880 src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java  (Tatu Saloranta 2014-05-24 00:39:49 -0700 60)         char[] str2 = \" foo \".toCharArray();\nb6b164880 src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java  (Tatu Saloranta 2014-05-24 00:39:49 -0700 61) \n",
            "commit_hashes": {
                "b6b164880": "    ...",
                "48c478362": "    Refactor construction and use of CharsToNameCanonicalizer (#1088)"
            },
            "Commit&issueIDs": {
                "48c478362": [
                    "1088"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/1088",
                "https://github.com/FasterXML/jackson-core/commit/48c478362"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java",
            "test_name": "thousandsOfSymbolsWithNew",
            "FQS": "com.fasterxml.jackson.core.sym.TestSymbolTables.thousandsOfSymbolsWithNew()",
            "start_line": "115",
            "blame_result": "50ac85338 (Cowtowncoder 2015-02-05 16:52:01 -0800 116)     {\n50ac85338 (Cowtowncoder 2015-02-05 16:52:01 -0800 117)         final int SEED = 33333;\n50ac85338 (Cowtowncoder 2015-02-05 16:52:01 -0800 118) \n50ac85338 (Cowtowncoder 2015-02-05 16:52:01 -0800 119)         ByteQuadsCanonicalizer symbolsBRoot = ByteQuadsCanonicalizer.createRoot(SEED);\n25313f134 (PJ Fanning   2023-03-14 23:57:56 +0100 120)         final Charset utf8 = StandardCharsets.UTF_8;\n",
            "commit_hashes": {
                "50ac85338": "    Fixes to diagnostics, minor improvement to 2-quad hashing cache",
                "25313f134": "    Use StreamConstraintsException exception in canonicalizer (#948)"
            },
            "Commit&issueIDs": {
                "25313f134": [
                    "948"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/948",
                "https://github.com/FasterXML/jackson-core/commit/25313f134"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatXMLParseXercesException",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatXMLParseXercesException()",
            "start_line": "1129",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1130)         //com.sun.org.apache.xerces.internal.xni.parser.XMLParseException\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1131)         String msg = \"XML\";\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1132)         String prefix = \"1:two:3:four\";\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1133)         Throwable t = new PrefixException(prefix, msg, null);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1134) \n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/util/DefaultIndenterTest.java",
            "test_name": "withIndent",
            "FQS": "com.fasterxml.jackson.core.util.DefaultIndenterTest.withIndent()",
            "start_line": "27",
            "blame_result": "ac4e14e1d (Michael Hausegger 2017-07-31 20:01:25 +0200 28)     DefaultIndenter defaultIndenter = new DefaultIndenter();\nac4e14e1d (Michael Hausegger 2017-07-31 20:01:25 +0200 29)     DefaultIndenter defaultIndenterTwo = defaultIndenter.withIndent(\"9Qh/6,~n\");\nac4e14e1d (Michael Hausegger 2017-07-31 20:01:25 +0200 30)     DefaultIndenter defaultIndenterThree = defaultIndenterTwo.withIndent(\"9Qh/6,~n\");\nac4e14e1d (Michael Hausegger 2017-07-31 20:01:25 +0200 31) \n91416f3a7 (anneloreegger     2020-10-11 23:21:20 +0200 32)     assertEquals(System.lineSeparator(), defaultIndenterThree.getEol());\n",
            "commit_hashes": {
                "ac4e14e1d": "    add-tests Added tests that cover previously uncovered logic.",
                "91416f3a7": "    Fix test so it works on all OS (#645)"
            },
            "Commit&issueIDs": {
                "91416f3a7": [
                    "645"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/645",
                "https://github.com/FasterXML/jackson-core/commit/91416f3a7"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatGSSException",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatGSSException()",
            "start_line": "1158",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1159)         //org.ietf.jgss.GSSException\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1160)         String msg = \"Invalid name provided\";\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1161)         String prefix = PrefixException.class.getSimpleName();\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1162)         Throwable t = new PrefixException(prefix, msg, null);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1163)         assertTrue(t.toString().startsWith(t.getClass().getSimpleName()));\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatMismatchedTreeNodeException",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatMismatchedTreeNodeException()",
            "start_line": "1187",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1188)         //org.antlr.runtime.MismatchedTreeNodeException\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1189)         String prefix = ToStringException.class.getSimpleName()\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1190)                 + '(' + String.class.getName() + \"!=\"\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1191)                 + Throwable.class.getName() + ')';\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1192) \n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatInnerException",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatInnerException()",
            "start_line": "1218",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1219)         String msg = \"inner class\";\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1220)         String prefix = '(' + String.class.getName() + \"!=\"\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1221)                 + Throwable.class.getName() + ')';\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1222) \n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1223)         Throwable t = new ToStringException(ToStringException.class.getName()\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatLevel",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatLevel()",
            "start_line": "1286",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1287)         CompactFormatter cf = new CompactFormatter(\"%4$s\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1288)         LogRecord record = new LogRecord(Level.SEVERE, \"\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1289)         String result = cf.formatLevel(record);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1290)         assertEquals(record.getLevel().getLocalizedName(), result);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1291)         assertEquals(result, cf.format(record));\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/apache/rocketmq-connect/",
            "file_path": "apache/rocketmq-connect/rocketmq-connect-runtime/src/test/java/org/apache/rocketmq/connect/runtime/serialization/store/RecordPositionMapDeserializerTest.java",
            "test_name": "deserializeTest",
            "FQS": "org.apache.rocketmq.connect.runtime.serialization.store.RecordPositionMapDeserializerTest.deserializeTest()",
            "start_line": "31",
            "blame_result": "c8500c89 (Oliver 2022-10-18 09:56:26 +0800 32)         Map<String, String> partitionMap = new HashMap<>();\nc8500c89 (Oliver 2022-10-18 09:56:26 +0800 33)         partitionMap.put(\"defaultPartition\", \"defaultPartition\");\nc8500c89 (Oliver 2022-10-18 09:56:26 +0800 34)         ExtendRecordPartition partition = new ExtendRecordPartition(\"testNamespace\", partitionMap);\nc8500c89 (Oliver 2022-10-18 09:56:26 +0800 35) \nc8500c89 (Oliver 2022-10-18 09:56:26 +0800 36)         Map<String, Integer> offsetMap = new HashMap<>();\n",
            "commit_hashes": {
                "c8500c89": "    [ISSUE #220] Add unit test (#353)"
            },
            "Commit&issueIDs": {
                "c8500c89": [
                    "353"
                ]
            },
            "links": [
                "https://github.com/apache/rocketmq-connect/issues/353",
                "https://github.com/apache/rocketmq-connect/commit/c8500c89"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatLogger",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatLogger()",
            "start_line": "1301",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1302)         CompactFormatter cf = new CompactFormatter(\"%3$s\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1303)         LogRecord record = new LogRecord(Level.SEVERE, \"\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1304)         record.setSourceMethodName(null);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1305)         record.setSourceClassName(null);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1306)         record.setLoggerName(Object.class.getName());\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatLoggerSurrogate",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatLoggerSurrogate()",
            "start_line": "1314",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1315)         CompactFormatter cf = new CompactFormatter(\"%3$s\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1316)         LogRecord record = new LogRecord(Level.SEVERE, \"\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1317)         record.setSourceMethodName(null);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1318)         record.setSourceClassName(null);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1319)         record.setLoggerName(\"mail.Foo\\ud801\\udc00$\\ud801\\udc00Holder\");\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatSourceByLogger",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatSourceByLogger()",
            "start_line": "1478",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1479)         CompactFormatter cf = new CompactFormatter(\"%2$s\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1480)         LogRecord record = new LogRecord(Level.SEVERE, \"\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1481)         record.setSourceMethodName(null);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1482)         record.setSourceClassName(null);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1483)         record.setLoggerName(Object.class.getName());\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/senbox-org/snap-engine/",
            "file_path": "senbox-org/snap-engine/snap-csv-dataio/src/test/java/org/esa/snap/csv/dataio/reader/CsvProduct2x2Test.java",
            "test_name": "test2x2Product",
            "FQS": "org.esa.snap.csv.dataio.reader.CsvProduct2x2Test.test2x2Product()",
            "start_line": "21",
            "blame_result": "37db0a6d777 (obarrilero 2020-01-27 11:23:13 +0100 22)         URL urlDimap = getClass().getResource(\"MER_FR__1PNUPA20030808_073810_000000982018_00450_07518_6007.dim\");\n37db0a6d777 (obarrilero 2020-01-27 11:23:13 +0100 23)         URI uriDimap = new URI(urlDimap.toString());\n37db0a6d777 (obarrilero 2020-01-27 11:23:13 +0100 24)         final String dimap = uriDimap.getPath();\n37db0a6d777 (obarrilero 2020-01-27 11:23:13 +0100 25) \n37db0a6d777 (obarrilero 2020-01-27 11:23:13 +0100 26)         URL urlCsv = getClass().getResource(\"MER_FR__1PNUPA20030808_073810_000000982018_00450_07518_6007.csv\");\n",
            "commit_hashes": {
                "37db0a6d777": "    Fix errors in tests when blank spaces in project path (#180)"
            },
            "Commit&issueIDs": {
                "37db0a6d777": [
                    "180"
                ]
            },
            "links": [
                "https://github.com/senbox-org/snap-engine/issues/180",
                "https://github.com/senbox-org/snap-engine/commit/37db0a6d777"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-storage/",
            "file_path": "googleapis/java-storage/google-cloud-storage/src/test/java/com/google/cloud/storage/CorsTest.java",
            "test_name": "testOrigin",
            "FQS": "com.google.cloud.storage.CorsTest.testOrigin()",
            "start_line": "29",
            "blame_result": "b1813c652 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 30)     assertEquals(\"bla\", Origin.of(\"bla\").getValue());\nb1813c652 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 31)     assertEquals(\"http://host:8080\", Origin.of(\"http\", \"host\", 8080).toString());\nb1813c652 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 32)     assertEquals(Origin.of(\"*\"), Origin.any());\nb1813c652 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 33)   }\nb1813c652 (Vadym Matsishevskyi 2018-05-10 10:54:50 -0700 34) \n",
            "commit_hashes": {
                "b1813c652": "    Move grpc and proto artifacts to google-cloud-java from api-client-staging (second part) (#3251)"
            },
            "Commit&issueIDs": {
                "b1813c652": [
                    "3251"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-storage/issues/3251",
                "https://github.com/googleapis/java-storage/commit/b1813c652"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatSourceByClass",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatSourceByClass()",
            "start_line": "1496",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1497)         CompactFormatter cf = new CompactFormatter(\"%2$s\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1498)         LogRecord record = new LogRecord(Level.SEVERE, \"\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1499)         record.setSourceMethodName(null);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1500)         record.setSourceClassName(Object.class.getName());\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1501)         record.setLoggerName(\"\");\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/java-storage/",
            "file_path": "googleapis/java-storage/google-cloud-storage/src/test/java/com/google/cloud/storage/PostPolicyV4Test.java",
            "test_name": "testPostPolicyV4Document_of_toJson",
            "FQS": "com.google.cloud.storage.PostPolicyV4Test.testPostPolicyV4Document_of_toJson()",
            "start_line": "541",
            "blame_result": "8602b81ea (Dmitry 2020-08-21 20:21:29 +0300 542)     PostPolicyV4.PostConditionsV4 emptyConditions =\n8602b81ea (Dmitry 2020-08-21 20:21:29 +0300 543)         PostPolicyV4.PostConditionsV4.newBuilder().build();\n8602b81ea (Dmitry 2020-08-21 20:21:29 +0300 544)     PostPolicyV4.PostPolicyV4Document emptyDocument =\n8602b81ea (Dmitry 2020-08-21 20:21:29 +0300 545)         PostPolicyV4.PostPolicyV4Document.of(\"\", emptyConditions);\n8602b81ea (Dmitry 2020-08-21 20:21:29 +0300 546)     String emptyJson = emptyDocument.toJson();\n",
            "commit_hashes": {
                "8602b81ea": "    fix: PostPolicyV4 classes could be improved (#442)"
            },
            "Commit&issueIDs": {
                "8602b81ea": [
                    "442"
                ]
            },
            "links": [
                "https://github.com/googleapis/java-storage/issues/442",
                "https://github.com/googleapis/java-storage/commit/8602b81ea"
            ]
        },
        {
            "poj_link": "https://github.com/pf4j/pf4j/",
            "file_path": "pf4j/pf4j/pf4j/src/test/java/org/pf4j/SecurePluginManagerWrapperTest.java",
            "test_name": "getExtensionFactory",
            "FQS": "org.pf4j.SecurePluginManagerWrapperTest.getExtensionFactory()",
            "start_line": "117",
            "blame_result": "dac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 118)         pluginManager.loadPlugins();\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 119)         assertEquals(pluginManager.getExtensionFactory(), wrappedPluginManager.getExtensionFactory());\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 120)     }\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 121) \ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 122)     @Test\n",
            "commit_hashes": {
                "dac4edb5": "    Add secure wrapper to plugin manager (#450)"
            },
            "Commit&issueIDs": {
                "dac4edb5": [
                    "(#450)"
                ]
            },
            "links": [
                "https://github.com/pf4j/pf4j/issues/450",
                "https://github.com/pf4j/pf4j/commit/dac4edb5"
            ]
        },
        {
            "poj_link": "https://github.com/pf4j/pf4j/",
            "file_path": "pf4j/pf4j/pf4j/src/test/java/org/pf4j/SecurePluginManagerWrapperTest.java",
            "test_name": "getRuntimeMode",
            "FQS": "org.pf4j.SecurePluginManagerWrapperTest.getRuntimeMode()",
            "start_line": "174",
            "blame_result": "dac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 175)         assertEquals(pluginManager.getRuntimeMode(), wrappedPluginManager.getRuntimeMode());\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 176)     }\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 177) \ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 178)     @Test\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 179)     public void getStartedPlugins() {\n",
            "commit_hashes": {
                "dac4edb5": "    Add secure wrapper to plugin manager (#450)"
            },
            "Commit&issueIDs": {
                "dac4edb5": [
                    "(#450)"
                ]
            },
            "links": [
                "https://github.com/pf4j/pf4j/issues/450",
                "https://github.com/pf4j/pf4j/commit/dac4edb5"
            ]
        },
        {
            "poj_link": "https://github.com/pf4j/pf4j/",
            "file_path": "pf4j/pf4j/pf4j/src/test/java/org/pf4j/SecurePluginManagerWrapperTest.java",
            "test_name": "getSystemVersion",
            "FQS": "org.pf4j.SecurePluginManagerWrapperTest.getSystemVersion()",
            "start_line": "187",
            "blame_result": "dac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 188)         assertEquals(pluginManager.getSystemVersion(), wrappedPluginManager.getSystemVersion());\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 189)     }\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 190) \ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 191)     @Test\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 192)     public void getUnresolvedPlugins() {\n",
            "commit_hashes": {
                "dac4edb5": "    Add secure wrapper to plugin manager (#450)"
            },
            "Commit&issueIDs": {
                "dac4edb5": [
                    "(#450)"
                ]
            },
            "links": [
                "https://github.com/pf4j/pf4j/issues/450",
                "https://github.com/pf4j/pf4j/commit/dac4edb5"
            ]
        },
        {
            "poj_link": "https://github.com/pf4j/pf4j/",
            "file_path": "pf4j/pf4j/pf4j/src/test/java/org/pf4j/SecurePluginManagerWrapperTest.java",
            "test_name": "getVersionManager",
            "FQS": "org.pf4j.SecurePluginManagerWrapperTest.getVersionManager()",
            "start_line": "199",
            "blame_result": "dac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 200)         assertEquals(pluginManager.getVersionManager(), wrappedPluginManager.getVersionManager());\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 201)     }\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 202) \ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 203)     @Test\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 204)     public void isDevelopment() {\n",
            "commit_hashes": {
                "dac4edb5": "    Add secure wrapper to plugin manager (#450)"
            },
            "Commit&issueIDs": {
                "dac4edb5": [
                    "(#450)"
                ]
            },
            "links": [
                "https://github.com/pf4j/pf4j/issues/450",
                "https://github.com/pf4j/pf4j/commit/dac4edb5"
            ]
        },
        {
            "poj_link": "https://github.com/pf4j/pf4j/",
            "file_path": "pf4j/pf4j/pf4j/src/test/java/org/pf4j/SecurePluginManagerWrapperTest.java",
            "test_name": "isDevelopment",
            "FQS": "org.pf4j.SecurePluginManagerWrapperTest.isDevelopment()",
            "start_line": "204",
            "blame_result": "dac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 205)         assertEquals(pluginManager.isDevelopment(), wrappedPluginManager.isDevelopment());\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 206)     }\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 207) \ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 208)     @Test\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 209)     public void isNotDevelopment() {\n",
            "commit_hashes": {
                "dac4edb5": "    Add secure wrapper to plugin manager (#450)"
            },
            "Commit&issueIDs": {
                "dac4edb5": [
                    "(#450)"
                ]
            },
            "links": [
                "https://github.com/pf4j/pf4j/issues/450",
                "https://github.com/pf4j/pf4j/commit/dac4edb5"
            ]
        },
        {
            "poj_link": "https://github.com/pf4j/pf4j/",
            "file_path": "pf4j/pf4j/pf4j/src/test/java/org/pf4j/SecurePluginManagerWrapperTest.java",
            "test_name": "isNotDevelopment",
            "FQS": "org.pf4j.SecurePluginManagerWrapperTest.isNotDevelopment()",
            "start_line": "209",
            "blame_result": "dac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 210)         assertEquals(pluginManager.isNotDevelopment(), wrappedPluginManager.isNotDevelopment());\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 211)     }\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 212) \ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 213)     @Test\ndac4edb5 (wolframhaussig 2021-06-13 11:10:35 +0200 214)     public void loadPlugin() {\n",
            "commit_hashes": {
                "dac4edb5": "    Add secure wrapper to plugin manager (#450)"
            },
            "Commit&issueIDs": {
                "dac4edb5": [
                    "(#450)"
                ]
            },
            "links": [
                "https://github.com/pf4j/pf4j/issues/450",
                "https://github.com/pf4j/pf4j/commit/dac4edb5"
            ]
        },
        {
            "poj_link": "https://github.com/pf4j/pf4j/",
            "file_path": "pf4j/pf4j/pf4j/src/test/java/org/pf4j/SingletonExtensionFactoryTest.java",
            "test_name": "create",
            "FQS": "org.pf4j.SingletonExtensionFactoryTest.create()",
            "start_line": "50",
            "blame_result": "1d58b179 (RationalityFrontline 2022-03-08 22:57:15 +0800 51)         ExtensionFactory extensionFactory = new SingletonExtensionFactory(pluginManager);\n1d312811 (Decebal Suiu         2018-07-20 19:23:38 +0300 52)         Object extensionOne = extensionFactory.create(TestExtension.class);\n1d312811 (Decebal Suiu         2018-07-20 19:23:38 +0300 53)         Object extensionTwo = extensionFactory.create(TestExtension.class);\n1d312811 (Decebal Suiu         2018-07-20 19:23:38 +0300 54)         assertSame(extensionOne, extensionTwo);\n1d312811 (Decebal Suiu         2018-07-20 19:23:38 +0300 55)     }\n",
            "commit_hashes": {
                "1d58b179": "    Fix memory leak in SingletonExtensionFactory (#487) (#490)",
                "1d312811": "    Add tests for SingletonExtensionFactory"
            },
            "Commit&issueIDs": {
                "1d58b179": [
                    "(#487)",
                    "(#490)"
                ]
            },
            "links": [
                "https://github.com/pf4j/pf4j/issues/487",
                "https://github.com/pf4j/pf4j/commit/1d58b179"
            ]
        },
        {
            "poj_link": "https://github.com/pf4j/pf4j/",
            "file_path": "pf4j/pf4j/pf4j/src/test/java/org/pf4j/SingletonExtensionFactoryTest.java",
            "test_name": "createNewEachTime",
            "FQS": "org.pf4j.SingletonExtensionFactoryTest.createNewEachTime()",
            "start_line": "58",
            "blame_result": "cce6e133 (Decebal Suiu 2023-02-02 20:05:51 +0200 59)         ExtensionFactory extensionFactory = new SingletonExtensionFactory(pluginManager, \"FailTestExtension.class\");\n1d312811 (Decebal Suiu 2018-07-20 19:23:38 +0300 60)         Object extensionOne = extensionFactory.create(TestExtension.class);\n1d312811 (Decebal Suiu 2018-07-20 19:23:38 +0300 61)         Object extensionTwo = extensionFactory.create(TestExtension.class);\n1d312811 (Decebal Suiu 2018-07-20 19:23:38 +0300 62)         assertNotSame(extensionOne, extensionTwo);\n1d312811 (Decebal Suiu 2018-07-20 19:23:38 +0300 63)     }\n",
            "commit_hashes": {
                "cce6e133": "    Improve class generation for testing (#515)",
                "1d312811": "    Add tests for SingletonExtensionFactory"
            },
            "Commit&issueIDs": {
                "cce6e133": [
                    "(#515)"
                ]
            },
            "links": [
                "https://github.com/pf4j/pf4j/issues/515",
                "https://github.com/pf4j/pf4j/commit/cce6e133"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatSourceByClassAndMethod",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatSourceByClassAndMethod()",
            "start_line": "1508",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1509)         CompactFormatter cf = new CompactFormatter(\"%2$s\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1510)         LogRecord record = new LogRecord(Level.SEVERE, \"\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1511)         record.setSourceMethodName(\"method\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1512)         record.setSourceClassName(Object.class.getName());\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1513)         record.setLoggerName(\"\");\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/apache/ignite/",
            "file_path": "apache/ignite/modules/core/src/test/java/org/apache/ignite/internal/ClassSetTest.java",
            "test_name": "testEquals",
            "FQS": "org.apache.ignite.internal.ClassSetTest.testEquals()",
            "start_line": "82",
            "blame_result": "f1d3579eabb (Mikhail Petrov 2024-11-14 01:05:08 +0300 83)         ClassSet firstSet = new ClassSet();\nf1d3579eabb (Mikhail Petrov 2024-11-14 01:05:08 +0300 84) \nf1d3579eabb (Mikhail Petrov 2024-11-14 01:05:08 +0300 85)         firstSet.add(\"org.apache.ignite.Ignite\");\nf1d3579eabb (Mikhail Petrov 2024-11-14 01:05:08 +0300 86)         firstSet.add(\"org.apache.ignite.Ignition\");\nf1d3579eabb (Mikhail Petrov 2024-11-14 01:05:08 +0300 87) \n",
            "commit_hashes": {
                "f1d3579eabb": "    IGNITE-23594 Enhance object input stream filtering (#11642)"
            },
            "Commit&issueIDs": {
                "f1d3579eabb": [
                    "11642"
                ]
            },
            "links": [
                "https://github.com/apache/ignite/issues/11642",
                "https://github.com/apache/ignite/commit/f1d3579eabb"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatThrown",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatThrown()",
            "start_line": "899",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 900)         testFormatThrownIllegalClassName(\"Hello.\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 901)     }\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 902) \n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 903)     @Test\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 904)     public void testFormatThrownClassDotSpace() {\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withNormalizer2010_1_1",
            "FQS": "net.time4j.DurationNormalizerTest.withNormalizer2010_1_1()",
            "start_line": "19",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 20)         Duration<CalendarUnit> datePeriod =\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 21)             Duration.ofCalendarUnits(2, 14, 33);\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 22)         assertThat(\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 23)             datePeriod.with(PlainDate.of(2010, 1, 1)),\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 24)             is(Duration.ofCalendarUnits(3, 3, 2)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withNormalizer2010_2_1",
            "FQS": "net.time4j.DurationNormalizerTest.withNormalizer2010_2_1()",
            "start_line": "28",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 29)         Duration<CalendarUnit> datePeriod =\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 30)             Duration.ofCalendarUnits(2, 14, 33);\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 31)         assertThat(\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 32)             datePeriod.with(PlainDate.of(2010, 2, 1)),\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 33)             is(Duration.ofCalendarUnits(3, 3, 3)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withNormalizer2003_12_27",
            "FQS": "net.time4j.DurationNormalizerTest.withNormalizer2003_12_27()",
            "start_line": "37",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 38)         Duration<CalendarUnit> datePeriod =\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 39)             Duration.ofCalendarUnits(2, 14, 33);\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 40)         assertThat(\nece619d51 src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-29 06:13:09 +0200 41)             datePeriod.with(PlainDate.of(2003, 12, 27)),\nece619d51 src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-29 06:13:09 +0200 42)             is(Duration.ofCalendarUnits(3, 3, 5)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30",
                "ece619d51": "    Make durations flexible to allow WEEKS and DAYS"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withSTD_CALENDAR_PERIOD1",
            "FQS": "net.time4j.DurationNormalizerTest.withSTD_CALENDAR_PERIOD1()",
            "start_line": "69",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 70)         Duration<CalendarUnit> datePeriod =\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 71)             Duration.ofCalendarUnits(2, 15, 3);\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 72)         assertThat(\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 73)             datePeriod.with(Duration.STD_CALENDAR_PERIOD),\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 74)             is(Duration.ofCalendarUnits(3, 3, 3)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withSTD_CALENDAR_PERIOD2",
            "FQS": "net.time4j.DurationNormalizerTest.withSTD_CALENDAR_PERIOD2()",
            "start_line": "78",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-28 03:48:10 +0200 79)         Duration<CalendarUnit> datePeriod =\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 80)             Duration.ofCalendarUnits(2, 15, 3).plus(3, WEEKS);\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-28 03:48:10 +0200 81)         assertThat(\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-28 03:48:10 +0200 82)             datePeriod.with(Duration.STD_CALENDAR_PERIOD),\nece619d51 src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-29 06:13:09 +0200 83)             is(Duration.ofCalendarUnits(3, 3, 24)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30",
                "38d6137e5": "    use of static imports",
                "ece619d51": "    Make durations flexible to allow WEEKS and DAYS"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withSTD_CLOCK_PERIOD",
            "FQS": "net.time4j.DurationNormalizerTest.withSTD_CLOCK_PERIOD()",
            "start_line": "87",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 88)         Duration<ClockUnit> timePeriod =\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 89)             Duration.ofClockUnits(2, 61, 120);\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 90)         assertThat(\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 91)             timePeriod.with(Duration.STD_CLOCK_PERIOD),\n4193095be src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-04-28 03:48:10 +0200 92)             is(Duration.ofClockUnits(3, 3, 0)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withMinutesOnly",
            "FQS": "net.time4j.DurationNormalizerTest.withMinutesOnly()",
            "start_line": "96",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-28 03:48:10 +0200  97)         Duration<ClockUnit> timePeriod =\n5135181db core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-08-31 08:55:39 +0200  98)             Duration.ofClockUnits(2, 61, 122);\n5135181db core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-08-31 08:55:39 +0200  99)         assertThat(\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 100)             timePeriod.with(MINUTES.only()),\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 101)             is(Duration.of(183, MINUTES)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30",
                "5135181db": "    introduced clockunit-only normalizer",
                "38d6137e5": "    use of static imports"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withNegativeMinutesOnly",
            "FQS": "net.time4j.DurationNormalizerTest.withNegativeMinutesOnly()",
            "start_line": "105",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-28 03:48:10 +0200 106)         Duration<ClockUnit> timePeriod =\n85ba0df8e core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-10-12 07:34:50 +0200 107)             Duration.ofClockUnits(4, 55, 0).inverse();\n85ba0df8e core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2014-10-12 07:34:50 +0200 108)         assertThat(\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 109)             timePeriod.with(MINUTES.only()),\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 110)             is(Duration.of(-295, MINUTES)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30",
                "85ba0df8e": "    fix for negative clock duration conversion",
                "38d6137e5": "    use of static imports"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withMinutesTruncated",
            "FQS": "net.time4j.DurationNormalizerTest.withMinutesTruncated()",
            "start_line": "261",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-28 03:48:10 +0200 262)         Duration<ClockUnit> timePeriod =\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 263)             Duration.ofClockUnits(4, 55, 700);\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 264)         assertThat(\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 265)             timePeriod.with(MINUTES.truncated()),\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 266)             is(Duration.ofClockUnits(4, 55, 0)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30",
                "f3e262927": "    two new clock unit normalizers",
                "38d6137e5": "    use of static imports"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withNegativeMinutesTruncated",
            "FQS": "net.time4j.DurationNormalizerTest.withNegativeMinutesTruncated()",
            "start_line": "273",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-28 03:48:10 +0200 274)         Duration<ClockUnit> timePeriod =\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 275)             Duration.ofClockUnits(4, 55, 700).inverse();\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 276)         assertThat(\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 277)             timePeriod.with(MINUTES.truncated()),\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 278)             is(Duration.ofClockUnits(4, 55, 0).inverse()));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30",
                "f3e262927": "    two new clock unit normalizers",
                "38d6137e5": "    use of static imports"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withMinutesRounded1",
            "FQS": "net.time4j.DurationNormalizerTest.withMinutesRounded1()",
            "start_line": "307",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-28 03:48:10 +0200 308)         Duration<ClockUnit> timePeriod =\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 309)             Duration.ofClockUnits(4, 55, 89);\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 310)         assertThat(\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 311)             timePeriod.with(MINUTES.rounded()),\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 312)             is(Duration.ofClockUnits(4, 56, 0)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30",
                "f3e262927": "    two new clock unit normalizers",
                "38d6137e5": "    use of static imports"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/scale/LeapSecondTest.java",
            "test_name": "isExtensible",
            "FQS": "net.time4j.scale.LeapSecondTest.isExtensible()",
            "start_line": "62",
            "blame_result": "53c0fa697 src/test/java/net/time4j/scale/LeapSecondTest.java (Meno Hochschild 2014-03-27 06:13:58 +0100 63)         assertThat(\n53c0fa697 src/test/java/net/time4j/scale/LeapSecondTest.java (Meno Hochschild 2014-03-27 06:13:58 +0100 64)             LeapSeconds.getInstance().isExtensible(),\n6ce5abfba src/test/java/net/time4j/scale/LeapSecondTest.java (Meno Hochschild 2014-05-02 08:24:22 +0200 65)             is(!Boolean.getBoolean(\"net.time4j.scale.leapseconds.final\")\n53c0fa697 src/test/java/net/time4j/scale/LeapSecondTest.java (Meno Hochschild 2014-03-27 06:13:58 +0100 66)                 && LeapSeconds.getInstance().isEnabled())\n53c0fa697 src/test/java/net/time4j/scale/LeapSecondTest.java (Meno Hochschild 2014-03-27 06:13:58 +0100 67)         );\n",
            "commit_hashes": {
                "53c0fa697": "    bugfix for issue #7",
                "6ce5abfba": "    document system properties"
            },
            "Commit&issueIDs": {
                "53c0fa697": [
                    "#7"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/7",
                "https://github.com/MenoData/Time4J/commit/53c0fa697"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withMinutesRounded2",
            "FQS": "net.time4j.DurationNormalizerTest.withMinutesRounded2()",
            "start_line": "316",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-28 03:48:10 +0200 317)         Duration<ClockUnit> timePeriod =\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 318)             Duration.ofClockUnits(4, 55, 90);\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 319)         assertThat(\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 320)             timePeriod.with(MINUTES.rounded()),\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 321)             is(Duration.ofClockUnits(4, 57, 0)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30",
                "f3e262927": "    two new clock unit normalizers",
                "38d6137e5": "    use of static imports"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatThrownEmptyEmpty",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatThrownEmptyEmpty()",
            "start_line": "1559",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1560)         //E[0] -> IOE[0]\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1561)         Exception e = new IOException(\"Fake I/O\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1562)         e.setStackTrace(new StackTraceElement[0]);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1563)         e = new Exception(e.toString(), e);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1564)         e.setStackTrace(new StackTraceElement[0]);\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withNegativeMinutesRounded",
            "FQS": "net.time4j.DurationNormalizerTest.withNegativeMinutesRounded()",
            "start_line": "325",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-28 03:48:10 +0200 326)         Duration<ClockUnit> timePeriod =\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 327)             Duration.ofClockUnits(4, 55, 90).inverse();\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 328)         assertThat(\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 329)             timePeriod.with(MINUTES.rounded()),\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 330)             is(Duration.ofClockUnits(4, 57, 0).inverse()));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30",
                "f3e262927": "    two new clock unit normalizers",
                "38d6137e5": "    use of static imports"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/DurationNormalizerTest.java",
            "test_name": "withNanosRounded",
            "FQS": "net.time4j.DurationNormalizerTest.withNanosRounded()",
            "start_line": "342",
            "blame_result": "4193095be src/test/java/net/time4j/DurationNormalizerTest.java      (Meno Hochschild 2014-04-28 03:48:10 +0200 343)         Duration<ClockUnit> timePeriod =\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 344)             Duration.ofClockUnits(4, 65, 1).plus(500000000, NANOS);\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 345)         assertThat(\nf3e262927 core/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2015-04-21 07:06:11 +0200 346)             timePeriod.with(ClockUnit.NANOS.rounded()),\n38d6137e5 base/src/test/java/net/time4j/DurationNormalizerTest.java (Meno Hochschild 2019-01-03 06:21:06 +0100 347)             is(Duration.ofClockUnits(5, 5, 1).plus(500000000, NANOS)));\n",
            "commit_hashes": {
                "4193095be": "    PlainDate as Normalizer - see issue #30",
                "38d6137e5": "    use of static imports",
                "f3e262927": "    two new clock unit normalizers"
            },
            "Commit&issueIDs": {
                "4193095be": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/30",
                "https://github.com/MenoData/Time4J/commit/4193095be"
            ]
        },
        {
            "poj_link": "https://github.com/jenkinsci/docker-plugin/",
            "file_path": "jenkinsci/docker-plugin/src/test/java/com/nirima/jenkins/plugins/docker/DockerDisabledTest.java",
            "test_name": "testHashCodeAndEquals",
            "FQS": "com.nirima.jenkins.plugins.docker.DockerDisabledTest.testHashCodeAndEquals()",
            "start_line": "16",
            "blame_result": "3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 17)         final DockerDisabled i1 = new DockerDisabled();\n3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 18)         final DockerDisabled i2 = new DockerDisabled();\n3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 19)         i2.setDisabledByChoice(true);\n3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 20)         final DockerDisabled e1 = new DockerDisabled();\n3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 21)         final DockerDisabled e2 = new DockerDisabled();\n",
            "commit_hashes": {
                "3e70a3b6": "    Format repository with Spotless (#953)"
            },
            "Commit&issueIDs": {
                "3e70a3b6": [
                    "(#953)"
                ]
            },
            "links": [
                "https://github.com/jenkinsci/docker-plugin/issues/953",
                "https://github.com/jenkinsci/docker-plugin/commit/3e70a3b6"
            ]
        },
        {
            "poj_link": "https://github.com/jenkinsci/docker-plugin/",
            "file_path": "jenkinsci/docker-plugin/src/test/java/io/jenkins/docker/client/DockerClientParametersTest.java",
            "test_name": "testHashCodeAndEquals",
            "FQS": "io.jenkins.docker.client.DockerClientParametersTest.testHashCodeAndEquals()",
            "start_line": "12",
            "blame_result": "3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 13)         final String dockerUri1 = \"dockerUri1\";\n3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 14)         final String dockerUri1a = new String(dockerUri1);\n3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 15)         final String dockerUri2 = \"dockerUri2\";\n3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 16)         final String credentialsId1 = \"credentialsId1\";\n3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 17)         final String credentialsId1a = new String(credentialsId1);\n",
            "commit_hashes": {
                "3e70a3b6": "    Format repository with Spotless (#953)"
            },
            "Commit&issueIDs": {
                "3e70a3b6": [
                    "(#953)"
                ]
            },
            "links": [
                "https://github.com/jenkinsci/docker-plugin/issues/953",
                "https://github.com/jenkinsci/docker-plugin/commit/3e70a3b6"
            ]
        },
        {
            "poj_link": "https://github.com/jenkinsci/docker-plugin/",
            "file_path": "jenkinsci/docker-plugin/src/test/java/io/jenkins/docker/client/UsageTrackingCacheTest.java",
            "test_name": "getAndIncrementUsageGivenRecentButInactiveDataInCacheThenReturnsCachedData",
            "FQS": "io.jenkins.docker.client.UsageTrackingCacheTest.getAndIncrementUsageGivenRecentButInactiveDataInCacheThenReturnsCachedData()",
            "start_line": "101",
            "blame_result": "3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 102)         final String key = \"key\";\n3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 103)         final Object value = value(\"value\");\nb210b750 (Basil Crow 2023-05-21 11:11:55 -0700 104)         final List<Object> expiryList = new ArrayList<>();\n3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 105)         final UsageTrackingCache.ExpiryHandler<String, Object> expiryHandler = expiryTracker(expiryList);\n3e70a3b6 (Basil Crow 2023-05-21 09:55:05 -0700 106)         final UsageTrackingCache<String, Object> instance = new UsageTrackingCache<>(1, TimeUnit.DAYS, expiryHandler);\n",
            "commit_hashes": {
                "3e70a3b6": "    Format repository with Spotless (#953)",
                "b210b750": "    Miscellaneous code cleanup (#955)"
            },
            "Commit&issueIDs": {
                "3e70a3b6": [
                    "(#953)"
                ],
                "b210b750": [
                    "(#955)"
                ]
            },
            "links": [
                "https://github.com/jenkinsci/docker-plugin/issues/953",
                "https://github.com/jenkinsci/docker-plugin/commit/3e70a3b6",
                "https://github.com/jenkinsci/docker-plugin/issues/955",
                "https://github.com/jenkinsci/docker-plugin/commit/b210b750"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/RoundingTest.java",
            "test_name": "roundedUp",
            "FQS": "net.time4j.RoundingTest.roundedUp()",
            "start_line": "17",
            "blame_result": "2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 18)         assertThat(\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 19)             PlainTime.of(18, 38).with(MINUTE_OF_HOUR.roundedUp(15)),\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 20)             is(PlainTime.of(18, 45)));\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 21)         assertThat(\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 22)             PlainTime.of(18, 46).with(MINUTE_OF_HOUR.roundedUp(15)),\n",
            "commit_hashes": {
                "2b20fd0dd": "    rounding-fix for issue #5"
            },
            "Commit&issueIDs": {
                "2b20fd0dd": [
                    "#5"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/5",
                "https://github.com/MenoData/Time4J/commit/2b20fd0dd"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/RoundingTest.java",
            "test_name": "roundedHalf",
            "FQS": "net.time4j.RoundingTest.roundedHalf()",
            "start_line": "36",
            "blame_result": "2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 37)         assertThat(\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 38)             PlainTime.of(18, 38).with(MINUTE_OF_HOUR.roundedHalf(15)),\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 39)             is(PlainTime.of(18, 45)));\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 40)         assertThat(\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 41)             PlainTime.of(18, 37).with(MINUTE_OF_HOUR.roundedHalf(15)),\n",
            "commit_hashes": {
                "2b20fd0dd": "    rounding-fix for issue #5"
            },
            "Commit&issueIDs": {
                "2b20fd0dd": [
                    "#5"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/5",
                "https://github.com/MenoData/Time4J/commit/2b20fd0dd"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/RoundingTest.java",
            "test_name": "roundedDown",
            "FQS": "net.time4j.RoundingTest.roundedDown()",
            "start_line": "59",
            "blame_result": "2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 60)         assertThat(\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 61)             PlainTime.of(18, 38).with(MINUTE_OF_HOUR.roundedDown(15)),\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 62)             is(PlainTime.of(18, 30)));\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 63)         assertThat(\n2b20fd0dd src/test/java/net/time4j/RoundingTest.java (Meno Hochschild 2014-03-21 22:15:23 +0100 64)             PlainTime.of(18, 8).with(MINUTE_OF_HOUR.roundedDown(15)),\n",
            "commit_hashes": {
                "2b20fd0dd": "    rounding-fix for issue #5"
            },
            "Commit&issueIDs": {
                "2b20fd0dd": [
                    "#5"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/5",
                "https://github.com/MenoData/Time4J/commit/2b20fd0dd"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatError",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatError()",
            "start_line": "1725",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1726)         CompactFormatter cf = new CompactFormatter(\"%11$s\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1727)         LogRecord record = new LogRecord(Level.SEVERE, \"message\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1728)         record.setThrown(new Throwable(\"error\"));\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1729)         String output = cf.format(record);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1730)         assertTrue(output.startsWith(record.getThrown()\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "secondOfDayAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.secondOfDayAtFloor()",
            "start_line": "982",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 983)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 984)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 985)                 .with(SECOND_OF_DAY.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 986)             is(PlainTime.of(19, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 987)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmMinimized",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmMinimized()",
            "start_line": "16",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 17)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 18)             PlainTime.of(19, 45, 30).with(CLOCK_HOUR_OF_AMPM.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 19)             is(PlainTime.of(13, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 20)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 21) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmMinimizedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmMinimizedIfHour24()",
            "start_line": "23",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 24)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 25)             PlainTime.of(24).with(CLOCK_HOUR_OF_AMPM.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 26)             is(PlainTime.of(1)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 27)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 28) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmMaximized",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmMaximized()",
            "start_line": "30",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 31)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 32)             PlainTime.of(19, 45, 30).with(CLOCK_HOUR_OF_AMPM.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 33)             is(PlainTime.of(12, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 34)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 35) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmMaximizedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmMaximizedIfHour24()",
            "start_line": "37",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 38)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 39)             PlainTime.of(24).with(CLOCK_HOUR_OF_AMPM.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 40)             is(PlainTime.of(0)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 41)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 42) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmDecremented",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmDecremented()",
            "start_line": "44",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 45)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 46)             PlainTime.of(19, 45, 30).with(CLOCK_HOUR_OF_AMPM.decremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 47)             is(PlainTime.of(18, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 48)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 49) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmDecrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmDecrementedIfHour24()",
            "start_line": "51",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 52)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 53)             PlainTime.of(24).with(CLOCK_HOUR_OF_AMPM.decremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 54)             is(PlainTime.of(23)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 55)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 56) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmIncremented",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmIncremented()",
            "start_line": "58",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 59)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 60)             PlainTime.of(19, 45, 30).with(CLOCK_HOUR_OF_AMPM.incremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 61)             is(PlainTime.of(20, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 62)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 63) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmIncrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmIncrementedIfHour24()",
            "start_line": "65",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 66)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 67)             PlainTime.of(24).with(CLOCK_HOUR_OF_AMPM.incremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 68)             is(PlainTime.of(1)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 69)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 70) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmAtFloor()",
            "start_line": "72",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 73)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 74)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 75)                 .with(CLOCK_HOUR_OF_AMPM.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 76)             is(PlainTime.of(19)));\n4403dd895 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-05-08 09:25:30 +0200 77)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26",
                "4403dd895": "    big refactoring of iso-related operator infrastructure"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmAtFloorOnTimestamp",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmAtFloorOnTimestamp()",
            "start_line": "80",
            "blame_result": "4a67e8509 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-24 23:00:46 +0200 81)         assertThat(\n4a67e8509 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-24 23:00:46 +0200 82)             PlainTimestamp.of(2014, 4, 21, 19, 45, 30)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 83)                 .with(CLOCK_HOUR_OF_AMPM.atFloor()),\n4a67e8509 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-24 23:00:46 +0200 84)             is(PlainTimestamp.of(2014, 4, 21, 19, 0)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 85)     }\n",
            "commit_hashes": {
                "4a67e8509": "    more operator tests for PlainTimestamp",
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfAmPmMaximized",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfAmPmMaximized()",
            "start_line": "220",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 221)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 222)             PlainTime.of(19, 45, 30).with(DIGITAL_HOUR_OF_AMPM.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 223)             is(PlainTime.of(23, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 224)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 225) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmAtCeiling()",
            "start_line": "95",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200  96)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200  97)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200  98)                 .with(CLOCK_HOUR_OF_AMPM.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200  99)             is(PlainTime.of(19, 59, 59, 999999999)));\n4403dd895 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-05-08 09:25:30 +0200 100)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26",
                "4403dd895": "    big refactoring of iso-related operator infrastructure"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfAmPmAtCeilingOnTimestamp",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfAmPmAtCeilingOnTimestamp()",
            "start_line": "103",
            "blame_result": "4a67e8509 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-24 23:00:46 +0200 104)         assertThat(\n4a67e8509 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-24 23:00:46 +0200 105)             PlainTimestamp.of(2014, 4, 21, 19, 45, 30)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 106)                 .with(CLOCK_HOUR_OF_AMPM.atCeiling()),\n4a67e8509 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-24 23:00:46 +0200 107)             is(\n4a67e8509 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-24 23:00:46 +0200 108)                 PlainTimestamp.of(2014, 4, 21, 19, 59, 59)\n",
            "commit_hashes": {
                "4a67e8509": "    more operator tests for PlainTimestamp",
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfDayMinimized",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfDayMinimized()",
            "start_line": "120",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 121)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 122)             PlainTime.of(19, 45, 30).with(CLOCK_HOUR_OF_DAY.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 123)             is(PlainTime.of(1, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 124)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 125) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfDayMinimizedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfDayMinimizedIfHour24()",
            "start_line": "127",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 128)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 129)             PlainTime.of(24).with(CLOCK_HOUR_OF_DAY.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 130)             is(PlainTime.of(1)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 131)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 132) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfDayMaximized",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfDayMaximized()",
            "start_line": "134",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 135)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 136)             PlainTime.of(19, 45, 30).with(CLOCK_HOUR_OF_DAY.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 137)             is(PlainTime.of(0, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 138)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 139) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfDayMaximizedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfDayMaximizedIfHour24()",
            "start_line": "141",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 142)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 143)             PlainTime.of(24).with(CLOCK_HOUR_OF_DAY.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 144)             is(PlainTime.of(0)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 145)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 146) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfDayDecremented",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfDayDecremented()",
            "start_line": "148",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 149)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 150)             PlainTime.of(19, 45, 30).with(CLOCK_HOUR_OF_DAY.decremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 151)             is(PlainTime.of(18, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 152)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 153) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfDayDecrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfDayDecrementedIfHour24()",
            "start_line": "155",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 156)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 157)             PlainTime.of(24).with(CLOCK_HOUR_OF_DAY.decremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 158)             is(PlainTime.of(23)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 159)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 160) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfDayIncremented",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfDayIncremented()",
            "start_line": "162",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 163)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 164)             PlainTime.of(19, 45, 30).with(CLOCK_HOUR_OF_DAY.incremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 165)             is(PlainTime.of(20, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 166)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 167) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfDayIncrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfDayIncrementedIfHour24()",
            "start_line": "169",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 170)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 171)             PlainTime.of(24).with(CLOCK_HOUR_OF_DAY.incremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 172)             is(PlainTime.of(1)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 173)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 174) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfDayAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfDayAtFloor()",
            "start_line": "176",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 177)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 178)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 179)                 .with(CLOCK_HOUR_OF_DAY.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 180)             is(PlainTime.of(19)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 181)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "clockHourOfDayAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.clockHourOfDayAtCeiling()",
            "start_line": "191",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 192)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 193)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 194)                 .with(CLOCK_HOUR_OF_DAY.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 195)             is(PlainTime.of(19, 59, 59, 999999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 196)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfAmPmMinimized",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfAmPmMinimized()",
            "start_line": "206",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 207)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 208)             PlainTime.of(19, 45, 30).with(DIGITAL_HOUR_OF_AMPM.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 209)             is(PlainTime.of(12, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 210)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 211) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfAmPmMinimizedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfAmPmMinimizedIfHour24()",
            "start_line": "213",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 214)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 215)             PlainTime.of(24).with(DIGITAL_HOUR_OF_AMPM.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 216)             is(PlainTime.of(0)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 217)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 218) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfAmPmMaximizedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfAmPmMaximizedIfHour24()",
            "start_line": "227",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 228)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 229)             PlainTime.of(24).with(DIGITAL_HOUR_OF_AMPM.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 230)             is(PlainTime.of(11)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 231)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 232) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfAmPmDecremented",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfAmPmDecremented()",
            "start_line": "234",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 235)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 236)             PlainTime.of(19, 45, 30).with(DIGITAL_HOUR_OF_AMPM.decremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 237)             is(PlainTime.of(18, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 238)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 239) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfAmPmDecrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfAmPmDecrementedIfHour24()",
            "start_line": "241",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 242)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 243)             PlainTime.of(24).with(DIGITAL_HOUR_OF_AMPM.decremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 244)             is(PlainTime.of(23)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 245)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 246) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfAmPmIncremented",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfAmPmIncremented()",
            "start_line": "248",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 249)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 250)             PlainTime.of(19, 45, 30).with(DIGITAL_HOUR_OF_AMPM.incremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 251)             is(PlainTime.of(20, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 252)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 253) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfAmPmIncrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfAmPmIncrementedIfHour24()",
            "start_line": "255",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 256)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 257)             PlainTime.of(24).with(DIGITAL_HOUR_OF_AMPM.incremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 258)             is(PlainTime.of(1)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 259)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 260) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfAmPmAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfAmPmAtFloor()",
            "start_line": "262",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 263)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 264)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 265)                 .with(DIGITAL_HOUR_OF_AMPM.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 266)             is(PlainTime.of(19)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 267)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfAmPmAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfAmPmAtCeiling()",
            "start_line": "277",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 278)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 279)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 280)                 .with(DIGITAL_HOUR_OF_AMPM.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 281)             is(PlainTime.of(19, 59, 59, 999999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 282)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfDayMinimized",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfDayMinimized()",
            "start_line": "292",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 293)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 294)             PlainTime.of(19, 45, 30).with(DIGITAL_HOUR_OF_DAY.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 295)             is(PlainTime.of(0, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 296)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 297) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatErrorNullMessage",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatErrorNullMessage()",
            "start_line": "1743",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1744)         CompactFormatter cf = new CompactFormatter(\"%11$s\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1745)         LogRecord record = new LogRecord(Level.SEVERE, \"message\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1746)         record.setThrown(new Throwable());\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1747)         String output = cf.format(record);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1748)         assertNotNull(output);\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfDayMinimizedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfDayMinimizedIfHour24()",
            "start_line": "307",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 308)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 309)             PlainTime.of(24).with(DIGITAL_HOUR_OF_DAY.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 310)             is(PlainTime.of(0)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 311)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 312) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfDayMaximized",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfDayMaximized()",
            "start_line": "314",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 315)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 316)             PlainTime.of(19, 45, 30).with(DIGITAL_HOUR_OF_DAY.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 317)             is(PlainTime.of(23, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 318)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 319) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfDayDecremented",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfDayDecremented()",
            "start_line": "336",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 337)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 338)             PlainTime.of(19, 45, 30).with(DIGITAL_HOUR_OF_DAY.decremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 339)             is(PlainTime.of(18, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 340)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 341) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfDayDecrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfDayDecrementedIfHour24()",
            "start_line": "351",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 352)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 353)             PlainTime.of(24).with(DIGITAL_HOUR_OF_DAY.decremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 354)             is(PlainTime.of(23)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 355)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 356) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfDayIncremented",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfDayIncremented()",
            "start_line": "358",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 359)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 360)             PlainTime.of(19, 45, 30).with(DIGITAL_HOUR_OF_DAY.incremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 361)             is(PlainTime.of(20, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 362)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 363) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfDayIncrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfDayIncrementedIfHour24()",
            "start_line": "373",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 374)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 375)             PlainTime.of(24).with(DIGITAL_HOUR_OF_DAY.incremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 376)             is(PlainTime.of(1)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 377)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 378) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfDayAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfDayAtFloor()",
            "start_line": "380",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 381)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 382)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 383)                 .with(DIGITAL_HOUR_OF_DAY.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 384)             is(PlainTime.of(19)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 385)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "digitalHourOfDayAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.digitalHourOfDayAtCeiling()",
            "start_line": "395",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 396)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 397)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 398)                 .with(DIGITAL_HOUR_OF_DAY.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 399)             is(PlainTime.of(19, 59, 59, 999999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 400)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "hour0To24Minimized",
            "FQS": "net.time4j.TimeOperatorTest.hour0To24Minimized()",
            "start_line": "410",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 411)         assertThat(\nc3615d035 core/src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2017-09-24 01:08:17 +0200 412)             PlainTime.of(19, 45, 30).with(HOUR_FROM_0_TO_24.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 413)             is(PlainTime.of(0, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 414)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 415) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26",
                "c3615d035": "    rename ISO_HOUR to HOUR_FROM_0_TO_24"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "hour0To24Maximized",
            "FQS": "net.time4j.TimeOperatorTest.hour0To24Maximized()",
            "start_line": "435",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 436)         assertThat(\nc3615d035 core/src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2017-09-24 01:08:17 +0200 437)             PlainTime.of(19, 45, 30).with(HOUR_FROM_0_TO_24.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 438)             is(PlainTime.of(23, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 439)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 440) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26",
                "c3615d035": "    rename ISO_HOUR to HOUR_FROM_0_TO_24"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "hour0To24Decremented",
            "FQS": "net.time4j.TimeOperatorTest.hour0To24Decremented()",
            "start_line": "463",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 464)         assertThat(\nc3615d035 core/src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2017-09-24 01:08:17 +0200 465)             PlainTime.of(19, 45, 30).with(HOUR_FROM_0_TO_24.decremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 466)             is(PlainTime.of(18, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 467)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 468) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26",
                "c3615d035": "    rename ISO_HOUR to HOUR_FROM_0_TO_24"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "hour0To24Incremented",
            "FQS": "net.time4j.TimeOperatorTest.hour0To24Incremented()",
            "start_line": "491",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 492)         assertThat(\nc3615d035 core/src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2017-09-24 01:08:17 +0200 493)             PlainTime.of(19, 45, 30).with(HOUR_FROM_0_TO_24.incremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 494)             is(PlainTime.of(20, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 495)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 496) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26",
                "c3615d035": "    rename ISO_HOUR to HOUR_FROM_0_TO_24"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "hour0To24AtFloor",
            "FQS": "net.time4j.TimeOperatorTest.hour0To24AtFloor()",
            "start_line": "519",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 520)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 521)             PlainTime.of(19, 45, 30, 123456789)\nc3615d035 core/src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2017-09-24 01:08:17 +0200 522)                 .with(HOUR_FROM_0_TO_24.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 523)             is(PlainTime.of(19)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 524)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26",
                "c3615d035": "    rename ISO_HOUR to HOUR_FROM_0_TO_24"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "hour0To24AtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.hour0To24AtCeiling()",
            "start_line": "537",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 538)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 539)             PlainTime.of(19, 45, 30, 123456789)\nc3615d035 core/src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2017-09-24 01:08:17 +0200 540)                 .with(HOUR_FROM_0_TO_24.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 541)             is(PlainTime.of(19, 59, 59, 999999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java      (Meno Hochschild 2014-04-19 08:45:48 +0200 542)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26",
                "c3615d035": "    rename ISO_HOUR to HOUR_FROM_0_TO_24"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "minuteOfHourMinimized",
            "FQS": "net.time4j.TimeOperatorTest.minuteOfHourMinimized()",
            "start_line": "555",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 556)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 557)             PlainTime.of(19, 45, 30).with(MINUTE_OF_HOUR.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 558)             is(PlainTime.of(19, 0, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 559)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 560) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "minuteOfHourMaximized",
            "FQS": "net.time4j.TimeOperatorTest.minuteOfHourMaximized()",
            "start_line": "569",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 570)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 571)             PlainTime.of(19, 45, 30).with(MINUTE_OF_HOUR.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 572)             is(PlainTime.of(19, 59, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 573)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 574) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "minuteOfHourAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.minuteOfHourAtFloor()",
            "start_line": "632",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 633)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 634)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 635)                 .with(MINUTE_OF_HOUR.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 636)             is(PlainTime.of(19, 45)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 637)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "minuteOfHourAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.minuteOfHourAtCeiling()",
            "start_line": "650",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 651)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 652)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 653)                 .with(MINUTE_OF_HOUR.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 654)             is(PlainTime.of(19, 45, 59, 999999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 655)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "minuteOfDayMinimized",
            "FQS": "net.time4j.TimeOperatorTest.minuteOfDayMinimized()",
            "start_line": "668",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 669)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 670)             PlainTime.of(19, 45, 30).with(MINUTE_OF_DAY.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 671)             is(PlainTime.of(0, 0, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 672)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 673) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "minuteOfDayMinimizedIfFullMinute",
            "FQS": "net.time4j.TimeOperatorTest.minuteOfDayMinimizedIfFullMinute()",
            "start_line": "675",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 676)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 677)             PlainTime.of(24).with(MINUTE_OF_DAY.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 678)             is(PlainTime.of(0)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 679)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 680) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "minuteOfDayMaximized",
            "FQS": "net.time4j.TimeOperatorTest.minuteOfDayMaximized()",
            "start_line": "682",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 683)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 684)             PlainTime.of(19, 45, 30).with(MINUTE_OF_DAY.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 685)             is(PlainTime.of(23, 59, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 686)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 687) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "minuteOfDayAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.minuteOfDayAtFloor()",
            "start_line": "745",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 746)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 747)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 748)                 .with(MINUTE_OF_DAY.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 749)             is(PlainTime.of(19, 45)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 750)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "minuteOfDayAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.minuteOfDayAtCeiling()",
            "start_line": "763",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 764)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 765)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 766)                 .with(MINUTE_OF_DAY.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 767)             is(PlainTime.of(19, 45, 59, 999999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 768)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "secondOfMinuteMinimized",
            "FQS": "net.time4j.TimeOperatorTest.secondOfMinuteMinimized()",
            "start_line": "781",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 782)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 783)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 784)                 .with(SECOND_OF_MINUTE.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 785)             is(PlainTime.of(19, 45, 0, 123456789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 786)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "secondOfMinuteMaximized",
            "FQS": "net.time4j.TimeOperatorTest.secondOfMinuteMaximized()",
            "start_line": "796",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 797)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 798)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 799)                 .with(SECOND_OF_MINUTE.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 800)             is(PlainTime.of(19, 45, 59, 123456789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 801)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "secondOfMinuteAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.secondOfMinuteAtFloor()",
            "start_line": "864",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 865)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 866)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 867)                 .with(SECOND_OF_MINUTE.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 868)             is(PlainTime.of(19, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 869)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "secondOfMinuteAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.secondOfMinuteAtCeiling()",
            "start_line": "882",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 883)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 884)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 885)                 .with(SECOND_OF_MINUTE.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 886)             is(PlainTime.of(19, 45, 30, 999999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 887)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "secondOfDayMinimized",
            "FQS": "net.time4j.TimeOperatorTest.secondOfDayMinimized()",
            "start_line": "900",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 901)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 902)             PlainTime.of(19, 45, 30, 123456789).with(SECOND_OF_DAY.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 903)             is(PlainTime.of(0, 0, 0, 123456789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 904)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 905) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "secondOfDayMaximized",
            "FQS": "net.time4j.TimeOperatorTest.secondOfDayMaximized()",
            "start_line": "917",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 918)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 919)             PlainTime.of(19, 45, 30, 123456789).with(SECOND_OF_DAY.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 920)             is(PlainTime.of(23, 59, 59, 123456789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 921)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 922) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "secondOfDayAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.secondOfDayAtCeiling()",
            "start_line": "1000",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1001)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1002)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1003)                 .with(SECOND_OF_DAY.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1004)             is(PlainTime.of(19, 45, 30, 999999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1005)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "milliOfSecondMinimized",
            "FQS": "net.time4j.TimeOperatorTest.milliOfSecondMinimized()",
            "start_line": "1018",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1019)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1020)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1021)                 .with(MILLI_OF_SECOND.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1022)             is(PlainTime.of(19, 45, 30, 456789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1023)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "milliOfSecondMaximized",
            "FQS": "net.time4j.TimeOperatorTest.milliOfSecondMaximized()",
            "start_line": "1033",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1034)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1035)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1036)                 .with(MILLI_OF_SECOND.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1037)             is(PlainTime.of(19, 45, 30, 999456789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1038)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "milliOfSecondAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.milliOfSecondAtFloor()",
            "start_line": "1103",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1104)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1105)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1106)                 .with(MILLI_OF_SECOND.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1107)             is(PlainTime.of(19, 45, 30, 123000000)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1108)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "milliOfSecondAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.milliOfSecondAtCeiling()",
            "start_line": "1122",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1123)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1124)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1125)                 .with(MILLI_OF_SECOND.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1126)             is(PlainTime.of(19, 45, 30, 123999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1127)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "milliOfDayMinimized",
            "FQS": "net.time4j.TimeOperatorTest.milliOfDayMinimized()",
            "start_line": "1141",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1142)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1143)             PlainTime.of(19, 45, 30, 123456789).with(MILLI_OF_DAY.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1144)             is(PlainTime.of(0, 0, 0, 456789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1145)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1146) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "milliOfDayMaximized",
            "FQS": "net.time4j.TimeOperatorTest.milliOfDayMaximized()",
            "start_line": "1158",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1159)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1160)             PlainTime.of(19, 45, 30, 123456789).with(MILLI_OF_DAY.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1161)             is(PlainTime.of(23, 59, 59, 999456789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1162)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1163) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "milliOfDayAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.milliOfDayAtFloor()",
            "start_line": "1225",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1226)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1227)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1228)                 .with(MILLI_OF_DAY.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1229)             is(PlainTime.of(19, 45, 30, 123000000)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1230)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "milliOfDayAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.milliOfDayAtCeiling()",
            "start_line": "1243",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1244)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1245)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1246)                 .with(MILLI_OF_DAY.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1247)             is(PlainTime.of(19, 45, 30, 123999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1248)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "microOfSecondMinimized",
            "FQS": "net.time4j.TimeOperatorTest.microOfSecondMinimized()",
            "start_line": "1261",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1262)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1263)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1264)                 .with(MICRO_OF_SECOND.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1265)             is(PlainTime.of(19, 45, 30, 789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1266)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "microOfSecondMaximized",
            "FQS": "net.time4j.TimeOperatorTest.microOfSecondMaximized()",
            "start_line": "1276",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1277)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1278)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1279)                 .with(MICRO_OF_SECOND.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1280)             is(PlainTime.of(19, 45, 30, 999999789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1281)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "microOfSecondAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.microOfSecondAtFloor()",
            "start_line": "1346",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1347)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1348)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1349)                 .with(MICRO_OF_SECOND.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1350)             is(PlainTime.of(19, 45, 30, 123456000)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1351)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "microOfSecondAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.microOfSecondAtCeiling()",
            "start_line": "1365",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1366)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1367)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1368)                 .with(MICRO_OF_SECOND.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1369)             is(PlainTime.of(19, 45, 30, 123456999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1370)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "microOfDayMinimized",
            "FQS": "net.time4j.TimeOperatorTest.microOfDayMinimized()",
            "start_line": "1384",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1385)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1386)             PlainTime.of(19, 45, 30, 123456789).with(MICRO_OF_DAY.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1387)             is(PlainTime.of(0, 0, 0, 789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1388)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1389) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "microOfDayMaximized",
            "FQS": "net.time4j.TimeOperatorTest.microOfDayMaximized()",
            "start_line": "1401",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1402)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1403)             PlainTime.of(19, 45, 30, 123456789).with(MICRO_OF_DAY.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1404)             is(PlainTime.of(23, 59, 59, 999999789)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1405)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1406) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "microOfDayAtFloor",
            "FQS": "net.time4j.TimeOperatorTest.microOfDayAtFloor()",
            "start_line": "1468",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1469)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1470)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1471)                 .with(MICRO_OF_DAY.atFloor()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1472)             is(PlainTime.of(19, 45, 30, 123456000)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1473)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "microOfDayAtCeiling",
            "FQS": "net.time4j.TimeOperatorTest.microOfDayAtCeiling()",
            "start_line": "1486",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1487)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1488)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1489)                 .with(MICRO_OF_DAY.atCeiling()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1490)             is(PlainTime.of(19, 45, 30, 123456999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1491)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "nanoOfSecondMinimized",
            "FQS": "net.time4j.TimeOperatorTest.nanoOfSecondMinimized()",
            "start_line": "1504",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1505)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1506)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1507)                 .with(NANO_OF_SECOND.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1508)             is(PlainTime.of(19, 45, 30)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1509)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "nanoOfSecondMaximized",
            "FQS": "net.time4j.TimeOperatorTest.nanoOfSecondMaximized()",
            "start_line": "1519",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1520)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1521)             PlainTime.of(19, 45, 30, 123456789)\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1522)                 .with(NANO_OF_SECOND.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1523)             is(PlainTime.of(19, 45, 30, 999999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1524)     }\n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "nanoOfSecondDecrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.nanoOfSecondDecrementedIfHour24()",
            "start_line": "1546",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1547)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1548)             PlainTime.of(24).with(NANO_OF_SECOND.decremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1549)             is(PlainTime.of(23, 59, 59, 999999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1550)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1551) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "nanoOfSecondIncrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.nanoOfSecondIncrementedIfHour24()",
            "start_line": "1565",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1566)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1567)             PlainTime.of(24).with(NANO_OF_SECOND.incremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1568)             is(PlainTime.of(0, 0, 0, 1)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1569)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1570) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "nanoOfDayMinimized",
            "FQS": "net.time4j.TimeOperatorTest.nanoOfDayMinimized()",
            "start_line": "1602",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1603)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1604)             PlainTime.of(19, 45, 30, 123456789).with(NANO_OF_DAY.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1605)             is(PlainTime.of(0)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1606)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1607) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "nanoOfDayMinimizedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.nanoOfDayMinimizedIfHour24()",
            "start_line": "1609",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1610)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1611)             PlainTime.of(24).with(NANO_OF_DAY.minimized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1612)             is(PlainTime.of(0)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1613)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1614) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "nanoOfDayMaximized",
            "FQS": "net.time4j.TimeOperatorTest.nanoOfDayMaximized()",
            "start_line": "1616",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1617)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1618)             PlainTime.of(19, 45, 30, 123456789).with(NANO_OF_DAY.maximized()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1619)             is(PlainTime.of(24)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1620)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1621) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "nanoOfDayDecrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.nanoOfDayDecrementedIfHour24()",
            "start_line": "1641",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1642)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1643)             PlainTime.of(24).with(NANO_OF_DAY.decremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1644)             is(PlainTime.of(23, 59, 59, 999999999)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1645)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1646) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimeOperatorTest.java",
            "test_name": "nanoOfDayIncrementedIfHour24",
            "FQS": "net.time4j.TimeOperatorTest.nanoOfDayIncrementedIfHour24()",
            "start_line": "1660",
            "blame_result": "3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1661)         assertThat(\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1662)             PlainTime.of(24).with(NANO_OF_DAY.incremented()),\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1663)             is(PlainTime.of(0, 0, 0, 1)));\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1664)     }\n3ba388592 src/test/java/net/time4j/TimeOperatorTest.java (Meno Hochschild 2014-04-19 08:45:48 +0200 1665) \n",
            "commit_hashes": {
                "3ba388592": "    time operator tests and bugfix for issue #26"
            },
            "Commit&issueIDs": {
                "3ba388592": [
                    "#26"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/26",
                "https://github.com/MenoData/Time4J/commit/3ba388592"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatBackTrace",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatBackTrace()",
            "start_line": "1919",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1920)         Exception e = new IOException(\"Fake I/O\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1921)         e = new Exception(e.toString(), e);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1922)         assertNotNull(e.getMessage(), e.getMessage());\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1923) \n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1924)         CompactFormatter cf = new CompactFormatter(\"%14$s\");\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimestampArithmeticTest.java",
            "test_name": "plusMonths",
            "FQS": "net.time4j.TimestampArithmeticTest.plusMonths()",
            "start_line": "23",
            "blame_result": "33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 24)         assertThat(\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 25)             PlainTimestamp.of(2012, 1, 31, 12, 45).plus(1, MONTHS),\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 26)             is(PlainTimestamp.of(2012, 2, 29, 12, 45)));\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 27)         assertThat(\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 28)             PlainTimestamp.of(2012, 1, 31, 12, 45).plus(48, MONTHS),\n",
            "commit_hashes": {
                "33bea7aea": "    bugfix for issue #10"
            },
            "Commit&issueIDs": {
                "33bea7aea": [
                    "#10"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/10",
                "https://github.com/MenoData/Time4J/commit/33bea7aea"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimestampArithmeticTest.java",
            "test_name": "plusDays",
            "FQS": "net.time4j.TimestampArithmeticTest.plusDays()",
            "start_line": "33",
            "blame_result": "33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 34)         assertThat(\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 35)             PlainTimestamp.of(2012, 1, 31, 12, 45).plus(30, DAYS),\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 36)             is(PlainTimestamp.of(2012, 3, 1, 12, 45)));\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 37)     }\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 38) \n",
            "commit_hashes": {
                "33bea7aea": "    bugfix for issue #10"
            },
            "Commit&issueIDs": {
                "33bea7aea": [
                    "#10"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/10",
                "https://github.com/MenoData/Time4J/commit/33bea7aea"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimestampArithmeticTest.java",
            "test_name": "plusHours",
            "FQS": "net.time4j.TimestampArithmeticTest.plusHours()",
            "start_line": "40",
            "blame_result": "33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 41)         assertThat(\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 42)             PlainTimestamp.of(2012, 1, 31, 12, 45).plus(3, HOURS),\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 43)             is(PlainTimestamp.of(2012, 1, 31, 15, 45)));\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 44)         assertThat(\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-04-02 23:20:49 +0200 45)             PlainTimestamp.of(2012, 1, 31, 12, 45).plus(30, HOURS),\n",
            "commit_hashes": {
                "33bea7aea": "    bugfix for issue #10"
            },
            "Commit&issueIDs": {
                "33bea7aea": [
                    "#10"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/10",
                "https://github.com/MenoData/Time4J/commit/33bea7aea"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimestampArithmeticTest.java",
            "test_name": "plusMinutes",
            "FQS": "net.time4j.TimestampArithmeticTest.plusMinutes()",
            "start_line": "53",
            "blame_result": "33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java      (Meno Hochschild 2014-04-02 23:20:49 +0200 54)         assertThat(\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java      (Meno Hochschild 2014-04-02 23:20:49 +0200 55)             PlainTimestamp.of(2012, 1, 31, 12, 45).plus(1501, MINUTES),\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java      (Meno Hochschild 2014-04-02 23:20:49 +0200 56)             is(PlainTimestamp.of(2012, 2, 1, 13, 46)));\nb76090865 core/src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-08-29 22:17:50 +0200 57)         assertThat(\nb76090865 core/src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-08-29 22:17:50 +0200 58)             PlainTimestamp.of(2012, 1, 31, 23, 59).plus(1, MINUTES),\n",
            "commit_hashes": {
                "33bea7aea": "    bugfix for issue #10",
                "b76090865": "    enhanced tests for timestamp arithmetic"
            },
            "Commit&issueIDs": {
                "33bea7aea": [
                    "#10"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/10",
                "https://github.com/MenoData/Time4J/commit/33bea7aea"
            ]
        },
        {
            "poj_link": "https://github.com/MenoData/Time4J/",
            "file_path": "MenoData/Time4J/base/src/test/java/net/time4j/TimestampArithmeticTest.java",
            "test_name": "minusMinutes",
            "FQS": "net.time4j.TimestampArithmeticTest.minusMinutes()",
            "start_line": "66",
            "blame_result": "33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java      (Meno Hochschild 2014-04-02 23:20:49 +0200 67)         int amount = 28 * 24 * 60 + 22 * 60 + 58;\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java      (Meno Hochschild 2014-04-02 23:20:49 +0200 68)         assertThat(\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java      (Meno Hochschild 2014-04-02 23:20:49 +0200 69)             PlainTimestamp.of(2012, 2, 29, 11, 43, 59).minus(amount, MINUTES),\n33bea7aea src/test/java/net/time4j/TimestampArithmeticTest.java      (Meno Hochschild 2014-04-02 23:20:49 +0200 70)             is(PlainTimestamp.of(2012, 1, 31, 12, 45, 59)));\nb76090865 core/src/test/java/net/time4j/TimestampArithmeticTest.java (Meno Hochschild 2014-08-29 22:17:50 +0200 71)         assertThat(\n",
            "commit_hashes": {
                "33bea7aea": "    bugfix for issue #10",
                "b76090865": "    enhanced tests for timestamp arithmetic"
            },
            "Commit&issueIDs": {
                "33bea7aea": [
                    "#10"
                ]
            },
            "links": [
                "https://github.com/MenoData/Time4J/issues/10",
                "https://github.com/MenoData/Time4J/commit/33bea7aea"
            ]
        },
        {
            "poj_link": "https://github.com/yegor256/cactoos/",
            "file_path": "yegor256/cactoos/src/test/java/org/cactoos/map/MapEnvelopeTest.java",
            "test_name": "hashCodeDependsOnItems",
            "FQS": "org.cactoos.map.MapEnvelopeTest.hashCodeDependsOnItems()",
            "start_line": "204",
            "blame_result": "1ed8fe783 (Roman Proshin    2018-05-18 09:37:14 +0300 205)         final String key = \"key9\";\n1ed8fe783 (Roman Proshin    2018-05-18 09:37:14 +0300 206)         final String value = \"value9\";\n1ed8fe783 (Roman Proshin    2018-05-18 09:37:14 +0300 207)         final MapEntry<String, String> input = new MapEntry<>(key, value);\n1ed8fe783 (Roman Proshin    2018-05-18 09:37:14 +0300 208)         final MapEntry<String, String> expected = new MapEntry<>(key, value);\n79ae1f5bb (Nikita_Salomatin 2018-02-25 23:03:35 +0400 209)         MatcherAssert.assertThat(\n",
            "commit_hashes": {
                "1ed8fe783": "    #844: Implement equals and hashCode for MapEnvelope - fix PR comments",
                "79ae1f5bb": "    #681 add few unit tests to reach full coverage"
            },
            "Commit&issueIDs": {
                "79ae1f5bb": [
                    "#681"
                ]
            },
            "links": [
                "https://github.com/yegor256/cactoos/issues/681",
                "https://github.com/yegor256/cactoos/commit/79ae1f5bb"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/array/LongToNumberMapTest.java",
            "test_name": "testSubmap",
            "FQS": "org.ojalgo.array.LongToNumberMapTest.testSubmap()",
            "start_line": "106",
            "blame_result": "9c835d411 test/org/ojalgo/array/BasicMapTest.java                 (apete           2016-10-13 08:08:26 +0200 107) \n222df0ed9 src/test/java/org/ojalgo/array/LongToNumberMapTest.java (Anders Peterson 2022-09-24 12:34:08 +0200 108)         final LongToNumberMap<Double> tmpMap = LongToNumberMap.factory(ArrayR064.FACTORY).make();\n9c835d411 test/org/ojalgo/array/BasicMapTest.java                 (apete           2016-10-13 08:08:26 +0200 109) \n9c835d411 test/org/ojalgo/array/BasicMapTest.java                 (apete           2016-10-13 08:08:26 +0200 110)         tmpMap.put(10, 1);\n9c835d411 test/org/ojalgo/array/BasicMapTest.java                 (apete           2016-10-13 08:08:26 +0200 111)         tmpMap.put(20, 2);\n",
            "commit_hashes": {
                "9c835d411": "    2016-10-13",
                "222df0ed9": "    Rename array classes (#468)"
            },
            "Commit&issueIDs": {
                "222df0ed9": [
                    "(#468)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/468",
                "https://github.com/optimatika/ojAlgo/commit/222df0ed9"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/array/SparseTest.java",
            "test_name": "testIndexOfLargest",
            "FQS": "org.ojalgo.array.SparseTest.testIndexOfLargest()",
            "start_line": "63",
            "blame_result": "9bc5c1ea3 (Anders Peterson 2022-10-03 10:07:37 +0200 64) \n9bc5c1ea3 (Anders Peterson 2022-10-03 10:07:37 +0200 65)         SparseArray<Double> sparseArray = SparseArray.factory(ArrayR064.FACTORY).make(1_000_000L);\n9bc5c1ea3 (Anders Peterson 2022-10-03 10:07:37 +0200 66) \n9bc5c1ea3 (Anders Peterson 2022-10-03 10:07:37 +0200 67)         for (int i = 0; i < 100; i++) {\n9bc5c1ea3 (Anders Peterson 2022-10-03 10:07:37 +0200 68)             long index = Uniform.randomInteger(1_000_000L);\n",
            "commit_hashes": {
                "9bc5c1ea3": "    Sparse indexOfLargest (#471)"
            },
            "Commit&issueIDs": {
                "9bc5c1ea3": [
                    "(#471)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/471",
                "https://github.com/optimatika/ojAlgo/commit/9bc5c1ea3"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/data/domain/finance/FinanceUtilsTest.java",
            "test_name": "testConversions",
            "FQS": "org.ojalgo.data.domain.finance.FinanceUtilsTest.testConversions()",
            "start_line": "132",
            "blame_result": "61f497b03 (Anders Peterson 2022-02-11 13:34:05 +0100 133) \n61f497b03 (Anders Peterson 2022-02-11 13:34:05 +0100 134)         for (int r = 10; r <= 20; r++) {\n61f497b03 (Anders Peterson 2022-02-11 13:34:05 +0100 135) \n61f497b03 (Anders Peterson 2022-02-11 13:34:05 +0100 136)             final double tmpExpReturn = r / PrimitiveMath.HUNDRED;\n61f497b03 (Anders Peterson 2022-02-11 13:34:05 +0100 137)             final double tmpExpFactor = FinanceUtils.toGrowthFactorFromAnnualReturn(tmpExpReturn, CalendarDateUnit.MONTH);\n",
            "commit_hashes": {
                "61f497b03": "    Move from ojAlgo-finance (#409)"
            },
            "Commit&issueIDs": {
                "61f497b03": [
                    "(#409)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/409",
                "https://github.com/optimatika/ojAlgo/commit/61f497b03"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/data/domain/finance/portfolio/TestEquilibrium.java",
            "test_name": "testRandomProblemsComparedToEquilibrium",
            "FQS": "org.ojalgo.data.domain.finance.portfolio.TestEquilibrium.testRandomProblemsComparedToEquilibrium()",
            "start_line": "138",
            "blame_result": "61f497b03 (Anders Peterson 2022-02-11 13:34:05 +0100 139) \n61f497b03 (Anders Peterson 2022-02-11 13:34:05 +0100 140)         NumberContext weightsContext = StandardType.PERCENT.withPrecision(5);\n61f497b03 (Anders Peterson 2022-02-11 13:34:05 +0100 141) \n61f497b03 (Anders Peterson 2022-02-11 13:34:05 +0100 142)         int dim = 9;\n61f497b03 (Anders Peterson 2022-02-11 13:34:05 +0100 143) \n",
            "commit_hashes": {
                "61f497b03": "    Move from ojAlgo-finance (#409)"
            },
            "Commit&issueIDs": {
                "61f497b03": [
                    "(#409)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/409",
                "https://github.com/optimatika/ojAlgo/commit/61f497b03"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/function/multiary/LinearCase.java",
            "test_name": "testGetGradient",
            "FQS": "org.ojalgo.function.multiary.LinearCase.testGetGradient()",
            "start_line": "64",
            "blame_result": "e7a973d98 test/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 65) \ne7a973d98 test/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 66)         TestUtils.assertEquals(myLinearFunction1.getGradient(myArg), myLinearFunction2.getGradient(myArg));\ne7a973d98 test/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 67)         TestUtils.assertEquals(myAffineFunction1.getGradient(myArg), myAffineFunction2.getGradient(myArg));\ne7a973d98 test/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 68)         TestUtils.assertEquals(myQuadraticFunction1.getGradient(myArg), myQuadraticFunction2.getGradient(myArg));\ne7a973d98 test/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 69) \n",
            "commit_hashes": {
                "e7a973d98": "    Prepare for LinearSolver.Builder changes (#213)"
            },
            "Commit&issueIDs": {
                "e7a973d98": [
                    "(#213)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/213",
                "https://github.com/optimatika/ojAlgo/commit/e7a973d98"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/function/multiary/LinearCase.java",
            "test_name": "testGetHessian",
            "FQS": "org.ojalgo.function.multiary.LinearCase.testGetHessian()",
            "start_line": "76",
            "blame_result": "e7a973d98 test/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 77) \ne7a973d98 test/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 78)         TestUtils.assertEquals(myLinearFunction1.getHessian(myArg), myLinearFunction2.getHessian(myArg));\ne7a973d98 test/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 79)         TestUtils.assertEquals(myAffineFunction1.getHessian(myArg), myAffineFunction2.getHessian(myArg));\ne7a973d98 test/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 80)         TestUtils.assertEquals(myQuadraticFunction1.getHessian(myArg), myQuadraticFunction2.getHessian(myArg));\ne7a973d98 test/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 81) \n",
            "commit_hashes": {
                "e7a973d98": "    Prepare for LinearSolver.Builder changes (#213)"
            },
            "Commit&issueIDs": {
                "e7a973d98": [
                    "(#213)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/213",
                "https://github.com/optimatika/ojAlgo/commit/e7a973d98"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/function/multiary/LinearCase.java",
            "test_name": "testGetLinearFactors",
            "FQS": "org.ojalgo.function.multiary.LinearCase.testGetLinearFactors()",
            "start_line": "88",
            "blame_result": "e7a973d98 test/org/ojalgo/function/multiary/LinearCase.java          (Anders Peterson 2019-07-27 09:42:58 +0200 89) \n02b451530 src/test/java/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2022-12-06 09:16:50 +0100 90)         TestUtils.assertEquals(myLinearFunction1.getLinearFactors(false), myLinearFunction2.getLinearFactors(false));\n02b451530 src/test/java/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2022-12-06 09:16:50 +0100 91)         TestUtils.assertEquals(myAffineFunction1.getLinearFactors(false), myAffineFunction2.getLinearFactors(false));\n02b451530 src/test/java/org/ojalgo/function/multiary/LinearCase.java (Anders Peterson 2022-12-06 09:16:50 +0100 92)         TestUtils.assertEquals(myQuadraticFunction1.getLinearFactors(false), myQuadraticFunction2.getLinearFactors(false));\ne7a973d98 test/org/ojalgo/function/multiary/LinearCase.java          (Anders Peterson 2019-07-27 09:42:58 +0200 93) \n",
            "commit_hashes": {
                "e7a973d98": "    Prepare for LinearSolver.Builder changes (#213)",
                "02b451530": "    OptimisationData (#483)"
            },
            "Commit&issueIDs": {
                "e7a973d98": [
                    "(#213)"
                ],
                "02b451530": [
                    "(#483)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/213",
                "https://github.com/optimatika/ojAlgo/commit/e7a973d98",
                "https://github.com/optimatika/ojAlgo/issues/483",
                "https://github.com/optimatika/ojAlgo/commit/02b451530"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/function/multiary/QuadraticCase.java",
            "test_name": "testGetGradient",
            "FQS": "org.ojalgo.function.multiary.QuadraticCase.testGetGradient()",
            "start_line": "56",
            "blame_result": "e7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 57) \ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 58)         TestUtils.assertEquals(myPureQuadraticFunction.getGradient(myArg1), myPureQuadraticFunction.getGradient(myArg2));\ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 59)         TestUtils.assertEquals(myQuadraticFunction.getGradient(myArg1), myQuadraticFunction.getGradient(myArg2));\ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 60) \ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 61)         TestUtils.assertEquals(myPureQuadraticFunction.getGradient(myArg1), myQuadraticFunction.getGradient(myArg1));\n",
            "commit_hashes": {
                "e7a973d98": "    Prepare for LinearSolver.Builder changes (#213)"
            },
            "Commit&issueIDs": {
                "e7a973d98": [
                    "(#213)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/213",
                "https://github.com/optimatika/ojAlgo/commit/e7a973d98"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/function/multiary/QuadraticCase.java",
            "test_name": "testGetHessian",
            "FQS": "org.ojalgo.function.multiary.QuadraticCase.testGetHessian()",
            "start_line": "66",
            "blame_result": "e7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 67) \ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 68)         TestUtils.assertEquals(myPureQuadraticFunction.getHessian(myArg1), myPureQuadraticFunction.getHessian(myArg2));\ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 69)         TestUtils.assertEquals(myQuadraticFunction.getHessian(myArg1), myQuadraticFunction.getHessian(myArg2));\ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 70) \ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 71)         TestUtils.assertEquals(myPureQuadraticFunction.getHessian(myArg1), myQuadraticFunction.getHessian(myArg1));\n",
            "commit_hashes": {
                "e7a973d98": "    Prepare for LinearSolver.Builder changes (#213)"
            },
            "Commit&issueIDs": {
                "e7a973d98": [
                    "(#213)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/213",
                "https://github.com/optimatika/ojAlgo/commit/e7a973d98"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/function/multiary/QuadraticCase.java",
            "test_name": "testInvoke",
            "FQS": "org.ojalgo.function.multiary.QuadraticCase.testInvoke()",
            "start_line": "84",
            "blame_result": "e7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 85) \ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 86)         TestUtils.assertEquals(myPureQuadraticFunction.invoke(myArg1), myPureQuadraticFunction.invoke(myArg2));\ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 87)         TestUtils.assertEquals(myQuadraticFunction.invoke(myArg1), myQuadraticFunction.invoke(myArg2));\ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 88) \ne7a973d98 test/org/ojalgo/function/multiary/QuadraticCase.java (Anders Peterson 2019-07-27 09:42:58 +0200 89)         TestUtils.assertEquals(myPureQuadraticFunction.invoke(myArg1), myQuadraticFunction.invoke(myArg1));\n",
            "commit_hashes": {
                "e7a973d98": "    Prepare for LinearSolver.Builder changes (#213)"
            },
            "Commit&issueIDs": {
                "e7a973d98": [
                    "(#213)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/213",
                "https://github.com/optimatika/ojAlgo/commit/e7a973d98"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/function/special/BetaFunctionTest.java",
            "test_name": "testIdentities",
            "FQS": "org.ojalgo.function.special.BetaFunctionTest.testIdentities()",
            "start_line": "51",
            "blame_result": "2aa90ec60 test/org/ojalgo/function/special/BetaFunctionTest.java (Anders Peterson 2019-10-12 14:11:45 +0200 52) \n2aa90ec60 test/org/ojalgo/function/special/BetaFunctionTest.java (Anders Peterson 2019-10-12 14:11:45 +0200 53)         int lim = 50;\n2aa90ec60 test/org/ojalgo/function/special/BetaFunctionTest.java (Anders Peterson 2019-10-12 14:11:45 +0200 54)         for (int a = 1; a < lim; a++) {\n2aa90ec60 test/org/ojalgo/function/special/BetaFunctionTest.java (Anders Peterson 2019-10-12 14:11:45 +0200 55)             for (int b = 1; b < lim; b++) {\n2aa90ec60 test/org/ojalgo/function/special/BetaFunctionTest.java (Anders Peterson 2019-10-12 14:11:45 +0200 56)                 TestUtils.assertEquals(BetaFunction.beta(a, b), BetaFunction.beta(a + 1, b) + BetaFunction.beta(a, b + 1));\n",
            "commit_hashes": {
                "2aa90ec60": "    More special functions (#228)"
            },
            "Commit&issueIDs": {
                "2aa90ec60": [
                    "(#228)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/228",
                "https://github.com/optimatika/ojAlgo/commit/2aa90ec60"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/function/special/MissingMathTest.java",
            "test_name": "testMinMax",
            "FQS": "org.ojalgo.function.special.MissingMathTest.testMinMax()",
            "start_line": "144",
            "blame_result": "3fc0b1097 test/org/ojalgo/function/special/MissingMathTest.java (Anders Peterson 2019-09-29 16:22:25 +0200 145) \n3fc0b1097 test/org/ojalgo/function/special/MissingMathTest.java (Anders Peterson 2019-09-29 16:22:25 +0200 146)         TestUtils.assertEquals(Math.min(2, -78), MissingMath.min(2, -78));\n3fc0b1097 test/org/ojalgo/function/special/MissingMathTest.java (Anders Peterson 2019-09-29 16:22:25 +0200 147)         TestUtils.assertEquals(MAX.invoke(2, -78), MissingMath.max(2, -78));\n3fc0b1097 test/org/ojalgo/function/special/MissingMathTest.java (Anders Peterson 2019-09-29 16:22:25 +0200 148) \n3fc0b1097 test/org/ojalgo/function/special/MissingMathTest.java (Anders Peterson 2019-09-29 16:22:25 +0200 149)         TestUtils.assertEquals(67, MissingMath.max(new int[] { 67 }));\n",
            "commit_hashes": {
                "3fc0b1097": "    PrimitiveNumber (#226)"
            },
            "Commit&issueIDs": {
                "3fc0b1097": [
                    "(#226)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/226",
                "https://github.com/optimatika/ojAlgo/commit/3fc0b1097"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/function/special/PowerOf2Test.java",
            "test_name": "testPowerOfInt2",
            "FQS": "org.ojalgo.function.special.PowerOf2Test.testPowerOfInt2()",
            "start_line": "105",
            "blame_result": "f4c7b7571 test/org/ojalgo/function/special/PowerOf2Test.java (Anders Peterson 2019-09-22 10:14:13 +0200 106) \nf4c7b7571 test/org/ojalgo/function/special/PowerOf2Test.java (Anders Peterson 2019-09-22 10:14:13 +0200 107)         int value = 1;\nf4c7b7571 test/org/ojalgo/function/special/PowerOf2Test.java (Anders Peterson 2019-09-22 10:14:13 +0200 108)         TestUtils.assertEquals(value, PowerOf2.powerOfInt2(0));\nf4c7b7571 test/org/ojalgo/function/special/PowerOf2Test.java (Anders Peterson 2019-09-22 10:14:13 +0200 109)         for (int i = 1; i < 31; i++) {\nf4c7b7571 test/org/ojalgo/function/special/PowerOf2Test.java (Anders Peterson 2019-09-22 10:14:13 +0200 110)             value *= 2;\n",
            "commit_hashes": {
                "f4c7b7571": "    PowerOf2 (#224)"
            },
            "Commit&issueIDs": {
                "f4c7b7571": [
                    "(#224)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/224",
                "https://github.com/optimatika/ojAlgo/commit/f4c7b7571"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/function/special/PowerOf2Test.java",
            "test_name": "testPowerOfLong2",
            "FQS": "org.ojalgo.function.special.PowerOf2Test.testPowerOfLong2()",
            "start_line": "120",
            "blame_result": "f4c7b7571 test/org/ojalgo/function/special/PowerOf2Test.java (Anders Peterson 2019-09-22 10:14:13 +0200 121) \nf4c7b7571 test/org/ojalgo/function/special/PowerOf2Test.java (Anders Peterson 2019-09-22 10:14:13 +0200 122)         long value = 1L;\nf4c7b7571 test/org/ojalgo/function/special/PowerOf2Test.java (Anders Peterson 2019-09-22 10:14:13 +0200 123)         TestUtils.assertEquals(value, PowerOf2.powerOfLong2(0));\nf4c7b7571 test/org/ojalgo/function/special/PowerOf2Test.java (Anders Peterson 2019-09-22 10:14:13 +0200 124)         for (int i = 1; i < 63; i++) {\nf4c7b7571 test/org/ojalgo/function/special/PowerOf2Test.java (Anders Peterson 2019-09-22 10:14:13 +0200 125)             value *= 2L;\n",
            "commit_hashes": {
                "f4c7b7571": "    PowerOf2 (#224)"
            },
            "Commit&issueIDs": {
                "f4c7b7571": [
                    "(#224)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/224",
                "https://github.com/optimatika/ojAlgo/commit/f4c7b7571"
            ]
        },
        {
            "poj_link": "https://github.com/apache/hertzbeat/",
            "file_path": "apache/hertzbeat/hertzbeat-common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java",
            "test_name": "testAesEncode",
            "FQS": "org.apache.hertzbeat.common.util.AesUtilTest.testAesEncode()",
            "start_line": "43",
            "blame_result": "dabd992e0e common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java (YuLuo 2024-05-17 23:48:18 +0800 44)         String originalText = \"This is a secret message\";\ndabd992e0e common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java (YuLuo 2024-05-17 23:48:18 +0800 45)         String encryptedText = aesEncode(originalText, VALID_KEY);\ndabd992e0e common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java (YuLuo 2024-05-17 23:48:18 +0800 46)         assertNotEquals(originalText, encryptedText);\ndabd992e0e common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java (YuLuo 2024-05-17 23:48:18 +0800 47) \ndabd992e0e common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java (YuLuo 2024-05-17 23:48:18 +0800 48)         String decryptedText = aesDecode(encryptedText, VALID_KEY);\n",
            "commit_hashes": {
                "dabd992e0e": "    [improve] add common util test (#2001)"
            },
            "Commit&issueIDs": {
                "dabd992e0e": [
                    "2001"
                ]
            },
            "links": [
                "https://github.com/apache/hertzbeat/issues/2001",
                "https://github.com/apache/hertzbeat/commit/dabd992e0e"
            ]
        },
        {
            "poj_link": "https://github.com/apache/hertzbeat/",
            "file_path": "apache/hertzbeat/hertzbeat-common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java",
            "test_name": "testAesDecode",
            "FQS": "org.apache.hertzbeat.common.util.AesUtilTest.testAesDecode()",
            "start_line": "53",
            "blame_result": "dabd992e0e common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java (YuLuo 2024-05-17 23:48:18 +0800 54)         // Test with invalid key\ndabd992e0e common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java (YuLuo 2024-05-17 23:48:18 +0800 55)         String originalText = \"This is a secret message\";\ndabd992e0e common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java (YuLuo 2024-05-17 23:48:18 +0800 56)         String encryptedText = aesEncode(originalText, VALID_KEY);\ndabd992e0e common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java (YuLuo 2024-05-17 23:48:18 +0800 57)         String decryptedText = aesDecode(encryptedText, \"invalidkey123456\");\ndabd992e0e common/src/test/java/org/apache/hertzbeat/common/util/AesUtilTest.java (YuLuo 2024-05-17 23:48:18 +0800 58)         assertNotEquals(originalText, decryptedText);\n",
            "commit_hashes": {
                "dabd992e0e": "    [improve] add common util test (#2001)"
            },
            "Commit&issueIDs": {
                "dabd992e0e": [
                    "2001"
                ]
            },
            "links": [
                "https://github.com/apache/hertzbeat/issues/2001",
                "https://github.com/apache/hertzbeat/commit/dabd992e0e"
            ]
        },
        {
            "poj_link": "https://github.com/apache/hertzbeat/",
            "file_path": "apache/hertzbeat/hertzbeat-common/src/test/java/org/apache/hertzbeat/common/util/NetworkUtilTest.java",
            "test_name": "common",
            "FQS": "org.apache.hertzbeat.common.util.NetworkUtilTest.common()",
            "start_line": "18",
            "blame_result": "ff3139e1de common/src/test/java/org/apache/hertzbeat/common/util/NetworkUtilTest.java (Rick  2024-09-12 09:14:05 +0800 19) \ndabd992e0e common/src/test/java/org/apache/hertzbeat/common/util/JsonUtilTest.java    (YuLuo 2024-05-17 23:48:18 +0800 20) import static org.junit.jupiter.api.Assertions.assertFalse;\nff3139e1de common/src/test/java/org/apache/hertzbeat/common/util/NetworkUtilTest.java (Rick  2024-09-12 09:14:05 +0800 21) \nff3139e1de common/src/test/java/org/apache/hertzbeat/common/util/NetworkUtilTest.java (Rick  2024-09-12 09:14:05 +0800 22) import org.junit.jupiter.api.Test;\nff3139e1de common/src/test/java/org/apache/hertzbeat/common/util/NetworkUtilTest.java (Rick  2024-09-12 09:14:05 +0800 23) \n",
            "commit_hashes": {
                "ff3139e1de": "    test: add unit test case for the util (#2701)",
                "dabd992e0e": "    [improve] add common util test (#2001)"
            },
            "Commit&issueIDs": {
                "ff3139e1de": [
                    "2701"
                ],
                "dabd992e0e": [
                    "2001"
                ]
            },
            "links": [
                "https://github.com/apache/hertzbeat/issues/2701",
                "https://github.com/apache/hertzbeat/commit/ff3139e1de",
                "https://github.com/apache/hertzbeat/issues/2001",
                "https://github.com/apache/hertzbeat/commit/dabd992e0e"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/core/api/src/test/java/com/alipay/sofa/rpc/context/RpcInvokeContextTest.java",
            "test_name": "testSetContext",
            "FQS": "com.alipay.sofa.rpc.context.RpcInvokeContextTest.testSetContext()",
            "start_line": "145",
            "blame_result": "f6864bb5c (\u5f20\u5448\u71b9 2021-09-13 19:24:53 +0800 146)         RpcInvokeContext context = new RpcInvokeContext();\nf6864bb5c (\u5f20\u5448\u71b9 2021-09-13 19:24:53 +0800 147)         context.setTargetGroup(\"target\");\nf6864bb5c (\u5f20\u5448\u71b9 2021-09-13 19:24:53 +0800 148)         context.setTargetURL(\"url\");\nf6864bb5c (\u5f20\u5448\u71b9 2021-09-13 19:24:53 +0800 149)         context.setTimeout(111);\nf6864bb5c (\u5f20\u5448\u71b9 2021-09-13 19:24:53 +0800 150)         context.addCustomHeader(\"A\", \"B\");\n",
            "commit_hashes": {
                "f6864bb5c": "    fix RpcInvokeContext not thread safe (#1081)"
            },
            "Commit&issueIDs": {
                "f6864bb5c": [
                    "(#1081)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/1081",
                "https://github.com/sofastack/sofa-rpc/commit/f6864bb5c"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/core/api/src/test/java/com/alipay/sofa/rpc/std/config/AbstractInterfaceConfigTest.java",
            "test_name": "testSetGet",
            "FQS": "com.alipay.sofa.rpc.std.config.AbstractInterfaceConfigTest.testSetGet()",
            "start_line": "85",
            "blame_result": "9c56f7fc7 (\u5f20\u5448\u71b9 2022-03-28 11:54:29 +0800 86)         TestConfig config = new TestConfig();\n9c56f7fc7 (\u5f20\u5448\u71b9 2022-03-28 11:54:29 +0800 87)         config.setProxyClass(SampleService.class);\n9c56f7fc7 (\u5f20\u5448\u71b9 2022-03-28 11:54:29 +0800 88)         assertEquals(SampleService.class, config.getProxyClass());\n9c56f7fc7 (\u5f20\u5448\u71b9 2022-03-28 11:54:29 +0800 89) \n9c56f7fc7 (\u5f20\u5448\u71b9 2022-03-28 11:54:29 +0800 90)         ApplicationConfig application = new ApplicationConfig();\n",
            "commit_hashes": {
                "9c56f7fc7": "    Ut/bootstrap api (#1163)"
            },
            "Commit&issueIDs": {
                "9c56f7fc7": [
                    "(#1163)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/1163",
                "https://github.com/sofastack/sofa-rpc/commit/9c56f7fc7"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-rpc/",
            "file_path": "sofastack/sofa-rpc/core/api/src/test/java/com/alipay/sofa/rpc/std/config/AbstractInterfaceConfigTest.java",
            "test_name": "testSetParameter",
            "FQS": "com.alipay.sofa.rpc.std.config.AbstractInterfaceConfigTest.testSetParameter()",
            "start_line": "220",
            "blame_result": "9c56f7fc7 (\u5f20\u5448\u71b9 2022-03-28 11:54:29 +0800 221)         TestConfig config = new TestConfig();\n9c56f7fc7 (\u5f20\u5448\u71b9 2022-03-28 11:54:29 +0800 222)         String key = randomString();\n9c56f7fc7 (\u5f20\u5448\u71b9 2022-03-28 11:54:29 +0800 223)         String value = randomString();\n9c56f7fc7 (\u5f20\u5448\u71b9 2022-03-28 11:54:29 +0800 224)         assertNull(config.getParameter(key));\n9c56f7fc7 (\u5f20\u5448\u71b9 2022-03-28 11:54:29 +0800 225)         config.setParameter(key, value);\n",
            "commit_hashes": {
                "9c56f7fc7": "    Ut/bootstrap api (#1163)"
            },
            "Commit&issueIDs": {
                "9c56f7fc7": [
                    "(#1163)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-rpc/issues/1163",
                "https://github.com/sofastack/sofa-rpc/commit/9c56f7fc7"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-registry/",
            "file_path": "sofastack/sofa-registry/server/server/data/src/test/java/com/alipay/sofa/registry/server/data/cache/LocalDatumStorageTest.java",
            "test_name": "testUpdateVersion",
            "FQS": "com.alipay.sofa.registry.server.data.cache.LocalDatumStorageTest.testUpdateVersion()",
            "start_line": "313",
            "blame_result": "7980fcc14 (yuzhi.lyz  2021-03-19 09:41:54 +0800 314)     LocalDatumStorage storage = TestBaseUtils.newLocalStorage(testDc, true);\n7980fcc14 (yuzhi.lyz  2021-03-19 09:41:54 +0800 315)     Publisher publisher = TestBaseUtils.createTestPublisher(testDataId);\n24e3f9f03 (bjxiaojian 2023-02-21 15:45:36 +0800 316)     storage.putPublisher(testDc, publisher);\n24e3f9f03 (bjxiaojian 2023-02-21 15:45:36 +0800 317)     DatumVersion v1 = storage.getVersion(testDc, publisher.getDataInfoId());\n24e3f9f03 (bjxiaojian 2023-02-21 15:45:36 +0800 318)     DatumVersion v2 = storage.updateVersion(testDc, publisher.getDataInfoId());\n",
            "commit_hashes": {
                "7980fcc14": "     format with google style",
                "24e3f9f03": "    Multi datacenter (#267)"
            },
            "Commit&issueIDs": {
                "24e3f9f03": [
                    "(#267)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-registry/issues/267",
                "https://github.com/sofastack/sofa-registry/commit/24e3f9f03"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-registry/",
            "file_path": "sofastack/sofa-registry/server/server/session/src/test/java/com/alipay/sofa/registry/server/session/push/ChangeProcessorTest.java",
            "test_name": "testChangeKey",
            "FQS": "com.alipay.sofa.registry.server.session.push.ChangeProcessorTest.testChangeKey()",
            "start_line": "124",
            "blame_result": "24e3f9f03 (bjxiaojian 2023-02-21 15:45:36 +0800 125)     ChangeProcessor.ChangeKey key1 =\n24e3f9f03 (bjxiaojian 2023-02-21 15:45:36 +0800 126)         new ChangeProcessor.ChangeKey(Collections.singleton(dataCenter), dataInfoId);\n24e3f9f03 (bjxiaojian 2023-02-21 15:45:36 +0800 127)     ChangeProcessor.ChangeKey key2 =\n24e3f9f03 (bjxiaojian 2023-02-21 15:45:36 +0800 128)         new ChangeProcessor.ChangeKey(Collections.singleton(dataCenter), dataInfoId);\n9c9e7fabd (yuzhi.lyz  2021-04-21 22:45:04 +0800 129)     Assert.assertEquals(key1, key2);\n",
            "commit_hashes": {
                "24e3f9f03": "    Multi datacenter (#267)",
                "9c9e7fabd": "     ut"
            },
            "Commit&issueIDs": {
                "24e3f9f03": [
                    "(#267)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-registry/issues/267",
                "https://github.com/sofastack/sofa-registry/commit/24e3f9f03"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-registry/",
            "file_path": "sofastack/sofa-registry/server/store/jdbc/src/test/java/com/alipay/sofa/registry/jdbc/convertor/AppRevisionDomainConvertorTest.java",
            "test_name": "testEnableConfig",
            "FQS": "com.alipay.sofa.registry.jdbc.convertor.AppRevisionDomainConvertorTest.testEnableConfig()",
            "start_line": "29",
            "blame_result": "746ab56f8 (dzdx 2022-08-09 17:32:34 +0800 30)     AppRevision rev = new AppRevision();\n746ab56f8 (dzdx 2022-08-09 17:32:34 +0800 31)     AppRevisionInterface appRevisionInterface = new AppRevisionInterface();\n746ab56f8 (dzdx 2022-08-09 17:32:34 +0800 32)     appRevisionInterface.setId(\"2\");\n746ab56f8 (dzdx 2022-08-09 17:32:34 +0800 33)     appRevisionInterface.getServiceParams().put(\"serviceKey1\", Lists.newArrayList(\"serviceKey1\"));\n746ab56f8 (dzdx 2022-08-09 17:32:34 +0800 34)     rev.getInterfaceMap().put(\"service\", appRevisionInterface);\n",
            "commit_hashes": {
                "746ab56f8": "    chore: migrate revision servie_param field to mediumtext (#257)"
            },
            "Commit&issueIDs": {
                "746ab56f8": [
                    "(#257)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-registry/issues/257",
                "https://github.com/sofastack/sofa-registry/commit/746ab56f8"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatBackTraceEvil",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatBackTraceEvil()",
            "start_line": "2073",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 2074)         LogRecord record = new LogRecord(Level.SEVERE, \"\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 2075)         record.setThrown(createEvilThrowable());\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 2076)         CompactFormatter cf = new CompactFormatter(\"%14$s\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 2077)         String result = cf.formatBackTrace(record);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 2078)         assertNotNull(result);\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/locationtech/proj4j/",
            "file_path": "locationtech/proj4j/core/src/test/java/org/locationtech/proj4j/datum/NTV2Test.java",
            "test_name": "gridShiftNTV2",
            "FQS": "org.locationtech.proj4j.datum.NTV2Test.gridShiftNTV2()",
            "start_line": "44",
            "blame_result": "96e395fd (Bart Hanssens 2023-03-28 03:22:29 +0200 45)         CoordinateTransform ct = CT.createTransform(cs1, cs2);\n96e395fd (Bart Hanssens 2023-03-28 03:22:29 +0200 46) \n96e395fd (Bart Hanssens 2023-03-28 03:22:29 +0200 47)         ProjCoordinate expected1 = new ProjCoordinate(299905.060, 4499796.515);\n96e395fd (Bart Hanssens 2023-03-28 03:22:29 +0200 48)         ProjCoordinate result1 = new ProjCoordinate();\n96e395fd (Bart Hanssens 2023-03-28 03:22:29 +0200 49)         ct.transform(new ProjCoordinate(300000.0, 4500000.0), result1);\n",
            "commit_hashes": {
                "96e395fd": "    GH-89: initial support for NTv2 (#98)"
            },
            "Commit&issueIDs": {
                "96e395fd": [
                    "98"
                ]
            },
            "links": [
                "https://github.com/locationtech/proj4j/issues/98",
                "https://github.com/locationtech/proj4j/commit/96e395fd"
            ]
        },
        {
            "poj_link": "https://github.com/locationtech/proj4j/",
            "file_path": "locationtech/proj4j/core/src/test/java/org/locationtech/proj4j/datum/NTV2Test.java",
            "test_name": "gridShiftNTV2Inverse",
            "FQS": "org.locationtech.proj4j.datum.NTV2Test.gridShiftNTV2Inverse()",
            "start_line": "63",
            "blame_result": "96e395fd (Bart Hanssens 2023-03-28 03:22:29 +0200 64)         CoordinateTransform ct = CT.createTransform(cs2, cs1);\n96e395fd (Bart Hanssens 2023-03-28 03:22:29 +0200 65) \n96e395fd (Bart Hanssens 2023-03-28 03:22:29 +0200 66)         ProjCoordinate expected1 = new ProjCoordinate(315093.094, 4740203.227);\n96e395fd (Bart Hanssens 2023-03-28 03:22:29 +0200 67)         ProjCoordinate result1 = new ProjCoordinate();\n96e395fd (Bart Hanssens 2023-03-28 03:22:29 +0200 68)         ct.transform(new ProjCoordinate(315000.0, 4740000.0), result1);\n",
            "commit_hashes": {
                "96e395fd": "    GH-89: initial support for NTv2 (#98)"
            },
            "Commit&issueIDs": {
                "96e395fd": [
                    "98"
                ]
            },
            "links": [
                "https://github.com/locationtech/proj4j/issues/98",
                "https://github.com/locationtech/proj4j/commit/96e395fd"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/CompactFormatterTest.java",
            "test_name": "testFormatBackTraceEvilIgnore",
            "FQS": "org.eclipse.angus.mail.util.logging.CompactFormatterTest.testFormatBackTraceEvilIgnore()",
            "start_line": "2083",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 2084)         LogRecord record = new LogRecord(Level.SEVERE, \"\");\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 2085)         Throwable second = new Throwable();\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 2086)         Throwable first = new Throwable(second);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 2087)         second.initCause(first); //Pure Evil.\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 2088)         first.setStackTrace(new StackTraceElement[0]);\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/DurationFilterTest.java",
            "test_name": "testHashCode",
            "FQS": "org.eclipse.angus.mail.util.logging.DurationFilterTest.testHashCode()",
            "start_line": "597",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 598)         DurationFilter one = new DurationFilter(10, 10);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 599)         DurationFilter two = new DurationFilter(10, 10);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 600)         DurationFilter three = new DurationFilter(3, 3);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 601) \n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 602)         assertTrue(one.hashCode() == two.hashCode());\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/P20030422Case.java",
            "test_name": "testInvert",
            "FQS": "org.ojalgo.matrix.P20030422Case.testInvert()",
            "start_line": "67",
            "blame_result": "5d103fb99 test/org/ojalgo/matrix/P20030422Case.java          (Anders Peterson 2019-11-03 12:41:01 +0100 68) \n7f1b8a885 src/test/java/org/ojalgo/matrix/P20030422Case.java (Anders Peterson 2022-11-22 15:30:59 +0100 69)         if (mtrxA.isSquare() && mtrxA.getRank() >= mtrxA.countColumns()) {\n5d103fb99 test/org/ojalgo/matrix/P20030422Case.java          (Anders Peterson 2019-11-03 12:41:01 +0100 70) \n7f1b8a885 src/test/java/org/ojalgo/matrix/P20030422Case.java (Anders Peterson 2022-11-22 15:30:59 +0100 71)             BasicMatrix<?, ?> expected = mtrxA.invert();\n5d103fb99 test/org/ojalgo/matrix/P20030422Case.java          (Anders Peterson 2019-11-03 12:41:01 +0100 72)             BasicMatrix<?, ?> actual;\n",
            "commit_hashes": {
                "5d103fb99": "    No more java.lang.Number (#232)",
                "7f1b8a885": "    Quadruple (#479)"
            },
            "Commit&issueIDs": {
                "5d103fb99": [
                    "(#232)"
                ],
                "7f1b8a885": [
                    "(#479)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99",
                "https://github.com/optimatika/ojAlgo/issues/479",
                "https://github.com/optimatika/ojAlgo/commit/7f1b8a885"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/P20030512Case.java",
            "test_name": "testGetRank",
            "FQS": "org.ojalgo.matrix.P20030512Case.testGetRank()",
            "start_line": "80",
            "blame_result": "5d103fb99 test/org/ojalgo/matrix/P20030512Case.java          (Anders Peterson 2019-11-03 12:41:01 +0100 81) \n7f1b8a885 src/test/java/org/ojalgo/matrix/P20030512Case.java (Anders Peterson 2022-11-22 15:30:59 +0100 82)         int expected = mtrxA.getRank();\n5d103fb99 test/org/ojalgo/matrix/P20030512Case.java          (Anders Peterson 2019-11-03 12:41:01 +0100 83)         int actual;\n5d103fb99 test/org/ojalgo/matrix/P20030512Case.java          (Anders Peterson 2019-11-03 12:41:01 +0100 84) \n7f1b8a885 src/test/java/org/ojalgo/matrix/P20030512Case.java (Anders Peterson 2022-11-22 15:30:59 +0100 85)         actual = mtrxA.getRank();\n",
            "commit_hashes": {
                "5d103fb99": "    No more java.lang.Number (#232)",
                "7f1b8a885": "    Quadruple (#479)"
            },
            "Commit&issueIDs": {
                "5d103fb99": [
                    "(#232)"
                ],
                "7f1b8a885": [
                    "(#479)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99",
                "https://github.com/optimatika/ojAlgo/issues/479",
                "https://github.com/optimatika/ojAlgo/commit/7f1b8a885"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/P20061119Case.java",
            "test_name": "testGetRank",
            "FQS": "org.ojalgo.matrix.P20061119Case.testGetRank()",
            "start_line": "83",
            "blame_result": "5d103fb99 test/org/ojalgo/matrix/P20061119Case.java          (Anders Peterson 2019-11-03 12:41:01 +0100 84) \n7f1b8a885 src/test/java/org/ojalgo/matrix/P20061119Case.java (Anders Peterson 2022-11-22 15:30:59 +0100 85)         int expected = mtrxA.getRank();\n5d103fb99 test/org/ojalgo/matrix/P20061119Case.java          (Anders Peterson 2019-11-03 12:41:01 +0100 86)         int actual;\n5d103fb99 test/org/ojalgo/matrix/P20061119Case.java          (Anders Peterson 2019-11-03 12:41:01 +0100 87) \n7f1b8a885 src/test/java/org/ojalgo/matrix/P20061119Case.java (Anders Peterson 2022-11-22 15:30:59 +0100 88)         actual = mtrxA.getRank();\n",
            "commit_hashes": {
                "5d103fb99": "    No more java.lang.Number (#232)",
                "7f1b8a885": "    Quadruple (#479)"
            },
            "Commit&issueIDs": {
                "5d103fb99": [
                    "(#232)"
                ],
                "7f1b8a885": [
                    "(#479)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99",
                "https://github.com/optimatika/ojAlgo/issues/479",
                "https://github.com/optimatika/ojAlgo/commit/7f1b8a885"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/SpecialTest.java",
            "test_name": "testCompareReceivers1",
            "FQS": "org.ojalgo.matrix.SpecialTest.testCompareReceivers1()",
            "start_line": "30",
            "blame_result": "5d103fb99 test/org/ojalgo/matrix/SpecialTest.java          (Anders Peterson 2019-11-03 12:41:01 +0100 31) \n7cebe4e0d src/test/java/org/ojalgo/matrix/SpecialTest.java (apete           2024-05-08 23:20:23 +0200 32)         MatrixQ128.DenseReceiver dense = MatrixQ128.FACTORY.newDenseBuilder(5, 7);\n7cebe4e0d src/test/java/org/ojalgo/matrix/SpecialTest.java (apete           2024-05-08 23:20:23 +0200 33)         MatrixR032.SparseReceiver sparse = MatrixR032.FACTORY.newSparseBuilder(5, 7);\n5d103fb99 test/org/ojalgo/matrix/SpecialTest.java          (Anders Peterson 2019-11-03 12:41:01 +0100 34) \n7cebe4e0d src/test/java/org/ojalgo/matrix/SpecialTest.java (apete           2024-05-08 23:20:23 +0200 35)         dense.set(1, 1, 1D);\n",
            "commit_hashes": {
                "5d103fb99": "    No more java.lang.Number (#232)",
                "7cebe4e0d": "    Sparse matrix receiver"
            },
            "Commit&issueIDs": {
                "5d103fb99": [
                    "232"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/DurationFilterTest.java",
            "test_name": "testRecords",
            "FQS": "org.eclipse.angus.mail.util.logging.DurationFilterTest.testRecords()",
            "start_line": "631",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 632)         DurationFilter one = new DurationFilter();\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 633)         DurationFilter two = new DurationFilter();\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 634)         final long records = 1000L;\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 635)         assertEquals(records, one.getRecords());\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 636)         assertEquals(records, two.getRecords());\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)",
                "76fde654": "    WildFly support for MailHandler #110 (#114)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ],
                "76fde654": [
                    "#110",
                    "114"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8",
                "https://github.com/eclipse-ee4j/angus-mail/issues/110",
                "https://github.com/eclipse-ee4j/angus-mail/commit/76fde654"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/SpecialTest.java",
            "test_name": "testCompareReceivers2",
            "FQS": "org.ojalgo.matrix.SpecialTest.testCompareReceivers2()",
            "start_line": "48",
            "blame_result": "5d103fb99 test/org/ojalgo/matrix/SpecialTest.java          (Anders Peterson 2019-11-03 12:41:01 +0100 49) \n7cebe4e0d src/test/java/org/ojalgo/matrix/SpecialTest.java (apete           2024-05-08 23:20:23 +0200 50)         MatrixR064.DenseReceiver dense = MatrixR064.FACTORY.newDenseBuilder(5, 7);\n7cebe4e0d src/test/java/org/ojalgo/matrix/SpecialTest.java (apete           2024-05-08 23:20:23 +0200 51)         MatrixR128.SparseReceiver sparse = MatrixR128.FACTORY.newSparseBuilder(5, 7);\n5d103fb99 test/org/ojalgo/matrix/SpecialTest.java          (Anders Peterson 2019-11-03 12:41:01 +0100 52) \n7cebe4e0d src/test/java/org/ojalgo/matrix/SpecialTest.java (apete           2024-05-08 23:20:23 +0200 53)         dense.set(1, 1, 1D);\n",
            "commit_hashes": {
                "5d103fb99": "    No more java.lang.Number (#232)",
                "7cebe4e0d": "    Sparse matrix receiver"
            },
            "Commit&issueIDs": {
                "5d103fb99": [
                    "232"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/DurationFilterTest.java",
            "test_name": "testCountExceedsRecords",
            "FQS": "org.eclipse.angus.mail.util.logging.DurationFilterTest.testCountExceedsRecords()",
            "start_line": "653",
            "blame_result": "76fde654 (jmehrens       2023-11-07 22:52:47 -0600 654)         DurationFilter one = new DurationFilter(10L, 15L * 60L * 1000L);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 655)         LogRecord r = new LogRecord(Level.INFO, \"\");\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 656)         final long now = r.getMillis();\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 657)         for (long i = 1L; i <= one.getRecords() / 2L; ++i) {\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 658)             assertTrue(one.isLoggable(r));\n",
            "commit_hashes": {
                "76fde654": "    WildFly support for MailHandler #110 (#114)",
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "76fde654": [
                    "#110",
                    "114"
                ],
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/110",
                "https://github.com/eclipse-ee4j/angus-mail/commit/76fde654",
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/decomposition/CaseEigenvalue.java",
            "test_name": "testRandomSymmetricValuesOnly",
            "FQS": "org.ojalgo.matrix.decomposition.CaseEigenvalue.testRandomSymmetricValuesOnly()",
            "start_line": "675",
            "blame_result": "dcb679356 test/org/ojalgo/matrix/decomposition/EigenvalueTest.java          (apete           2017-03-25 12:21:03 +0100 676) \n60416a492 src/test/java/org/ojalgo/matrix/decomposition/CaseEigenvalue.java (Anders Peterson 2022-03-03 10:16:38 +0100 677)         NumberContext evaluationContext = NumberContext.ofMath(MathContext.DECIMAL32);\ndcb679356 test/org/ojalgo/matrix/decomposition/EigenvalueTest.java          (apete           2017-03-25 12:21:03 +0100 678) \ndcb679356 test/org/ojalgo/matrix/decomposition/EigenvalueTest.java          (apete           2017-03-25 12:21:03 +0100 679)         for (int dim = 1; dim < 10; dim++) {\ndcb679356 test/org/ojalgo/matrix/decomposition/EigenvalueTest.java          (apete           2017-03-25 12:21:03 +0100 680) \n",
            "commit_hashes": {
                "dcb679356": "    2017-03-25",
                "60416a492": "    NumberContext cleanup (#419)"
            },
            "Commit&issueIDs": {
                "60416a492": [
                    "(#419)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/419",
                "https://github.com/optimatika/ojAlgo/commit/60416a492"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/decomposition/CaseLU.java",
            "test_name": "testP20061119Case",
            "FQS": "org.ojalgo.matrix.decomposition.CaseLU.testP20061119Case()",
            "start_line": "52",
            "blame_result": "cc67a6ed9 test/org/ojalgo/matrix/decomposition/LUTest.java          (apete           2014-10-05 00:13:04 +0200 53) \n7f1b8a885 src/test/java/org/ojalgo/matrix/decomposition/CaseLU.java (Anders Peterson 2022-11-22 15:30:59 +0100 54)         MatrixR064 tmpProblematic = P20061119Case.getProblematic();\ncc67a6ed9 test/org/ojalgo/matrix/decomposition/LUTest.java          (apete           2014-10-05 00:13:04 +0200 55) \n7f1b8a885 src/test/java/org/ojalgo/matrix/decomposition/CaseLU.java (Anders Peterson 2022-11-22 15:30:59 +0100 56)         LU<RationalNumber> tmpBig = LU.RATIONAL.make();\n7f1b8a885 src/test/java/org/ojalgo/matrix/decomposition/CaseLU.java (Anders Peterson 2022-11-22 15:30:59 +0100 57)         tmpBig.decompose(GenericStore.Q128.copy(tmpProblematic));\n",
            "commit_hashes": {
                "cc67a6ed9": "    Scalar & NumberContext",
                "7f1b8a885": "    Quadruple (#479)"
            },
            "Commit&issueIDs": {
                "7f1b8a885": [
                    "(#479)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/479",
                "https://github.com/optimatika/ojAlgo/commit/7f1b8a885"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/decomposition/CaseQR.java",
            "test_name": "testLeastSquaresInvert",
            "FQS": "org.ojalgo.matrix.decomposition.CaseQR.testLeastSquaresInvert()",
            "start_line": "194",
            "blame_result": "3109cd6b1 test/org/ojalgo/matrix/decomposition/QRTest.java          (apete           2016-01-24 21:04:31 +0100 195) \nb2252a518 src/test/java/org/ojalgo/matrix/decomposition/CaseQR.java (Anders Peterson 2021-07-04 17:18:08 +0200 196)         MatrixOperation.setThresholdsMinValue(100000);\n3109cd6b1 test/org/ojalgo/matrix/decomposition/QRTest.java          (apete           2016-01-24 21:04:31 +0100 197) \n3109cd6b1 test/org/ojalgo/matrix/decomposition/QRTest.java          (apete           2016-01-24 21:04:31 +0100 198)         final int tmpDim = 3;\nf8f664463 src/test/java/org/ojalgo/matrix/decomposition/CaseQR.java (Anders Peterson 2021-11-28 20:41:15 +0100 199)         final MatrixStore<Double> tmpA = Primitive64Store.FACTORY.makeSPD(tmpDim).below(Primitive64Store.FACTORY.makeIdentity(tmpDim));\n",
            "commit_hashes": {
                "3109cd6b1": "    2016-01-24",
                "b2252a518": "    Refactor DivideAndConquer (#353)",
                "f8f664463": "    Logical/Operate2D (#388)"
            },
            "Commit&issueIDs": {
                "b2252a518": [
                    "(#353)"
                ],
                "f8f664463": [
                    "(#388)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/353",
                "https://github.com/optimatika/ojAlgo/commit/b2252a518",
                "https://github.com/optimatika/ojAlgo/issues/388",
                "https://github.com/optimatika/ojAlgo/commit/f8f664463"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java",
            "test_name": "testSimpleCholeskyCase",
            "FQS": "org.ojalgo.matrix.decomposition.CompareJamaAndPrimitive.testSimpleCholeskyCase()",
            "start_line": "59",
            "blame_result": "94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 60) \n5d103fb99 test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (Anders Peterson 2019-11-03 12:41:01 +0100 61)         final MatrixStore<Double> tmpMtrxA = Primitive64Store.FACTORY.copy(SimpleCholeskyCase.getOriginal());\n94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 62) \n9f6ae0d6b test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2015-05-30 23:56:23 +0200 63)         TestUtils.assertEquals(JAMA_CHOLESKY.decompose(tmpMtrxA), PRIMITIVE_CHOLESKY.decompose(tmpMtrxA));\n94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 64) \n",
            "commit_hashes": {
                "94786dd1f": "    Reorganise tests",
                "5d103fb99": "    No more java.lang.Number (#232)",
                "9f6ae0d6b": "    MatrixDecomposition refactoring"
            },
            "Commit&issueIDs": {
                "5d103fb99": [
                    "(#232)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java",
            "test_name": "testSimpleEigenvalueCase",
            "FQS": "org.ojalgo.matrix.decomposition.CompareJamaAndPrimitive.testSimpleEigenvalueCase()",
            "start_line": "79",
            "blame_result": "94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 80) \n5d103fb99 test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (Anders Peterson 2019-11-03 12:41:01 +0100 81)         final MatrixStore<Double> tmpMtrxA = Primitive64Store.FACTORY.copy(SimpleEigenvalueCase.getOriginal());\n94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 82) \n9f6ae0d6b test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2015-05-30 23:56:23 +0200 83)         TestUtils.assertEquals(JAMA_EvD.decompose(tmpMtrxA), PRIMITIVE_EvD.decompose(tmpMtrxA));\n94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 84) \n",
            "commit_hashes": {
                "94786dd1f": "    Reorganise tests",
                "5d103fb99": "    No more java.lang.Number (#232)",
                "9f6ae0d6b": "    MatrixDecomposition refactoring"
            },
            "Commit&issueIDs": {
                "5d103fb99": [
                    "(#232)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java",
            "test_name": "testSimpleLUCase",
            "FQS": "org.ojalgo.matrix.decomposition.CompareJamaAndPrimitive.testSimpleLUCase()",
            "start_line": "98",
            "blame_result": "94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200  99) \n94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 100)         // Dense\n94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 101) \n5d103fb99 test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (Anders Peterson 2019-11-03 12:41:01 +0100 102)         final MatrixStore<Double> tmpMtrxA = Primitive64Store.FACTORY.copy(SimpleLUCase.getOrginal());\n94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 103) \n",
            "commit_hashes": {
                "94786dd1f": "    Reorganise tests",
                "5d103fb99": "    No more java.lang.Number (#232)"
            },
            "Commit&issueIDs": {
                "5d103fb99": [
                    "(#232)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java",
            "test_name": "testSimpleSingularValueCase",
            "FQS": "org.ojalgo.matrix.decomposition.CompareJamaAndPrimitive.testSimpleSingularValueCase()",
            "start_line": "160",
            "blame_result": "94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 161) \n5d103fb99 test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (Anders Peterson 2019-11-03 12:41:01 +0100 162)         final MatrixStore<Double> tmpMtrxA = Primitive64Store.FACTORY.copy(SimpleSingularValueCase.getOriginal());\n94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 163) \n9f6ae0d6b test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2015-05-30 23:56:23 +0200 164)         TestUtils.assertEquals(JAMA_SVD.decompose(tmpMtrxA), PRIMITIVE_SVD.decompose(tmpMtrxA));\n94786dd1f test/org/ojalgo/matrix/decomposition/CompareJamaAndPrimitive.java (apete           2014-08-26 22:49:19 +0200 165) \n",
            "commit_hashes": {
                "94786dd1f": "    Reorganise tests",
                "5d103fb99": "    No more java.lang.Number (#232)",
                "9f6ae0d6b": "    MatrixDecomposition refactoring"
            },
            "Commit&issueIDs": {
                "5d103fb99": [
                    "(#232)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/decomposition/DecompositionProblems.java",
            "test_name": "testP20180617",
            "FQS": "org.ojalgo.matrix.decomposition.DecompositionProblems.testP20180617()",
            "start_line": "533",
            "blame_result": "059c670d5 test/org/ojalgo/matrix/decomposition/DecompositionProblems.java          (apete           2018-06-17 22:21:23 +0200 534) \n60416a492 src/test/java/org/ojalgo/matrix/decomposition/DecompositionProblems.java (Anders Peterson 2022-03-03 10:16:38 +0100 535)         NumberContext precision = NumberContext.of(12, 8);\n059c670d5 test/org/ojalgo/matrix/decomposition/DecompositionProblems.java          (apete           2018-06-17 22:21:23 +0200 536) \n5d103fb99 test/org/ojalgo/matrix/decomposition/DecompositionProblems.java          (Anders Peterson 2019-11-03 12:41:01 +0100 537)         Primitive64Store matrix = Primitive64Store.FACTORY.rows(new double[][] { { 0.730967787376657, 0.24053641567148587, 0.6374174253501083 },\n059c670d5 test/org/ojalgo/matrix/decomposition/DecompositionProblems.java          (apete           2018-06-17 22:21:23 +0200 538)                 { 0.24053641567148587, 0.5975452777972018, 0.3332183994766498 }, { 0.6374174253501083, 0.3332183994766498, 0.8791825178724801 } });\n",
            "commit_hashes": {
                "059c670d5": "    Fixed getEigenpair",
                "60416a492": "    NumberContext cleanup (#419)",
                "5d103fb99": "    No more java.lang.Number (#232)"
            },
            "Commit&issueIDs": {
                "60416a492": [
                    "(#419)"
                ],
                "5d103fb99": [
                    "(#232)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/419",
                "https://github.com/optimatika/ojAlgo/commit/60416a492",
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/decomposition/DesignCase.java",
            "test_name": "testSolveIdentity",
            "FQS": "org.ojalgo.matrix.decomposition.DesignCase.testSolveIdentity()",
            "start_line": "189",
            "blame_result": "3109cd6b1 test/org/ojalgo/matrix/decomposition/DesignCase.java          (apete           2016-01-24 21:04:31 +0100 190) \nf8f664463 src/test/java/org/ojalgo/matrix/decomposition/DesignCase.java (Anders Peterson 2021-11-28 20:41:15 +0100 191)         Access2D<?> identity = Primitive64Store.FACTORY.makeIdentity(9);\n5d103fb99 test/org/ojalgo/matrix/decomposition/DesignCase.java          (Anders Peterson 2019-11-03 12:41:01 +0100 192)         Access2D<?> random = Primitive64Store.FACTORY.makeFilled(9, 1, new Uniform());\nbedadd289 test/org/ojalgo/matrix/decomposition/DesignCase.java          (Anders Peterson 2019-04-23 13:44:29 +0200 193) \nbedadd289 test/org/ojalgo/matrix/decomposition/DesignCase.java          (Anders Peterson 2019-04-23 13:44:29 +0200 194)         List<Solver<Double>> all = MatrixDecompositionTests.getPrimitiveMatrixDecompositionSolver();\n",
            "commit_hashes": {
                "3109cd6b1": "    2016-01-24",
                "f8f664463": "    Logical/Operate2D (#388)",
                "5d103fb99": "    No more java.lang.Number (#232)",
                "bedadd289": "    Feature/LDL (#195)"
            },
            "Commit&issueIDs": {
                "f8f664463": [
                    "(#388)"
                ],
                "5d103fb99": [
                    "(#232)"
                ],
                "bedadd289": [
                    "(#195)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/388",
                "https://github.com/optimatika/ojAlgo/commit/f8f664463",
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99",
                "https://github.com/optimatika/ojAlgo/issues/195",
                "https://github.com/optimatika/ojAlgo/commit/bedadd289"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/matrix/store/StoreProblems.java",
            "test_name": "testP20180121",
            "FQS": "org.ojalgo.matrix.store.StoreProblems.testP20180121()",
            "start_line": "243",
            "blame_result": "ed9340705 test/org/ojalgo/matrix/store/StoreProblems.java          (apete           2018-01-21 21:23:30 +0100 244) \n01e7c92a2 src/test/java/org/ojalgo/matrix/store/StoreProblems.java (Anders Peterson 2022-12-22 12:46:42 +0100 245)         final SparseStore<Double> m = SparseStore.R064.make(3, 2);\n5d103fb99 test/org/ojalgo/matrix/store/StoreProblems.java          (Anders Peterson 2019-11-03 12:41:01 +0100 246)         final Primitive64Store mAdd = Primitive64Store.FACTORY.rows(new double[][] { { 1.0, 0.0 }, { 0.0, 0.0 }, { 0.0, 0.0 } });\ned9340705 test/org/ojalgo/matrix/store/StoreProblems.java          (apete           2018-01-21 21:23:30 +0100 247)         final MatrixStore<Double> n = m.add(mAdd);\ned9340705 test/org/ojalgo/matrix/store/StoreProblems.java          (apete           2018-01-21 21:23:30 +0100 248) \n",
            "commit_hashes": {
                "ed9340705": "    testP20180121",
                "01e7c92a2": "    SparseStore.Factory (#492)",
                "5d103fb99": "    No more java.lang.Number (#232)"
            },
            "Commit&issueIDs": {
                "01e7c92a2": [
                    "(#492)"
                ],
                "5d103fb99": [
                    "(#232)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/492",
                "https://github.com/optimatika/ojAlgo/commit/01e7c92a2",
                "https://github.com/optimatika/ojAlgo/issues/232",
                "https://github.com/optimatika/ojAlgo/commit/5d103fb99"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/netio/PasswordTest.java",
            "test_name": "testGeneration",
            "FQS": "org.ojalgo.netio.PasswordTest.testGeneration()",
            "start_line": "46",
            "blame_result": "c597f73bf test/org/ojalgo/netio/PasswordTest.java          (Anders Peterson 2020-10-31 23:29:13 +0100 47) \na37194afe src/test/java/org/ojalgo/netio/PasswordTest.java (apete           2023-07-02 09:47:16 +0200 48)         for (int i = 2; i < 100; i++) {\nc597f73bf test/org/ojalgo/netio/PasswordTest.java          (Anders Peterson 2020-10-31 23:29:13 +0100 49) \nc597f73bf test/org/ojalgo/netio/PasswordTest.java          (Anders Peterson 2020-10-31 23:29:13 +0100 50)             String original = Password.makePlainText(i);\nc597f73bf test/org/ojalgo/netio/PasswordTest.java          (Anders Peterson 2020-10-31 23:29:13 +0100 51) \n",
            "commit_hashes": {
                "c597f73bf": "    MD5 -> SHA-512 (#294)",
                "a37194afe": "    Update PasswordTest.java"
            },
            "Commit&issueIDs": {
                "c597f73bf": [
                    "(#294)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/294",
                "https://github.com/optimatika/ojAlgo/commit/c597f73bf"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/convex/ConvexProblems.java",
            "test_name": "testP20150720",
            "FQS": "org.ojalgo.optimisation.convex.ConvexProblems.testP20150720()",
            "start_line": "1421",
            "blame_result": "0673e5bf9 test/org/ojalgo/optimisation/convex/ConvexProblems.java          (apete           2015-08-04 13:41:42 +0200 1422) \n60416a492 src/test/java/org/ojalgo/optimisation/convex/ConvexProblems.java (Anders Peterson 2022-03-03 10:16:38 +0100 1423)         NumberContext accuracy = NumberContext.of(11);\n2ace8b402 test/org/ojalgo/optimisation/convex/ConvexProblems.java          (Anders Peterson 2020-10-06 23:51:07 +0200 1424) \n68693738e test/org/ojalgo/optimisation/convex/ConvexProblems.java          (Anders Peterson 2019-07-03 14:58:15 +0200 1425)         ExpressionsBasedModel model1 = P20150720.buildModel1();\n68693738e test/org/ojalgo/optimisation/convex/ConvexProblems.java          (Anders Peterson 2019-07-03 14:58:15 +0200 1426)         ExpressionsBasedModel model2 = P20150720.buildModel2();\n",
            "commit_hashes": {
                "0673e5bf9": "    2015-08-04",
                "60416a492": "    NumberContext cleanup (#419)",
                "2ace8b402": "    Optimisation tuning 2 (#290)",
                "68693738e": "    Feature/Improve LP (#206)"
            },
            "Commit&issueIDs": {
                "60416a492": [
                    "(#419)"
                ],
                "2ace8b402": [
                    "(#290)"
                ],
                "68693738e": [
                    "(#206)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/419",
                "https://github.com/optimatika/ojAlgo/commit/60416a492",
                "https://github.com/optimatika/ojAlgo/issues/290",
                "https://github.com/optimatika/ojAlgo/commit/2ace8b402",
                "https://github.com/optimatika/ojAlgo/issues/206",
                "https://github.com/optimatika/ojAlgo/commit/68693738e"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/integer/DesignCase.java",
            "test_name": "testExpressingTheCutInTheOriginalVariables",
            "FQS": "org.ojalgo.optimisation.integer.DesignCase.testExpressingTheCutInTheOriginalVariables()",
            "start_line": "154",
            "blame_result": "ada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 155) \nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 156)         ExpressionsBasedModel orgModel = new ExpressionsBasedModel();\ncf5434f57 (Anders Peterson 2022-12-06 14:26:31 +0100 157)         Variable x1 = orgModel.newVariable(\"x1\").lower(0).weight(-1);\ncf5434f57 (Anders Peterson 2022-12-06 14:26:31 +0100 158)         Variable x2 = orgModel.newVariable(\"x2\").lower(0).weight(-1);\ncf5434f57 (Anders Peterson 2022-12-06 14:26:31 +0100 159)         Expression c3 = orgModel.newExpression(\"C3\").upper(20).set(x1, 2).set(x2, 5);\n",
            "commit_hashes": {
                "ada73e20f": "    GMI cuts (#429)",
                "cf5434f57": "    EBM add -> new (#484)"
            },
            "Commit&issueIDs": {
                "ada73e20f": [
                    "(#429)"
                ],
                "cf5434f57": [
                    "(#484)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/429",
                "https://github.com/optimatika/ojAlgo/commit/ada73e20f",
                "https://github.com/optimatika/ojAlgo/issues/484",
                "https://github.com/optimatika/ojAlgo/commit/cf5434f57"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/integer/DesignCase.java",
            "test_name": "testSOS",
            "FQS": "org.ojalgo.optimisation.integer.DesignCase.testSOS()",
            "start_line": "274",
            "blame_result": "44cbd3c16 test/org/ojalgo/optimisation/integer/DesignCase.java          (apete           2018-03-21 18:34:31 +0100 275) \nf16fb21ab test/org/ojalgo/optimisation/linear/LinearProblems.java       (Anders Peterson 2018-03-14 14:28:24 +0100 276)         ExpressionsBasedModel model = new ExpressionsBasedModel();\n44cbd3c16 test/org/ojalgo/optimisation/integer/DesignCase.java          (apete           2018-03-21 18:34:31 +0100 277) \nada73e20f src/test/java/org/ojalgo/optimisation/integer/DesignCase.java (Anders Peterson 2022-04-20 08:58:51 +0200 278)         List<Variable> starts1 = new ArrayList<>();\nada73e20f src/test/java/org/ojalgo/optimisation/integer/DesignCase.java (Anders Peterson 2022-04-20 08:58:51 +0200 279)         List<Variable> works1 = new ArrayList<>();\n",
            "commit_hashes": {
                "44cbd3c16": "    SOS test",
                "f16fb21ab": "    Just some preparations",
                "ada73e20f": "    GMI cuts (#429)"
            },
            "Commit&issueIDs": {
                "ada73e20f": [
                    "(#429)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/429",
                "https://github.com/optimatika/ojAlgo/commit/ada73e20f"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/integer/IntegerProblems.java",
            "test_name": "testP20130225",
            "FQS": "org.ojalgo.optimisation.integer.IntegerProblems.testP20130225()",
            "start_line": "198",
            "blame_result": "c88c80b19 test/org/ojalgo/optimisation/integer/IntegerProblems.java          (apete           2016-07-05 23:17:54 +0200 199) \n439493e35 src/test/java/org/ojalgo/optimisation/integer/IntegerProblems.java (Anders Peterson 2021-10-02 12:37:54 +0200 200)         ExpressionsBasedModel tmpIntegerModel = P20130225.makeModel();\n439493e35 src/test/java/org/ojalgo/optimisation/integer/IntegerProblems.java (Anders Peterson 2021-10-02 12:37:54 +0200 201)         ExpressionsBasedModel tmpRelaxedModel = tmpIntegerModel.copy(true);\nc88c80b19 test/org/ojalgo/optimisation/integer/IntegerProblems.java          (apete           2016-07-05 23:17:54 +0200 202) \n439493e35 src/test/java/org/ojalgo/optimisation/integer/IntegerProblems.java (Anders Peterson 2021-10-02 12:37:54 +0200 203)         Optimisation.Result tmpRelaxedResult = tmpRelaxedModel.minimise();\n",
            "commit_hashes": {
                "c88c80b19": "    2016-07-05",
                "439493e35": "    copy & relax (#378)"
            },
            "Commit&issueIDs": {
                "439493e35": [
                    "(#378)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/378",
                "https://github.com/optimatika/ojAlgo/commit/439493e35"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/integer/P20140819.java",
            "test_name": "testCuts",
            "FQS": "org.ojalgo.optimisation.integer.P20140819.testCuts()",
            "start_line": "174",
            "blame_result": "ada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 175) \nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 176)         ExpressionsBasedModel integer = P20140819.makeModel();\nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 177) \nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 178)         ExpressionsBasedModel simplified = integer.simplify();\nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 179) \n",
            "commit_hashes": {
                "ada73e20f": "    GMI cuts (#429)"
            },
            "Commit&issueIDs": {
                "ada73e20f": [
                    "(#429)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/429",
                "https://github.com/optimatika/ojAlgo/commit/ada73e20f"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/linear/BurkardtDatasetsMps.java",
            "test_name": "testMPStestprob",
            "FQS": "org.ojalgo.optimisation.linear.BurkardtDatasetsMps.testMPStestprob()",
            "start_line": "168",
            "blame_result": "94786dd1f test/org/ojalgo/optimisation/linear/BurkardtDatasetsMps.java          (apete           2014-08-26 22:49:19 +0200 169) \n4428e6561 test/org/ojalgo/optimisation/linear/BurkardtDatasetsMps.java          (Anders Peterson 2019-02-17 10:49:44 +0100 170)         ExpressionsBasedModel parsedModel = BurkardtDatasetsMps.doTest(\"testprob.mps\", \"54\", \"80\");\n4428e6561 test/org/ojalgo/optimisation/linear/BurkardtDatasetsMps.java          (Anders Peterson 2019-02-17 10:49:44 +0100 171) \nfa5fef716 src/test/java/org/ojalgo/optimisation/linear/BurkardtDatasetsMps.java (Anders Peterson 2021-03-18 11:37:27 +0100 172)         Variable tmpXONE = new Variable(\"XONE\").weight(ONE).lower(ZERO).upper(FOUR);\nfa5fef716 src/test/java/org/ojalgo/optimisation/linear/BurkardtDatasetsMps.java (Anders Peterson 2021-03-18 11:37:27 +0100 173)         Variable tmpYTWO = new Variable(\"YTWO\").weight(FOUR).lower(NEG).upper(ONE);\n",
            "commit_hashes": {
                "94786dd1f": "    Reorganise tests",
                "4428e6561": "    tests for CPLEX, Gurobi, Mosek & others (#171)",
                "fa5fef716": "    Minor optimisation fixes (#326)"
            },
            "Commit&issueIDs": {
                "4428e6561": [
                    "(#171)"
                ],
                "fa5fef716": [
                    "(#326)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/171",
                "https://github.com/optimatika/ojAlgo/commit/4428e6561",
                "https://github.com/optimatika/ojAlgo/issues/326",
                "https://github.com/optimatika/ojAlgo/commit/fa5fef716"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/linear/LinearProblems.java",
            "test_name": "testP20180311_66",
            "FQS": "org.ojalgo.optimisation.linear.LinearProblems.testP20180311_66()",
            "start_line": "399",
            "blame_result": "fb3dbf300 test/org/ojalgo/optimisation/linear/LinearProblems.java (apete           2018-03-11 22:44:29 +0100 400) \n424eec999 test/org/ojalgo/optimisation/linear/LinearProblems.java (Anders Peterson 2019-05-14 15:19:51 +0200 401)         Variable x = Variable.make(\"x\").lower(0).weight(2);\n424eec999 test/org/ojalgo/optimisation/linear/LinearProblems.java (Anders Peterson 2019-05-14 15:19:51 +0200 402)         Variable y = Variable.make(\"y\").lower(0).weight(-1);\n424eec999 test/org/ojalgo/optimisation/linear/LinearProblems.java (Anders Peterson 2019-05-14 15:19:51 +0200 403)         Variable z = Variable.make(\"z\").lower(0).weight(4);\nfb3dbf300 test/org/ojalgo/optimisation/linear/LinearProblems.java (apete           2018-03-11 22:44:29 +0100 404) \n",
            "commit_hashes": {
                "fb3dbf300": "    GitHub Issue 66",
                "424eec999": "    Feature/logical sparse (#201)"
            },
            "Commit&issueIDs": {
                "424eec999": [
                    "(#201)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/201",
                "https://github.com/optimatika/ojAlgo/commit/424eec999"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/linear/LinearProblems.java",
            "test_name": "testP20180312_69",
            "FQS": "org.ojalgo.optimisation.linear.LinearProblems.testP20180312_69()",
            "start_line": "423",
            "blame_result": "004f12aba test/org/ojalgo/optimisation/linear/LinearProblems.java (apete           2018-03-12 23:13:15 +0100 424) \n424eec999 test/org/ojalgo/optimisation/linear/LinearProblems.java (Anders Peterson 2019-05-14 15:19:51 +0200 425)         Variable x = Variable.make(\"x\").lower(0).weight(3);\n424eec999 test/org/ojalgo/optimisation/linear/LinearProblems.java (Anders Peterson 2019-05-14 15:19:51 +0200 426)         Variable y = Variable.make(\"y\").lower(0).weight(2);\n424eec999 test/org/ojalgo/optimisation/linear/LinearProblems.java (Anders Peterson 2019-05-14 15:19:51 +0200 427)         Variable z = Variable.make(\"z\").lower(0).weight(-2);\n004f12aba test/org/ojalgo/optimisation/linear/LinearProblems.java (apete           2018-03-12 23:13:15 +0100 428) \n",
            "commit_hashes": {
                "004f12aba": "    feasibility check",
                "424eec999": "    Feature/logical sparse (#201)"
            },
            "Commit&issueIDs": {
                "424eec999": [
                    "(#201)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/201",
                "https://github.com/optimatika/ojAlgo/commit/424eec999"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/DurationFilterTest.java",
            "test_name": "testDurationMillis",
            "FQS": "org.eclipse.angus.mail.util.logging.DurationFilterTest.testDurationMillis()",
            "start_line": "666",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 667)         DurationFilter one = new DurationFilter();\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 668)         DurationFilter two = new DurationFilter();\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 669)         final long duration = 15L * 60L * 1000L;\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 670)         assertEquals(duration, one.getDurationMillis());\n76fde654 (jmehrens       2023-11-07 22:52:47 -0600 671)         assertEquals(duration, two.getDurationMillis());\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)",
                "76fde654": "    WildFly support for MailHandler #110 (#114)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ],
                "76fde654": [
                    "#110",
                    "114"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8",
                "https://github.com/eclipse-ee4j/angus-mail/issues/110",
                "https://github.com/eclipse-ee4j/angus-mail/commit/76fde654"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java",
            "test_name": "testDegeneracy",
            "FQS": "org.ojalgo.optimisation.linear.SpecialSituations.testDegeneracy()",
            "start_line": "41",
            "blame_result": "8dcb7d358 test/org/ojalgo/optimisation/linear/SpecialSituations.java          (Anders Peterson 2018-08-19 16:29:23 +0200 42) \na72ffc281 src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java (apete           2024-03-29 08:46:47 +0100 43)         R064Store c = R064Store.FACTORY.column(new double[] { -2, -1, 0, 0, 0 });\naf02ca652 src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java (apete           2024-08-03 08:36:16 +0200 44)         RawStore A = RawStore.wrap(new double[][] { { 4, 3, 1, 0, 0 }, { 4, 1, 0, 1, 0 }, { 4, 2, 0, 0, 1 } });\na72ffc281 src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java (apete           2024-03-29 08:46:47 +0100 45)         R064Store b = R064Store.FACTORY.column(new double[] { 12, 8, 8 });\n8dcb7d358 test/org/ojalgo/optimisation/linear/SpecialSituations.java          (Anders Peterson 2018-08-19 16:29:23 +0200 46) \n",
            "commit_hashes": {
                "8dcb7d358": "    Prepare to build v46.0.0 (#118)",
                "a72ffc281": "    R064Store and R032Store",
                "af02ca652": "    Removed deprecated factory methods"
            },
            "Commit&issueIDs": {
                "8dcb7d358": [
                    "118"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/118",
                "https://github.com/optimatika/ojAlgo/commit/8dcb7d358"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/SeverityComparatorTest.java",
            "test_name": "testHashCode",
            "FQS": "org.eclipse.angus.mail.util.logging.SeverityComparatorTest.testHashCode()",
            "start_line": "1198",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1199)         final SeverityComparator a = new SeverityComparator();\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1200)         final SeverityComparator b = new SeverityComparator();\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1201)         assertNotSame(a, b);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1202) \n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1203)         assertTrue(a.equals(b));\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java",
            "test_name": "testMultipleOptimalSolutions",
            "FQS": "org.ojalgo.optimisation.linear.SpecialSituations.testMultipleOptimalSolutions()",
            "start_line": "113",
            "blame_result": "8dcb7d358 test/org/ojalgo/optimisation/linear/SpecialSituations.java          (Anders Peterson 2018-08-19 16:29:23 +0200 114) \na72ffc281 src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java (apete           2024-03-29 08:46:47 +0100 115)         R064Store c = R064Store.FACTORY.column(new double[] { -4, -14, 0, 0 });\naf02ca652 src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java (apete           2024-08-03 08:36:16 +0200 116)         RawStore A = RawStore.wrap(new double[][] { { 2, 7, 1, 0 }, { 7, 2, 0, 1 } });\na72ffc281 src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java (apete           2024-03-29 08:46:47 +0100 117)         R064Store b = R064Store.FACTORY.column(new double[] { 21, 21 });\n8dcb7d358 test/org/ojalgo/optimisation/linear/SpecialSituations.java          (Anders Peterson 2018-08-19 16:29:23 +0200 118) \n",
            "commit_hashes": {
                "8dcb7d358": "    Prepare to build v46.0.0 (#118)",
                "a72ffc281": "    R064Store and R032Store",
                "af02ca652": "    Removed deprecated factory methods"
            },
            "Commit&issueIDs": {
                "8dcb7d358": [
                    "118"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/118",
                "https://github.com/optimatika/ojAlgo/commit/8dcb7d358"
            ]
        },
        {
            "poj_link": "https://github.com/eclipse-ee4j/angus-mail/",
            "file_path": "eclipse-ee4j/angus-mail/providers/angus-mail/src/test/java/org/eclipse/angus/mail/util/logging/SeverityComparatorTest.java",
            "test_name": "testSerializable",
            "FQS": "org.eclipse.angus.mail.util.logging.SeverityComparatorTest.testSerializable()",
            "start_line": "1232",
            "blame_result": "3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1233)         final SeverityComparator a = new SeverityComparator();\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1234)         final SeverityComparator b = serialClone(a);\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1235) \n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1236)         assertTrue(a.equals(b));\n3b3df4f8 (Lukas Jungmann 2023-01-13 10:36:11 +0100 1237)         assertTrue(b.equals(a));\n",
            "commit_hashes": {
                "3b3df4f8": "    #64: change the package names to org.eclipse.angus.mail.* (#66)"
            },
            "Commit&issueIDs": {
                "3b3df4f8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/eclipse-ee4j/angus-mail/issues/66",
                "https://github.com/eclipse-ee4j/angus-mail/commit/3b3df4f8"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java",
            "test_name": "testUnboundedness",
            "FQS": "org.ojalgo.optimisation.linear.SpecialSituations.testUnboundedness()",
            "start_line": "157",
            "blame_result": "8dcb7d358 test/org/ojalgo/optimisation/linear/SpecialSituations.java          (Anders Peterson 2018-08-19 16:29:23 +0200 158) \na72ffc281 src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java (apete           2024-03-29 08:46:47 +0100 159)         R064Store c = R064Store.FACTORY.column(new double[] { -2, -1, 0, 0 });\naf02ca652 src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java (apete           2024-08-03 08:36:16 +0200 160)         RawStore A = RawStore.wrap(new double[][] { { 1, -1, 1, 0 }, { 2, -1, 0, 1 } });\na72ffc281 src/test/java/org/ojalgo/optimisation/linear/SpecialSituations.java (apete           2024-03-29 08:46:47 +0100 161)         R064Store b = R064Store.FACTORY.column(new double[] { 10, 40 });\n8dcb7d358 test/org/ojalgo/optimisation/linear/SpecialSituations.java          (Anders Peterson 2018-08-19 16:29:23 +0200 162) \n",
            "commit_hashes": {
                "8dcb7d358": "    Prepare to build v46.0.0 (#118)",
                "a72ffc281": "    R064Store and R032Store",
                "af02ca652": "    Removed deprecated factory methods"
            },
            "Commit&issueIDs": {
                "8dcb7d358": [
                    "118"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/118",
                "https://github.com/optimatika/ojAlgo/commit/8dcb7d358"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/optimisation/linear/TableauCutGeneratorTest.java",
            "test_name": "testExploreP20130409a",
            "FQS": "org.ojalgo.optimisation.linear.TableauCutGeneratorTest.testExploreP20130409a()",
            "start_line": "133",
            "blame_result": "ada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 134) \nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 135)         NumberContext accuracy = NumberContext.of(7);\nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 136) \n540ef89ca (apete           2023-04-09 18:03:06 +0200 137)         Variable[] variables = { new Variable(\"x1\").lower(BigMath.ZERO).weight(BigMath.ONE), new Variable(\"x2013\").lower(BigMath.ZERO).integer(),\nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 138)                 new Variable(\"x2014\").lower(BigMath.ZERO).integer() };\n",
            "commit_hashes": {
                "ada73e20f": "    GMI cuts (#429)",
                "540ef89ca": "    LinearStructure"
            },
            "Commit&issueIDs": {
                "ada73e20f": [
                    "(#429)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/429",
                "https://github.com/optimatika/ojAlgo/commit/ada73e20f"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/random/ChiSquareDistributionTest.java",
            "test_name": "testDegree2",
            "FQS": "org.ojalgo.random.ChiSquareDistributionTest.testDegree2()",
            "start_line": "95",
            "blame_result": "8e999098d test/org/ojalgo/random/ChiSquareDistributionTest.java (Anders Peterson 2020-06-21 21:21:36 +0200  96) \n8e999098d test/org/ojalgo/random/ChiSquareDistributionTest.java (Anders Peterson 2020-06-21 21:21:36 +0200  97)         ChiSquareDistribution specific = new ChiSquareDistribution.Degree2();\n8e999098d test/org/ojalgo/random/ChiSquareDistributionTest.java (Anders Peterson 2020-06-21 21:21:36 +0200  98)         ChiSquareDistribution general = new ChiSquareDistribution(2);\n8e999098d test/org/ojalgo/random/ChiSquareDistributionTest.java (Anders Peterson 2020-06-21 21:21:36 +0200  99) \n8e999098d test/org/ojalgo/random/ChiSquareDistributionTest.java (Anders Peterson 2020-06-21 21:21:36 +0200 100)         TestUtils.assertEquals(general.getExpected(), specific.getExpected());\n",
            "commit_hashes": {
                "8e999098d": "    ChiSquare distribution (#262)"
            },
            "Commit&issueIDs": {
                "8e999098d": [
                    "(#262)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/262",
                "https://github.com/optimatika/ojAlgo/commit/8e999098d"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/random/TDistributionTest.java",
            "test_name": "testAgainstSpecificVariants",
            "FQS": "org.ojalgo.random.TDistributionTest.testAgainstSpecificVariants()",
            "start_line": "46",
            "blame_result": "2aa90ec60 test/org/ojalgo/random/TDistributionTest.java (Anders Peterson 2019-10-12 14:11:45 +0200 47) \n2aa90ec60 test/org/ojalgo/random/TDistributionTest.java (Anders Peterson 2019-10-12 14:11:45 +0200 48)         TDistribution s1 = new TDistribution.Degree1();\n2aa90ec60 test/org/ojalgo/random/TDistributionTest.java (Anders Peterson 2019-10-12 14:11:45 +0200 49)         TDistribution g1 = new TDistribution(1);\n2aa90ec60 test/org/ojalgo/random/TDistributionTest.java (Anders Peterson 2019-10-12 14:11:45 +0200 50) \n2aa90ec60 test/org/ojalgo/random/TDistributionTest.java (Anders Peterson 2019-10-12 14:11:45 +0200 51)         TDistribution s2 = new TDistribution.Degree2();\n",
            "commit_hashes": {
                "2aa90ec60": "    More special functions (#228)"
            },
            "Commit&issueIDs": {
                "2aa90ec60": [
                    "(#228)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/228",
                "https://github.com/optimatika/ojAlgo/commit/2aa90ec60"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/scalar/QuaternionTest.java",
            "test_name": "testPolarForm",
            "FQS": "org.ojalgo.scalar.QuaternionTest.testPolarForm()",
            "start_line": "61",
            "blame_result": "3eb8ca375 test/org/ojalgo/scalar/QuaternionTest.java          (apete           2014-11-26 19:48:54 +0100 62) \n0b3efe5f7 src/test/java/org/ojalgo/scalar/QuaternionTest.java (Anders Peterson 2023-01-14 09:38:48 +0100 63)         double[] tmpArguments = { PrimitiveMath.NEG, PrimitiveMath.ZERO, PrimitiveMath.ONE };\n3eb8ca375 test/org/ojalgo/scalar/QuaternionTest.java          (apete           2014-11-26 19:48:54 +0100 64) \ne3de2c4c7 test/org/ojalgo/scalar/QuaternionTest.java          (Alexey Filippov 2018-03-20 18:35:35 +0000 65)         for (double s : tmpArguments) {\ne3de2c4c7 test/org/ojalgo/scalar/QuaternionTest.java          (Alexey Filippov 2018-03-20 18:35:35 +0000 66)             for (double i : tmpArguments) {\n",
            "commit_hashes": {
                "3eb8ca375": "    QuaternionTest",
                "0b3efe5f7": "    Tests cleanup (#498)",
                "e3de2c4c7": "    Issue #75 - first cut at JUnit 5"
            },
            "Commit&issueIDs": {
                "0b3efe5f7": [
                    "(#498)"
                ],
                "e3de2c4c7": [
                    "#75"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/498",
                "https://github.com/optimatika/ojAlgo/commit/0b3efe5f7",
                "https://github.com/optimatika/ojAlgo/issues/75",
                "https://github.com/optimatika/ojAlgo/commit/e3de2c4c7"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/scalar/QuaternionTest.java",
            "test_name": "testRandomMultiplication",
            "FQS": "org.ojalgo.scalar.QuaternionTest.testRandomMultiplication()",
            "start_line": "86",
            "blame_result": "727a3cf69 test/org/ojalgo/scalar/QuaternionTest.java          (apete           2017-12-08 19:35:20 +0100 87) \n0b3efe5f7 src/test/java/org/ojalgo/scalar/QuaternionTest.java (Anders Peterson 2023-01-14 09:38:48 +0100 88)         Quaternion normalizedRandomRotation = Quaternion.of(Math.random(), Math.random(), Math.random(), Math.random()).signum();\n727a3cf69 test/org/ojalgo/scalar/QuaternionTest.java          (apete           2017-12-08 19:35:20 +0100 89) \na8cc711e9 test/org/ojalgo/scalar/QuaternionTest.java          (apete           2017-12-12 16:23:41 +0100 90)         TestUtils.assertEquals(normalizedRandomRotation, normalizedRandomRotation.toMultiplicationMatrix());\na8cc711e9 test/org/ojalgo/scalar/QuaternionTest.java          (apete           2017-12-12 16:23:41 +0100 91) \n",
            "commit_hashes": {
                "727a3cf69": "    Quaternion",
                "0b3efe5f7": "    Tests cleanup (#498)",
                "a8cc711e9": "    Quaternion"
            },
            "Commit&issueIDs": {
                "0b3efe5f7": [
                    "(#498)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/498",
                "https://github.com/optimatika/ojAlgo/commit/0b3efe5f7"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/scalar/RationalNumberTest.java",
            "test_name": "testMultiplication",
            "FQS": "org.ojalgo.scalar.RationalNumberTest.testMultiplication()",
            "start_line": "110",
            "blame_result": "ef8384a4e test/org/ojalgo/scalar/RationalNumberTest.java (Anders Peterson 2018-03-27 13:48:30 +0200 111)         RationalNumber a = RationalNumber.valueOf(0.04919653065050689);\nef8384a4e test/org/ojalgo/scalar/RationalNumberTest.java (Anders Peterson 2018-03-27 13:48:30 +0200 112)         RationalNumber b = RationalNumber.valueOf(1.2325077080153841);\n220810f1c test/org/ojalgo/scalar/RationalNumberTest.java (Alexey Filippov 2018-03-15 18:09:37 +0000 113) \nef8384a4e test/org/ojalgo/scalar/RationalNumberTest.java (Anders Peterson 2018-03-27 13:48:30 +0200 114)         TestUtils.assertEquals(a.multiply(b).doubleValue(), a.doubleValue() * b.doubleValue(), myDiff);\n220810f1c test/org/ojalgo/scalar/RationalNumberTest.java (Alexey Filippov 2018-03-15 18:09:37 +0000 115)     }\n",
            "commit_hashes": {
                "ef8384a4e": "    Fixed junit test annotations and dependencies",
                "220810f1c": "    Issue #49 - fix multiplication for rationals"
            },
            "Commit&issueIDs": {
                "220810f1c": [
                    "#49"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/49",
                "https://github.com/optimatika/ojAlgo/commit/220810f1c"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/type/context/NumberContextTest.java",
            "test_name": "testComparePrecisionAndScaleBigDecimal",
            "FQS": "org.ojalgo.type.context.NumberContextTest.testComparePrecisionAndScaleBigDecimal()",
            "start_line": "41",
            "blame_result": "ada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 42) \nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 43)         for (int precision = 2; precision < 16; precision++) {\nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 44)             int scale = precision - 1;\nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 45) \nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 46)             NumberContext preciContext = NumberContext.ofPrecision(precision).withoutScale();\n",
            "commit_hashes": {
                "ada73e20f": "    GMI cuts (#429)"
            },
            "Commit&issueIDs": {
                "ada73e20f": [
                    "(#429)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/429",
                "https://github.com/optimatika/ojAlgo/commit/ada73e20f"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/type/context/NumberContextTest.java",
            "test_name": "testComparePrecisionAndScalePrimitive",
            "FQS": "org.ojalgo.type.context.NumberContextTest.testComparePrecisionAndScalePrimitive()",
            "start_line": "81",
            "blame_result": "ada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 82) \nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 83)         for (int precision = 2; precision < 16; precision++) {\nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 84)             int scale = precision - 1;\nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 85) \nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 86)             NumberContext preciContext = NumberContext.ofPrecision(precision);\n",
            "commit_hashes": {
                "ada73e20f": "    GMI cuts (#429)"
            },
            "Commit&issueIDs": {
                "ada73e20f": [
                    "(#429)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/429",
                "https://github.com/optimatika/ojAlgo/commit/ada73e20f"
            ]
        },
        {
            "poj_link": "https://github.com/optimatika/ojAlgo/",
            "file_path": "optimatika/ojAlgo/src/test/java/org/ojalgo/type/context/NumberContextTest.java",
            "test_name": "testIsSmall",
            "FQS": "org.ojalgo.type.context.NumberContextTest.testIsSmall()",
            "start_line": "119",
            "blame_result": "ada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 120) \nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 121)         BigDecimal compareTo = BigDecimal.valueOf(2.03007518794);\nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 122)         BigDecimal small = BigDecimal.valueOf(1E-12);\nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 123) \nada73e20f (Anders Peterson 2022-04-20 08:58:51 +0200 124)         TestUtils.assertTrue(NumberContext.of(12).isSmall(compareTo, small));\n",
            "commit_hashes": {
                "ada73e20f": "    GMI cuts (#429)"
            },
            "Commit&issueIDs": {
                "ada73e20f": [
                    "(#429)"
                ]
            },
            "links": [
                "https://github.com/optimatika/ojAlgo/issues/429",
                "https://github.com/optimatika/ojAlgo/commit/ada73e20f"
            ]
        },
        {
            "poj_link": "https://github.com/togglz/togglz/",
            "file_path": "togglz/togglz/core/src/test/java/org/togglz/core/repository/FeatureStateTest.java",
            "test_name": "testEquals",
            "FQS": "org.togglz.core.repository.FeatureStateTest.testEquals()",
            "start_line": "36",
            "blame_result": "b05f204d9 (Christoph Dreis     2023-01-11 13:44:29 +0100 37) \na9b2ecf08 (Christian Kaltepoth 2012-11-13 17:22:13 +0100 38)         FeatureState state = new FeatureState(Features.FEATURE1);\nb05f204d9 (Christoph Dreis     2023-01-11 13:44:29 +0100 39)         FeatureState copy = state.copy();\nb05f204d9 (Christoph Dreis     2023-01-11 13:44:29 +0100 40)         assertEquals(state, copy);\nb05f204d9 (Christoph Dreis     2023-01-11 13:44:29 +0100 41) \n",
            "commit_hashes": {
                "b05f204d9": "    Reduce overhead of TogglzTestExecutionListener (#914)",
                "a9b2ecf08": "    Bridge for old FeatureState user API which delegates to the new parameter API"
            },
            "Commit&issueIDs": {
                "b05f204d9": [
                    "(#914)"
                ]
            },
            "links": [
                "https://github.com/togglz/togglz/issues/914",
                "https://github.com/togglz/togglz/commit/b05f204d9"
            ]
        },
        {
            "poj_link": "https://github.com/JSQLParser/JSqlParser/",
            "file_path": "JSQLParser/JSqlParser/src/test/java/net/sf/jsqlparser/statement/IfElseStatementTest.java",
            "test_name": "testObjectBuilder",
            "FQS": "net.sf.jsqlparser.statement.IfElseStatementTest.testObjectBuilder()",
            "start_line": "68",
            "blame_result": "fb455a7ef (Tobias Warneke     2021-11-21 13:11:43 +0100 69)         Statement ifStatement = CCJSqlParserUtil.parse(\"SELECT * from dual\");\nfb455a7ef (Tobias Warneke     2021-11-21 13:11:43 +0100 70)         Statement elseStatement = CCJSqlParserUtil.parse(\"SELECT * from dual\");\n750c30aaf (manticore-projects 2021-08-10 04:43:50 +0700 71) \nfb455a7ef (Tobias Warneke     2021-11-21 13:11:43 +0100 72)         IfElseStatement ifElseStatement = new IfElseStatement(new NotExpression(), ifStatement);\nfb455a7ef (Tobias Warneke     2021-11-21 13:11:43 +0100 73)         ifElseStatement.setUsingSemicolonForIfStatement(true);\n",
            "commit_hashes": {
                "fb455a7ef": "    reformatted test source code",
                "750c30aaf": "    Implement Transact-SQL IF ELSE Statement Control Flows. (#1275)"
            },
            "Commit&issueIDs": {
                "750c30aaf": [
                    "(#1275)"
                ]
            },
            "links": [
                "https://github.com/JSQLParser/JSqlParser/issues/1275",
                "https://github.com/JSQLParser/JSqlParser/commit/750c30aaf"
            ]
        },
        {
            "poj_link": "https://github.com/paul-hammant/qdox/",
            "file_path": "paul-hammant/qdox/src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java",
            "test_name": "testGetClassByName",
            "FQS": "com.thoughtworks.qdox.library.JavaClassContextTest.testGetClassByName()",
            "start_line": "25",
            "blame_result": "4770867b6 src/test/com/thoughtworks/qdox/JavaClassContextTest.java              (rfscholte      2010-10-29 18:46:53 +0000 26)     {\n51e94d015 src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java (Robert Scholte 2023-09-20 19:34:37 +0200 27)         Assertions.assertNull(context.getClassByName( null ));\n51e94d015 src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java (Robert Scholte 2023-09-20 19:34:37 +0200 28)         Assertions.assertNull(context.getClassByName( \"java.lang.Object\" ), \"a new context should be empty, not even contain java.lang.Object\");\nddfa4dfb2 src/test/com/thoughtworks/qdox/library/JavaClassContextTest.java      (rfscholte      2010-11-21 18:44:12 +0000 29)         JavaClass clazz = new DefaultJavaClass( \"com.foo.Bar\" );\n4770867b6 src/test/com/thoughtworks/qdox/JavaClassContextTest.java              (rfscholte      2010-10-29 18:46:53 +0000 30)         context.add( clazz );\n",
            "commit_hashes": {
                "4770867b6": "    Add JavaClassContextTest",
                "51e94d015": "    Require Java 8 to run QDox (#171)",
                "ddfa4dfb2": "    Refactor JavaClass to DefaultJavaClass, extract JavaClass as interface"
            },
            "Commit&issueIDs": {
                "51e94d015": [
                    "(#171)"
                ]
            },
            "links": [
                "https://github.com/paul-hammant/qdox/issues/171",
                "https://github.com/paul-hammant/qdox/commit/51e94d015"
            ]
        },
        {
            "poj_link": "https://github.com/paul-hammant/qdox/",
            "file_path": "paul-hammant/qdox/src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java",
            "test_name": "testRemoveClassByName",
            "FQS": "com.thoughtworks.qdox.library.JavaClassContextTest.testRemoveClassByName()",
            "start_line": "37",
            "blame_result": "4770867b6 src/test/com/thoughtworks/qdox/JavaClassContextTest.java              (rfscholte      2010-10-29 18:46:53 +0000 38)     {\n51e94d015 src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java (Robert Scholte 2023-09-20 19:34:37 +0200 39)         Assertions.assertNull(context.removeClassByName( null ));\n51e94d015 src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java (Robert Scholte 2023-09-20 19:34:37 +0200 40)         Assertions.assertNull(context.removeClassByName( \"com.foo.Bar\" ));\nddfa4dfb2 src/test/com/thoughtworks/qdox/library/JavaClassContextTest.java      (rfscholte      2010-11-21 18:44:12 +0000 41)         JavaClass clazz = new DefaultJavaClass( \"com.foo.Bar\" );\n4770867b6 src/test/com/thoughtworks/qdox/JavaClassContextTest.java              (rfscholte      2010-10-29 18:46:53 +0000 42)         context.add( clazz );\n",
            "commit_hashes": {
                "4770867b6": "    Add JavaClassContextTest",
                "51e94d015": "    Require Java 8 to run QDox (#171)",
                "ddfa4dfb2": "    Refactor JavaClass to DefaultJavaClass, extract JavaClass as interface"
            },
            "Commit&issueIDs": {
                "51e94d015": [
                    "(#171)"
                ]
            },
            "links": [
                "https://github.com/paul-hammant/qdox/issues/171",
                "https://github.com/paul-hammant/qdox/commit/51e94d015"
            ]
        },
        {
            "poj_link": "https://github.com/paul-hammant/qdox/",
            "file_path": "paul-hammant/qdox/src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java",
            "test_name": "testGetPackageByName",
            "FQS": "com.thoughtworks.qdox.library.JavaClassContextTest.testGetPackageByName()",
            "start_line": "85",
            "blame_result": "4770867b6 src/test/com/thoughtworks/qdox/JavaClassContextTest.java              (rfscholte      2010-10-29 18:46:53 +0000 86)     {\n51e94d015 src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java (Robert Scholte 2023-09-20 19:34:37 +0200 87)         Assertions.assertNull(context.getPackageByName( null ));\n51e94d015 src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java (Robert Scholte 2023-09-20 19:34:37 +0200 88)         Assertions.assertNull(context.getPackageByName( \"java.lang\" ));\n93b294e86 src/test/com/thoughtworks/qdox/JavaClassContextTest.java              (rfscholte      2010-11-07 18:03:18 +0000 89)         JavaPackage pckg = new DefaultJavaPackage(\"com.foo\");\n4770867b6 src/test/com/thoughtworks/qdox/JavaClassContextTest.java              (rfscholte      2010-10-29 18:46:53 +0000 90)         context.add( pckg );\n",
            "commit_hashes": {
                "4770867b6": "    Add JavaClassContextTest",
                "51e94d015": "    Require Java 8 to run QDox (#171)",
                "93b294e86": "    Renamed JavaPackage to DefaultJavaPackage, extracted the JavaPackage interface"
            },
            "Commit&issueIDs": {
                "51e94d015": [
                    "(#171)"
                ]
            },
            "links": [
                "https://github.com/paul-hammant/qdox/issues/171",
                "https://github.com/paul-hammant/qdox/commit/51e94d015"
            ]
        },
        {
            "poj_link": "https://github.com/paul-hammant/qdox/",
            "file_path": "paul-hammant/qdox/src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java",
            "test_name": "testRemovePackageByName",
            "FQS": "com.thoughtworks.qdox.library.JavaClassContextTest.testRemovePackageByName()",
            "start_line": "95",
            "blame_result": "4770867b6 src/test/com/thoughtworks/qdox/JavaClassContextTest.java              (rfscholte      2010-10-29 18:46:53 +0000  96)     {\n51e94d015 src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java (Robert Scholte 2023-09-20 19:34:37 +0200  97)         Assertions.assertNull(context.removePackageByName( null ));\n51e94d015 src/test/java/com/thoughtworks/qdox/library/JavaClassContextTest.java (Robert Scholte 2023-09-20 19:34:37 +0200  98)         Assertions.assertNull(context.removePackageByName( \"com.foo\" ));\n93b294e86 src/test/com/thoughtworks/qdox/JavaClassContextTest.java              (rfscholte      2010-11-07 18:03:18 +0000  99)         JavaPackage pckg = new DefaultJavaPackage(\"com.foo\");\n4770867b6 src/test/com/thoughtworks/qdox/JavaClassContextTest.java              (rfscholte      2010-10-29 18:46:53 +0000 100)         context.add( pckg );\n",
            "commit_hashes": {
                "4770867b6": "    Add JavaClassContextTest",
                "51e94d015": "    Require Java 8 to run QDox (#171)",
                "93b294e86": "    Renamed JavaPackage to DefaultJavaPackage, extracted the JavaPackage interface"
            },
            "Commit&issueIDs": {
                "51e94d015": [
                    "(#171)"
                ]
            },
            "links": [
                "https://github.com/paul-hammant/qdox/issues/171",
                "https://github.com/paul-hammant/qdox/commit/51e94d015"
            ]
        },
        {
            "poj_link": "https://github.com/paul-hammant/qdox/",
            "file_path": "paul-hammant/qdox/src/test/java/com/thoughtworks/qdox/model/impl/DefaultJavaClassIT.java",
            "test_name": "testIsAJavaClass",
            "FQS": "com.thoughtworks.qdox.model.impl.DefaultJavaClassIT.testIsAJavaClass()",
            "start_line": "33",
            "blame_result": "ba006fd9e (rfscholte      2011-10-18 20:01:20 +0000 34)     {\nba006fd9e (rfscholte      2011-10-18 20:01:20 +0000 35)         JavaClass hashSetClass = library.getJavaClass( \"java.util.HashSet\" );\n51e94d015 (Robert Scholte 2023-09-20 19:34:37 +0200 36)         Assertions.assertTrue(hashSetClass instanceof DefaultJavaClass);\nba006fd9e (rfscholte      2011-10-18 20:01:20 +0000 37)         \nba006fd9e (rfscholte      2011-10-18 20:01:20 +0000 38)         JavaClass setClass = library.getJavaClass( \"java.util.Set\" );\n",
            "commit_hashes": {
                "ba006fd9e": "    Start integration-tests for DefaultJavaClass and DefaultJavaType",
                "51e94d015": "    Require Java 8 to run QDox (#171)"
            },
            "Commit&issueIDs": {
                "51e94d015": [
                    "(#171)"
                ]
            },
            "links": [
                "https://github.com/paul-hammant/qdox/issues/171",
                "https://github.com/paul-hammant/qdox/commit/51e94d015"
            ]
        },
        {
            "poj_link": "https://github.com/cowtowncoder/java-uuid-generator/",
            "file_path": "cowtowncoder/java-uuid-generator/src/test/java/com/fasterxml/uuid/ext/LockedFileTest.java",
            "test_name": "writeStamp_givenTimestampedFile_withLowerValue_shouldOverrideValue",
            "FQS": "com.fasterxml.uuid.ext.LockedFileTest.writeStamp_givenTimestampedFile_withLowerValue_shouldOverrideValue()",
            "start_line": "190",
            "blame_result": "64297d06 (SquireOfSoftware 2024-06-07 15:49:55 -0700 191)         // given\n64297d06 (SquireOfSoftware 2024-06-07 15:49:55 -0700 192)         String inputValue = \"[0x0000000000000000]\";\n64297d06 (SquireOfSoftware 2024-06-07 15:49:55 -0700 193)         long numericInputValue = 0L;\n64297d06 (SquireOfSoftware 2024-06-07 15:49:55 -0700 194)         long newTimestamp = ThreadLocalRandom.current().nextLong(Long.MAX_VALUE);\n64297d06 (SquireOfSoftware 2024-06-07 15:49:55 -0700 195) \n",
            "commit_hashes": {
                "64297d06": "    feat(test): cowtowncoder#87 added a new test for LockedFile (#110)"
            },
            "Commit&issueIDs": {
                "64297d06": [
                    "110"
                ]
            },
            "links": [
                "https://github.com/cowtowncoder/java-uuid-generator/issues/110",
                "https://github.com/cowtowncoder/java-uuid-generator/commit/64297d06"
            ]
        },
        {
            "poj_link": "https://github.com/cowtowncoder/java-uuid-generator/",
            "file_path": "cowtowncoder/java-uuid-generator/src/test/java/com/fasterxml/uuid/ext/LockedFileTest.java",
            "test_name": "writeStamp_givenTimestampedFile_writeSameTimestamp_shouldLeaveFileAlone",
            "FQS": "com.fasterxml.uuid.ext.LockedFileTest.writeStamp_givenTimestampedFile_writeSameTimestamp_shouldLeaveFileAlone()",
            "start_line": "239",
            "blame_result": "64297d06 (SquireOfSoftware 2024-06-07 15:49:55 -0700 240)         // given\n64297d06 (SquireOfSoftware 2024-06-07 15:49:55 -0700 241)         String inputValue = \"[0x7fffffffffffffff]\";\n64297d06 (SquireOfSoftware 2024-06-07 15:49:55 -0700 242)         long numericInputValue = Long.MAX_VALUE;\n64297d06 (SquireOfSoftware 2024-06-07 15:49:55 -0700 243)         long newTimestamp = Long.MAX_VALUE;\n64297d06 (SquireOfSoftware 2024-06-07 15:49:55 -0700 244) \n",
            "commit_hashes": {
                "64297d06": "    feat(test): cowtowncoder#87 added a new test for LockedFile (#110)"
            },
            "Commit&issueIDs": {
                "64297d06": [
                    "110"
                ]
            },
            "links": [
                "https://github.com/cowtowncoder/java-uuid-generator/issues/110",
                "https://github.com/cowtowncoder/java-uuid-generator/commit/64297d06"
            ]
        },
        {
            "poj_link": "https://github.com/chewiebug/GCViewer/",
            "file_path": "chewiebug/GCViewer/src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderFacade.java",
            "test_name": "testLoadModel_forSeries",
            "FQS": "com.tagtraum.perf.gcviewer.imp.TestDataReaderFacade.testLoadModel_forSeries()",
            "start_line": "125",
            "blame_result": "323892b4 (chewiebug 2018-01-02 15:40:37 +0100 126)         GCResource file1 = new GcResourceFile(UnittestHelper.getResource(FOLDER.OPENJDK, \"SampleSun1_8_0Series-Part1.txt\").getPath());\n323892b4 (chewiebug 2018-01-02 15:40:37 +0100 127)         GCResource file2 = new GcResourceFile(UnittestHelper.getResource(FOLDER.OPENJDK, \"SampleSun1_8_0Series-Part2.txt\").getPath());\n323892b4 (chewiebug 2018-01-02 15:40:37 +0100 128)         GCResource file3 = new GcResourceFile(UnittestHelper.getResource(FOLDER.OPENJDK, \"SampleSun1_8_0Series-Part3.txt\").getPath());\n323892b4 (chewiebug 2018-01-02 15:40:37 +0100 129)         GCResource file4 = new GcResourceFile(UnittestHelper.getResource(FOLDER.OPENJDK, \"SampleSun1_8_0Series-Part4.txt\").getPath());\n323892b4 (chewiebug 2018-01-02 15:40:37 +0100 130)         GCResource file5 = new GcResourceFile(UnittestHelper.getResource(FOLDER.OPENJDK, \"SampleSun1_8_0Series-Part5.txt\").getPath());\n",
            "commit_hashes": {
                "323892b4": "    #155 refactor DataReaderUnifiedJvmLogging to prepare reading heap details if gc,heap information is present"
            },
            "Commit&issueIDs": {
                "323892b4": [
                    "#155"
                ]
            },
            "links": [
                "https://github.com/chewiebug/GCViewer/issues/155",
                "https://github.com/chewiebug/GCViewer/commit/323892b4"
            ]
        },
        {
            "poj_link": "https://github.com/chewiebug/GCViewer/",
            "file_path": "chewiebug/GCViewer/src/test/java/com/tagtraum/perf/gcviewer/imp/TestDataReaderFacade.java",
            "test_name": "testLoadModelFromSeries",
            "FQS": "com.tagtraum.perf.gcviewer.imp.TestDataReaderFacade.testLoadModelFromSeries()",
            "start_line": "151",
            "blame_result": "323892b4 (chewiebug 2018-01-02 15:40:37 +0100 152)         GCResource file1 = new GcResourceFile(UnittestHelper.getResource(FOLDER.OPENJDK, \"SampleSun1_8_0Series-Part1.txt\").getPath());\n323892b4 (chewiebug 2018-01-02 15:40:37 +0100 153)         GCResource file2 = new GcResourceFile(UnittestHelper.getResource(FOLDER.OPENJDK, \"SampleSun1_8_0Series-Part2.txt\").getPath());\n323892b4 (chewiebug 2018-01-02 15:40:37 +0100 154)         GCResource file3 = new GcResourceFile(UnittestHelper.getResource(FOLDER.OPENJDK, \"SampleSun1_8_0Series-Part3.txt\").getPath());\n323892b4 (chewiebug 2018-01-02 15:40:37 +0100 155)         GCResource file4 = new GcResourceFile(UnittestHelper.getResource(FOLDER.OPENJDK, \"SampleSun1_8_0Series-Part4.txt\").getPath());\n323892b4 (chewiebug 2018-01-02 15:40:37 +0100 156)         GCResource file5 = new GcResourceFile(UnittestHelper.getResource(FOLDER.OPENJDK, \"SampleSun1_8_0Series-Part5.txt\").getPath());\n",
            "commit_hashes": {
                "323892b4": "    #155 refactor DataReaderUnifiedJvmLogging to prepare reading heap details if gc,heap information is present"
            },
            "Commit&issueIDs": {
                "323892b4": [
                    "#155"
                ]
            },
            "links": [
                "https://github.com/chewiebug/GCViewer/issues/155",
                "https://github.com/chewiebug/GCViewer/commit/323892b4"
            ]
        },
        {
            "poj_link": "https://github.com/chewiebug/GCViewer/",
            "file_path": "chewiebug/GCViewer/src/test/java/com/tagtraum/perf/gcviewer/model/TestGCModel.java",
            "test_name": "testEquals_ForIdenticalModels",
            "FQS": "com.tagtraum.perf.gcviewer.model.TestGCModel.testEquals_ForIdenticalModels()",
            "start_line": "45",
            "blame_result": "3ac5d970 (martin.geldmacher 2016-04-29 19:46:58 +0200 46)         // load model twice, should be identical\n323892b4 (chewiebug         2018-01-02 15:40:37 +0100 47)         GCResource gcResource = new GcResourceFile(UnittestHelper.getResourceAsString(FOLDER.OPENJDK, \"SampleSun1_6_0CMS.txt\"));\n3ac5d970 (martin.geldmacher 2016-04-29 19:46:58 +0200 48)         DataReaderFacade dataReader = new DataReaderFacade();\n3ac5d970 (martin.geldmacher 2016-04-29 19:46:58 +0200 49) \n3ac5d970 (martin.geldmacher 2016-04-29 19:46:58 +0200 50)         GCModel actual = dataReader.loadModel(gcResource);\n",
            "commit_hashes": {
                "3ac5d970": "    Allow to compare GCModels",
                "323892b4": "    #155 refactor DataReaderUnifiedJvmLogging to prepare reading heap details if gc,heap information is present"
            },
            "Commit&issueIDs": {
                "323892b4": [
                    "#155"
                ]
            },
            "links": [
                "https://github.com/chewiebug/GCViewer/issues/155",
                "https://github.com/chewiebug/GCViewer/commit/323892b4"
            ]
        },
        {
            "poj_link": "https://github.com/chewiebug/GCViewer/",
            "file_path": "chewiebug/GCViewer/src/test/java/com/tagtraum/perf/gcviewer/model/TestGCModel.java",
            "test_name": "testGetStartDate_WhenNeitherDateNorTimeStampsAreAvailable",
            "FQS": "com.tagtraum.perf.gcviewer.model.TestGCModel.testGetStartDate_WhenNeitherDateNorTimeStampsAreAvailable()",
            "start_line": "61",
            "blame_result": "536ba648 (martin.geldmacher 2016-06-11 12:52:42 +0200 62)         GCModel model = new GCModel();\n323892b4 (chewiebug         2018-01-02 15:40:37 +0100 63)         model.setURL(UnittestHelper.getResource(FOLDER.OPENJDK, \"SampleSun1_6_0CMS.txt\"));\n536ba648 (martin.geldmacher 2016-06-11 12:52:42 +0200 64) \n536ba648 (martin.geldmacher 2016-06-11 12:52:42 +0200 65)         assertThat(model.getStartDate(), is(ZonedDateTime.ofInstant(Instant.ofEpochMilli(model.getLastModified()), ZoneId.systemDefault())));\n536ba648 (martin.geldmacher 2016-06-11 12:52:42 +0200 66)     }\n",
            "commit_hashes": {
                "536ba648": "    Several follow ups for #61",
                "323892b4": "    #155 refactor DataReaderUnifiedJvmLogging to prepare reading heap details if gc,heap information is present"
            },
            "Commit&issueIDs": {
                "536ba648": [
                    "#61"
                ],
                "323892b4": [
                    "#155"
                ]
            },
            "links": [
                "https://github.com/chewiebug/GCViewer/issues/61",
                "https://github.com/chewiebug/GCViewer/commit/536ba648",
                "https://github.com/chewiebug/GCViewer/issues/155",
                "https://github.com/chewiebug/GCViewer/commit/323892b4"
            ]
        },
        {
            "poj_link": "https://github.com/networknt/json-schema-validator/",
            "file_path": "networknt/json-schema-validator/src/test/java/com/networknt/schema/JsonNodePathTest.java",
            "test_name": "equalsEquals",
            "FQS": "com.networknt.schema.JsonNodePathTest.equalsEquals()",
            "start_line": "81",
            "blame_result": "5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 82)         JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 83)         JsonNodePath a1 = root.append(\"a\");\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 84)         JsonNodePath a2 = root.append(\"a\");\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 85)         assertEquals(a1, a2);\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 86)     }\n",
            "commit_hashes": {
                "5a94df7e": "    Refactor of paths (#915)"
            },
            "Commit&issueIDs": {
                "5a94df7e": [
                    "(#915)"
                ]
            },
            "links": [
                "https://github.com/networknt/json-schema-validator/issues/915",
                "https://github.com/networknt/json-schema-validator/commit/5a94df7e"
            ]
        },
        {
            "poj_link": "https://github.com/opentracing/opentracing-java/",
            "file_path": "opentracing/opentracing-java/opentracing-mock/src/test/java/io/opentracing/mock/MockTracerTest.java",
            "test_name": "testTextMapPropagatorTextMap",
            "FQS": "io.opentracing.mock.MockTracerTest.testTextMapPropagatorTextMap()",
            "start_line": "177",
            "blame_result": "297e0d25 (Pavol Loffay  2017-02-01 22:23:05 +0100 178)         MockTracer tracer = new MockTracer(MockTracer.Propagator.TEXT_MAP);\n051e6bcc (Brian Hanafee 2017-05-26 00:35:50 -0700 179)         HashMap<String, String> injectMap = new HashMap<>();\n051e6bcc (Brian Hanafee 2017-05-26 00:35:50 -0700 180)         injectMap.put(\"foobag\", \"donttouch\");\n297e0d25 (Pavol Loffay  2017-02-01 22:23:05 +0100 181)         {\n297e0d25 (Pavol Loffay  2017-02-01 22:23:05 +0100 182)             Span parentSpan = tracer.buildSpan(\"foo\")\n",
            "commit_hashes": {
                "297e0d25": "    MockTracer TextMap propagator (#91)",
                "051e6bcc": "    Mock baggage (#129)"
            },
            "Commit&issueIDs": {
                "297e0d25": [
                    "(#91)"
                ],
                "051e6bcc": [
                    "(#129)"
                ]
            },
            "links": [
                "https://github.com/opentracing/opentracing-java/issues/91",
                "https://github.com/opentracing/opentracing-java/commit/297e0d25",
                "https://github.com/opentracing/opentracing-java/issues/129",
                "https://github.com/opentracing/opentracing-java/commit/051e6bcc"
            ]
        },
        {
            "poj_link": "https://github.com/networknt/json-schema-validator/",
            "file_path": "networknt/json-schema-validator/src/test/java/com/networknt/schema/JsonNodePathTest.java",
            "test_name": "hashCodeEquals",
            "FQS": "com.networknt.schema.JsonNodePathTest.hashCodeEquals()",
            "start_line": "89",
            "blame_result": "5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 90)         JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 91)         JsonNodePath a1 = root.append(\"a\");\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 92)         JsonNodePath a2 = root.append(\"a\");\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 93)         assertEquals(a1.hashCode(), a2.hashCode());\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 94)     }\n",
            "commit_hashes": {
                "5a94df7e": "    Refactor of paths (#915)"
            },
            "Commit&issueIDs": {
                "5a94df7e": [
                    "(#915)"
                ]
            },
            "links": [
                "https://github.com/networknt/json-schema-validator/issues/915",
                "https://github.com/networknt/json-schema-validator/commit/5a94df7e"
            ]
        },
        {
            "poj_link": "https://github.com/opentracing/opentracing-java/",
            "file_path": "opentracing/opentracing-java/opentracing-mock/src/test/java/io/opentracing/mock/MockTracerTest.java",
            "test_name": "testTextMapPropagatorHttpHeaders",
            "FQS": "io.opentracing.mock.MockTracerTest.testTextMapPropagatorHttpHeaders()",
            "start_line": "211",
            "blame_result": "297e0d25 (Pavol Loffay 2017-02-01 22:23:05 +0100 212)         MockTracer tracer = new MockTracer(MockTracer.Propagator.TEXT_MAP);\n297e0d25 (Pavol Loffay 2017-02-01 22:23:05 +0100 213)         {\n297e0d25 (Pavol Loffay 2017-02-01 22:23:05 +0100 214)             Span parentSpan = tracer.buildSpan(\"foo\")\n297e0d25 (Pavol Loffay 2017-02-01 22:23:05 +0100 215)                     .start();\n297e0d25 (Pavol Loffay 2017-02-01 22:23:05 +0100 216)             parentSpan.finish();\n",
            "commit_hashes": {
                "297e0d25": "    MockTracer TextMap propagator (#91)"
            },
            "Commit&issueIDs": {
                "297e0d25": [
                    "(#91)"
                ]
            },
            "links": [
                "https://github.com/opentracing/opentracing-java/issues/91",
                "https://github.com/opentracing/opentracing-java/commit/297e0d25"
            ]
        },
        {
            "poj_link": "https://github.com/networknt/json-schema-validator/",
            "file_path": "networknt/json-schema-validator/src/test/java/com/networknt/schema/JsonNodePathTest.java",
            "test_name": "startsWith",
            "FQS": "com.networknt.schema.JsonNodePathTest.startsWith()",
            "start_line": "115",
            "blame_result": "5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 116)         JsonNodePath root = new JsonNodePath(PathType.JSON_PATH);\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 117)         JsonNodePath path = root.append(\"items\");\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 118)         JsonNodePath other = root.append(\"unevaluatedItems\");\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 119)         assertTrue(path.startsWith(other.getParent()));\n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 120) \n",
            "commit_hashes": {
                "5a94df7e": "    Refactor of paths (#915)"
            },
            "Commit&issueIDs": {
                "5a94df7e": [
                    "(#915)"
                ]
            },
            "links": [
                "https://github.com/networknt/json-schema-validator/issues/915",
                "https://github.com/networknt/json-schema-validator/commit/5a94df7e"
            ]
        },
        {
            "poj_link": "https://github.com/opentracing/opentracing-java/",
            "file_path": "opentracing/opentracing-java/opentracing-mock/src/test/java/io/opentracing/mock/MockTracerTest.java",
            "test_name": "testBinaryPropagator",
            "FQS": "io.opentracing.mock.MockTracerTest.testBinaryPropagator()",
            "start_line": "237",
            "blame_result": "ed1925b2 (Carlos Alberto Cortez 2019-03-25 20:45:54 +0200 238)         MockTracer tracer = new MockTracer(MockTracer.Propagator.BINARY);\n297e0d25 (Pavol Loffay          2017-02-01 22:23:05 +0100 239)         {\n297e0d25 (Pavol Loffay          2017-02-01 22:23:05 +0100 240)             Span parentSpan = tracer.buildSpan(\"foo\")\n297e0d25 (Pavol Loffay          2017-02-01 22:23:05 +0100 241)                     .start();\n051e6bcc (Brian Hanafee         2017-05-26 00:35:50 -0700 242)             parentSpan.setBaggageItem(\"foobag\", \"fooitem\");\n",
            "commit_hashes": {
                "ed1925b2": "    V0.32.0 (#337)",
                "297e0d25": "    MockTracer TextMap propagator (#91)",
                "051e6bcc": "    Mock baggage (#129)"
            },
            "Commit&issueIDs": {
                "ed1925b2": [
                    "(#337)"
                ],
                "297e0d25": [
                    "(#91)"
                ],
                "051e6bcc": [
                    "(#129)"
                ]
            },
            "links": [
                "https://github.com/opentracing/opentracing-java/issues/337",
                "https://github.com/opentracing/opentracing-java/commit/ed1925b2",
                "https://github.com/opentracing/opentracing-java/issues/91",
                "https://github.com/opentracing/opentracing-java/commit/297e0d25",
                "https://github.com/opentracing/opentracing-java/issues/129",
                "https://github.com/opentracing/opentracing-java/commit/051e6bcc"
            ]
        },
        {
            "poj_link": "https://github.com/opentracing/opentracing-java/",
            "file_path": "opentracing/opentracing-java/opentracing-mock/src/test/java/io/opentracing/mock/MockTracerTest.java",
            "test_name": "testActiveSpan",
            "FQS": "io.opentracing.mock.MockTracerTest.testActiveSpan()",
            "start_line": "279",
            "blame_result": "a4200626 (Pavol Loffay          2017-06-23 09:57:37 +0200 280)         MockTracer mockTracer = new MockTracer();\n85433fce (Carlos Alberto Cortez 2018-01-12 11:36:58 -0800 281)         Assert.assertNull(mockTracer.activeSpan());\n85433fce (Carlos Alberto Cortez 2018-01-12 11:36:58 -0800 282) \ned1925b2 (Carlos Alberto Cortez 2019-03-25 20:45:54 +0200 283)         Span span = mockTracer.buildSpan(\"foo\").start();\ned1925b2 (Carlos Alberto Cortez 2019-03-25 20:45:54 +0200 284)         try (Scope scope = mockTracer.activateSpan(span)) {\n",
            "commit_hashes": {
                "a4200626": "    Increase test coverage (#161)",
                "85433fce": "    v0.31.0 (#249)",
                "ed1925b2": "    V0.32.0 (#337)"
            },
            "Commit&issueIDs": {
                "a4200626": [
                    "(#161)"
                ],
                "85433fce": [
                    "(#249)"
                ],
                "ed1925b2": [
                    "(#337)"
                ]
            },
            "links": [
                "https://github.com/opentracing/opentracing-java/issues/161",
                "https://github.com/opentracing/opentracing-java/commit/a4200626",
                "https://github.com/opentracing/opentracing-java/issues/249",
                "https://github.com/opentracing/opentracing-java/commit/85433fce",
                "https://github.com/opentracing/opentracing-java/issues/337",
                "https://github.com/opentracing/opentracing-java/commit/ed1925b2"
            ]
        },
        {
            "poj_link": "https://github.com/opentracing/opentracing-java/",
            "file_path": "opentracing/opentracing-java/opentracing-mock/src/test/java/io/opentracing/mock/MockTracerTest.java",
            "test_name": "testFollowFromReference",
            "FQS": "io.opentracing.mock.MockTracerTest.testFollowFromReference()",
            "start_line": "306",
            "blame_result": "297e0d25 (Pavol Loffay          2017-02-01 22:23:05 +0100 307)         MockTracer tracer = new MockTracer(MockTracer.Propagator.TEXT_MAP);\n5ed6a479 (Carlos Alberto Cortez 2019-05-06 12:46:28 +0200 308)         final MockSpan precedent = tracer.buildSpan(\"precedent\").start();\ndd75c9dc (Fran\u00e7ois JACQUES      2017-11-07 16:10:42 +0100 309) \ndd75c9dc (Fran\u00e7ois JACQUES      2017-11-07 16:10:42 +0100 310)         final MockSpan followingSpan = tracer.buildSpan(\"follows\")\ndd75c9dc (Fran\u00e7ois JACQUES      2017-11-07 16:10:42 +0100 311)             .addReference(References.FOLLOWS_FROM, precedent.context())\n",
            "commit_hashes": {
                "297e0d25": "    MockTracer TextMap propagator (#91)",
                "5ed6a479": "    V0.33.0 (#348)",
                "dd75c9dc": "    Add support for multi reference and expose references context and type from MockSpan. (#213)"
            },
            "Commit&issueIDs": {
                "297e0d25": [
                    "(#91)"
                ],
                "5ed6a479": [
                    "(#348)"
                ],
                "dd75c9dc": [
                    "(#213)"
                ]
            },
            "links": [
                "https://github.com/opentracing/opentracing-java/issues/91",
                "https://github.com/opentracing/opentracing-java/commit/297e0d25",
                "https://github.com/opentracing/opentracing-java/issues/348",
                "https://github.com/opentracing/opentracing-java/commit/5ed6a479",
                "https://github.com/opentracing/opentracing-java/issues/213",
                "https://github.com/opentracing/opentracing-java/commit/dd75c9dc"
            ]
        },
        {
            "poj_link": "https://github.com/opentracing/opentracing-java/",
            "file_path": "opentracing/opentracing-java/opentracing-mock/src/test/java/io/opentracing/mock/MockTracerTest.java",
            "test_name": "testMultiReferences",
            "FQS": "io.opentracing.mock.MockTracerTest.testMultiReferences()",
            "start_line": "323",
            "blame_result": "297e0d25 (Pavol Loffay          2017-02-01 22:23:05 +0100 324)         MockTracer tracer = new MockTracer(MockTracer.Propagator.TEXT_MAP);\n5ed6a479 (Carlos Alberto Cortez 2019-05-06 12:46:28 +0200 325)         final MockSpan parent = tracer.buildSpan(\"parent\").start();\n5ed6a479 (Carlos Alberto Cortez 2019-05-06 12:46:28 +0200 326)         final MockSpan precedent = tracer.buildSpan(\"precedent\").start();\ndd75c9dc (Fran\u00e7ois JACQUES      2017-11-07 16:10:42 +0100 327) \ndd75c9dc (Fran\u00e7ois JACQUES      2017-11-07 16:10:42 +0100 328)         final MockSpan followingSpan = tracer.buildSpan(\"follows\")\n",
            "commit_hashes": {
                "297e0d25": "    MockTracer TextMap propagator (#91)",
                "5ed6a479": "    V0.33.0 (#348)",
                "dd75c9dc": "    Add support for multi reference and expose references context and type from MockSpan. (#213)"
            },
            "Commit&issueIDs": {
                "297e0d25": [
                    "(#91)"
                ],
                "5ed6a479": [
                    "(#348)"
                ],
                "dd75c9dc": [
                    "(#213)"
                ]
            },
            "links": [
                "https://github.com/opentracing/opentracing-java/issues/91",
                "https://github.com/opentracing/opentracing-java/commit/297e0d25",
                "https://github.com/opentracing/opentracing-java/issues/348",
                "https://github.com/opentracing/opentracing-java/commit/5ed6a479",
                "https://github.com/opentracing/opentracing-java/issues/213",
                "https://github.com/opentracing/opentracing-java/commit/dd75c9dc"
            ]
        },
        {
            "poj_link": "https://github.com/opentracing/opentracing-java/",
            "file_path": "opentracing/opentracing-java/opentracing-mock/src/test/java/io/opentracing/mock/MockTracerTest.java",
            "test_name": "testNonStandardReference",
            "FQS": "io.opentracing.mock.MockTracerTest.testNonStandardReference()",
            "start_line": "361",
            "blame_result": "297e0d25 (Pavol Loffay          2017-02-01 22:23:05 +0100 362)         MockTracer tracer = new MockTracer(MockTracer.Propagator.TEXT_MAP);\n5ed6a479 (Carlos Alberto Cortez 2019-05-06 12:46:28 +0200 363)         final MockSpan parent = tracer.buildSpan(\"parent\").start();\ndd75c9dc (Fran\u00e7ois JACQUES      2017-11-07 16:10:42 +0100 364) \ndd75c9dc (Fran\u00e7ois JACQUES      2017-11-07 16:10:42 +0100 365)         final MockSpan nextSpan = tracer.buildSpan(\"follows\")\ndd75c9dc (Fran\u00e7ois JACQUES      2017-11-07 16:10:42 +0100 366)             .addReference(\"a_reference\", parent.context())\n",
            "commit_hashes": {
                "297e0d25": "    MockTracer TextMap propagator (#91)",
                "5ed6a479": "    V0.33.0 (#348)",
                "dd75c9dc": "    Add support for multi reference and expose references context and type from MockSpan. (#213)"
            },
            "Commit&issueIDs": {
                "297e0d25": [
                    "(#91)"
                ],
                "5ed6a479": [
                    "(#348)"
                ],
                "dd75c9dc": [
                    "(#213)"
                ]
            },
            "links": [
                "https://github.com/opentracing/opentracing-java/issues/91",
                "https://github.com/opentracing/opentracing-java/commit/297e0d25",
                "https://github.com/opentracing/opentracing-java/issues/348",
                "https://github.com/opentracing/opentracing-java/commit/5ed6a479",
                "https://github.com/opentracing/opentracing-java/issues/213",
                "https://github.com/opentracing/opentracing-java/commit/dd75c9dc"
            ]
        },
        {
            "poj_link": "https://github.com/opentracing/opentracing-java/",
            "file_path": "opentracing/opentracing-java/opentracing-mock/src/test/java/io/opentracing/mock/MockTracerTest.java",
            "test_name": "testDefaultConstructor",
            "FQS": "io.opentracing.mock.MockTracerTest.testDefaultConstructor()",
            "start_line": "391",
            "blame_result": "a4200626 (Pavol Loffay          2017-06-23 09:57:37 +0200 392)         MockTracer mockTracer = new MockTracer();\ned1925b2 (Carlos Alberto Cortez 2019-03-25 20:45:54 +0200 393)         Span span = mockTracer.buildSpan(\"foo\").start();\ned1925b2 (Carlos Alberto Cortez 2019-03-25 20:45:54 +0200 394)         Scope scope = mockTracer.activateSpan(span);\ned1925b2 (Carlos Alberto Cortez 2019-03-25 20:45:54 +0200 395)         assertEquals(span, mockTracer.scopeManager().activeSpan());\n84e22d04 (Pavol Loffay          2017-12-14 11:32:45 -0600 396) \n",
            "commit_hashes": {
                "a4200626": "    Increase test coverage (#161)",
                "ed1925b2": "    V0.32.0 (#337)",
                "84e22d04": "    MockTracer use text map propag in the default constructor (#179)"
            },
            "Commit&issueIDs": {
                "a4200626": [
                    "(#161)"
                ],
                "ed1925b2": [
                    "(#337)"
                ],
                "84e22d04": [
                    "(#179)"
                ]
            },
            "links": [
                "https://github.com/opentracing/opentracing-java/issues/161",
                "https://github.com/opentracing/opentracing-java/commit/a4200626",
                "https://github.com/opentracing/opentracing-java/issues/337",
                "https://github.com/opentracing/opentracing-java/commit/ed1925b2",
                "https://github.com/opentracing/opentracing-java/issues/179",
                "https://github.com/opentracing/opentracing-java/commit/84e22d04"
            ]
        },
        {
            "poj_link": "https://github.com/networknt/json-schema-validator/",
            "file_path": "networknt/json-schema-validator/src/test/java/com/networknt/schema/SchemaLocationTest.java",
            "test_name": "equalsEqualsNoFragment",
            "FQS": "com.networknt.schema.SchemaLocationTest.equalsEqualsNoFragment()",
            "start_line": "285",
            "blame_result": "7a58366a (Justin Tay 2024-06-24 22:01:07 +0800 286)         assertEquals(SchemaLocation.of(\"https://example.com/example.yaml#\"),\n7a58366a (Justin Tay 2024-06-24 22:01:07 +0800 287)                 SchemaLocation.of(\"https://example.com/example.yaml\"));\n7a58366a (Justin Tay 2024-06-24 22:01:07 +0800 288)     }\n7a58366a (Justin Tay 2024-06-24 22:01:07 +0800 289) \n7a58366a (Justin Tay 2024-06-24 22:01:07 +0800 290)     @Test\n",
            "commit_hashes": {
                "7a58366a": "    Fix schema location with hash in fragment (#1075)"
            },
            "Commit&issueIDs": {
                "7a58366a": [
                    "1075"
                ]
            },
            "links": [
                "https://github.com/networknt/json-schema-validator/issues/1075",
                "https://github.com/networknt/json-schema-validator/commit/7a58366a"
            ]
        },
        {
            "poj_link": "https://github.com/networknt/json-schema-validator/",
            "file_path": "networknt/json-schema-validator/src/test/java/com/networknt/schema/SchemaLocationTest.java",
            "test_name": "equalsEqualsNoFragmentToString",
            "FQS": "com.networknt.schema.SchemaLocationTest.equalsEqualsNoFragmentToString()",
            "start_line": "291",
            "blame_result": "7a58366a (Justin Tay 2024-06-24 22:01:07 +0800 292)         assertEquals(SchemaLocation.of(\"https://example.com/example.yaml#\").toString(),\n7a58366a (Justin Tay 2024-06-24 22:01:07 +0800 293)                 SchemaLocation.of(\"https://example.com/example.yaml\").toString());\n7a58366a (Justin Tay 2024-06-24 22:01:07 +0800 294)     }\n7a58366a (Justin Tay 2024-06-24 22:01:07 +0800 295) \n5a94df7e (Justin Tay 2024-01-19 22:40:18 +0800 296) }\n",
            "commit_hashes": {
                "7a58366a": "    Fix schema location with hash in fragment (#1075)",
                "5a94df7e": "    Refactor of paths (#915)"
            },
            "Commit&issueIDs": {
                "7a58366a": [
                    "1075"
                ],
                "5a94df7e": [
                    "915"
                ]
            },
            "links": [
                "https://github.com/networknt/json-schema-validator/issues/1075",
                "https://github.com/networknt/json-schema-validator/commit/7a58366a",
                "https://github.com/networknt/json-schema-validator/issues/915",
                "https://github.com/networknt/json-schema-validator/commit/5a94df7e"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/ModuleCrateTest.java",
            "test_name": "innerStaticClass",
            "FQS": "io.bootique.ModuleCrateTest.innerStaticClass()",
            "start_line": "30",
            "blame_result": "0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 31)         ModuleCrate moduleId1 = ModuleCrate.of(new MyStaticModule()).build();\n0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 32)         ModuleCrate moduleId2 = ModuleCrate.of(new MyStaticModule()).build();\n0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 33)         ModuleCrate moduleId3 = ModuleCrate.of(new MyStaticModule2()).build();\nba1a21a47 bootique/src/test/java/io/bootique/BQModuleIdTest.java  (Nikita Timofeev 2020-05-25 16:12:35 +0300 34) \nba1a21a47 bootique/src/test/java/io/bootique/BQModuleIdTest.java  (Nikita Timofeev 2020-05-25 16:12:35 +0300 35)         assertEquals(moduleId1, moduleId1);\n",
            "commit_hashes": {
                "0737c1b9e": "    Unclutter BQModuleProvider #339",
                "ba1a21a47": "    Fix module uniqueness check for modules as lambdas"
            },
            "Commit&issueIDs": {
                "0737c1b9e": [
                    "#339"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/339",
                "https://github.com/bootique/bootique/commit/0737c1b9e"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/ModuleCrateTest.java",
            "test_name": "innerClass",
            "FQS": "io.bootique.ModuleCrateTest.innerClass()",
            "start_line": "52",
            "blame_result": "0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 53)         ModuleCrate moduleId1 = ModuleCrate.of(new MyModule()).build();\n0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 54)         ModuleCrate moduleId2 = ModuleCrate.of(new MyModule()).build();\n0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 55)         ModuleCrate moduleId3 = ModuleCrate.of(new MyModule2()).build();\nba1a21a47 bootique/src/test/java/io/bootique/BQModuleIdTest.java  (Nikita Timofeev 2020-05-25 16:12:35 +0300 56) \nba1a21a47 bootique/src/test/java/io/bootique/BQModuleIdTest.java  (Nikita Timofeev 2020-05-25 16:12:35 +0300 57)         assertEquals(moduleId1, moduleId1);\n",
            "commit_hashes": {
                "0737c1b9e": "    Unclutter BQModuleProvider #339",
                "ba1a21a47": "    Fix module uniqueness check for modules as lambdas"
            },
            "Commit&issueIDs": {
                "0737c1b9e": [
                    "#339"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/339",
                "https://github.com/bootique/bootique/commit/0737c1b9e"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/ModuleCrateTest.java",
            "test_name": "methodRef",
            "FQS": "io.bootique.ModuleCrateTest.methodRef()",
            "start_line": "74",
            "blame_result": "0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 75)         ModuleCrate moduleId1 = ModuleCrate.of(ModuleCrateTest::configure).build();\n0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 76)         ModuleCrate moduleId2 = ModuleCrate.of(ModuleCrateTest::configure).build();\n0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 77)         ModuleCrate moduleId3 = ModuleCrate.of(ModuleCrateTest::configure2).build();\nba1a21a47 bootique/src/test/java/io/bootique/BQModuleIdTest.java  (Nikita Timofeev 2020-05-25 16:12:35 +0300 78) \nba1a21a47 bootique/src/test/java/io/bootique/BQModuleIdTest.java  (Nikita Timofeev 2020-05-25 16:12:35 +0300 79)         assertEquals(moduleId1, moduleId1);\n",
            "commit_hashes": {
                "0737c1b9e": "    Unclutter BQModuleProvider #339",
                "ba1a21a47": "    Fix module uniqueness check for modules as lambdas"
            },
            "Commit&issueIDs": {
                "0737c1b9e": [
                    "#339"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/339",
                "https://github.com/bootique/bootique/commit/0737c1b9e"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/ModuleCrateTest.java",
            "test_name": "lambdaFactory",
            "FQS": "io.bootique.ModuleCrateTest.lambdaFactory()",
            "start_line": "109",
            "blame_result": "0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 110)         ModuleCrate moduleId1 = ModuleCrate.of(createModule(\"lambda factory\")).build();\n0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 111)         ModuleCrate moduleId2 = ModuleCrate.of(createModule(\"lambda factory 2\")).build();\nba1a21a47 bootique/src/test/java/io/bootique/BQModuleIdTest.java  (Nikita Timofeev 2020-05-25 16:12:35 +0300 112) \nba1a21a47 bootique/src/test/java/io/bootique/BQModuleIdTest.java  (Nikita Timofeev 2020-05-25 16:12:35 +0300 113)         assertEquals(moduleId1, moduleId1);\nba1a21a47 bootique/src/test/java/io/bootique/BQModuleIdTest.java  (Nikita Timofeev 2020-05-25 16:12:35 +0300 114)         assertEquals(moduleId1.hashCode(), moduleId1.hashCode());\n",
            "commit_hashes": {
                "0737c1b9e": "    Unclutter BQModuleProvider #339",
                "ba1a21a47": "    Fix module uniqueness check for modules as lambdas"
            },
            "Commit&issueIDs": {
                "0737c1b9e": [
                    "#339"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/339",
                "https://github.com/bootique/bootique/commit/0737c1b9e"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/ModuleCrateTest.java",
            "test_name": "mix",
            "FQS": "io.bootique.ModuleCrateTest.mix()",
            "start_line": "124",
            "blame_result": "0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 125)         ModuleCrate moduleId1 = ModuleCrate.of(new MyModule()).build();\n0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 126)         ModuleCrate moduleId2 = ModuleCrate.of(ModuleCrateTest::configure).build();\n0737c1b9e bootique/src/test/java/io/bootique/ModuleCrateTest.java (Andrus Adamchik 2023-11-26 10:02:20 -0500 127)         ModuleCrate moduleId3 = ModuleCrate.of(createModule(\"lambda factory\")).build();\nba1a21a47 bootique/src/test/java/io/bootique/BQModuleIdTest.java  (Nikita Timofeev 2020-05-25 16:12:35 +0300 128) \nba1a21a47 bootique/src/test/java/io/bootique/BQModuleIdTest.java  (Nikita Timofeev 2020-05-25 16:12:35 +0300 129)         assertEquals(moduleId1, moduleId1);\n",
            "commit_hashes": {
                "0737c1b9e": "    Unclutter BQModuleProvider #339",
                "ba1a21a47": "    Fix module uniqueness check for modules as lambdas"
            },
            "Commit&issueIDs": {
                "0737c1b9e": [
                    "#339"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/339",
                "https://github.com/bootique/bootique/commit/0737c1b9e"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/di/KeyTest.java",
            "test_name": "equals",
            "FQS": "io.bootique.di.KeyTest.equals()",
            "start_line": "48",
            "blame_result": "01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 49)         Key<String> key1 = Key.get(String.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 50)         Key<String> key2 = Key.get(String.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 51)         Key<Integer> key3 = Key.get(Integer.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 52)         Key<Integer> key4 = Key.get(Integer.class, \"a\");\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 53)         Key<Integer> key5 = Key.get(Integer.class, \"a\");\n",
            "commit_hashes": {
                "01b5873cd": "    BQModuleProvider-free Bootique bootstrap #344"
            },
            "Commit&issueIDs": {
                "01b5873cd": [
                    "#344"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/344",
                "https://github.com/bootique/bootique/commit/01b5873cd"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/di/KeyTest.java",
            "test_name": "listKeysEquals",
            "FQS": "io.bootique.di.KeyTest.listKeysEquals()",
            "start_line": "86",
            "blame_result": "01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 87)         Key<List<Integer>> key1 = Key.getListOf(Integer.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 88)         Key<List<String>> key2 = Key.getListOf(String.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 89)         Key<List<Integer>> key3 = Key.getListOf(Integer.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 90)         Key<List<String>> key4 = Key.getListOf(String.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 91) \n",
            "commit_hashes": {
                "01b5873cd": "    BQModuleProvider-free Bootique bootstrap #344"
            },
            "Commit&issueIDs": {
                "01b5873cd": [
                    "#344"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/344",
                "https://github.com/bootique/bootique/commit/01b5873cd"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/di/KeyTest.java",
            "test_name": "qualifiedKeysEquals",
            "FQS": "io.bootique.di.KeyTest.qualifiedKeysEquals()",
            "start_line": "115",
            "blame_result": "01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 116)         Key<Integer> key1 = Key.get(Integer.class, CustomQualifier.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 117)         Key<Integer> key2 = Key.get(Integer.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 118)         Key<Integer> key3 = Key.get(Integer.class, CustomQualifier.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 119)         Key<String> key4 = Key.get(String.class, CustomQualifier.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 120) \n",
            "commit_hashes": {
                "01b5873cd": "    BQModuleProvider-free Bootique bootstrap #344"
            },
            "Commit&issueIDs": {
                "01b5873cd": [
                    "#344"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/344",
                "https://github.com/bootique/bootique/commit/01b5873cd"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/di/KeyTest.java",
            "test_name": "hashCodeTest",
            "FQS": "io.bootique.di.KeyTest.hashCodeTest()",
            "start_line": "137",
            "blame_result": "01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 138)         Key<String> key1 = Key.get(String.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 139)         Key<String> key2 = Key.get(String.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 140)         Key<Integer> key3 = Key.get(Integer.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 141)         Key<Integer> key4 = Key.get(Integer.class, \"a\");\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 142)         Key<Integer> key5 = Key.get(Integer.class, \"a\");\n",
            "commit_hashes": {
                "01b5873cd": "    BQModuleProvider-free Bootique bootstrap #344"
            },
            "Commit&issueIDs": {
                "01b5873cd": [
                    "#344"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/344",
                "https://github.com/bootique/bootique/commit/01b5873cd"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/di/KeyTest.java",
            "test_name": "qualifiedHashCode",
            "FQS": "io.bootique.di.KeyTest.qualifiedHashCode()",
            "start_line": "159",
            "blame_result": "01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 160)         Key<Integer> key1 = Key.get(Integer.class, CustomQualifier.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 161)         Key<Integer> key2 = Key.get(Integer.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 162)         Key<Integer> key3 = Key.get(Integer.class, CustomQualifier.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 163)         Key<String> key4 = Key.get(String.class, CustomQualifier.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 164) \n",
            "commit_hashes": {
                "01b5873cd": "    BQModuleProvider-free Bootique bootstrap #344"
            },
            "Commit&issueIDs": {
                "01b5873cd": [
                    "#344"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/344",
                "https://github.com/bootique/bootique/commit/01b5873cd"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/di/TypeLiteralTest.java",
            "test_name": "normalize",
            "FQS": "io.bootique.di.TypeLiteralTest.normalize()",
            "start_line": "180",
            "blame_result": "01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 181)         TypeLiteral<List<Integer>> type1 = TypeLiteral.listOf(Integer.class);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 182)         TypeLiteral<List<Integer>> type2 = new TypeLiteral<List<Integer>>() {\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 183)         };\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 184)         TypeLiteral<List<Integer>> type3 = TypeLiteral.normalize(type1);\n01b5873cd (Andrus Adamchik 2023-12-02 08:33:50 -0500 185)         TypeLiteral<List<Integer>> type4 = TypeLiteral.normalize(type2);\n",
            "commit_hashes": {
                "01b5873cd": "    BQModuleProvider-free Bootique bootstrap #344"
            },
            "Commit&issueIDs": {
                "01b5873cd": [
                    "#344"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/344",
                "https://github.com/bootique/bootique/commit/01b5873cd"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/value/BytesTest.java",
            "test_name": "hashCodeTest",
            "FQS": "io.bootique.value.BytesTest.hashCodeTest()",
            "start_line": "129",
            "blame_result": "889ab6b59 (kkomyak 2018-05-28 15:28:05 +0300 130)         Bytes b1 = new Bytes(\"5kb\");\n889ab6b59 (kkomyak 2018-05-28 15:28:05 +0300 131)         Bytes b2 = new Bytes(\"5368709120b\");\n889ab6b59 (kkomyak 2018-05-28 15:28:05 +0300 132)         Bytes b3 = new Bytes(\"5gb\");\n889ab6b59 (kkomyak 2018-05-28 15:28:05 +0300 133)         Bytes b4 = new Bytes(\"5120 b\");\n889ab6b59 (kkomyak 2018-05-28 15:28:05 +0300 134) \n",
            "commit_hashes": {
                "889ab6b59": "    #224"
            },
            "Commit&issueIDs": {
                "889ab6b59": [
                    "#224"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/224",
                "https://github.com/bootique/bootique/commit/889ab6b59"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/value/DurationTest.java",
            "test_name": "hashCodeTest",
            "FQS": "io.bootique.value.DurationTest.hashCodeTest()",
            "start_line": "140",
            "blame_result": "4251ea7ed (Andrus Adamchik 2018-04-14 16:11:51 +0300 141)         Duration d1 = new Duration(\"1s\");\n4251ea7ed (Andrus Adamchik 2018-04-14 16:11:51 +0300 142)         Duration d2 = new Duration(\"2s\");\n4251ea7ed (Andrus Adamchik 2018-04-14 16:11:51 +0300 143)         Duration d3 = new Duration(\"1 sec\");\n4251ea7ed (Andrus Adamchik 2018-04-14 16:11:51 +0300 144)         Duration d4 = new Duration(\"1000ms\");\n4251ea7ed (Andrus Adamchik 2018-04-14 16:11:51 +0300 145) \n",
            "commit_hashes": {
                "4251ea7ed": "     Duration value object #219"
            },
            "Commit&issueIDs": {
                "4251ea7ed": [
                    "#219"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/219",
                "https://github.com/bootique/bootique/commit/4251ea7ed"
            ]
        },
        {
            "poj_link": "https://github.com/bootique/bootique/",
            "file_path": "bootique/bootique/bootique/src/test/java/io/bootique/value/PercentTest.java",
            "test_name": "hashCodeTest",
            "FQS": "io.bootique.value.PercentTest.hashCodeTest()",
            "start_line": "45",
            "blame_result": "e4508daf4 (Andrus Adamchik 2018-04-11 17:15:38 +0300 46)         Percent p1 = new Percent(1);\ne4508daf4 (Andrus Adamchik 2018-04-11 17:15:38 +0300 47)         Percent p2 = new Percent(2);\ne4508daf4 (Andrus Adamchik 2018-04-11 17:15:38 +0300 48)         Percent p3 = new Percent(1);\ne4508daf4 (Andrus Adamchik 2018-04-11 17:15:38 +0300 49)         Percent p4 = new Percent(1.000);\ne4508daf4 (Andrus Adamchik 2018-04-11 17:15:38 +0300 50)         Percent p5 = new Percent(1.00000001);\n",
            "commit_hashes": {
                "e4508daf4": "     Percent value object #218"
            },
            "Commit&issueIDs": {
                "e4508daf4": [
                    "#218"
                ]
            },
            "links": [
                "https://github.com/bootique/bootique/issues/218",
                "https://github.com/bootique/bootique/commit/e4508daf4"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree/",
            "file_path": "davidmoten/rtree/src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java",
            "test_name": "testIntersectsPoint",
            "FQS": "com.github.davidmoten.rtree.geometry.CircleTest.testIntersectsPoint()",
            "start_line": "118",
            "blame_result": "7b255027 (Dave Moten 2015-11-06 11:20:36 +1100 119)         assertTrue(circle(0, 0, 1).intersects(Geometries.point(0, 0)));\ne2da9105 (Dave Moten 2014-11-11 15:50:16 +1100 120)     }\n7b255027 (Dave Moten 2015-11-06 11:20:36 +1100 121) \ne2da9105 (Dave Moten 2014-11-11 15:50:16 +1100 122)     @Test\ne2da9105 (Dave Moten 2014-11-11 15:50:16 +1100 123)     public void testDoesNotIntersectPoint() {\n",
            "commit_hashes": {
                "7b255027": "    #31 add Intersects.circleIntersectsCircle",
                "e2da9105": "    add unit tests for Circle"
            },
            "Commit&issueIDs": {
                "7b255027": [
                    "#31"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree/issues/31",
                "https://github.com/davidmoten/rtree/commit/7b255027"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree/",
            "file_path": "davidmoten/rtree/src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java",
            "test_name": "testDoesNotIntersectPoint",
            "FQS": "com.github.davidmoten.rtree.geometry.CircleTest.testDoesNotIntersectPoint()",
            "start_line": "123",
            "blame_result": "7b255027 (Dave Moten 2015-11-06 11:20:36 +1100 124)         assertFalse(circle(0, 0, 1).intersects(Geometries.point(100, 100)));\ne2da9105 (Dave Moten 2014-11-11 15:50:16 +1100 125)     }\n2beac3d5 (Dave Moten 2014-08-31 07:09:46 +1000 126) }\n",
            "commit_hashes": {
                "7b255027": "    #31 add Intersects.circleIntersectsCircle",
                "e2da9105": "    add unit tests for Circle",
                "2beac3d5": "    add test for Circle"
            },
            "Commit&issueIDs": {
                "7b255027": [
                    "#31"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree/issues/31",
                "https://github.com/davidmoten/rtree/commit/7b255027"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree/",
            "file_path": "davidmoten/rtree/src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java",
            "test_name": "testLineDoesIntersectPoint",
            "FQS": "com.github.davidmoten.rtree.geometry.LineTest.testLineDoesIntersectPoint()",
            "start_line": "193",
            "blame_result": "849b4c4f (Dave Moten  2016-03-05 13:12:42 +1100 194)         assertTrue(Geometries.line(1.5, 1.5, 2.5, 2.5).intersects(point(2, 2)));\n8786a081 (David Moten 2019-06-26 12:24:22 +1000 195)     }\n8786a081 (David Moten 2019-06-26 12:24:22 +1000 196)     \n8786a081 (David Moten 2019-06-26 12:24:22 +1000 197)     @Test\n8786a081 (David Moten 2019-06-26 12:24:22 +1000 198)     public void testLineDoubleIntersectsWithHorizontalLine() {\n",
            "commit_hashes": {
                "849b4c4f": "    fix LineTest",
                "8786a081": "    fix Line.lineIntersectsRect #91"
            },
            "Commit&issueIDs": {
                "8786a081": [
                    "#91"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree/issues/91",
                "https://github.com/davidmoten/rtree/commit/8786a081"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/rtree/",
            "file_path": "davidmoten/rtree/src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java",
            "test_name": "testMbr",
            "FQS": "com.github.davidmoten.rtree.geometry.PointTest.testMbr()",
            "start_line": "35",
            "blame_result": "75da4898 (David Moten 2016-07-31 07:34:21 +1000 36) \t\tPoint p = Geometries.point(1, 2);\n75da4898 (David Moten 2016-07-31 07:34:21 +1000 37) \t\tPoint p2 = Geometries.point(1, 2);\n75da4898 (David Moten 2016-07-31 07:34:21 +1000 38) \t\tassertEquals(p, p2);\n75da4898 (David Moten 2016-07-31 07:34:21 +1000 39) \t}\ne2e0e8d4 (Dave Moten  2014-08-31 10:50:44 +1000 40) \n",
            "commit_hashes": {
                "75da4898": "    fix #60 Point.contains() not working",
                "e2e0e8d4": "    add tests"
            },
            "Commit&issueIDs": {
                "75da4898": [
                    "#60"
                ]
            },
            "links": [
                "https://github.com/davidmoten/rtree/issues/60",
                "https://github.com/davidmoten/rtree/commit/75da4898"
            ]
        },
        {
            "poj_link": "https://github.com/tensorflow/java-ndarray/",
            "file_path": "tensorflow/java-ndarray/ndarray/src/test/java/org/tensorflow/ndarray/impl/sparse/StringSparseNdArrayTest.java",
            "test_name": "testCopyFromBuffer",
            "FQS": "org.tensorflow.ndarray.impl.sparse.StringSparseNdArrayTest.testCopyFromBuffer()",
            "start_line": "80",
            "blame_result": "887fc19a (Jim Clarke 2021-08-04 13:15:40 -0400 81) \n887fc19a (Jim Clarke 2021-08-04 13:15:40 -0400 82)     DataBuffer<String> dataBuffer = DataBuffers.ofObjects(denseArray);\n887fc19a (Jim Clarke 2021-08-04 13:15:40 -0400 83)     // use a zero buffer\n887fc19a (Jim Clarke 2021-08-04 13:15:40 -0400 84)     SparseNdArray<String, NdArray<String>> instance =\n887fc19a (Jim Clarke 2021-08-04 13:15:40 -0400 85)         SparseNdArray.create(String.class, DimensionalSpace.create(shape));\n",
            "commit_hashes": {
                "887fc19a": "    Sparse tensor (#3)"
            },
            "Commit&issueIDs": {
                "887fc19a": [
                    "3"
                ]
            },
            "links": [
                "https://github.com/tensorflow/java-ndarray/issues/3",
                "https://github.com/tensorflow/java-ndarray/commit/887fc19a"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "copyConstructor_hasSameValues",
            "FQS": "com.restfb.json.JsonArray_Test.copyConstructor_hasSameValues()",
            "start_line": "53",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 54)     array.add(23);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 55)     JsonArray copy = new JsonArray(array);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 56) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 57)     assertEquals(array.values(), copy.values());\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 58)   }\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "unmodifiableArray_hasSameValues",
            "FQS": "com.restfb.json.JsonArray_Test.unmodifiableArray_hasSameValues()",
            "start_line": "69",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 70)     array.add(23);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 71)     JsonArray unmodifiableArray = JsonArray.unmodifiableArray(array);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 72) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 73)     assertEquals(array.values(), unmodifiableArray.values());\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 74)   }\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "unmodifiableArray_reflectsChanges",
            "FQS": "com.restfb.json.JsonArray_Test.unmodifiableArray_reflectsChanges()",
            "start_line": "77",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 78)     JsonArray unmodifiableArray = JsonArray.unmodifiableArray(array);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 79)     array.add(23);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 80) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 81)     assertEquals(array.values(), unmodifiableArray.values());\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 82)   }\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "values_reflectsChanges",
            "FQS": "com.restfb.json.JsonArray_Test.values_reflectsChanges()",
            "start_line": "165",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 166)     List<JsonValue> values = array.values();\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 167) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 168)     array.add(true);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 169) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 170)     assertEquals(array.values(), values);\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "set_int_enablesChaining",
            "FQS": "com.restfb.json.JsonArray_Test.set_int_enablesChaining()",
            "start_line": "357",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 358)     array.add(false);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 359) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 360)     assertSame(array, array.set(0, 23));\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 361)   }\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 362) \n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "set_long_enablesChaining",
            "FQS": "com.restfb.json.JsonArray_Test.set_long_enablesChaining()",
            "start_line": "373",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 374)     array.add(false);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 375) \ncc0a142fe src/test/java/com/restfb/json/JsonArray_Test.java    (Norbert Bartels 2019-10-12 00:00:33 +0200 376)     assertSame(array, array.set(0, 23L));\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 377)   }\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 378) \n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json",
                "cc0a142fe": "    Issue #940: cleanup"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "set_float_enablesChaining",
            "FQS": "com.restfb.json.JsonArray_Test.set_float_enablesChaining()",
            "start_line": "389",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 390)     array.add(false);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 391) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 392)     assertSame(array, array.set(0, 3.14f));\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 393)   }\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 394) \n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "set_double_enablesChaining",
            "FQS": "com.restfb.json.JsonArray_Test.set_double_enablesChaining()",
            "start_line": "405",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 406)     array.add(false);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 407) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 408)     assertSame(array, array.set(0, 3.14d));\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 409)   }\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 410) \n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "set_boolean_enablesChaining",
            "FQS": "com.restfb.json.JsonArray_Test.set_boolean_enablesChaining()",
            "start_line": "421",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 422)     array.add(false);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 423) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 424)     assertSame(array, array.set(0, true));\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 425)   }\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 426) \n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/tensorflow/java-ndarray/",
            "file_path": "tensorflow/java-ndarray/ndarray/src/test/java/org/tensorflow/ndarray/impl/sparse/StringSparseNdArrayTest.java",
            "test_name": "testWriteDefaultValue",
            "FQS": "org.tensorflow.ndarray.impl.sparse.StringSparseNdArrayTest.testWriteDefaultValue()",
            "start_line": "95",
            "blame_result": "887fc19a (Jim Clarke 2021-08-04 13:15:40 -0400  96)     String defaultValue = \"default\";\n887fc19a (Jim Clarke 2021-08-04 13:15:40 -0400  97)     String[] denseArrayDefaultValue = new String[denseArray.length];\n887fc19a (Jim Clarke 2021-08-04 13:15:40 -0400  98)     for (int i = 0; i < denseArrayDefaultValue.length; i++) {\n887fc19a (Jim Clarke 2021-08-04 13:15:40 -0400  99)       denseArrayDefaultValue[i] = denseArray[i] == null ? defaultValue : denseArray[i];\n887fc19a (Jim Clarke 2021-08-04 13:15:40 -0400 100)     }\n",
            "commit_hashes": {
                "887fc19a": "    Sparse tensor (#3)"
            },
            "Commit&issueIDs": {
                "887fc19a": [
                    "3"
                ]
            },
            "links": [
                "https://github.com/tensorflow/java-ndarray/issues/3",
                "https://github.com/tensorflow/java-ndarray/commit/887fc19a"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "set_string_enablesChaining",
            "FQS": "com.restfb.json.JsonArray_Test.set_string_enablesChaining()",
            "start_line": "437",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 438)     array.add(false);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 439) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 440)     assertSame(array, array.set(0, \"foo\"));\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 441)   }\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 442) \n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "set_json_enablesChaining",
            "FQS": "com.restfb.json.JsonArray_Test.set_json_enablesChaining()",
            "start_line": "487",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 488)     array.add(false);\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 489) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 490)     assertSame(array, array.set(0, Json.NULL));\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 491)   }\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 492) \n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonArray_Test.java",
            "test_name": "hashCode_differsForDifferentArrays",
            "FQS": "com.restfb.json.JsonArray_Test.hashCode_differsForDifferentArrays()",
            "start_line": "614",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 615)     assertFalse(array().hashCode() == array(\"bar\").hashCode());\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 616)     assertFalse(array(\"foo\").hashCode() == array(\"bar\").hashCode());\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 617)   }\ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 618) \ncb64a723b source/test/java/com/restfb/json/JsonArray_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 619)   @Test\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonLiteral_Test.java",
            "test_name": "sameAfterDeserialization",
            "FQS": "com.restfb.json.JsonLiteral_Test.sameAfterDeserialization()",
            "start_line": "164",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonLiteral_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 165)     JsonArray array = new JsonArray().add(NULL).add(NULL);\ncb64a723b source/test/java/com/restfb/json/JsonLiteral_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 166) \ncb64a723b source/test/java/com/restfb/json/JsonLiteral_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 167)     JsonArray deserialized = serializeAndDeserialize(array);\ncb64a723b source/test/java/com/restfb/json/JsonLiteral_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 168) \ncb64a723b source/test/java/com/restfb/json/JsonLiteral_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 169)     assertNotSame(NULL, deserialized.get(0));\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonNumber_Test.java",
            "test_name": "hashCode_differsForDifferentStrings",
            "FQS": "com.restfb.json.JsonNumber_Test.hashCode_differsForDifferentStrings()",
            "start_line": "164",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonNumber_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 165)     assertFalse(new JsonNumber(\"23\").hashCode() == new JsonNumber(\"42\").hashCode());\ncb64a723b source/test/java/com/restfb/json/JsonNumber_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 166)   }\ncb64a723b source/test/java/com/restfb/json/JsonNumber_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 167) \ncb64a723b source/test/java/com/restfb/json/JsonNumber_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 168)   @Test\ncc0a142fe src/test/java/com/restfb/json/JsonNumber_Test.java    (Norbert Bartels 2019-10-12 00:00:33 +0200 169)   void canBeSerializedAndDeserialized() throws Exception {\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json",
                "cc0a142fe": "    Issue #940: cleanup"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonObject_Test.java",
            "test_name": "copyConstructor_hasSameValues",
            "FQS": "com.restfb.json.JsonObject_Test.copyConstructor_hasSameValues()",
            "start_line": "57",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 58)     object.add(\"foo\", 23);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 59)     JsonObject copy = new JsonObject(object);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 60) \ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 61)     assertEquals(object.names(), copy.names());\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 62)     assertSame(object.get(\"foo\"), copy.get(\"foo\"));\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonObject_Test.java",
            "test_name": "unmodifiableObject_hasSameValues",
            "FQS": "com.restfb.json.JsonObject_Test.unmodifiableObject_hasSameValues()",
            "start_line": "74",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 75)     object.add(\"foo\", 23);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 76)     JsonObject unmodifiableObject = JsonObject.unmodifiableObject(object);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 77) \ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 78)     assertEquals(object.names(), unmodifiableObject.names());\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 79)     assertSame(object.get(\"foo\"), unmodifiableObject.get(\"foo\"));\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonObject_Test.java",
            "test_name": "unmodifiableObject_reflectsChanges",
            "FQS": "com.restfb.json.JsonObject_Test.unmodifiableObject_reflectsChanges()",
            "start_line": "83",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 84)     JsonObject unmodifiableObject = JsonObject.unmodifiableObject(object);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 85)     object.add(\"foo\", 23);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 86) \ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 87)     assertEquals(object.names(), unmodifiableObject.names());\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 88)     assertSame(object.get(\"foo\"), unmodifiableObject.get(\"foo\"));\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonObject_Test.java",
            "test_name": "merge_appendsMembers",
            "FQS": "com.restfb.json.JsonObject_Test.merge_appendsMembers()",
            "start_line": "707",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 708)     object.add(\"a\", 1).add(\"b\", 1);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 709)     object.merge(Json.object().add(\"c\", 2).add(\"d\", 2));\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 710) \ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 711)     assertEquals(Json.object().add(\"a\", 1).add(\"b\", 1).add(\"c\", 2).add(\"d\", 2), object);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 712)   }\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonObject_Test.java",
            "test_name": "merge_replacesMembers",
            "FQS": "com.restfb.json.JsonObject_Test.merge_replacesMembers()",
            "start_line": "715",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 716)     object.add(\"a\", 1).add(\"b\", 1).add(\"c\", 1);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 717)     object.merge(Json.object().add(\"b\", 2).add(\"d\", 2));\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 718) \ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 719)     assertEquals(Json.object().add(\"a\", 1).add(\"b\", 2).add(\"c\", 1).add(\"d\", 2), object);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 720)   }\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonObject_Test.java",
            "test_name": "hashCode_differsForDifferentObjects",
            "FQS": "com.restfb.json.JsonObject_Test.hashCode_differsForDifferentObjects()",
            "start_line": "832",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 833)     assertFalse(object().hashCode() == object(\"a\", \"1\").hashCode());\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 834)     assertFalse(object(\"a\", \"1\").hashCode() == object(\"a\", \"2\").hashCode());\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 835)     assertFalse(object(\"a\", \"1\").hashCode() == object(\"b\", \"1\").hashCode());\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 836)   }\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 837) \n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonObject_Test.java",
            "test_name": "member_hashCode_equalsForEqualObjects",
            "FQS": "com.restfb.json.JsonObject_Test.member_hashCode_equalsForEqualObjects()",
            "start_line": "1027",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 1028)     Member member = new Member(\"a\", Json.TRUE);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 1029) \ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 1030)     assertTrue(member.hashCode() == new Member(\"a\", Json.TRUE).hashCode());\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 1031)   }\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 1032) \n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonObject_Test.java",
            "test_name": "member_hashCode_differsForDifferingobjects",
            "FQS": "com.restfb.json.JsonObject_Test.member_hashCode_differsForDifferingobjects()",
            "start_line": "1034",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 1035)     Member member = new Member(\"a\", Json.TRUE);\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 1036) \ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 1037)     assertFalse(member.hashCode() == new Member(\"b\", Json.TRUE).hashCode());\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 1038)     assertFalse(member.hashCode() == new Member(\"a\", Json.FALSE).hashCode());\ncb64a723b source/test/java/com/restfb/json/JsonObject_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 1039)   }\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/JsonString_Test.java",
            "test_name": "hashCode_differsForDifferentStrings",
            "FQS": "com.restfb.json.JsonString_Test.hashCode_differsForDifferentStrings()",
            "start_line": "107",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/JsonString_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 108)     assertFalse(new JsonString(\"\").hashCode() == new JsonString(\"foo\").hashCode());\ncb64a723b source/test/java/com/restfb/json/JsonString_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 109)     assertFalse(new JsonString(\"foo\").hashCode() == new JsonString(\"bar\").hashCode());\ncb64a723b source/test/java/com/restfb/json/JsonString_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 110)   }\ncb64a723b source/test/java/com/restfb/json/JsonString_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 111) \ncb64a723b source/test/java/com/restfb/json/JsonString_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 112)   @Test\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/Json_Test.java",
            "test_name": "parse_string",
            "FQS": "com.restfb.json.Json_Test.parse_string()",
            "start_line": "206",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/Json_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 207)     assertEquals(Json.value(23), Json.parse(\"23\"));\ncb64a723b source/test/java/com/restfb/json/Json_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 208)   }\ncb64a723b source/test/java/com/restfb/json/Json_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 209) \ncb64a723b source/test/java/com/restfb/json/Json_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 210)   @Test\ncc0a142fe src/test/java/com/restfb/json/Json_Test.java    (Norbert Bartels 2019-10-12 00:00:33 +0200 211)   void parse_string_failsWithNull() {\n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json",
                "cc0a142fe": "    Issue #940: cleanup"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/json/Json_Test.java",
            "test_name": "parse_reader",
            "FQS": "com.restfb.json.Json_Test.parse_reader()",
            "start_line": "216",
            "blame_result": "cb64a723b source/test/java/com/restfb/json/Json_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 217)     Reader reader = new StringReader(\"23\");\ncb64a723b source/test/java/com/restfb/json/Json_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 218) \ncb64a723b source/test/java/com/restfb/json/Json_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 219)     assertEquals(Json.value(23), Json.parse(reader));\ncb64a723b source/test/java/com/restfb/json/Json_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 220)   }\ncb64a723b source/test/java/com/restfb/json/Json_Test.java (Norbert Bartels 2015-09-26 19:55:25 +0200 221) \n",
            "commit_hashes": {
                "cb64a723b": "    Issue #321 - json parser replaced with minimal json"
            },
            "Commit&issueIDs": {
                "cb64a723b": [
                    "#321"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/321",
                "https://github.com/restfb/restfb/commit/cb64a723b"
            ]
        },
        {
            "poj_link": "https://github.com/restfb/restfb/",
            "file_path": "restfb/restfb/src/test/java/com/restfb/types/SendApiTest.java",
            "test_name": "messageWithMultipleQuickRepliesAddedAtOnce",
            "FQS": "com.restfb.types.SendApiTest.messageWithMultipleQuickRepliesAddedAtOnce()",
            "start_line": "579",
            "blame_result": "1c8e05541 src/test/java/com/restfb/types/SendApiTest.java    (Norbert Bartels 2018-06-01 21:25:41 +0200 580)     List<QuickReply> quickReplyList = new ArrayList<>();\nded972997 source/test/java/com/restfb/types/SendApiTest.java (Norbert Bartels 2016-09-30 21:12:50 +0200 581)     quickReplyList.add(new QuickReply(\"title1\", \"payload 1\"));\nded972997 source/test/java/com/restfb/types/SendApiTest.java (Norbert Bartels 2016-09-30 21:12:50 +0200 582)     quickReplyList.add(new QuickReply(\"title2\", \"payload 2\"));\n0eaa9a158 source/test/java/com/restfb/types/SendApiTest.java (Alex Laird      2016-07-21 11:25:33 -0700 583)     Message message = new Message(\"message text\");\nded972997 source/test/java/com/restfb/types/SendApiTest.java (Norbert Bartels 2016-09-30 21:12:50 +0200 584)     message.addQuickReplies(quickReplyList);\n",
            "commit_hashes": {
                "1c8e05541": "    NoIssue: java 7 diamond operators used now",
                "ded972997": "    Issue #581 - add multiple QuickReplies at once",
                "0eaa9a158": "    Issue #525 - Adding quick replies."
            },
            "Commit&issueIDs": {
                "ded972997": [
                    "#581"
                ],
                "0eaa9a158": [
                    "#525"
                ]
            },
            "links": [
                "https://github.com/restfb/restfb/issues/581",
                "https://github.com/restfb/restfb/commit/ded972997",
                "https://github.com/restfb/restfb/issues/525",
                "https://github.com/restfb/restfb/commit/0eaa9a158"
            ]
        },
        {
            "poj_link": "https://github.com/kiegroup/jbpm/",
            "file_path": "kiegroup/jbpm/jbpm-document/src/test/java/org/jbpm/document/marshalling/DocumentsMarshallingStrategyTest.java",
            "test_name": "testSingleDocMarshallUnmarshall",
            "FQS": "org.jbpm.document.marshalling.DocumentsMarshallingStrategyTest.testSingleDocMarshallUnmarshall()",
            "start_line": "67",
            "blame_result": "316b8f10eb (Mari\u00e1n Macik 2018-12-06 09:51:20 +0100 68) \t\tDocumentMarshallingStrategy docMarshallingStrategy = createSingleDocMarshallingStrategy();\n10afa92ecd (Duncan Doyle 2017-10-19 10:17:26 +0200 69) \t\tDocument document = getDocument(\"docOne\");\n10afa92ecd (Duncan Doyle 2017-10-19 10:17:26 +0200 70) \t\tbyte[] marshalledDocument = docMarshallingStrategy.marshal(null, null, document);\n10afa92ecd (Duncan Doyle 2017-10-19 10:17:26 +0200 71) \t\tDocument unmarshalledDocument = (Document) docMarshallingStrategy.unmarshal(null, null, marshalledDocument, this.getClass().getClassLoader());\n10afa92ecd (Duncan Doyle 2017-10-19 10:17:26 +0200 72) \t\n",
            "commit_hashes": {
                "316b8f10eb": "    Fix DocumentStorageServiceImplTest (#1390)",
                "10afa92ecd": "    JBPM-6502 - Support collection of documents. (#1034)"
            },
            "Commit&issueIDs": {
                "316b8f10eb": [
                    "(#1390)"
                ],
                "10afa92ecd": [
                    "(#1034)"
                ]
            },
            "links": [
                "https://github.com/kiegroup/jbpm/issues/1390",
                "https://github.com/kiegroup/jbpm/commit/316b8f10eb",
                "https://github.com/kiegroup/jbpm/issues/1034",
                "https://github.com/kiegroup/jbpm/commit/10afa92ecd"
            ]
        },
        {
            "poj_link": "https://github.com/kiegroup/jbpm/",
            "file_path": "kiegroup/jbpm/jbpm-document/src/test/java/org/jbpm/document/service/DocumentStorageServiceImplTest.java",
            "test_name": "testSaveAndDeleteDocument",
            "FQS": "org.jbpm.document.service.DocumentStorageServiceImplTest.testSaveAndDeleteDocument()",
            "start_line": "100",
            "blame_result": "b8fed668cd (Maciej Swiderski 2016-05-27 08:55:52 +0200 101)         byte[] content = \"another document content\".getBytes();\nb8fed668cd (Maciej Swiderski 2016-05-27 08:55:52 +0200 102)         Document document = documentStorageService.buildDocument(\"mydoc\", content.length, new Date(), new HashMap<String, String>());\nb8fed668cd (Maciej Swiderski 2016-05-27 08:55:52 +0200 103)         assertNotNull(document.getIdentifier());\nb8fed668cd (Maciej Swiderski 2016-05-27 08:55:52 +0200 104)         \nb8fed668cd (Maciej Swiderski 2016-05-27 08:55:52 +0200 105)         documentStorageService.saveDocument(document, content);\n",
            "commit_hashes": {
                "b8fed668cd": "    JBPM-5111 - minor enhancements for jbpm document to allow pluggable DocumentStorageService and smooth integration with kie server (#474)"
            },
            "Commit&issueIDs": {
                "b8fed668cd": [
                    "(#474)"
                ]
            },
            "links": [
                "https://github.com/kiegroup/jbpm/issues/474",
                "https://github.com/kiegroup/jbpm/commit/b8fed668cd"
            ]
        },
        {
            "poj_link": "https://github.com/kiegroup/jbpm/",
            "file_path": "kiegroup/jbpm/jbpm-document/src/test/java/org/jbpm/document/service/DocumentStorageServiceImplTest.java",
            "test_name": "testSaveAndDeleteByIdDocument",
            "FQS": "org.jbpm.document.service.DocumentStorageServiceImplTest.testSaveAndDeleteByIdDocument()",
            "start_line": "121",
            "blame_result": "b8fed668cd (Maciej Swiderski 2016-05-27 08:55:52 +0200 122)         byte[] content = \"yet another document content\".getBytes();\nb8fed668cd (Maciej Swiderski 2016-05-27 08:55:52 +0200 123)         Document document = documentStorageService.buildDocument(\"mydoc\", content.length, new Date(), new HashMap<String, String>());\nb8fed668cd (Maciej Swiderski 2016-05-27 08:55:52 +0200 124)         assertNotNull(document.getIdentifier());\nb8fed668cd (Maciej Swiderski 2016-05-27 08:55:52 +0200 125)         \nb8fed668cd (Maciej Swiderski 2016-05-27 08:55:52 +0200 126)         documentStorageService.saveDocument(document, content);\n",
            "commit_hashes": {
                "b8fed668cd": "    JBPM-5111 - minor enhancements for jbpm document to allow pluggable DocumentStorageService and smooth integration with kie server (#474)"
            },
            "Commit&issueIDs": {
                "b8fed668cd": [
                    "(#474)"
                ]
            },
            "links": [
                "https://github.com/kiegroup/jbpm/issues/474",
                "https://github.com/kiegroup/jbpm/commit/b8fed668cd"
            ]
        },
        {
            "poj_link": "https://github.com/davidmoten/geo/",
            "file_path": "davidmoten/geo/geo/src/test/java/com/github/davidmoten/geo/LatLongTest.java",
            "test_name": "testHashCode",
            "FQS": "com.github.davidmoten.geo.LatLongTest.testHashCode()",
            "start_line": "22",
            "blame_result": "95dd6f27 (Kevin Binswanger 2024-04-16 03:34:24 -0500 23)         float lat = 20.05f;\n95dd6f27 (Kevin Binswanger 2024-04-16 03:34:24 -0500 24)         float lon = -15.5f;\n95dd6f27 (Kevin Binswanger 2024-04-16 03:34:24 -0500 25)         LatLong a = new LatLong(lat, lon);\n95dd6f27 (Kevin Binswanger 2024-04-16 03:34:24 -0500 26)         LatLong b = new LatLong(lat, lon);\n95dd6f27 (Kevin Binswanger 2024-04-16 03:34:24 -0500 27) \n",
            "commit_hashes": {
                "95dd6f27": "    Add hashcode and equals methods to LatLong (#179)"
            },
            "Commit&issueIDs": {
                "95dd6f27": [
                    "179"
                ]
            },
            "links": [
                "https://github.com/davidmoten/geo/issues/179",
                "https://github.com/davidmoten/geo/commit/95dd6f27"
            ]
        },
        {
            "poj_link": "https://github.com/jpmml/jpmml-evaluator/",
            "file_path": "jpmml/jpmml-evaluator/pmml-evaluator/src/test/java/org/jpmml/evaluator/TextUtilTest.java",
            "test_name": "processTerms",
            "FQS": "org.jpmml.evaluator.TextUtilTest.processTerms()",
            "start_line": "42",
            "blame_result": "669a8570e (Villu Ruusmann 2021-01-03 22:18:21 +0200 43) \t\tTextIndex textIndex = new TextIndex();\n669a8570e (Villu Ruusmann 2021-01-03 22:18:21 +0200 44) \n669a8570e (Villu Ruusmann 2021-01-03 22:18:21 +0200 45) \t\tTextUtil.TermProcessor termProcessor = new TextUtil.TermProcessor(textIndex, new String(\"brown fox\"));\n669a8570e (Villu Ruusmann 2021-01-03 22:18:21 +0200 46) \n4778ee44e (Villu Ruusmann 2022-01-04 12:51:10 +0200 47) \t\tTokenizedString firstTokens = termProcessor.process();\n",
            "commit_hashes": {
                "669a8570e": "    Fixed the caching of term tokens. Fixes #109",
                "4778ee44e": "    Added TokenizedString class"
            },
            "Commit&issueIDs": {
                "669a8570e": [
                    "#109"
                ]
            },
            "links": [
                "https://github.com/jpmml/jpmml-evaluator/issues/109",
                "https://github.com/jpmml/jpmml-evaluator/commit/669a8570e"
            ]
        },
        {
            "poj_link": "https://github.com/jpmml/jpmml-evaluator/",
            "file_path": "jpmml/jpmml-evaluator/pmml-evaluator/src/test/java/org/jpmml/evaluator/TextUtilTest.java",
            "test_name": "processTexts",
            "FQS": "org.jpmml.evaluator.TextUtilTest.processTexts()",
            "start_line": "71",
            "blame_result": "669a8570e (Villu Ruusmann 2021-01-03 22:18:21 +0200 72) \t\tTextIndex textIndex = new TextIndex()\n669a8570e (Villu Ruusmann 2021-01-03 22:18:21 +0200 73) \t\t\t.addTextIndexNormalizations(new TextIndexNormalization());\n669a8570e (Villu Ruusmann 2021-01-03 22:18:21 +0200 74) \n669a8570e (Villu Ruusmann 2021-01-03 22:18:21 +0200 75) \t\tTextUtil.TextProcessor textProcessor = new TextUtil.TextProcessor(textIndex, new String(\"The quick brown fox jumps over the lazy dog\"));\n669a8570e (Villu Ruusmann 2021-01-03 22:18:21 +0200 76) \n",
            "commit_hashes": {
                "669a8570e": "    Fixed the caching of term tokens. Fixes #109"
            },
            "Commit&issueIDs": {
                "669a8570e": [
                    "#109"
                ]
            },
            "links": [
                "https://github.com/jpmml/jpmml-evaluator/issues/109",
                "https://github.com/jpmml/jpmml-evaluator/commit/669a8570e"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-annotations/",
            "file_path": "FasterXML/jackson-annotations/src/test/java/com/fasterxml/jackson/annotation/FormatTest.java",
            "test_name": "testLeniency",
            "FQS": "com.fasterxml.jackson.annotation.FormatTest.testLeniency()",
            "start_line": "162",
            "blame_result": "80522429 src/test/java/com/fasterxml/jackson/annotation/FormatMergeTest.java (Cowtowncoder   2015-10-01 17:04:38 -0700 163)         JsonFormat.Value empty = JsonFormat.Value.empty();\n1b02687b src/test/java/com/fasterxml/jackson/annotation/FormatTest.java      (Tatu Saloranta 2016-11-15 21:52:06 -0800 164)         assertFalse(empty.hasLenient());\n1b02687b src/test/java/com/fasterxml/jackson/annotation/FormatTest.java      (Tatu Saloranta 2016-11-15 21:52:06 -0800 165)         assertFalse(empty.isLenient());\n1b02687b src/test/java/com/fasterxml/jackson/annotation/FormatTest.java      (Tatu Saloranta 2016-11-15 21:52:06 -0800 166)         assertNull(empty.getLenient());\n1b02687b src/test/java/com/fasterxml/jackson/annotation/FormatTest.java      (Tatu Saloranta 2016-11-15 21:52:06 -0800 167) \n",
            "commit_hashes": {
                "80522429": "    Implementing merging for JsonFormat.Value as well",
                "1b02687b": "    Fixed #105"
            },
            "Commit&issueIDs": {
                "1b02687b": [
                    "#105"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-annotations/issues/105",
                "https://github.com/FasterXML/jackson-annotations/commit/1b02687b"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-annotations/",
            "file_path": "FasterXML/jackson-annotations/src/test/java/com/fasterxml/jackson/annotation/JacksonInjectTest.java",
            "test_name": "testFactories",
            "FQS": "com.fasterxml.jackson.annotation.JacksonInjectTest.testFactories()",
            "start_line": "65",
            "blame_result": "8662a18b (Tatu Saloranta 2017-04-13 14:23:43 -0700 66)     {\n8662a18b (Tatu Saloranta 2017-04-13 14:23:43 -0700 67)         JacksonInject.Value v = EMPTY.withId(\"name\");\n8662a18b (Tatu Saloranta 2017-04-13 14:23:43 -0700 68)         assertNotSame(EMPTY, v);\n8662a18b (Tatu Saloranta 2017-04-13 14:23:43 -0700 69)         assertEquals(\"name\", v.getId());\n8662a18b (Tatu Saloranta 2017-04-13 14:23:43 -0700 70)         assertSame(v, v.withId(\"name\"));\n",
            "commit_hashes": {
                "8662a18b": "    Fix #120"
            },
            "Commit&issueIDs": {
                "8662a18b": [
                    "#120"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-annotations/issues/120",
                "https://github.com/FasterXML/jackson-annotations/commit/8662a18b"
            ]
        },
        {
            "poj_link": "https://github.com/jMonkeyEngine/jmonkeyengine/",
            "file_path": "jMonkeyEngine/jmonkeyengine/jme3-core/src/test/java/com/jme3/bounding/TestBoundingBox.java",
            "test_name": "testEquals",
            "FQS": "com.jme3.bounding.TestBoundingBox.testEquals()",
            "start_line": "48",
            "blame_result": "79fd4fda70 (Stephen Gold 2024-06-09 13:47:16 -0700 49)         BoundingBox bb1 = new BoundingBox(new Vector3f(3f, 4f, 5f), 0f, 1f, 2f);\n79fd4fda70 (Stephen Gold 2024-06-09 13:47:16 -0700 50)         BoundingBox bb2\n79fd4fda70 (Stephen Gold 2024-06-09 13:47:16 -0700 51)                 = new BoundingBox(new Vector3f(3f, 4f, 5f), -0f, 1f, 2f);\n79fd4fda70 (Stephen Gold 2024-06-09 13:47:16 -0700 52) \n79fd4fda70 (Stephen Gold 2024-06-09 13:47:16 -0700 53)         BoundingBox bb3 = new BoundingBox(new Vector3f(3f, 0f, 2f), 9f, 8f, 7f);\n",
            "commit_hashes": {
                "79fd4fda70": "    implement equals(), hashCode(), and isSimilar() for bounding volumes (#2252)"
            },
            "Commit&issueIDs": {
                "79fd4fda70": [
                    "2252"
                ]
            },
            "links": [
                "https://github.com/jMonkeyEngine/jmonkeyengine/issues/2252",
                "https://github.com/jMonkeyEngine/jmonkeyengine/commit/79fd4fda70"
            ]
        },
        {
            "poj_link": "https://github.com/jMonkeyEngine/jmonkeyengine/",
            "file_path": "jMonkeyEngine/jmonkeyengine/jme3-core/src/test/java/com/jme3/bounding/TestBoundingSphere.java",
            "test_name": "testEquals",
            "FQS": "com.jme3.bounding.TestBoundingSphere.testEquals()",
            "start_line": "48",
            "blame_result": "79fd4fda70 (Stephen Gold 2024-06-09 13:47:16 -0700 49)         BoundingSphere bs1 = new BoundingSphere(0f, new Vector3f(3f, 4f, 5f));\n79fd4fda70 (Stephen Gold 2024-06-09 13:47:16 -0700 50)         BoundingSphere bs2 = new BoundingSphere(-0f, new Vector3f(3f, 4f, 5f));\n79fd4fda70 (Stephen Gold 2024-06-09 13:47:16 -0700 51) \n79fd4fda70 (Stephen Gold 2024-06-09 13:47:16 -0700 52)         BoundingSphere bs3 = new BoundingSphere(1f, new Vector3f(3f, 0f, 2f));\n79fd4fda70 (Stephen Gold 2024-06-09 13:47:16 -0700 53)         BoundingSphere bs4 = new BoundingSphere(1f, new Vector3f(3f, -0f, 2f));\n",
            "commit_hashes": {
                "79fd4fda70": "    implement equals(), hashCode(), and isSimilar() for bounding volumes (#2252)"
            },
            "Commit&issueIDs": {
                "79fd4fda70": [
                    "2252"
                ]
            },
            "links": [
                "https://github.com/jMonkeyEngine/jmonkeyengine/issues/2252",
                "https://github.com/jMonkeyEngine/jmonkeyengine/commit/79fd4fda70"
            ]
        },
        {
            "poj_link": "https://github.com/jMonkeyEngine/jmonkeyengine/",
            "file_path": "jMonkeyEngine/jmonkeyengine/jme3-core/src/test/java/com/jme3/math/TestIssue1388.java",
            "test_name": "testIssue1388",
            "FQS": "com.jme3.math.TestIssue1388.testIssue1388()",
            "start_line": "46",
            "blame_result": "9183f0e364 (Stephen Gold 2021-03-15 19:15:58 -0700 47)         Vector3f in = new Vector3f(4f, 6f, 9f); // test vector, never modified\n9183f0e364 (Stephen Gold 2021-03-15 19:15:58 -0700 48)         Vector3f saveIn = in.clone();\n9183f0e364 (Stephen Gold 2021-03-15 19:15:58 -0700 49)         /*\n9183f0e364 (Stephen Gold 2021-03-15 19:15:58 -0700 50)          * Three arbitrary rotation angles between -PI/2 and +PI/2\n9183f0e364 (Stephen Gold 2021-03-15 19:15:58 -0700 51)          */\n",
            "commit_hashes": {
                "9183f0e364": "    testcase and fix for issue #1388 (Quaternion javadoc is misleading) (#1451)"
            },
            "Commit&issueIDs": {
                "9183f0e364": [
                    "#1388",
                    "(#1451)"
                ]
            },
            "links": [
                "https://github.com/jMonkeyEngine/jmonkeyengine/issues/1388",
                "https://github.com/jMonkeyEngine/jmonkeyengine/commit/9183f0e364"
            ]
        },
        {
            "poj_link": "https://github.com/demoiselle/framework/",
            "file_path": "demoiselle/framework/demoiselle-security/src/test/java/org/demoiselle/jee/security/impl/DemoiselleUserImplTest.java",
            "test_name": "test31",
            "FQS": "org.demoiselle.jee.security.impl.DemoiselleUserImplTest.test31()",
            "start_line": "172",
            "blame_result": "cd15f8006 demoiselle-security/src/test/java/org/demoiselle/jee/security/impl/DemoiselleUserImplTest.java      (Vanderson    2016-12-12 21:07:47 -0200 173)         DemoiselleUser result = instance.clone();\nfbd15330b demoiselle-security/src/test/java/org/demoiselle/jee/security/impl/DemoisellePrincipalImplTest.java (PauloGladson 2016-10-25 14:08:00 -0200 174)         assertEquals(instance.getIdentity(), result.getIdentity());\nfbd15330b demoiselle-security/src/test/java/org/demoiselle/jee/security/impl/DemoisellePrincipalImplTest.java (PauloGladson 2016-10-25 14:08:00 -0200 175)     }\nfbd15330b demoiselle-security/src/test/java/org/demoiselle/jee/security/impl/DemoisellePrincipalImplTest.java (PauloGladson 2016-10-25 14:08:00 -0200 176) \nfbd15330b demoiselle-security/src/test/java/org/demoiselle/jee/security/impl/DemoisellePrincipalImplTest.java (PauloGladson 2016-10-25 14:08:00 -0200 177)     @Test\n",
            "commit_hashes": {
                "cd15f8006": "    compilando a revisao - profile demoiselle",
                "fbd15330b": "    #41 Teste no m\u00f3dulo seguran\u00e7a"
            },
            "Commit&issueIDs": {
                "fbd15330b": [
                    "#41"
                ]
            },
            "links": [
                "https://github.com/demoiselle/framework/issues/41",
                "https://github.com/demoiselle/framework/commit/fbd15330b"
            ]
        },
        {
            "poj_link": "https://github.com/demoiselle/framework/",
            "file_path": "demoiselle/framework/demoiselle-security/src/test/java/org/demoiselle/jee/security/impl/SecurityContextImplTest.java",
            "test_name": "test15",
            "FQS": "org.demoiselle.jee.security.impl.SecurityContextImplTest.test15()",
            "start_line": "106",
            "blame_result": "cd15f8006 (Vanderson    2016-12-12 21:07:47 -0200 107)         DemoiselleUser expResult = dml;\ncd15f8006 (Vanderson    2016-12-12 21:07:47 -0200 108)         DemoiselleUser result = instance.getUser();\nfbd15330b (PauloGladson 2016-10-25 14:08:00 -0200 109)         assertEquals(expResult.getIdentity(), result.getIdentity());\nfbd15330b (PauloGladson 2016-10-25 14:08:00 -0200 110)     }\nfbd15330b (PauloGladson 2016-10-25 14:08:00 -0200 111) \n",
            "commit_hashes": {
                "cd15f8006": "    compilando a revisao - profile demoiselle",
                "fbd15330b": "    #41 Teste no m\u00f3dulo seguran\u00e7a"
            },
            "Commit&issueIDs": {
                "fbd15330b": [
                    "#41"
                ]
            },
            "links": [
                "https://github.com/demoiselle/framework/issues/41",
                "https://github.com/demoiselle/framework/commit/fbd15330b"
            ]
        },
        {
            "poj_link": "https://github.com/DraqueT/PolyGlot/",
            "file_path": "DraqueT/PolyGlot/src/test/java/org/darisadesigns/polyglotlina/CryptographyHandlerTest.java",
            "test_name": "testEncryptDecrypt",
            "FQS": "org.darisadesigns.polyglotlina.CryptographyHandlerTest.testEncryptDecrypt()",
            "start_line": "35",
            "blame_result": "a5b4922a1 src/test/java/org/darisadesigns/polyglotlina/Desktop/CryptographyHandlerTest.java (Draque Thompson 2023-06-24 15:07:08 -0700 36)         System.out.println(\"CryptographyHandlerTest.testEncryptDecrypt\");\na5b4922a1 src/test/java/org/darisadesigns/polyglotlina/Desktop/CryptographyHandlerTest.java (Draque Thompson 2023-06-24 15:07:08 -0700 37)         \na5b4922a1 src/test/java/org/darisadesigns/polyglotlina/Desktop/CryptographyHandlerTest.java (Draque Thompson 2023-06-24 15:07:08 -0700 38)         String testKey = \"ZimZamMbamMcSlam\";\na5b4922a1 src/test/java/org/darisadesigns/polyglotlina/Desktop/CryptographyHandlerTest.java (Draque Thompson 2023-06-24 15:07:08 -0700 39)         String testString = \"Now is the time for all good men to come to the aid of their parties.\";\na5b4922a1 src/test/java/org/darisadesigns/polyglotlina/Desktop/CryptographyHandlerTest.java (Draque Thompson 2023-06-24 15:07:08 -0700 40)        \n",
            "commit_hashes": {
                "a5b4922a1": "    completes and closes #1265 GPT Translation"
            },
            "Commit&issueIDs": {
                "a5b4922a1": [
                    "#1265"
                ]
            },
            "links": [
                "https://github.com/DraqueT/PolyGlot/issues/1265",
                "https://github.com/DraqueT/PolyGlot/commit/a5b4922a1"
            ]
        },
        {
            "poj_link": "https://github.com/DraqueT/PolyGlot/",
            "file_path": "DraqueT/PolyGlot/src/test/java/org/darisadesigns/polyglotlina/Nodes/DeclensionGenRuleTest.java",
            "test_name": "testNotEqualsDiffRules",
            "FQS": "org.darisadesigns.polyglotlina.Nodes.DeclensionGenRuleTest.testNotEqualsDiffRules()",
            "start_line": "112",
            "blame_result": "7cd0a56e8 src/test/java/org/darisadesigns/polyglotlina/Nodes/DeclensionGenRuleTest.java (Draque Thompson 2020-01-31 16:39:19 -0800 113)         System.out.println(\"DeclensionGenRuleTest.testNotEqualsDiffRules\");\n7cd0a56e8 src/test/java/org/darisadesigns/polyglotlina/Nodes/DeclensionGenRuleTest.java (Draque Thompson 2020-01-31 16:39:19 -0800 114)         \n48833d3af src/test/java/org/darisadesigns/polyglotlina/Nodes/DeclensionGenRuleTest.java (Draque Thompson 2020-08-21 16:51:22 -0700 115)         ConjugationGenRule a = getGenericRule();\n48833d3af src/test/java/org/darisadesigns/polyglotlina/Nodes/DeclensionGenRuleTest.java (Draque Thompson 2020-08-21 16:51:22 -0700 116)         ConjugationGenRule b = getGenericRule();\n37b10cec8 test/PolyGlot/Nodes/DeclensionGenRuleTest.java                                (DraqueT         2019-04-05 16:41:40 -0400 117)         \n",
            "commit_hashes": {
                "7cd0a56e8": "    Completes and closes #841",
                "48833d3af": "    Completes and closes #923",
                "37b10cec8": "    Completes and closes #683"
            },
            "Commit&issueIDs": {
                "7cd0a56e8": [
                    "#841"
                ],
                "48833d3af": [
                    "#923"
                ],
                "37b10cec8": [
                    "#683"
                ]
            },
            "links": [
                "https://github.com/DraqueT/PolyGlot/issues/841",
                "https://github.com/DraqueT/PolyGlot/commit/7cd0a56e8",
                "https://github.com/DraqueT/PolyGlot/issues/923",
                "https://github.com/DraqueT/PolyGlot/commit/48833d3af",
                "https://github.com/DraqueT/PolyGlot/issues/683",
                "https://github.com/DraqueT/PolyGlot/commit/37b10cec8"
            ]
        },
        {
            "poj_link": "https://github.com/ta4j/ta4j/",
            "file_path": "ta4j/ta4j/ta4j-core/src/test/java/org/ta4j/core/BarSeriesTest.java",
            "test_name": "getEndGetBeginGetBarCountIsEmptyTest",
            "FQS": "org.ta4j.core.BarSeriesTest.getEndGetBeginGetBarCountIsEmptyTest()",
            "start_line": "145",
            "blame_result": "d079bdc02 ta4j-core/src/test/java/org/ta4j/core/TimeSeriesTest.java (Simon W       2017-12-09 17:10:21 +0100 146) \n3f36e5cb5 ta4j/src/test/java/eu/verdelhan/ta4j/TimeSeriesTest.java  (mdeverdelhan  2017-09-04 14:57:10 +0200 147)         // Default series\n1e765120e ta4j/src/test/java/eu/verdelhan/ta4j/TimeSeriesTest.java  (mdeverdelhan  2017-09-04 12:19:25 +0200 148)         assertEquals(0, defaultSeries.getBeginIndex());\nbe8bbdeea ta4j-core/src/test/java/org/ta4j/core/BarSeriesTest.java  (Luk\u00e1\u0161 Kv\u00eddera 2024-04-10 20:06:59 +0200 149)         assertEquals(defaultSeries.getBarData().size() - 1, defaultSeries.getEndIndex());\nbe8bbdeea ta4j-core/src/test/java/org/ta4j/core/BarSeriesTest.java  (Luk\u00e1\u0161 Kv\u00eddera 2024-04-10 20:06:59 +0200 150)         assertEquals(defaultSeries.getBarData().size(), defaultSeries.getBarCount());\n",
            "commit_hashes": {
                "d079bdc02": "    Constructor of Order changed. TotalProfitCriterion can use order price (#126)",
                "3f36e5cb5": "    WIP",
                "1e765120e": "    Small change in TimeSeries API",
                "be8bbdeea": "    Introduced NumFactory"
            },
            "Commit&issueIDs": {
                "d079bdc02": [
                    "126"
                ]
            },
            "links": [
                "https://github.com/ta4j/ta4j/issues/126",
                "https://github.com/ta4j/ta4j/commit/d079bdc02"
            ]
        },
        {
            "poj_link": "https://github.com/jeevatkm/digitalocean-api-java/",
            "file_path": "jeevatkm/digitalocean-api-java/src/test/java/com/myjeeva/digitalocean/DigitalOceanIntegrationTest.java",
            "test_name": "testUpdateFirewallInfo",
            "FQS": "com.myjeeva.digitalocean.DigitalOceanIntegrationTest.testUpdateFirewallInfo()",
            "start_line": "1238",
            "blame_result": "47dbf0c0 (Lucas      2018-08-26 15:51:25 -0300 1239)     Firewall firewall = apiClient.getFirewallInfo(firewallIdForInfo);\n1e16fab4 (Ivan Sopov 2020-04-27 07:21:34 +0300 1240) \n47dbf0c0 (Lucas      2018-08-26 15:51:25 -0300 1241)     firewall.setName(\"edited-firewall\");\n47dbf0c0 (Lucas      2018-08-26 15:51:25 -0300 1242)     Firewall fw = apiClient.updateFirewall(firewall);\n1e16fab4 (Ivan Sopov 2020-04-27 07:21:34 +0300 1243) \n",
            "commit_hashes": {
                "47dbf0c0": "    #83 Firewall endpoints support (#85)",
                "1e16fab4": "    add maven plugin to check code formatting (#99)"
            },
            "Commit&issueIDs": {
                "47dbf0c0": [
                    "#83",
                    "85"
                ],
                "1e16fab4": [
                    "99"
                ]
            },
            "links": [
                "https://github.com/jeevatkm/digitalocean-api-java/issues/83",
                "https://github.com/jeevatkm/digitalocean-api-java/commit/47dbf0c0",
                "https://github.com/jeevatkm/digitalocean-api-java/issues/99",
                "https://github.com/jeevatkm/digitalocean-api-java/commit/1e16fab4"
            ]
        },
        {
            "poj_link": "https://github.com/ta4j/ta4j/",
            "file_path": "ta4j/ta4j/ta4j-core/src/test/java/org/ta4j/core/BarSeriesTest.java",
            "test_name": "getBarDataTest",
            "FQS": "org.ta4j.core.BarSeriesTest.getBarDataTest()",
            "start_line": "165",
            "blame_result": "f697f9119 ta4j/src/test/java/eu/verdelhan/ta4j/TimeSeriesTest.java  (mdeverdelhan  2017-09-06 16:01:32 +0200 166)         // Constrained series\nbe8bbdeea ta4j-core/src/test/java/org/ta4j/core/BarSeriesTest.java  (Luk\u00e1\u0161 Kv\u00eddera 2024-04-10 20:06:59 +0200 167)         assertNotEquals(defaultSeries.getBarData(), subSeries.getBarData());\nf697f9119 ta4j/src/test/java/eu/verdelhan/ta4j/TimeSeriesTest.java  (mdeverdelhan  2017-09-06 16:01:32 +0200 168)         // Empty series\n5a1145d4d ta4j-core/src/test/java/org/ta4j/core/TimeSeriesTest.java (Jeremy Arnold 2017-11-25 08:02:16 -0800 169)         assertEquals(0, emptySeries.getBarData().size());\nf697f9119 ta4j/src/test/java/eu/verdelhan/ta4j/TimeSeriesTest.java  (mdeverdelhan  2017-09-06 16:01:32 +0200 170)     }\n",
            "commit_hashes": {
                "f697f9119": "    Move all the run(...) methods to TimeSeriesManager",
                "be8bbdeea": "    Introduced NumFactory",
                "5a1145d4d": "    Rename Tick to Bar; rip the bandaid off (#108)"
            },
            "Commit&issueIDs": {
                "5a1145d4d": [
                    "108"
                ]
            },
            "links": [
                "https://github.com/ta4j/ta4j/issues/108",
                "https://github.com/ta4j/ta4j/commit/5a1145d4d"
            ]
        },
        {
            "poj_link": "https://github.com/ta4j/ta4j/",
            "file_path": "ta4j/ta4j/ta4j-core/src/test/java/org/ta4j/core/BarTest.java",
            "test_name": "equals",
            "FQS": "org.ta4j.core.BarTest.equals()",
            "start_line": "124",
            "blame_result": "acc261e3d (Luk\u00e1\u0161 Kv\u00eddera 2024-10-03 11:47:11 +0200 125)         final Bar bar1 = new BaseBarBuilder(this.numFactory).timePeriod(Duration.ofHours(1))\nacc261e3d (Luk\u00e1\u0161 Kv\u00eddera 2024-10-03 11:47:11 +0200 126)                 .endTime(this.endTime)\nacc261e3d (Luk\u00e1\u0161 Kv\u00eddera 2024-10-03 11:47:11 +0200 127)                 .build();\nacc261e3d (Luk\u00e1\u0161 Kv\u00eddera 2024-10-03 11:47:11 +0200 128)         final Bar bar2 = new BaseBarBuilder(this.numFactory).timePeriod(Duration.ofHours(1))\nacc261e3d (Luk\u00e1\u0161 Kv\u00eddera 2024-10-03 11:47:11 +0200 129)                 .endTime(this.endTime)\n",
            "commit_hashes": {
                "acc261e3d": "    #691 Implemented TickBarBuilder"
            },
            "Commit&issueIDs": {
                "acc261e3d": [
                    "#691"
                ]
            },
            "links": [
                "https://github.com/ta4j/ta4j/issues/691",
                "https://github.com/ta4j/ta4j/commit/acc261e3d"
            ]
        },
        {
            "poj_link": "https://github.com/ta4j/ta4j/",
            "file_path": "ta4j/ta4j/ta4j-core/src/test/java/org/ta4j/core/BarTest.java",
            "test_name": "hashCode2",
            "FQS": "org.ta4j.core.BarTest.hashCode2()",
            "start_line": "137",
            "blame_result": "acc261e3d (Luk\u00e1\u0161 Kv\u00eddera 2024-10-03 11:47:11 +0200 138)         final Bar bar1 = new BaseBarBuilder(this.numFactory).timePeriod(Duration.ofHours(1))\nacc261e3d (Luk\u00e1\u0161 Kv\u00eddera 2024-10-03 11:47:11 +0200 139)                 .endTime(this.endTime)\nacc261e3d (Luk\u00e1\u0161 Kv\u00eddera 2024-10-03 11:47:11 +0200 140)                 .build();\nacc261e3d (Luk\u00e1\u0161 Kv\u00eddera 2024-10-03 11:47:11 +0200 141)         final Bar bar2 = new BaseBarBuilder(this.numFactory).timePeriod(Duration.ofHours(1))\nacc261e3d (Luk\u00e1\u0161 Kv\u00eddera 2024-10-03 11:47:11 +0200 142)                 .endTime(this.endTime)\n",
            "commit_hashes": {
                "acc261e3d": "    #691 Implemented TickBarBuilder"
            },
            "Commit&issueIDs": {
                "acc261e3d": [
                    "#691"
                ]
            },
            "links": [
                "https://github.com/ta4j/ta4j/issues/691",
                "https://github.com/ta4j/ta4j/commit/acc261e3d"
            ]
        },
        {
            "poj_link": "https://github.com/ta4j/ta4j/",
            "file_path": "ta4j/ta4j/ta4j-core/src/test/java/org/ta4j/core/indicators/numeric/NumericIndicatorTest.java",
            "test_name": "barSeries",
            "FQS": "org.ta4j.core.indicators.numeric.NumericIndicatorTest.barSeries()",
            "start_line": "220",
            "blame_result": "ee3b4e13a (Simon 2022-01-29 13:29:18 +0100 221)         final NumericIndicator numericIndicator = NumericIndicator.of(cp1);\nee3b4e13a (Simon 2022-01-29 13:29:18 +0100 222)         assertEquals(cp1.getBarSeries(), numericIndicator.getBarSeries());\nee3b4e13a (Simon 2022-01-29 13:29:18 +0100 223)     }\nee3b4e13a (Simon 2022-01-29 13:29:18 +0100 224) \nee3b4e13a (Simon 2022-01-29 13:29:18 +0100 225)     @Test\n",
            "commit_hashes": {
                "ee3b4e13a": "    Restored PR: feature/numeric indicator core (#832)"
            },
            "Commit&issueIDs": {
                "ee3b4e13a": [
                    "(#832)"
                ]
            },
            "links": [
                "https://github.com/ta4j/ta4j/issues/832",
                "https://github.com/ta4j/ta4j/commit/ee3b4e13a"
            ]
        },
        {
            "poj_link": "https://github.com/ta4j/ta4j/",
            "file_path": "ta4j/ta4j/ta4j-core/src/test/java/org/ta4j/core/indicators/pivotpoints/PivotPointIndicatorTest.java",
            "test_name": "PivotPointTestWeeklyBarCount",
            "FQS": "org.ta4j.core.indicators.pivotpoints.PivotPointIndicatorTest.PivotPointTestWeeklyBarCount()",
            "start_line": "1361",
            "blame_result": "2b6bf55af ta4j-core/src/test/java/org/ta4j/core/indicators/pivotpoints/PivotPointIndicatorTest.java (Thiago Moreira 2019-09-06 17:29:31 -0300 1362)         PivotPointIndicator pp = new PivotPointIndicator(series1Hours, TimeLevel.WEEK);\n7f12eed73 ta4j/src/test/java/org/ta4j/core/indicators/pivotpoints/PivotPointIndicatorTest.java      (Simon W        2017-10-19 11:49:13 +0200 1363) \n2b6bf55af ta4j-core/src/test/java/org/ta4j/core/indicators/pivotpoints/PivotPointIndicatorTest.java (Thiago Moreira 2019-09-06 17:29:31 -0300 1364)         assertEquals(pp.getValue(0), NaN);// first bar no data for\n2b6bf55af ta4j-core/src/test/java/org/ta4j/core/indicators/pivotpoints/PivotPointIndicatorTest.java (Thiago Moreira 2019-09-06 17:29:31 -0300 1365)         assertEquals(pp.getValue(1), NaN);// first bar no data for calculation\n2b6bf55af ta4j-core/src/test/java/org/ta4j/core/indicators/pivotpoints/PivotPointIndicatorTest.java (Thiago Moreira 2019-09-06 17:29:31 -0300 1366)         assertEquals(pp.getValue(6), NaN);// first bar no data for calculation\n",
            "commit_hashes": {
                "2b6bf55af": "    Format source",
                "7f12eed73": "    Feature: Pivot Point Indicator (#49)"
            },
            "Commit&issueIDs": {
                "7f12eed73": [
                    "(#49)"
                ]
            },
            "links": [
                "https://github.com/ta4j/ta4j/issues/49",
                "https://github.com/ta4j/ta4j/commit/7f12eed73"
            ]
        },
        {
            "poj_link": "https://github.com/ta4j/ta4j/",
            "file_path": "ta4j/ta4j/ta4j-core/src/test/java/org/ta4j/core/utils/BarSeriesUtilsTest.java",
            "test_name": "sortBars",
            "FQS": "org.ta4j.core.utils.BarSeriesUtilsTest.sortBars()",
            "start_line": "246",
            "blame_result": "f35c68e81 (nimo23 2021-03-17 11:04:02 +0100 247)         time = ZonedDateTime.of(2019, 6, 1, 1, 1, 0, 0, ZoneId.systemDefault());\nf35c68e81 (nimo23 2021-03-17 11:04:02 +0100 248) \nf35c68e81 (nimo23 2021-03-17 11:04:02 +0100 249)         final Bar bar0 = new MockBar(time, 1d, 2d, 3d, 4d, 5d, 0d, 7, numFunction);\nf35c68e81 (nimo23 2021-03-17 11:04:02 +0100 250)         final Bar bar1 = new MockBar(time.plusDays(1), 1d, 1d, 1d, 1d, 1d, 1d, 1, numFunction);\nf35c68e81 (nimo23 2021-03-17 11:04:02 +0100 251)         final Bar bar2 = new MockBar(time.plusDays(2), 1d, 1d, 1d, 1d, 1d, 1d, 1, numFunction);\n",
            "commit_hashes": {
                "f35c68e81": "    BarSeriesUtils: addBars() (#688)"
            },
            "Commit&issueIDs": {
                "f35c68e81": [
                    "(#688)"
                ]
            },
            "links": [
                "https://github.com/ta4j/ta4j/issues/688",
                "https://github.com/ta4j/ta4j/commit/f35c68e81"
            ]
        },
        {
            "poj_link": "https://github.com/haraldk/TwelveMonkeys/",
            "file_path": "haraldk/TwelveMonkeys/common/common-image/src/test/java/com/twelvemonkeys/image/ImageUtilTest.java",
            "test_name": "testToBufferedImageType",
            "FQS": "com.twelvemonkeys.image.ImageUtilTest.testToBufferedImageType()",
            "start_line": "98",
            "blame_result": "24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200  99)         BufferedImage img = null;\n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 100)         boolean threwRuntimeException = false;\n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 101) \n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 102)         try {\n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 103)             img = ImageUtil.toBuffered(null, BufferedImage.TYPE_INT_ARGB);\n",
            "commit_hashes": {
                "24c668223": "    #311 Updated license headers to be the same as in the LICENSE.txt"
            },
            "Commit&issueIDs": {
                "24c668223": [
                    "#311"
                ]
            },
            "links": [
                "https://github.com/haraldk/TwelveMonkeys/issues/311",
                "https://github.com/haraldk/TwelveMonkeys/commit/24c668223"
            ]
        },
        {
            "poj_link": "https://github.com/haraldk/TwelveMonkeys/",
            "file_path": "haraldk/TwelveMonkeys/common/common-image/src/test/java/com/twelvemonkeys/image/ImageUtilTest.java",
            "test_name": "testBrightness",
            "FQS": "com.twelvemonkeys.image.ImageUtilTest.testBrightness()",
            "start_line": "160",
            "blame_result": "24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 161)         final BufferedImage original = this.original;\n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 162)         assertNotNull(original);\n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 163) \n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 164)         final BufferedImage notBrightened = ImageUtil.toBuffered(ImageUtil.brightness(original, 0f));\n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 165)         // Assumed: Images should be equal\n",
            "commit_hashes": {
                "24c668223": "    #311 Updated license headers to be the same as in the LICENSE.txt"
            },
            "Commit&issueIDs": {
                "24c668223": [
                    "#311"
                ]
            },
            "links": [
                "https://github.com/haraldk/TwelveMonkeys/issues/311",
                "https://github.com/haraldk/TwelveMonkeys/commit/24c668223"
            ]
        },
        {
            "poj_link": "https://github.com/haraldk/TwelveMonkeys/",
            "file_path": "haraldk/TwelveMonkeys/common/common-lang/src/test/java/com/twelvemonkeys/util/LinkedMapTest.java",
            "test_name": "testSequenceMap",
            "FQS": "com.twelvemonkeys.util.LinkedMapTest.testSequenceMap()",
            "start_line": "97",
            "blame_result": "24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200  98)         Object[] keys = getKeys();\n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200  99)         int expectedSize = keys.length;\n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 100)         Object[] values = getValues();\n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 101)         for (int i = 0; i < expectedSize; i++) {\n24c668223 (Harald Kuhr 2018-08-18 19:22:52 +0200 102)             labRat.put(keys[i], values[i]);\n",
            "commit_hashes": {
                "24c668223": "    #311 Updated license headers to be the same as in the LICENSE.txt"
            },
            "Commit&issueIDs": {
                "24c668223": [
                    "#311"
                ]
            },
            "links": [
                "https://github.com/haraldk/TwelveMonkeys/issues/311",
                "https://github.com/haraldk/TwelveMonkeys/commit/24c668223"
            ]
        },
        {
            "poj_link": "https://github.com/haraldk/TwelveMonkeys/",
            "file_path": "haraldk/TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/color/ColorSpacesTest.java",
            "test_name": "testEqualHeadersDifferentProfile",
            "FQS": "com.twelvemonkeys.imageio.color.ColorSpacesTest.testEqualHeadersDifferentProfile()",
            "start_line": "184",
            "blame_result": "b2c5915db (Harald Kuhr 2021-12-11 18:13:07 +0100 185)         // These profiles are extracted from various JPEGs, and have the exact same profile header (but are different)...\nd677141ab (Harald Kuhr 2017-11-05 11:44:41 +0100 186)         ICC_Profile profile1 = ICC_Profile.getInstance(getClass().getResourceAsStream(\"/profiles/adobe_rgb_1998.icc\"));\nd677141ab (Harald Kuhr 2017-11-05 11:44:41 +0100 187)         ICC_Profile profile2 = ICC_Profile.getInstance(getClass().getResourceAsStream(\"/profiles/color_match_rgb.icc\"));\nd677141ab (Harald Kuhr 2017-11-05 11:44:41 +0100 188) \nd677141ab (Harald Kuhr 2017-11-05 11:44:41 +0100 189)         assertNotSame(profile1, profile2); // Sanity\n",
            "commit_hashes": {
                "b2c5915db": "    #631 New way of forcing profile activation + guarding all invocations of ICC_Profile.getInstance()",
                "d677141ab": "    #386 Fixed ColorSpaces ICC profile caching bug"
            },
            "Commit&issueIDs": {
                "b2c5915db": [
                    "#631"
                ],
                "d677141ab": [
                    "#386"
                ]
            },
            "links": [
                "https://github.com/haraldk/TwelveMonkeys/issues/631",
                "https://github.com/haraldk/TwelveMonkeys/commit/b2c5915db",
                "https://github.com/haraldk/TwelveMonkeys/issues/386",
                "https://github.com/haraldk/TwelveMonkeys/commit/d677141ab"
            ]
        },
        {
            "poj_link": "https://github.com/haraldk/TwelveMonkeys/",
            "file_path": "haraldk/TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/util/UInt32ImageTypeSpecifierTest.java",
            "test_name": "testEquals",
            "FQS": "com.twelvemonkeys.imageio.util.UInt32ImageTypeSpecifierTest.testEquals()",
            "start_line": "199",
            "blame_result": "e0b9bdef7 (Harald Kuhr 2016-11-16 18:52:39 +0100 200)         ImageTypeSpecifier spec = UInt32ImageTypeSpecifier.createInterleaved(sRGB, new int [] {0, 1, 2}, false, false);\ne0b9bdef7 (Harald Kuhr 2016-11-16 18:52:39 +0100 201)         ImageTypeSpecifier other = UInt32ImageTypeSpecifier.createInterleaved(sRGB, new int [] {0, 1, 2}, false, false);\ne0b9bdef7 (Harald Kuhr 2016-11-16 18:52:39 +0100 202)         ImageTypeSpecifier different = UInt32ImageTypeSpecifier.createInterleaved(sRGB, new int [] {0, 1, 2, 3}, true, false);\n654f7e7a7 (Harald Kuhr 2014-11-20 15:57:36 +0100 203)         // Equivalent, but broken, not equal\n654f7e7a7 (Harald Kuhr 2014-11-20 15:57:36 +0100 204)         ImageTypeSpecifier broken =\n",
            "commit_hashes": {
                "e0b9bdef7": "    #280 Support for bitsPerSample == 6, 10, 12, 14 & 24",
                "654f7e7a7": "    TMI-81: Support for 32 bit unsigned int color model."
            },
            "Commit&issueIDs": {
                "e0b9bdef7": [
                    "#280"
                ]
            },
            "links": [
                "https://github.com/haraldk/TwelveMonkeys/issues/280",
                "https://github.com/haraldk/TwelveMonkeys/commit/e0b9bdef7"
            ]
        },
        {
            "poj_link": "https://github.com/haraldk/TwelveMonkeys/",
            "file_path": "haraldk/TwelveMonkeys/imageio/imageio-core/src/test/java/com/twelvemonkeys/imageio/util/UInt32ImageTypeSpecifierTest.java",
            "test_name": "testHashCode",
            "FQS": "com.twelvemonkeys.imageio.util.UInt32ImageTypeSpecifierTest.testHashCode()",
            "start_line": "219",
            "blame_result": "e0b9bdef7 (Harald Kuhr 2016-11-16 18:52:39 +0100 220)         ImageTypeSpecifier spec = UInt32ImageTypeSpecifier.createInterleaved(sRGB, new int [] {0, 1, 2}, false, false);\ne0b9bdef7 (Harald Kuhr 2016-11-16 18:52:39 +0100 221)         ImageTypeSpecifier other = UInt32ImageTypeSpecifier.createInterleaved(sRGB, new int [] {0, 1, 2}, false, false);\ne0b9bdef7 (Harald Kuhr 2016-11-16 18:52:39 +0100 222)         ImageTypeSpecifier different = UInt32ImageTypeSpecifier.createInterleaved(sRGB, new int [] {0, 1, 2, 3}, true, false);\n654f7e7a7 (Harald Kuhr 2014-11-20 15:57:36 +0100 223)         // Equivalent, but broken, not equal\n654f7e7a7 (Harald Kuhr 2014-11-20 15:57:36 +0100 224)         ImageTypeSpecifier broken =\n",
            "commit_hashes": {
                "e0b9bdef7": "    #280 Support for bitsPerSample == 6, 10, 12, 14 & 24",
                "654f7e7a7": "    TMI-81: Support for 32 bit unsigned int color model."
            },
            "Commit&issueIDs": {
                "e0b9bdef7": [
                    "#280"
                ]
            },
            "links": [
                "https://github.com/haraldk/TwelveMonkeys/issues/280",
                "https://github.com/haraldk/TwelveMonkeys/commit/e0b9bdef7"
            ]
        },
        {
            "poj_link": "https://github.com/haraldk/TwelveMonkeys/",
            "file_path": "haraldk/TwelveMonkeys/imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/exif/EXIFWriterTest.java",
            "test_name": "testReadWriteRead",
            "FQS": "com.twelvemonkeys.imageio.metadata.exif.EXIFWriterTest.testReadWriteRead()",
            "start_line": "194",
            "blame_result": "1505aa651 (Harald Kuhr 2015-03-18 21:46:04 +0100 195)         Directory original = createReader().read(getDataAsIIS());\n1505aa651 (Harald Kuhr 2015-03-18 21:46:04 +0100 196) \n1505aa651 (Harald Kuhr 2015-03-18 21:46:04 +0100 197)         ByteArrayOutputStream output = new FastByteArrayOutputStream(256);\n1505aa651 (Harald Kuhr 2015-03-18 21:46:04 +0100 198) \na86b76256 (Harald Kuhr 2016-12-12 22:28:22 +0100 199)         try (ImageOutputStream imageOutput = ImageIO.createImageOutputStream(output)) {\n",
            "commit_hashes": {
                "1505aa651": "    TMI-26: TIFF write support sans LZW.",
                "a86b76256": "    #204 TIFF metadata refactor"
            },
            "Commit&issueIDs": {
                "a86b76256": [
                    "#204"
                ]
            },
            "links": [
                "https://github.com/haraldk/TwelveMonkeys/issues/204",
                "https://github.com/haraldk/TwelveMonkeys/commit/a86b76256"
            ]
        },
        {
            "poj_link": "https://github.com/haraldk/TwelveMonkeys/",
            "file_path": "haraldk/TwelveMonkeys/imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/tiff/TIFFWriterTest.java",
            "test_name": "testReadWriteRead",
            "FQS": "com.twelvemonkeys.imageio.metadata.tiff.TIFFWriterTest.testReadWriteRead()",
            "start_line": "225",
            "blame_result": "1505aa651 imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/exif/EXIFWriterTest.java (Harald Kuhr 2015-03-18 21:46:04 +0100 226)         Directory original = createReader().read(getDataAsIIS());\n1505aa651 imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/exif/EXIFWriterTest.java (Harald Kuhr 2015-03-18 21:46:04 +0100 227) \n1505aa651 imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/exif/EXIFWriterTest.java (Harald Kuhr 2015-03-18 21:46:04 +0100 228)         ByteArrayOutputStream output = new FastByteArrayOutputStream(256);\na86b76256 imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/tiff/TIFFWriterTest.java (Harald Kuhr 2016-12-12 22:28:22 +0100 229) \neced5b8ef imageio/imageio-metadata/src/test/java/com/twelvemonkeys/imageio/metadata/tiff/TIFFWriterTest.java (Harald Kuhr 2022-01-12 19:11:52 +0100 230)         try (ImageOutputStream imageOutput = ImageIO.createImageOutputStream(output)) {\n",
            "commit_hashes": {
                "1505aa651": "    TMI-26: TIFF write support sans LZW.",
                "a86b76256": "    #204 TIFF metadata refactor",
                "eced5b8ef": "    #656 Code clean-up + minor refactorings."
            },
            "Commit&issueIDs": {
                "a86b76256": [
                    "#204"
                ],
                "eced5b8ef": [
                    "#656"
                ]
            },
            "links": [
                "https://github.com/haraldk/TwelveMonkeys/issues/204",
                "https://github.com/haraldk/TwelveMonkeys/commit/a86b76256",
                "https://github.com/haraldk/TwelveMonkeys/issues/656",
                "https://github.com/haraldk/TwelveMonkeys/commit/eced5b8ef"
            ]
        },
        {
            "poj_link": "https://github.com/jd-opensource/vtdriver/",
            "file_path": "jd-opensource/vtdriver/src/test/java/com/jd/jdbc/planbuilder/semantics/TableSetTest.java",
            "test_name": "testLargeOffset",
            "FQS": "com.jd.jdbc.planbuilder.semantics.TableSetTest.testLargeOffset()",
            "start_line": "48",
            "blame_result": "3e1572d0 (wangweicugw 2024-01-05 10:17:42 +0800 49)         for (int tid = 0; tid < 1024; tid++) {\n3e1572d0 (wangweicugw 2024-01-05 10:17:42 +0800 50)             TableSet ts = singleTableSet(tid);\n3e1572d0 (wangweicugw 2024-01-05 10:17:42 +0800 51)             Assert.assertEquals(tid, ts.tableOffset());\n3e1572d0 (wangweicugw 2024-01-05 10:17:42 +0800 52)         }\n3e1572d0 (wangweicugw 2024-01-05 10:17:42 +0800 53)     }\n",
            "commit_hashes": {
                "3e1572d0": "    Gen4 init (#147)"
            },
            "Commit&issueIDs": {
                "3e1572d0": [
                    "147"
                ]
            },
            "links": [
                "https://github.com/jd-opensource/vtdriver/issues/147",
                "https://github.com/jd-opensource/vtdriver/commit/3e1572d0"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/alt/GUIDTest.java",
            "test_name": "testV7",
            "FQS": "com.github.f4b6a3.uuid.alt.GUIDTest.testV7()",
            "start_line": "236",
            "blame_result": "2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 237) \t\tGUID prev = GUID.v7();\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 238) \t\tfor (int i = 0; i < DEFAULT_LOOP_MAX; i++) {\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 239) \t\t\tlong t0 = System.currentTimeMillis();\n1d59bb05 (Fabio Lima 2023-05-01 01:10:47 -0300 240) \t\t\tGUID guid = GUID.v7();\n1d59bb05 (Fabio Lima 2023-05-01 01:10:47 -0300 241) \t\t\tlong t1 = guid.getMostSignificantBits() >>> 16;\n",
            "commit_hashes": {
                "2e89e396": "    Add an alternative to the JDK's built-in UUID #78",
                "1d59bb05": "    Remove the GUID.get() method, synonymous with GUID.toUUID() #80"
            },
            "Commit&issueIDs": {
                "2e89e396": [
                    "#78"
                ],
                "1d59bb05": [
                    "#80"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/78",
                "https://github.com/f4b6a3/uuid-creator/commit/2e89e396",
                "https://github.com/f4b6a3/uuid-creator/issues/80",
                "https://github.com/f4b6a3/uuid-creator/commit/1d59bb05"
            ]
        },
        {
            "poj_link": "https://github.com/jd-opensource/vtdriver/",
            "file_path": "jd-opensource/vtdriver/src/test/java/com/jd/jdbc/planbuilder/semantics/TableSetTest.java",
            "test_name": "testTableSetKeepOnly",
            "FQS": "com.jd.jdbc.planbuilder.semantics.TableSetTest.testTableSetKeepOnly()",
            "start_line": "162",
            "blame_result": "3e1572d0 (wangweicugw 2024-01-05 10:17:42 +0800 163) \n3e1572d0 (wangweicugw 2024-01-05 10:17:42 +0800 164)         TableSet ts1, ts2, result;\n3e1572d0 (wangweicugw 2024-01-05 10:17:42 +0800 165) \n3e1572d0 (wangweicugw 2024-01-05 10:17:42 +0800 166)         // Test case 1\n3e1572d0 (wangweicugw 2024-01-05 10:17:42 +0800 167)         ts1 = singleTableSet(1).merge(singleTableSet(2)).merge(singleTableSet(3));\n",
            "commit_hashes": {
                "3e1572d0": "    Gen4 init (#147)"
            },
            "Commit&issueIDs": {
                "3e1572d0": [
                    "147"
                ]
            },
            "links": [
                "https://github.com/jd-opensource/vtdriver/issues/147",
                "https://github.com/jd-opensource/vtdriver/commit/3e1572d0"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/alt/GUIDTest.java",
            "test_name": "testV1",
            "FQS": "com.github.f4b6a3.uuid.alt.GUIDTest.testV1()",
            "start_line": "106",
            "blame_result": "2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 107) \t\tGUID prev = GUID.v1();\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 108) \t\tfor (int i = 0; i < DEFAULT_LOOP_MAX; i++) {\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 109) \t\t\tlong t0 = System.currentTimeMillis();\n1d59bb05 (Fabio Lima 2023-05-01 01:10:47 -0300 110) \t\t\tGUID guid = GUID.v1();\n1d59bb05 (Fabio Lima 2023-05-01 01:10:47 -0300 111) \t\t\tlong t1 = UuidTime.toUnixTimestamp(guid.toUUID().timestamp()) / 10_000L;\n",
            "commit_hashes": {
                "2e89e396": "    Add an alternative to the JDK's built-in UUID #78",
                "1d59bb05": "    Remove the GUID.get() method, synonymous with GUID.toUUID() #80"
            },
            "Commit&issueIDs": {
                "2e89e396": [
                    "#78"
                ],
                "1d59bb05": [
                    "#80"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/78",
                "https://github.com/f4b6a3/uuid-creator/commit/2e89e396",
                "https://github.com/f4b6a3/uuid-creator/issues/80",
                "https://github.com/f4b6a3/uuid-creator/commit/1d59bb05"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/alt/GUIDTest.java",
            "test_name": "testV3",
            "FQS": "com.github.f4b6a3.uuid.alt.GUIDTest.testV3()",
            "start_line": "144",
            "blame_result": "2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 145) \t\tGUID prev = GUID.v3(GUID.NIL, \"\");\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 146) \t\tfor (int i = 0; i < DEFAULT_LOOP_MAX; i++) {\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 147) \t\t\tGUID namespace = new GUID(UUID.randomUUID());\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 148) \t\t\tString name = UUID.randomUUID().toString();\n1d59bb05 (Fabio Lima 2023-05-01 01:10:47 -0300 149) \t\t\tGUID guid = GUID.v3(namespace, name);\n",
            "commit_hashes": {
                "2e89e396": "    Add an alternative to the JDK's built-in UUID #78",
                "1d59bb05": "    Remove the GUID.get() method, synonymous with GUID.toUUID() #80"
            },
            "Commit&issueIDs": {
                "2e89e396": [
                    "#78"
                ],
                "1d59bb05": [
                    "#80"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/78",
                "https://github.com/f4b6a3/uuid-creator/commit/2e89e396",
                "https://github.com/f4b6a3/uuid-creator/issues/80",
                "https://github.com/f4b6a3/uuid-creator/commit/1d59bb05"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/alt/GUIDTest.java",
            "test_name": "testV4",
            "FQS": "com.github.f4b6a3.uuid.alt.GUIDTest.testV4()",
            "start_line": "174",
            "blame_result": "2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 175) \t\tGUID prev = GUID.v4();\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 176) \t\tfor (int i = 0; i < DEFAULT_LOOP_MAX; i++) {\n1d59bb05 (Fabio Lima 2023-05-01 01:10:47 -0300 177) \t\t\tGUID guid = GUID.v4();\n1d59bb05 (Fabio Lima 2023-05-01 01:10:47 -0300 178) \t\t\tassertNotNull(guid);\n1d59bb05 (Fabio Lima 2023-05-01 01:10:47 -0300 179) \t\t\tassertNotEquals(prev, guid);\n",
            "commit_hashes": {
                "2e89e396": "    Add an alternative to the JDK's built-in UUID #78",
                "1d59bb05": "    Remove the GUID.get() method, synonymous with GUID.toUUID() #80"
            },
            "Commit&issueIDs": {
                "2e89e396": [
                    "#78"
                ],
                "1d59bb05": [
                    "#80"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/78",
                "https://github.com/f4b6a3/uuid-creator/commit/2e89e396",
                "https://github.com/f4b6a3/uuid-creator/issues/80",
                "https://github.com/f4b6a3/uuid-creator/commit/1d59bb05"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/alt/GUIDTest.java",
            "test_name": "testV5",
            "FQS": "com.github.f4b6a3.uuid.alt.GUIDTest.testV5()",
            "start_line": "188",
            "blame_result": "2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 189) \t\tGUID prev = GUID.v5(GUID.NIL, \"\");\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 190) \t\tfor (int i = 0; i < DEFAULT_LOOP_MAX; i++) {\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 191) \t\t\tGUID namespace = new GUID(UUID.randomUUID());\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 192) \t\t\tString name = UUID.randomUUID().toString();\n1d59bb05 (Fabio Lima 2023-05-01 01:10:47 -0300 193) \t\t\tGUID guid = GUID.v5(namespace, name);\n",
            "commit_hashes": {
                "2e89e396": "    Add an alternative to the JDK's built-in UUID #78",
                "1d59bb05": "    Remove the GUID.get() method, synonymous with GUID.toUUID() #80"
            },
            "Commit&issueIDs": {
                "2e89e396": [
                    "#78"
                ],
                "1d59bb05": [
                    "#80"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/78",
                "https://github.com/f4b6a3/uuid-creator/commit/2e89e396",
                "https://github.com/f4b6a3/uuid-creator/issues/80",
                "https://github.com/f4b6a3/uuid-creator/commit/1d59bb05"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/alt/GUIDTest.java",
            "test_name": "testV6",
            "FQS": "com.github.f4b6a3.uuid.alt.GUIDTest.testV6()",
            "start_line": "217",
            "blame_result": "2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 218) \t\tGUID prev = GUID.v6();\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 219) \t\tfor (int i = 0; i < DEFAULT_LOOP_MAX; i++) {\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 220) \t\t\tlong t0 = System.currentTimeMillis();\n1d59bb05 (Fabio Lima 2023-05-01 01:10:47 -0300 221) \t\t\tGUID guid = GUID.v6();\n1d59bb05 (Fabio Lima 2023-05-01 01:10:47 -0300 222) \t\t\tGUID temp = new GUID(TimeOrderedCodec.INSTANCE.decode(guid.toUUID()));\n",
            "commit_hashes": {
                "2e89e396": "    Add an alternative to the JDK's built-in UUID #78",
                "1d59bb05": "    Remove the GUID.get() method, synonymous with GUID.toUUID() #80"
            },
            "Commit&issueIDs": {
                "2e89e396": [
                    "#78"
                ],
                "1d59bb05": [
                    "#80"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/78",
                "https://github.com/f4b6a3/uuid-creator/commit/2e89e396",
                "https://github.com/f4b6a3/uuid-creator/issues/80",
                "https://github.com/f4b6a3/uuid-creator/commit/1d59bb05"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/alt/GUIDTest.java",
            "test_name": "testHashCode",
            "FQS": "com.github.f4b6a3.uuid.alt.GUIDTest.testHashCode()",
            "start_line": "320",
            "blame_result": "2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 321) \n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 322) \t\tRandom random = new Random();\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 323) \t\tbyte[] bytes = new byte[GUID.GUID_BYTES];\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 324) \n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 325) \t\t// invoked on the same object\n",
            "commit_hashes": {
                "2e89e396": "    Add an alternative to the JDK's built-in UUID #78"
            },
            "Commit&issueIDs": {
                "2e89e396": [
                    "#78"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/78",
                "https://github.com/f4b6a3/uuid-creator/commit/2e89e396"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/alt/GUIDTest.java",
            "test_name": "testEquals",
            "FQS": "com.github.f4b6a3.uuid.alt.GUIDTest.testEquals()",
            "start_line": "342",
            "blame_result": "2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 343) \n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 344) \t\tRandom random = new Random();\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 345) \t\tbyte[] bytes = new byte[GUID.GUID_BYTES];\n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 346) \n2e89e396 (Fabio Lima 2023-04-30 17:08:59 -0300 347) \t\tfor (int i = 0; i < DEFAULT_LOOP_MAX; i++) {\n",
            "commit_hashes": {
                "2e89e396": "    Add an alternative to the JDK's built-in UUID #78"
            },
            "Commit&issueIDs": {
                "2e89e396": [
                    "#78"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/78",
                "https://github.com/f4b6a3/uuid-creator/commit/2e89e396"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/codec/BinaryCodecTest.java",
            "test_name": "testEncodeAndDecode",
            "FQS": "com.github.f4b6a3.uuid.codec.BinaryCodecTest.testEncodeAndDecode()",
            "start_line": "73",
            "blame_result": "a355af77 src/test/java/com/github/f4b6a3/uuid/codec/BinaryCodecTest.java    (Fabio Lima 2022-06-27 06:37:43 -0300 74) \na355af77 src/test/java/com/github/f4b6a3/uuid/codec/BinaryCodecTest.java    (Fabio Lima 2022-06-27 06:37:43 -0300 75) \t\tfinal BinaryCodec codec = new BinaryCodec();\na355af77 src/test/java/com/github/f4b6a3/uuid/codec/BinaryCodecTest.java    (Fabio Lima 2022-06-27 06:37:43 -0300 76) \ndb8a48ff src/test/java/com/github/f4b6a3/uuid/codec/UuidBytesCodecTest.java (Fabio Lima 2020-12-13 18:41:40 -0300 77) \t\tfor (int i = 0; i < DEFAULT_LOOP_LIMIT; i++) {\nf2ca4757 src/test/java/com/github/f4b6a3/uuid/codec/BinaryCodecTest.java    (Fabio Lima 2020-12-20 17:20:23 -0300 78) \t\t\tUUID uuid = UUID.randomUUID();\n",
            "commit_hashes": {
                "a355af77": "    Version 5.0.0 #68",
                "db8a48ff": "    UUID Slugs #30",
                "f2ca4757": "    Finished codecs for base-n, slug, ncname, uri, etc #30"
            },
            "Commit&issueIDs": {
                "a355af77": [
                    "#68"
                ],
                "db8a48ff": [
                    "#30"
                ],
                "f2ca4757": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/68",
                "https://github.com/f4b6a3/uuid-creator/commit/a355af77",
                "https://github.com/f4b6a3/uuid-creator/issues/30",
                "https://github.com/f4b6a3/uuid-creator/commit/db8a48ff",
                "https://github.com/f4b6a3/uuid-creator/issues/30",
                "https://github.com/f4b6a3/uuid-creator/commit/f2ca4757"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/codec/UriCodecTest.java",
            "test_name": "testEncodeAndDecode",
            "FQS": "com.github.f4b6a3.uuid.codec.UriCodecTest.testEncodeAndDecode()",
            "start_line": "42",
            "blame_result": "a355af77 src/test/java/com/github/f4b6a3/uuid/codec/UriCodecTest.java         (Fabio Lima 2022-06-27 06:37:43 -0300 43) \t\tUriCodec codec = new UriCodec();\n9dec9a72 src/test/java/com/github/f4b6a3/uuid/codec/uri/UuidUriCodecTest.java (Fabio Lima 2020-12-13 18:44:36 -0300 44) \t\tfor (int i = 0; i < DEFAULT_LOOP_LIMIT; i++) {\nf2ca4757 src/test/java/com/github/f4b6a3/uuid/codec/uri/UriCodecTest.java     (Fabio Lima 2020-12-20 17:20:23 -0300 45) \t\t\tUUID uuid = UUID.randomUUID();\nf2ca4757 src/test/java/com/github/f4b6a3/uuid/codec/uri/UriCodecTest.java     (Fabio Lima 2020-12-20 17:20:23 -0300 46) \t\t\tURI uri = codec.encode(uuid); // encode\nf2ca4757 src/test/java/com/github/f4b6a3/uuid/codec/uri/UriCodecTest.java     (Fabio Lima 2020-12-20 17:20:23 -0300 47) \t\t\tassertEquals(uuid, codec.decode(uri)); // decode back\n",
            "commit_hashes": {
                "a355af77": "    Version 5.0.0 #68",
                "9dec9a72": "    UUID URIs #32",
                "f2ca4757": "    Finished codecs for base-n, slug, ncname, uri, etc #30"
            },
            "Commit&issueIDs": {
                "a355af77": [
                    "#68"
                ],
                "9dec9a72": [
                    "#32"
                ],
                "f2ca4757": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/68",
                "https://github.com/f4b6a3/uuid-creator/commit/a355af77",
                "https://github.com/f4b6a3/uuid-creator/issues/32",
                "https://github.com/f4b6a3/uuid-creator/commit/9dec9a72",
                "https://github.com/f4b6a3/uuid-creator/issues/30",
                "https://github.com/f4b6a3/uuid-creator/commit/f2ca4757"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/codec/other/DotNetGuid4CodecTest.java",
            "test_name": "testEncodeAndDecode",
            "FQS": "com.github.f4b6a3.uuid.codec.other.DotNetGuid4CodecTest.testEncodeAndDecode()",
            "start_line": "34",
            "blame_result": "f2ca4757 src/test/java/com/github/f4b6a3/uuid/codec/uuid/DotNetGuid4CodecTest.java (Fabio Lima 2020-12-20 17:20:23 -0300 35) \nf2ca4757 src/test/java/com/github/f4b6a3/uuid/codec/uuid/DotNetGuid4CodecTest.java (Fabio Lima 2020-12-20 17:20:23 -0300 36) \t\tUUID uuidv1;\nf2ca4757 src/test/java/com/github/f4b6a3/uuid/codec/uuid/DotNetGuid4CodecTest.java (Fabio Lima 2020-12-20 17:20:23 -0300 37) \t\tUUID msguid;\nf2ca4757 src/test/java/com/github/f4b6a3/uuid/codec/uuid/DotNetGuid4CodecTest.java (Fabio Lima 2020-12-20 17:20:23 -0300 38) \nf2ca4757 src/test/java/com/github/f4b6a3/uuid/codec/uuid/DotNetGuid4CodecTest.java (Fabio Lima 2020-12-20 17:20:23 -0300 39) \t\tfor (int i = 0; i < DEFAULT_LOOP_LIMIT; i++) {\n",
            "commit_hashes": {
                "f2ca4757": "    Finished codecs for base-n, slug, ncname, uri, etc #30"
            },
            "Commit&issueIDs": {
                "f2ca4757": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/30",
                "https://github.com/f4b6a3/uuid-creator/commit/f2ca4757"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/codec/other/NcnameCodecTest.java",
            "test_name": "testEncodeAndDecode",
            "FQS": "com.github.f4b6a3.uuid.codec.other.NcnameCodecTest.testEncodeAndDecode()",
            "start_line": "107",
            "blame_result": "a355af77 src/test/java/com/github/f4b6a3/uuid/codec/other/NcnameCodecTest.java  (Fabio Lima 2022-06-27 06:37:43 -0300 108) \t\tNcnameCodec codec = new NcnameCodec();\ndb8a48ff src/test/java/com/github/f4b6a3/uuid/codec/slug/UuidSlugCodecTest.java (Fabio Lima 2020-12-13 18:41:40 -0300 109) \t\tfor (int i = 0; i < DEFAULT_LOOP_LIMIT; i++) {\ndb8a48ff src/test/java/com/github/f4b6a3/uuid/codec/slug/UuidSlugCodecTest.java (Fabio Lima 2020-12-13 18:41:40 -0300 110) \t\t\tUUID uuid = UUID.randomUUID();\nf2ca4757 src/test/java/com/github/f4b6a3/uuid/codec/name/NcnameCodecTest.java   (Fabio Lima 2020-12-20 17:20:23 -0300 111) \t\t\tString string = codec.encode(uuid); // encode\nf2ca4757 src/test/java/com/github/f4b6a3/uuid/codec/name/NcnameCodecTest.java   (Fabio Lima 2020-12-20 17:20:23 -0300 112) \t\t\tassertEquals(uuid, codec.decode(string)); // decode back\n",
            "commit_hashes": {
                "a355af77": "    Version 5.0.0 #68",
                "db8a48ff": "    UUID Slugs #30",
                "f2ca4757": "    Finished codecs for base-n, slug, ncname, uri, etc #30"
            },
            "Commit&issueIDs": {
                "a355af77": [
                    "#68"
                ],
                "db8a48ff": [
                    "#30"
                ],
                "f2ca4757": [
                    "#30"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/68",
                "https://github.com/f4b6a3/uuid-creator/commit/a355af77",
                "https://github.com/f4b6a3/uuid-creator/issues/30",
                "https://github.com/f4b6a3/uuid-creator/commit/db8a48ff",
                "https://github.com/f4b6a3/uuid-creator/issues/30",
                "https://github.com/f4b6a3/uuid-creator/commit/f2ca4757"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/factory/function/impl/DefaultClockSeqFunctionTest.java",
            "test_name": "testGetClockSequenceIncremented",
            "FQS": "com.github.f4b6a3.uuid.factory.function.impl.DefaultClockSeqFunctionTest.testGetClockSequenceIncremented()",
            "start_line": "105",
            "blame_result": "320fee8b src/test/java/com/github/f4b6a3/uuid/increment/ClockSequenceTest.java                       (Fabio Lima 2018-11-18 05:29:31 -0300 106) \nb018d98e src/test/java/com/github/f4b6a3/uuid/factory/function/impl/DefaultClockSeqFunctionTest.java (Fabio Lima 2021-11-06 02:43:20 -0300 107) \t\t// It should increment if the new timestamp is LOWER THAN the old one\n3e80c994 src/test/java/com/github/f4b6a3/uuid/clockseq/DefaultClockSequenceStrategyTest.java         (Fabio Lima 2019-05-17 02:52:23 -0300 108) \t\tlong oldTimestamp = 1000;\n3e80c994 src/test/java/com/github/f4b6a3/uuid/clockseq/DefaultClockSequenceStrategyTest.java         (Fabio Lima 2019-05-17 02:52:23 -0300 109) \t\tlong newTimestamp = 999;\n79c88654 src/test/java/com/github/f4b6a3/uuid/factory/function/impl/DefaultClockSeqFunctionTest.java (Fabio Lima 2021-08-14 06:17:48 -0300 110) \t\tDefaultClockSeqFunction clockSequence = new DefaultClockSeqFunction();\n",
            "commit_hashes": {
                "320fee8b": "    Many changes, corrections and tests",
                "b018d98e": "    regular maintenance",
                "3e80c994": "    Sonar lint",
                "79c88654": "    Version 4.0.0 #45"
            },
            "Commit&issueIDs": {
                "79c88654": [
                    "#45"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/45",
                "https://github.com/f4b6a3/uuid-creator/commit/79c88654"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/factory/standard/TimeBasedFactoryTest.java",
            "test_name": "testGetTimeBasedCheckTimestamp",
            "FQS": "com.github.f4b6a3.uuid.factory.standard.TimeBasedFactoryTest.testGetTimeBasedCheckTimestamp()",
            "start_line": "81",
            "blame_result": "1f2ebd98 src/test/java/com/github/f4b6a3/uuid/creator/rfc4122/TimeBasedUuidCreatorTest.java (Fabio Lima 2020-04-13 17:43:01 -0300 82) \n24b2573f src/test/java/com/github/f4b6a3/uuid/UuidCreatorTest.java                          (Fabio Lima 2019-05-18 23:34:00 -0300 83) \t\tfor (int i = 0; i < DEFAULT_LOOP_MAX; i++) {\n72c60b31 src/test/java/com/github/f4b6a3/uuid/UUIDGeneratorTest.java                        (Fabio Lima 2018-11-17 11:28:06 -0300 84) \n72c60b31 src/test/java/com/github/f4b6a3/uuid/UUIDGeneratorTest.java                        (Fabio Lima 2018-11-17 11:28:06 -0300 85) \t\t\tInstant instant1 = Instant.now();\n79c88654 src/test/java/com/github/f4b6a3/uuid/factory/rfc4122/TimeBasedFactoryTest.java     (Fabio Lima 2021-08-14 06:17:48 -0300 86) \t\t\tUUID uuid = TimeBasedFactory.builder().withInstant(instant1).build().create();\n",
            "commit_hashes": {
                "1f2ebd98": "    Continuing v2.0.0 development",
                "24b2573f": "    Added an initial random offset for the timestamp counter",
                "72c60b31": "    Refactored Time Based UUIDC reator and created DCE Security UUID Creator",
                "79c88654": "    Version 4.0.0 #45"
            },
            "Commit&issueIDs": {
                "79c88654": [
                    "#45"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/45",
                "https://github.com/f4b6a3/uuid-creator/commit/79c88654"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/factory/standard/TimeOrderedFactoryTest.java",
            "test_name": "testGetTimeOrderedCheckTimestamp",
            "FQS": "com.github.f4b6a3.uuid.factory.standard.TimeOrderedFactoryTest.testGetTimeOrderedCheckTimestamp()",
            "start_line": "80",
            "blame_result": "1f2ebd98 src/test/java/com/github/f4b6a3/uuid/creator/rfc4122/TimeOrderedUuidCreatorTest.java (Fabio Lima 2020-04-13 17:43:01 -0300 81) \n1f2ebd98 src/test/java/com/github/f4b6a3/uuid/creator/rfc4122/TimeOrderedUuidCreatorTest.java (Fabio Lima 2020-04-13 17:43:01 -0300 82) \t\tfor (int i = 0; i < DEFAULT_LOOP_MAX; i++) {\n1f2ebd98 src/test/java/com/github/f4b6a3/uuid/creator/rfc4122/TimeOrderedUuidCreatorTest.java (Fabio Lima 2020-04-13 17:43:01 -0300 83) \n1f2ebd98 src/test/java/com/github/f4b6a3/uuid/creator/rfc4122/TimeOrderedUuidCreatorTest.java (Fabio Lima 2020-04-13 17:43:01 -0300 84) \t\t\tInstant instant1 = Instant.now();\n79c88654 src/test/java/com/github/f4b6a3/uuid/factory/rfc4122/TimeOrderedFactoryTest.java     (Fabio Lima 2021-08-14 06:17:48 -0300 85) \t\t\tUUID uuid = TimeOrderedFactory.builder().withInstant(instant1).build().create();\n",
            "commit_hashes": {
                "1f2ebd98": "    Continuing v2.0.0 development",
                "79c88654": "    Version 4.0.0 #45"
            },
            "Commit&issueIDs": {
                "79c88654": [
                    "#45"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/45",
                "https://github.com/f4b6a3/uuid-creator/commit/79c88654"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/util/UuidComparatorTest.java",
            "test_name": "testCompare",
            "FQS": "com.github.f4b6a3.uuid.util.UuidComparatorTest.testCompare()",
            "start_line": "20",
            "blame_result": "b019b099 (Fabio Lima 2022-03-12 20:29:52 -0300 21) \nb019b099 (Fabio Lima 2022-03-12 20:29:52 -0300 22) \t\tUuidComparator comparator = new UuidComparator();\nb019b099 (Fabio Lima 2022-03-12 20:29:52 -0300 23) \nb019b099 (Fabio Lima 2022-03-12 20:29:52 -0300 24) \t\tUUID x = null;\nb019b099 (Fabio Lima 2022-03-12 20:29:52 -0300 25) \t\tUUID y = null;\n",
            "commit_hashes": {
                "b019b099": "    feat: UUID Comparators (feature request) #62"
            },
            "Commit&issueIDs": {
                "b019b099": [
                    "#62"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/62",
                "https://github.com/f4b6a3/uuid-creator/commit/b019b099"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/util/UuidTimeTest.java",
            "test_name": "testFromInstantToUnixTimestamp",
            "FQS": "com.github.f4b6a3.uuid.util.UuidTimeTest.testFromInstantToUnixTimestamp()",
            "start_line": "13",
            "blame_result": "79c88654 src/test/java/com/github/f4b6a3/uuid/util/UuidTimeTest.java      (Fabio Lima 2021-08-14 06:17:48 -0300 14) \t\tInstant instant1 = Instant.now().truncatedTo(ChronoUnit.MICROS);\n79c88654 src/test/java/com/github/f4b6a3/uuid/util/UuidTimeTest.java      (Fabio Lima 2021-08-14 06:17:48 -0300 15) \t\tlong unixTimestamp = UuidTime.toUnixTimestamp(instant1);\n79c88654 src/test/java/com/github/f4b6a3/uuid/util/UuidTimeTest.java      (Fabio Lima 2021-08-14 06:17:48 -0300 16) \t\tInstant instant2 = UuidTime.fromUnixTimestamp(unixTimestamp);\ndd6a1db6 src/test/java/com/github/f4b6a3/uuid/util/TimestampUtilTest.java (Fabio Lima 2018-11-19 00:56:48 -0300 17) \t\tassertEquals(instant1, instant2);\ndd6a1db6 src/test/java/com/github/f4b6a3/uuid/util/TimestampUtilTest.java (Fabio Lima 2018-11-19 00:56:48 -0300 18) \t}\n",
            "commit_hashes": {
                "79c88654": "    Version 4.0.0 #45",
                "dd6a1db6": "    More changes, corrections and tests"
            },
            "Commit&issueIDs": {
                "79c88654": [
                    "#45"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/45",
                "https://github.com/f4b6a3/uuid-creator/commit/79c88654"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/uuid-creator/",
            "file_path": "f4b6a3/uuid-creator/src/test/java/com/github/f4b6a3/uuid/util/UuidTimeTest.java",
            "test_name": "testFromInstantToGregTimestamp",
            "FQS": "com.github.f4b6a3.uuid.util.UuidTimeTest.testFromInstantToGregTimestamp()",
            "start_line": "21",
            "blame_result": "79c88654 src/test/java/com/github/f4b6a3/uuid/util/UuidTimeTest.java      (Fabio Lima 2021-08-14 06:17:48 -0300 22) \t\tInstant instant1 = Instant.now().truncatedTo(ChronoUnit.MICROS);\n79c88654 src/test/java/com/github/f4b6a3/uuid/util/UuidTimeTest.java      (Fabio Lima 2021-08-14 06:17:48 -0300 23) \t\tlong gregTimestamp = UuidTime.toGregTimestamp(instant1);\n79c88654 src/test/java/com/github/f4b6a3/uuid/util/UuidTimeTest.java      (Fabio Lima 2021-08-14 06:17:48 -0300 24) \t\tInstant instant2 = UuidTime.fromGregTimestamp(gregTimestamp);\ndd6a1db6 src/test/java/com/github/f4b6a3/uuid/util/TimestampUtilTest.java (Fabio Lima 2018-11-19 00:56:48 -0300 25) \t\tassertEquals(instant1, instant2);\ndd6a1db6 src/test/java/com/github/f4b6a3/uuid/util/TimestampUtilTest.java (Fabio Lima 2018-11-19 00:56:48 -0300 26) \t}\n",
            "commit_hashes": {
                "79c88654": "    Version 4.0.0 #45",
                "dd6a1db6": "    More changes, corrections and tests"
            },
            "Commit&issueIDs": {
                "79c88654": [
                    "#45"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/uuid-creator/issues/45",
                "https://github.com/f4b6a3/uuid-creator/commit/79c88654"
            ]
        },
        {
            "poj_link": "https://github.com/metamx/java-util/",
            "file_path": "metamx/java-util/src/test/java/com/metamx/common/FileUtilsTest.java",
            "test_name": "testMap",
            "FQS": "com.metamx.common.FileUtilsTest.testMap()",
            "start_line": "35",
            "blame_result": "f02b9ce5 (Roman Leventov 2016-09-21 21:13:38 +0300 36)   {\nf02b9ce5 (Roman Leventov 2016-09-21 21:13:38 +0300 37)     File dataFile = folder.newFile(\"data\");\nf02b9ce5 (Roman Leventov 2016-09-21 21:13:38 +0300 38)     long buffersMemoryBefore = BufferUtils.totalMemoryUsedByDirectAndMappedBuffers();\nf02b9ce5 (Roman Leventov 2016-09-21 21:13:38 +0300 39)     try (RandomAccessFile raf = new RandomAccessFile(dataFile, \"rw\")) {\nf02b9ce5 (Roman Leventov 2016-09-21 21:13:38 +0300 40)       raf.write(42);\n",
            "commit_hashes": {
                "f02b9ce5": "    Add ResourceHandler, FileUtils.map() returning ResourceHandler (#51)"
            },
            "Commit&issueIDs": {
                "f02b9ce5": [
                    "51"
                ]
            },
            "links": [
                "https://github.com/metamx/java-util/issues/51",
                "https://github.com/metamx/java-util/commit/f02b9ce5"
            ]
        },
        {
            "poj_link": "https://github.com/apache/shardingsphere/",
            "file_path": "apache/shardingsphere/infra/common/src/test/java/org/apache/shardingsphere/infra/metadata/database/resource/node/StorageNodeTest.java",
            "test_name": "assertHashcode",
            "FQS": "org.apache.shardingsphere.infra.metadata.database.resource.node.StorageNodeTest.assertHashcode()",
            "start_line": "44",
            "blame_result": "44771f4c207f (Liang Zhang 2024-10-14 23:22:51 +0800 45)         assertThat(new StorageNode(\"localhost\", 3306, \"root\").hashCode(), is(new StorageNode(\"LOCALHOST\", 3306, \"ROOT\").hashCode()));\n44771f4c207f (Liang Zhang 2024-10-14 23:22:51 +0800 46)     }\n44771f4c207f (Liang Zhang 2024-10-14 23:22:51 +0800 47)     \n44771f4c207f (Liang Zhang 2024-10-14 23:22:51 +0800 48)     @Test\n44771f4c207f (Liang Zhang 2024-10-14 23:22:51 +0800 49)     void assertToString() {\n",
            "commit_hashes": {
                "44771f4c207f": "    Add test cases on ResourceMetaData (#33245)"
            },
            "Commit&issueIDs": {
                "44771f4c207f": [
                    "33245"
                ]
            },
            "links": [
                "https://github.com/apache/shardingsphere/issues/33245",
                "https://github.com/apache/shardingsphere/commit/44771f4c207f"
            ]
        },
        {
            "poj_link": "https://github.com/metamx/java-util/",
            "file_path": "metamx/java-util/src/test/java/com/metamx/common/io/smoosh/SmooshedFileMapperTest.java",
            "test_name": "testDeterministicFileUnmapping",
            "FQS": "com.metamx.common.io.smoosh.SmooshedFileMapperTest.testDeterministicFileUnmapping()",
            "start_line": "137",
            "blame_result": "f02b9ce5 (Roman Leventov 2016-09-21 21:13:38 +0300 138)   {\nf02b9ce5 (Roman Leventov 2016-09-21 21:13:38 +0300 139)     File baseDir = folder.newFolder(\"base\");\nf02b9ce5 (Roman Leventov 2016-09-21 21:13:38 +0300 140) \nf02b9ce5 (Roman Leventov 2016-09-21 21:13:38 +0300 141)     long totalMemoryUsedBeforeAddingFile = BufferUtils.totalMemoryUsedByDirectAndMappedBuffers();\nf02b9ce5 (Roman Leventov 2016-09-21 21:13:38 +0300 142)     try (FileSmoosher smoosher = new FileSmoosher(baseDir)) {\n",
            "commit_hashes": {
                "f02b9ce5": "    Add ResourceHandler, FileUtils.map() returning ResourceHandler (#51)"
            },
            "Commit&issueIDs": {
                "f02b9ce5": [
                    "51"
                ]
            },
            "links": [
                "https://github.com/metamx/java-util/issues/51",
                "https://github.com/metamx/java-util/commit/f02b9ce5"
            ]
        },
        {
            "poj_link": "https://github.com/metamx/java-util/",
            "file_path": "metamx/java-util/src/test/java/com/metamx/metrics/cgroups/CpuAcctTest.java",
            "test_name": "testSimpleLoad",
            "FQS": "com.metamx.metrics.cgroups.CpuAcctTest.testSimpleLoad()",
            "start_line": "71",
            "blame_result": "e6fa0cb0 (Roman Leventov 2017-10-13 16:53:53 -0500 72)   {\n1ff274b8 (Charles Allen  2017-10-20 13:26:26 -0700 73)     final CpuAcct cpuAcct = new CpuAcct(discoverer);\ne6fa0cb0 (Roman Leventov 2017-10-13 16:53:53 -0500 74)     final CpuAcct.CpuAcctMetric snapshot = cpuAcct.snapshot();\ne6fa0cb0 (Roman Leventov 2017-10-13 16:53:53 -0500 75)     Assert.assertEquals(128, snapshot.cpuCount());\ne6fa0cb0 (Roman Leventov 2017-10-13 16:53:53 -0500 76)     Assert.assertArrayEquals(new long[]{\n",
            "commit_hashes": {
                "e6fa0cb0": "    Monorepo (#63)",
                "1ff274b8": "    Better cgroup handling in metrics monitoring (#66)"
            },
            "Commit&issueIDs": {
                "e6fa0cb0": [
                    "63"
                ],
                "1ff274b8": [
                    "66"
                ]
            },
            "links": [
                "https://github.com/metamx/java-util/issues/63",
                "https://github.com/metamx/java-util/commit/e6fa0cb0",
                "https://github.com/metamx/java-util/issues/66",
                "https://github.com/metamx/java-util/commit/1ff274b8"
            ]
        },
        {
            "poj_link": "https://github.com/zxing/zxing/",
            "file_path": "zxing/zxing/core/src/test/java/com/google/zxing/oned/CodaBarWriterTestCase.java",
            "test_name": "testAltStartEnd",
            "FQS": "com.google.zxing.oned.CodaBarWriterTestCase.testAltStartEnd()",
            "start_line": "49",
            "blame_result": "17f3ab9c7 (srowen    2013-12-19 14:35:03 +0000 50)     assertEquals(encode(\"T123456789-$T\"), encode(\"A123456789-$A\"));\n17f3ab9c7 (srowen    2013-12-19 14:35:03 +0000 51)   }\n17f3ab9c7 (srowen    2013-12-19 14:35:03 +0000 52) \n40c2e2e9a (Sean Owen 2020-09-06 18:21:05 -0500 53)   private static void doTest(String input, CharSequence expected) {\n17f3ab9c7 (srowen    2013-12-19 14:35:03 +0000 54)     BitMatrix result = encode(input);\n",
            "commit_hashes": {
                "17f3ab9c7": "    Issue 1823: fix handling of initial alt Codabar char, and improve tests",
                "40c2e2e9a": "    Many small updates from code analysis; remove unused files; tune server params (#1311)"
            },
            "Commit&issueIDs": {
                "40c2e2e9a": [
                    "(#1311)"
                ]
            },
            "links": [
                "https://github.com/zxing/zxing/issues/1311",
                "https://github.com/zxing/zxing/commit/40c2e2e9a"
            ]
        },
        {
            "poj_link": "https://github.com/elaatifi/orika/",
            "file_path": "elaatifi/orika/tests/src/main/java/ma/glasnost/orika/test/community/Issue69TestCase.java",
            "test_name": "verify",
            "FQS": "ma.glasnost.orika.test.community.Issue69TestCase.verify()",
            "start_line": "43",
            "blame_result": "82c8a63d core/src/test/java/ma/glasnost/orika/test/community/Issue69TestCase.java              (mdeboer  2012-11-23 22:11:08 -0800 44)         \nf5b40963 core/src/test/java/ma/glasnost/orika/test/constructor/ConstructorMappingTestCase.java (elaatifi 2011-11-10 15:21:25 +0000 45)         MapperFactory factory = MappingUtil.getMapperFactory();\n82c8a63d core/src/test/java/ma/glasnost/orika/test/community/Issue69TestCase.java              (mdeboer  2012-11-23 22:11:08 -0800 46)         MapperFacade mapper = factory.getMapperFacade();\n82c8a63d core/src/test/java/ma/glasnost/orika/test/community/Issue69TestCase.java              (mdeboer  2012-11-23 22:11:08 -0800 47)         \n82c8a63d core/src/test/java/ma/glasnost/orika/test/community/Issue69TestCase.java              (mdeboer  2012-11-23 22:11:08 -0800 48)         Source s = new Source();\n",
            "commit_hashes": {
                "82c8a63d": "    Applied fix for issue #69",
                "f5b40963": "    Add ObjectFactory generator"
            },
            "Commit&issueIDs": {
                "82c8a63d": [
                    "#69"
                ]
            },
            "links": [
                "https://github.com/elaatifi/orika/issues/69",
                "https://github.com/elaatifi/orika/commit/82c8a63d"
            ]
        },
        {
            "poj_link": "https://github.com/apache/shardingsphere/",
            "file_path": "apache/shardingsphere/infra/database/core/src/test/java/org/apache/shardingsphere/infra/database/core/type/DatabaseTypeRegistryTest.java",
            "test_name": "assertGetAllBranchDatabaseTypesWithTrunkType",
            "FQS": "org.apache.shardingsphere.infra.database.core.type.DatabaseTypeRegistryTest.assertGetAllBranchDatabaseTypesWithTrunkType()",
            "start_line": "33",
            "blame_result": "d99b5e1fce1e (Liang Zhang 2024-10-13 21:36:48 +0800 34)         assertThat(new DatabaseTypeRegistry(TypedSPILoader.getService(DatabaseType.class, \"TRUNK\")).getAllBranchDatabaseTypes(),\nd99b5e1fce1e (Liang Zhang 2024-10-13 21:36:48 +0800 35)                 is(Collections.singletonList(TypedSPILoader.getService(DatabaseType.class, \"BRANCH\"))));\nd99b5e1fce1e (Liang Zhang 2024-10-13 21:36:48 +0800 36)     }\nd99b5e1fce1e (Liang Zhang 2024-10-13 21:36:48 +0800 37)     \nd99b5e1fce1e (Liang Zhang 2024-10-13 21:36:48 +0800 38)     @Test\n",
            "commit_hashes": {
                "d99b5e1fce1e": "    Add more test cases on DatabaseTypeRegistry (#33229)"
            },
            "Commit&issueIDs": {
                "d99b5e1fce1e": [
                    "33229"
                ]
            },
            "links": [
                "https://github.com/apache/shardingsphere/issues/33229",
                "https://github.com/apache/shardingsphere/commit/d99b5e1fce1e"
            ]
        },
        {
            "poj_link": "https://github.com/apache/shardingsphere/",
            "file_path": "apache/shardingsphere/kernel/data-pipeline/core/src/test/java/org/apache/shardingsphere/data/pipeline/core/context/PipelineContextKeyTest.java",
            "test_name": "assertHashCodeWithProxyMode",
            "FQS": "org.apache.shardingsphere.data.pipeline.core.context.PipelineContextKeyTest.assertHashCodeWithProxyMode()",
            "start_line": "67",
            "blame_result": "aa6da27c5586 (Liang Zhang 2024-10-19 23:13:47 +0800 68)         assertThat(new PipelineContextKey(InstanceType.PROXY).hashCode(), is(new PipelineContextKey(\"foo_db\", InstanceType.PROXY).hashCode()));\naa6da27c5586 (Liang Zhang 2024-10-19 23:13:47 +0800 69)     }\naa6da27c5586 (Liang Zhang 2024-10-19 23:13:47 +0800 70)     \naa6da27c5586 (Liang Zhang 2024-10-19 23:13:47 +0800 71)     @Test\naa6da27c5586 (Liang Zhang 2024-10-19 23:13:47 +0800 72)     void assertHashCodeWithJDBCMode() {\n",
            "commit_hashes": {
                "aa6da27c5586": "    Add test cases on PipelineContextKey (#33323)"
            },
            "Commit&issueIDs": {
                "aa6da27c5586": [
                    "33323"
                ]
            },
            "links": [
                "https://github.com/apache/shardingsphere/issues/33323",
                "https://github.com/apache/shardingsphere/commit/aa6da27c5586"
            ]
        },
        {
            "poj_link": "https://github.com/apolloconfig/apollo/",
            "file_path": "apolloconfig/apollo/apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/environment/EnvTest.java",
            "test_name": "testTransformEnvValid",
            "FQS": "com.ctrip.framework.apollo.portal.environment.EnvTest.testTransformEnvValid()",
            "start_line": "129",
            "blame_result": "982a01f9bb (Diego Krupitza 2021-10-08 15:44:12 +0200 130)     assertEquals(Env.UNKNOWN, Env.transformEnv(\"UNKNOWN\"));\n982a01f9bb (Diego Krupitza 2021-10-08 15:44:12 +0200 131)     assertEquals(Env.LOCAL, Env.transformEnv(\"LOCAL\"));\n982a01f9bb (Diego Krupitza 2021-10-08 15:44:12 +0200 132)     assertEquals(Env.FAT, Env.transformEnv(\"FAT\"));\n982a01f9bb (Diego Krupitza 2021-10-08 15:44:12 +0200 133)     assertEquals(Env.FAT, Env.transformEnv(\"FWS\"));\n982a01f9bb (Diego Krupitza 2021-10-08 15:44:12 +0200 134)     assertEquals(Env.PRO, Env.transformEnv(\"PRO\"));\n",
            "commit_hashes": {
                "982a01f9bb": "    chore: Simplified the `Env` class in apollo-portal that links to `Env` enum in apollo-core (#4011)"
            },
            "Commit&issueIDs": {
                "982a01f9bb": [
                    "(#4011)"
                ]
            },
            "links": [
                "https://github.com/apolloconfig/apollo/issues/4011",
                "https://github.com/apolloconfig/apollo/commit/982a01f9bb"
            ]
        },
        {
            "poj_link": "https://github.com/decorators-squad/eo-yaml/",
            "file_path": "decorators-squad/eo-yaml/src/test/java/com/amihaiemil/eoyaml/JsonYamlMappingTest.java",
            "test_name": "canMapJsonObject",
            "FQS": "com.amihaiemil.eoyaml.JsonYamlMappingTest.canMapJsonObject()",
            "start_line": "49",
            "blame_result": "e8da878f (cristianpela 2020-10-31 12:16:28 +0200 50)         final JsonObject json = Json.createObjectBuilder()\ne8da878f (cristianpela 2020-10-31 12:16:28 +0200 51)             .add(\"architect\", \"mihai\")\ne8da878f (cristianpela 2020-10-31 12:16:28 +0200 52)             .add(\"developers\",\ne8da878f (cristianpela 2020-10-31 12:16:28 +0200 53)                 Json.createArrayBuilder()\ne8da878f (cristianpela 2020-10-31 12:16:28 +0200 54)                     .add(\"rultor\")\n",
            "commit_hashes": {
                "e8da878f": "    #231 Added + tested Yaml.fromJsonObject()"
            },
            "Commit&issueIDs": {
                "e8da878f": [
                    "#231"
                ]
            },
            "links": [
                "https://github.com/decorators-squad/eo-yaml/issues/231",
                "https://github.com/decorators-squad/eo-yaml/commit/e8da878f"
            ]
        },
        {
            "poj_link": "https://github.com/romankh3/image-comparison/",
            "file_path": "romankh3/image-comparison/src/test/java/com/github/romankh3/image/comparison/model/RectangleUnitTest.java",
            "test_name": "shouldProperlyWorkTheSameHashCode",
            "FQS": "com.github.romankh3.image.comparison.model.RectangleUnitTest.shouldProperlyWorkTheSameHashCode()",
            "start_line": "158",
            "blame_result": "49b2837f src/test/java/ua/comparison/image/model/RectangleUnitTest.java (Roman Beskrovnyi 2019-04-07 11:59:41 +0300 159)         //given\n49b2837f src/test/java/ua/comparison/image/model/RectangleUnitTest.java (Roman Beskrovnyi 2019-04-07 11:59:41 +0300 160)         Rectangle rectangleOne = new Rectangle(1, 1, 2, 2);\n49b2837f src/test/java/ua/comparison/image/model/RectangleUnitTest.java (Roman Beskrovnyi 2019-04-07 11:59:41 +0300 161)         Rectangle rectangleTwo = new Rectangle(1, 1, 2, 2);\n49b2837f src/test/java/ua/comparison/image/model/RectangleUnitTest.java (Roman Beskrovnyi 2019-04-07 11:59:41 +0300 162) \n49b2837f src/test/java/ua/comparison/image/model/RectangleUnitTest.java (Roman Beskrovnyi 2019-04-07 11:59:41 +0300 163)         //when\n",
            "commit_hashes": {
                "49b2837f": "    #11: start (#47)"
            },
            "Commit&issueIDs": {
                "49b2837f": [
                    "(#47)"
                ]
            },
            "links": [
                "https://github.com/romankh3/image-comparison/issues/47",
                "https://github.com/romankh3/image-comparison/commit/49b2837f"
            ]
        },
        {
            "poj_link": "https://github.com/romankh3/image-comparison/",
            "file_path": "romankh3/image-comparison/src/test/java/com/github/romankh3/image/comparison/model/RectangleUnitTest.java",
            "test_name": "shouldWorkNonTheSameHashCode",
            "FQS": "com.github.romankh3.image.comparison.model.RectangleUnitTest.shouldWorkNonTheSameHashCode()",
            "start_line": "173",
            "blame_result": "49b2837f src/test/java/ua/comparison/image/model/RectangleUnitTest.java (Roman Beskrovnyi 2019-04-07 11:59:41 +0300 174)         //given\n49b2837f src/test/java/ua/comparison/image/model/RectangleUnitTest.java (Roman Beskrovnyi 2019-04-07 11:59:41 +0300 175)         Rectangle rectangleOne = new Rectangle(1, 1, 2, 2);\n49b2837f src/test/java/ua/comparison/image/model/RectangleUnitTest.java (Roman Beskrovnyi 2019-04-07 11:59:41 +0300 176)         Rectangle rectangleTwo = new Rectangle(1, 3, 2, 2);\n49b2837f src/test/java/ua/comparison/image/model/RectangleUnitTest.java (Roman Beskrovnyi 2019-04-07 11:59:41 +0300 177) \n49b2837f src/test/java/ua/comparison/image/model/RectangleUnitTest.java (Roman Beskrovnyi 2019-04-07 11:59:41 +0300 178)         //when\n",
            "commit_hashes": {
                "49b2837f": "    #11: start (#47)"
            },
            "Commit&issueIDs": {
                "49b2837f": [
                    "(#47)"
                ]
            },
            "links": [
                "https://github.com/romankh3/image-comparison/issues/47",
                "https://github.com/romankh3/image-comparison/commit/49b2837f"
            ]
        },
        {
            "poj_link": "https://github.com/jitsi/libjitsi/",
            "file_path": "jitsi/libjitsi/src/test/java/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java",
            "test_name": "testToByteArraySingleByte",
            "FQS": "org.jitsi.impl.neomedia.transform.fec.FlexFec03BitSetTest.testToByteArraySingleByte()",
            "start_line": "77",
            "blame_result": "e8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 78)     {\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 79)         byte[] bytes = new byte[] {\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 80)             (byte)0b11110000\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 81)         };\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 82) \n",
            "commit_hashes": {
                "e8505b6b6": "    Flexfec-03 implementation (#389)"
            },
            "Commit&issueIDs": {
                "e8505b6b6": [
                    "(#389)"
                ]
            },
            "links": [
                "https://github.com/jitsi/libjitsi/issues/389",
                "https://github.com/jitsi/libjitsi/commit/e8505b6b6"
            ]
        },
        {
            "poj_link": "https://github.com/jitsi/libjitsi/",
            "file_path": "jitsi/libjitsi/src/test/java/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java",
            "test_name": "testToByteArrayMultiBytes",
            "FQS": "org.jitsi.impl.neomedia.transform.fec.FlexFec03BitSetTest.testToByteArrayMultiBytes()",
            "start_line": "90",
            "blame_result": "e8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 91)     {\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 92)         byte[] bytes = new byte[] {\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 93)             (byte)0b11110000, (byte)0b11110000\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 94)         };\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 95) \n",
            "commit_hashes": {
                "e8505b6b6": "    Flexfec-03 implementation (#389)"
            },
            "Commit&issueIDs": {
                "e8505b6b6": [
                    "(#389)"
                ]
            },
            "links": [
                "https://github.com/jitsi/libjitsi/issues/389",
                "https://github.com/jitsi/libjitsi/commit/e8505b6b6"
            ]
        },
        {
            "poj_link": "https://github.com/jitsi/libjitsi/",
            "file_path": "jitsi/libjitsi/src/test/java/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java",
            "test_name": "testSetBit",
            "FQS": "org.jitsi.impl.neomedia.transform.fec.FlexFec03BitSetTest.testSetBit()",
            "start_line": "103",
            "blame_result": "e8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 104)     {\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 105)         byte[] bytes = new byte[] {\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 106)             (byte)0b01110000\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 107)         };\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 108) \n",
            "commit_hashes": {
                "e8505b6b6": "    Flexfec-03 implementation (#389)"
            },
            "Commit&issueIDs": {
                "e8505b6b6": [
                    "(#389)"
                ]
            },
            "links": [
                "https://github.com/jitsi/libjitsi/issues/389",
                "https://github.com/jitsi/libjitsi/commit/e8505b6b6"
            ]
        },
        {
            "poj_link": "https://github.com/jitsi/libjitsi/",
            "file_path": "jitsi/libjitsi/src/test/java/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java",
            "test_name": "testSetBitMultiByte",
            "FQS": "org.jitsi.impl.neomedia.transform.fec.FlexFec03BitSetTest.testSetBitMultiByte()",
            "start_line": "119",
            "blame_result": "e8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 120)     {\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 121)         byte[] bytes = new byte[] {\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 122)             (byte)0b01110000, (byte)0b01110000\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 123)         };\ne8505b6b6 test/org/jitsi/impl/neomedia/transform/fec/FlexFec03BitSetTest.java (bbaldino 2017-12-15 07:49:39 -0800 124) \n",
            "commit_hashes": {
                "e8505b6b6": "    Flexfec-03 implementation (#389)"
            },
            "Commit&issueIDs": {
                "e8505b6b6": [
                    "(#389)"
                ]
            },
            "links": [
                "https://github.com/jitsi/libjitsi/issues/389",
                "https://github.com/jitsi/libjitsi/commit/e8505b6b6"
            ]
        },
        {
            "poj_link": "https://github.com/diennea/herddb/",
            "file_path": "diennea/herddb/herddb-core/src/test/java/herddb/codec/RecordSerializerTest.java",
            "test_name": "testSerializeWithNullAndNonNullTypes",
            "FQS": "herddb.codec.RecordSerializerTest.testSerializeWithNullAndNonNullTypes()",
            "start_line": "90",
            "blame_result": "2ff5af7de (tison       2019-08-24 20:26:42 +0800 91)         byte[] iBytes = RecordSerializer.serialize(new Integer(10), ColumnTypes.INTEGER);\n2ff5af7de (tison       2019-08-24 20:26:42 +0800 92)         byte[] iBytesNonNullType = RecordSerializer.serialize(new Integer(10), ColumnTypes.NOTNULL_INTEGER);\n9e0d30d40 (Amit Chavan 2019-03-13 03:01:50 -0700 93)         assertArrayEquals(iBytes, iBytesNonNullType);\n9e0d30d40 (Amit Chavan 2019-03-13 03:01:50 -0700 94) \n2ff5af7de (tison       2019-08-24 20:26:42 +0800 95)         byte[] lBytes = RecordSerializer.serialize(new Long(1982), ColumnTypes.NOTNULL_LONG);\n",
            "commit_hashes": {
                "2ff5af7de": "    Add checkstyle checks (#451)",
                "9e0d30d40": "    Support non null constraints - server side support (#345)"
            },
            "Commit&issueIDs": {
                "2ff5af7de": [
                    "(#451)"
                ],
                "9e0d30d40": [
                    "(#345)"
                ]
            },
            "links": [
                "https://github.com/diennea/herddb/issues/451",
                "https://github.com/diennea/herddb/commit/2ff5af7de",
                "https://github.com/diennea/herddb/issues/345",
                "https://github.com/diennea/herddb/commit/9e0d30d40"
            ]
        },
        {
            "poj_link": "https://github.com/diennea/herddb/",
            "file_path": "diennea/herddb/herddb-core/src/test/java/herddb/index/brin/BlockRangeIndexStorageTest.java",
            "test_name": "testSimpleReload",
            "FQS": "herddb.index.brin.BlockRangeIndexStorageTest.testSimpleReload()",
            "start_line": "44",
            "blame_result": "ebf9adc8d (eolivelli   2016-09-07 14:35:56 +0200 45) \n84bae30ba (Diego Salvi 2017-02-28 10:54:30 +0100 46)         PageReplacementPolicy policy = new RandomPageReplacementPolicy(10);\n4e09a2df8 (Diego Salvi 2018-06-18 17:14:52 +0200 47)         IndexDataStorage<Sized<Integer>, Sized<String>> storage = new MemoryIndexDataStorage<>();\nebf9adc8d (eolivelli   2016-09-07 14:35:56 +0200 48) \n4e09a2df8 (Diego Salvi 2018-06-18 17:14:52 +0200 49)         BlockRangeIndex<Sized<Integer>, Sized<String>> index = new BlockRangeIndex<>(400, policy, storage);\n",
            "commit_hashes": {
                "ebf9adc8d": "    brin index, integration, with recovery",
                "84bae30ba": "    BRIN managed pagination (with page byte size)",
                "4e09a2df8": "    BRIN keep next block reference fixes #215 (#216)"
            },
            "Commit&issueIDs": {
                "4e09a2df8": [
                    "#215",
                    "(#216)"
                ]
            },
            "links": [
                "https://github.com/diennea/herddb/issues/215",
                "https://github.com/diennea/herddb/commit/4e09a2df8"
            ]
        },
        {
            "poj_link": "https://github.com/diennea/herddb/",
            "file_path": "diennea/herddb/herddb-core/src/test/java/herddb/index/brin/BlockRangeIndexStorageTest.java",
            "test_name": "testUnload",
            "FQS": "herddb.index.brin.BlockRangeIndexStorageTest.testUnload()",
            "start_line": "134",
            "blame_result": "264251241 (eolivelli   2016-09-07 15:17:45 +0200 135) \n84bae30ba (Diego Salvi 2017-02-28 10:54:30 +0100 136)         PageReplacementPolicy policy = new RandomPageReplacementPolicy(10);\n4e09a2df8 (Diego Salvi 2018-06-18 17:14:52 +0200 137)         IndexDataStorage<Sized<Integer>, Sized<String>> storage = new MemoryIndexDataStorage<>();\n4e09a2df8 (Diego Salvi 2018-06-18 17:14:52 +0200 138) \n4e09a2df8 (Diego Salvi 2018-06-18 17:14:52 +0200 139)         BlockRangeIndex<Sized<Integer>, Sized<String>> index = new BlockRangeIndex<>(1024, policy, storage);\n",
            "commit_hashes": {
                "264251241": "    brin index, integration, with recovery",
                "84bae30ba": "    BRIN managed pagination (with page byte size)",
                "4e09a2df8": "    BRIN keep next block reference fixes #215 (#216)"
            },
            "Commit&issueIDs": {
                "4e09a2df8": [
                    "#215",
                    "(#216)"
                ]
            },
            "links": [
                "https://github.com/diennea/herddb/issues/215",
                "https://github.com/diennea/herddb/commit/4e09a2df8"
            ]
        },
        {
            "poj_link": "https://github.com/diennea/herddb/",
            "file_path": "diennea/herddb/herddb-core/src/test/java/herddb/index/brin/BlockRangeIndexStorageTest.java",
            "test_name": "testNextBlockIdAfterReload",
            "FQS": "herddb.index.brin.BlockRangeIndexStorageTest.testNextBlockIdAfterReload()",
            "start_line": "161",
            "blame_result": "264251241 (eolivelli       2016-09-07 15:17:45 +0200 162) \n84bae30ba (Diego Salvi     2017-02-28 10:54:30 +0100 163)         PageReplacementPolicy policy = new RandomPageReplacementPolicy(10);\n4e09a2df8 (Diego Salvi     2018-06-18 17:14:52 +0200 164)         IndexDataStorage<Sized<Integer>, Sized<Integer>> storage = new MemoryIndexDataStorage<>();\n4e09a2df8 (Diego Salvi     2018-06-18 17:14:52 +0200 165) \n28f35f60b (Enrico Olivelli 2019-08-13 14:49:06 +0200 166)         BlockRangeIndex<Sized<Integer>, Sized<Integer>> index = new BlockRangeIndex<>(1024, policy, storage);\n",
            "commit_hashes": {
                "264251241": "    brin index, integration, with recovery",
                "84bae30ba": "    BRIN managed pagination (with page byte size)",
                "4e09a2df8": "    BRIN keep next block reference fixes #215 (#216)",
                "28f35f60b": "    Fix BRIN blocks successor of themselves (#443)"
            },
            "Commit&issueIDs": {
                "4e09a2df8": [
                    "#215",
                    "(#216)"
                ],
                "28f35f60b": [
                    "(#443)"
                ]
            },
            "links": [
                "https://github.com/diennea/herddb/issues/215",
                "https://github.com/diennea/herddb/commit/4e09a2df8",
                "https://github.com/diennea/herddb/issues/443",
                "https://github.com/diennea/herddb/commit/28f35f60b"
            ]
        },
        {
            "poj_link": "https://github.com/diennea/herddb/",
            "file_path": "diennea/herddb/herddb-core/src/test/java/herddb/server/ServerSidePreparedStatementCacheTest.java",
            "test_name": "testBasicFunctions",
            "FQS": "herddb.server.ServerSidePreparedStatementCacheTest.testBasicFunctions()",
            "start_line": "35",
            "blame_result": "13f8ddc6c (Enrico Olivelli 2019-04-28 07:56:25 +0200 36)         String tableSpace = \"test\";\n13f8ddc6c (Enrico Olivelli 2019-04-28 07:56:25 +0200 37)         String text = \"select * from table\";\n13f8ddc6c (Enrico Olivelli 2019-04-28 07:56:25 +0200 38)         ServerSidePreparedStatementCache instance = new ServerSidePreparedStatementCache(Long.MAX_VALUE);\n13f8ddc6c (Enrico Olivelli 2019-04-28 07:56:25 +0200 39)         long id = instance.prepare(tableSpace, text);\n13f8ddc6c (Enrico Olivelli 2019-04-28 07:56:25 +0200 40)         assertEquals(text, instance.resolveQuery(tableSpace, id));\n",
            "commit_hashes": {
                "13f8ddc6c": "    Add specific tests in order to increase code coverage (#383)"
            },
            "Commit&issueIDs": {
                "13f8ddc6c": [
                    "(#383)"
                ]
            },
            "links": [
                "https://github.com/diennea/herddb/issues/383",
                "https://github.com/diennea/herddb/commit/13f8ddc6c"
            ]
        },
        {
            "poj_link": "https://github.com/diennea/herddb/",
            "file_path": "diennea/herddb/herddb-core/src/test/java/herddb/sql/SimplerPlannerTest.java",
            "test_name": "basicVectorTest",
            "FQS": "herddb.sql.SimplerPlannerTest.basicVectorTest()",
            "start_line": "366",
            "blame_result": "26d0cc5e8 (eolivelli 2017-11-12 15:57:53 +0100 367)         String nodeId = \"localhost\";\n2ff5af7de (tison     2019-08-24 20:26:42 +0800 368)         try (DBManager manager = new DBManager(\"localhost\", new MemoryMetadataStorageManager(), new MemoryDataStorageManager(), new MemoryCommitLogManager(), null, null)) {\n26d0cc5e8 (eolivelli 2017-11-12 15:57:53 +0100 369)             manager.start();\n26d0cc5e8 (eolivelli 2017-11-12 15:57:53 +0100 370)             CreateTableSpaceStatement st1 = new CreateTableSpaceStatement(\"tblspace1\", Collections.singleton(nodeId), nodeId, 1, 0, 0);\n26d0cc5e8 (eolivelli 2017-11-12 15:57:53 +0100 371)             manager.executeStatement(st1, StatementEvaluationContext.DEFAULT_EVALUATION_CONTEXT(), TransactionContext.NO_TRANSACTION);\n",
            "commit_hashes": {
                "26d0cc5e8": "    Calcite projections",
                "2ff5af7de": "    Add checkstyle checks (#451)"
            },
            "Commit&issueIDs": {
                "2ff5af7de": [
                    "(#451)"
                ]
            },
            "links": [
                "https://github.com/diennea/herddb/issues/451",
                "https://github.com/diennea/herddb/commit/2ff5af7de"
            ]
        },
        {
            "poj_link": "https://github.com/diennea/herddb/",
            "file_path": "diennea/herddb/herddb-core/src/test/java/herddb/utils/RawStringTest.java",
            "test_name": "test",
            "FQS": "herddb.utils.RawStringTest.test()",
            "start_line": "28",
            "blame_result": "f1fd56efd (Enrico Olivelli 2018-11-07 16:45:25 +0100 29)  * Release JAR feature\nf1fd56efd (Enrico Olivelli 2018-11-07 16:45:25 +0100 30)  *\nf1fd56efd (Enrico Olivelli 2018-11-07 16:45:25 +0100 31)  * @author enrico.olivelli\nf1fd56efd (Enrico Olivelli 2018-11-07 16:45:25 +0100 32)  */\nf1fd56efd (Enrico Olivelli 2018-11-07 16:45:25 +0100 33) public class RawStringTest {\n",
            "commit_hashes": {
                "f1fd56efd": "    Use RawStrings as wrappers of byte[],offset,length (#287)"
            },
            "Commit&issueIDs": {
                "f1fd56efd": [
                    "(#287)"
                ]
            },
            "links": [
                "https://github.com/diennea/herddb/issues/287",
                "https://github.com/diennea/herddb/commit/f1fd56efd"
            ]
        },
        {
            "poj_link": "https://github.com/diennea/herddb/",
            "file_path": "diennea/herddb/herddb-utils/src/test/java/herddb/utils/BytesTest.java",
            "test_name": "testNextLenPreservation",
            "FQS": "herddb.utils.BytesTest.testNextLenPreservation()",
            "start_line": "123",
            "blame_result": "f6b3f936a (Diego Salvi 2018-10-15 15:27:01 +0200 124) \n2ff5af7de (tison       2019-08-24 20:26:42 +0800 125)         byte[] src = new byte[]{0, 0, 0, -1};\nf6b3f936a (Diego Salvi 2018-10-15 15:27:01 +0200 126) \nf6b3f936a (Diego Salvi 2018-10-15 15:27:01 +0200 127)         Bytes bytes = Bytes.from_array(src);\nf6b3f936a (Diego Salvi 2018-10-15 15:27:01 +0200 128) \n",
            "commit_hashes": {
                "f6b3f936a": "    Bytes next len preservation and 'overflow' error (#277)",
                "2ff5af7de": "    Add checkstyle checks (#451)"
            },
            "Commit&issueIDs": {
                "f6b3f936a": [
                    "(#277)"
                ],
                "2ff5af7de": [
                    "(#451)"
                ]
            },
            "links": [
                "https://github.com/diennea/herddb/issues/277",
                "https://github.com/diennea/herddb/commit/f6b3f936a",
                "https://github.com/diennea/herddb/issues/451",
                "https://github.com/diennea/herddb/commit/2ff5af7de"
            ]
        },
        {
            "poj_link": "https://github.com/diennea/herddb/",
            "file_path": "diennea/herddb/herddb-utils/src/test/java/herddb/utils/VisibleByteArrayOutputStreamTest.java",
            "test_name": "testToByteArrayNoCopy",
            "FQS": "herddb.utils.VisibleByteArrayOutputStreamTest.testToByteArrayNoCopy()",
            "start_line": "53",
            "blame_result": "b8baf0ff3 herddb-core/src/test/java/herddb/utils/VisibleByteArrayOutputStreamTest.java  (eolivelli       2017-01-18 12:43:47 +0100 54)         byte[] content = \"foo\".getBytes(StandardCharsets.UTF_8);\n9f9239aa7 herddb-utils/src/test/java/herddb/utils/VisibleByteArrayOutputStreamTest.java (Enrico Olivelli 2020-04-10 07:49:50 +0200 55)         byte[] content2 = \"fooa\".getBytes(StandardCharsets.UTF_8);\n9f9239aa7 herddb-utils/src/test/java/herddb/utils/VisibleByteArrayOutputStreamTest.java (Enrico Olivelli 2020-04-10 07:49:50 +0200 56)         try (VisibleByteArrayOutputStream oo = new VisibleByteArrayOutputStream(3)) {\nb8baf0ff3 herddb-core/src/test/java/herddb/utils/VisibleByteArrayOutputStreamTest.java  (eolivelli       2017-01-18 12:43:47 +0100 57)             oo.write(content);\nb8baf0ff3 herddb-core/src/test/java/herddb/utils/VisibleByteArrayOutputStreamTest.java  (eolivelli       2017-01-18 12:43:47 +0100 58)             assertArrayEquals(content, oo.toByteArray());\n",
            "commit_hashes": {
                "b8baf0ff3": "    use xxhash64 for disk checksums",
                "9f9239aa7": "    HerdDB Collections Improvements: clear and better ValueSerializer (#588)"
            },
            "Commit&issueIDs": {
                "9f9239aa7": [
                    "(#588)"
                ]
            },
            "links": [
                "https://github.com/diennea/herddb/issues/588",
                "https://github.com/diennea/herddb/commit/9f9239aa7"
            ]
        },
        {
            "poj_link": "https://github.com/senbox-org/snap-engine/",
            "file_path": "senbox-org/snap-engine/snap-netcdf/src/test/java/org/esa/snap/dataio/netcdf/metadata/profiles/beam/BeamBandPartTest_ComponentGeocoding.java",
            "test_name": "decode",
            "FQS": "org.esa.snap.dataio.netcdf.metadata.profiles.beam.BeamBandPartTest_ComponentGeocoding.decode()",
            "start_line": "49",
            "blame_result": "6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 50)         //preparation\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 51)         final ProfileReadContext ctxR = mock(ProfileReadContext.class);\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 52)         final Variable variable = mock(Variable.class);\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 53)         when(variable.findAttribute(GEOCODING)).thenReturn(new Attribute(GEOCODING, EXPECTED));\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 54) \n",
            "commit_hashes": {
                "6bff184bf8e": "    [SNAP-999] Introducing new pixel-based geocoding (#201)"
            },
            "Commit&issueIDs": {
                "6bff184bf8e": [
                    "201"
                ]
            },
            "links": [
                "https://github.com/senbox-org/snap-engine/issues/201",
                "https://github.com/senbox-org/snap-engine/commit/6bff184bf8e"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/extensions-core/multi-stage-query/src/test/java/org/apache/druid/msq/exec/WorkerStorageParametersTest.java",
            "test_name": "test_WorkerStorageParameter_createInstance",
            "FQS": "org.apache.druid.msq.exec.WorkerStorageParametersTest.test_WorkerStorageParameter_createInstance()",
            "start_line": "30",
            "blame_result": "a7d5c64aeb7 (Adarsh Sanjeev 2023-04-18 16:56:51 +0530 31)   {\na7d5c64aeb7 (Adarsh Sanjeev 2023-04-18 16:56:51 +0530 32)     Assert.assertEquals(WorkerStorageParameters.createInstanceForTests(1000000000), WorkerStorageParameters.createInstance(2_250_000_000L, true));\na7d5c64aeb7 (Adarsh Sanjeev 2023-04-18 16:56:51 +0530 33)   }\na7d5c64aeb7 (Adarsh Sanjeev 2023-04-18 16:56:51 +0530 34) \na7d5c64aeb7 (Adarsh Sanjeev 2023-04-18 16:56:51 +0530 35)   @Test\n",
            "commit_hashes": {
                "a7d5c64aeb7": "    Move MSQ temporary storage to a runtime parameter instead of being configured from query context (#14061)"
            },
            "Commit&issueIDs": {
                "a7d5c64aeb7": [
                    "(#14061)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/14061",
                "https://github.com/apache/druid/commit/a7d5c64aeb7"
            ]
        },
        {
            "poj_link": "https://github.com/senbox-org/snap-engine/",
            "file_path": "senbox-org/snap-engine/snap-netcdf/src/test/java/org/esa/snap/dataio/netcdf/metadata/profiles/beam/BeamGeocodingPartTest_ComponentGeocoding.java",
            "test_name": "decode",
            "FQS": "org.esa.snap.dataio.netcdf.metadata.profiles.beam.BeamGeocodingPartTest_ComponentGeocoding.decode()",
            "start_line": "50",
            "blame_result": "6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 51)         //preparation\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 52)         final Attribute attribute = mock(Attribute.class);\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 53)         when(attribute.getStringValue()).thenReturn(EXPECTED);\n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 54) \n6bff184bf8e (Marco Peters 2020-04-02 09:32:18 +0200 55)         final NetcdfFile netcdfFile = mock(NetcdfFile.class);\n",
            "commit_hashes": {
                "6bff184bf8e": "    [SNAP-999] Introducing new pixel-based geocoding (#201)"
            },
            "Commit&issueIDs": {
                "6bff184bf8e": [
                    "201"
                ]
            },
            "links": [
                "https://github.com/senbox-org/snap-engine/issues/201",
                "https://github.com/senbox-org/snap-engine/commit/6bff184bf8e"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/tsid-creator/",
            "file_path": "f4b6a3/tsid-creator/src/test/java/com/github/f4b6a3/tsid/TsidFactoryTest.java",
            "test_name": "testMonotonicityAfterClockDrift",
            "FQS": "com.github.f4b6a3.tsid.TsidFactoryTest.testMonotonicityAfterClockDrift()",
            "start_line": "312",
            "blame_result": "b4fa4c38 (Fabio Lima 2022-04-14 21:15:54 -0300 313) \n340f7f65 (Fabio Lima 2023-01-28 18:33:01 -0300 314) \t\tlong diff = 10_000;\nb4fa4c38 (Fabio Lima 2022-04-14 21:15:54 -0300 315) \t\tlong time = Instant.parse(\"2021-12-31T23:59:59.000Z\").toEpochMilli();\n2d0ebf17 (Fabio Lima 2023-09-03 05:06:05 -0300 316) \t\tlong times[] = { time, time + 0, time + 1, time + 2, time + 3 - diff, time + 4 - diff, time + 5 };\nb4fa4c38 (Fabio Lima 2022-04-14 21:15:54 -0300 317) \n",
            "commit_hashes": {
                "b4fa4c38": "    feat: handle clock drift #14",
                "340f7f65": "    Fix incremental generation #24",
                "2d0ebf17": "    Optimized base-n encode and decode methods"
            },
            "Commit&issueIDs": {
                "b4fa4c38": [
                    "#14"
                ],
                "340f7f65": [
                    "#24"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/tsid-creator/issues/14",
                "https://github.com/f4b6a3/tsid-creator/commit/b4fa4c38",
                "https://github.com/f4b6a3/tsid-creator/issues/24",
                "https://github.com/f4b6a3/tsid-creator/commit/340f7f65"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/tsid-creator/",
            "file_path": "f4b6a3/tsid-creator/src/test/java/com/github/f4b6a3/tsid/TsidFactoryTest.java",
            "test_name": "testMonotonicityAfterLeapSecond",
            "FQS": "com.github.f4b6a3.tsid.TsidFactoryTest.testMonotonicityAfterLeapSecond()",
            "start_line": "363",
            "blame_result": "b4fa4c38 (Fabio Lima 2022-04-14 21:15:54 -0300 364) \nb4fa4c38 (Fabio Lima 2022-04-14 21:15:54 -0300 365) \t\tlong second = Instant.parse(\"2021-12-31T23:59:59.000Z\").getEpochSecond();\nb4fa4c38 (Fabio Lima 2022-04-14 21:15:54 -0300 366) \t\tlong leapSecond = second - 1; // simulate a leap second\nb4fa4c38 (Fabio Lima 2022-04-14 21:15:54 -0300 367) \t\tlong times[] = { second, leapSecond };\nb4fa4c38 (Fabio Lima 2022-04-14 21:15:54 -0300 368) \n",
            "commit_hashes": {
                "b4fa4c38": "    feat: handle clock drift #14"
            },
            "Commit&issueIDs": {
                "b4fa4c38": [
                    "#14"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/tsid-creator/issues/14",
                "https://github.com/f4b6a3/tsid-creator/commit/b4fa4c38"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/tsid-creator/",
            "file_path": "f4b6a3/tsid-creator/src/test/java/com/github/f4b6a3/tsid/TsidFormatTest.java",
            "test_name": "testUnformat",
            "FQS": "com.github.f4b6a3.tsid.TsidFormatTest.testUnformat()",
            "start_line": "64",
            "blame_result": "bab85406 (Fabio Lima 2022-12-21 17:50:53 -0300 65) \nbab85406 (Fabio Lima 2022-12-21 17:50:53 -0300 66) \t\tTsid tsid = Tsid.fast();\nbab85406 (Fabio Lima 2022-12-21 17:50:53 -0300 67) \nbab85406 (Fabio Lima 2022-12-21 17:50:53 -0300 68) \t\tString[][] string = { //\nbab85406 (Fabio Lima 2022-12-21 17:50:53 -0300 69) \t\t\t\t{ \"HEAD\", \"TAIL\" }, //\n",
            "commit_hashes": {
                "bab85406": "    Add simple format methods #20"
            },
            "Commit&issueIDs": {
                "bab85406": [
                    "#20"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/tsid-creator/issues/20",
                "https://github.com/f4b6a3/tsid-creator/commit/bab85406"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/tsid-creator/",
            "file_path": "f4b6a3/tsid-creator/src/test/java/com/github/f4b6a3/tsid/TsidFormatTest.java",
            "test_name": "testFormatAndUnformat",
            "FQS": "com.github.f4b6a3.tsid.TsidFormatTest.testFormatAndUnformat()",
            "start_line": "252",
            "blame_result": "bab85406 (Fabio Lima 2022-12-21 17:50:53 -0300 253) \nbab85406 (Fabio Lima 2022-12-21 17:50:53 -0300 254) \t\tTsid tsid = Tsid.fast();\nbab85406 (Fabio Lima 2022-12-21 17:50:53 -0300 255) \nbab85406 (Fabio Lima 2022-12-21 17:50:53 -0300 256) \t\tString[][] string = { //\nbab85406 (Fabio Lima 2022-12-21 17:50:53 -0300 257) \t\t\t\t{ \"HEAD\", \"TAIL\" }, //\n",
            "commit_hashes": {
                "bab85406": "    Add simple format methods #20"
            },
            "Commit&issueIDs": {
                "bab85406": [
                    "#20"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/tsid-creator/issues/20",
                "https://github.com/f4b6a3/tsid-creator/commit/bab85406"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/tsid-creator/",
            "file_path": "f4b6a3/tsid-creator/src/test/java/com/github/f4b6a3/tsid/TsidTest.java",
            "test_name": "testEquals",
            "FQS": "com.github.f4b6a3.tsid.TsidTest.testEquals()",
            "start_line": "373",
            "blame_result": "4cf7e846 (Fabio Lima 2021-08-08 03:05:18 -0300 374) \n02dfcf17 (Fabio Lima 2021-11-19 19:14:15 -0300 375) \t\tbyte[] bytes = new byte[Tsid.TSID_BYTES];\n4cf7e846 (Fabio Lima 2021-08-08 03:05:18 -0300 376) \nb4fa4c38 (Fabio Lima 2022-04-14 21:15:54 -0300 377) \t\tfor (int i = 0; i < LOOP_MAX; i++) {\n4cf7e846 (Fabio Lima 2021-08-08 03:05:18 -0300 378) \n",
            "commit_hashes": {
                "4cf7e846": "    Version 4.0.0 #10",
                "02dfcf17": "    Compare internal field as unsigned integers #12",
                "b4fa4c38": "    feat: handle clock drift #14"
            },
            "Commit&issueIDs": {
                "4cf7e846": [
                    "#10"
                ],
                "02dfcf17": [
                    "#12"
                ],
                "b4fa4c38": [
                    "#14"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/tsid-creator/issues/10",
                "https://github.com/f4b6a3/tsid-creator/commit/4cf7e846",
                "https://github.com/f4b6a3/tsid-creator/issues/12",
                "https://github.com/f4b6a3/tsid-creator/commit/02dfcf17",
                "https://github.com/f4b6a3/tsid-creator/issues/14",
                "https://github.com/f4b6a3/tsid-creator/commit/b4fa4c38"
            ]
        },
        {
            "poj_link": "https://github.com/f4b6a3/tsid-creator/",
            "file_path": "f4b6a3/tsid-creator/src/test/java/com/github/f4b6a3/tsid/TsidTest.java",
            "test_name": "testHashCode",
            "FQS": "com.github.f4b6a3.tsid.TsidTest.testHashCode()",
            "start_line": "425",
            "blame_result": "0ea1f24a (Usu\u00e1rio    2022-08-21 15:58:51 -0300 426) \n0ea1f24a (Usu\u00e1rio    2022-08-21 15:58:51 -0300 427) \t\t// invoked on the same object\nb4fa4c38 (Fabio Lima 2022-04-14 21:15:54 -0300 428) \t\tfor (int i = 0; i < LOOP_MAX; i++) {\nb4fa4c38 (Fabio Lima 2022-04-14 21:15:54 -0300 429) \t\t\tlong number = ThreadLocalRandom.current().nextLong();\n4cf7e846 (Fabio Lima 2021-08-08 03:05:18 -0300 430) \t\t\tTsid tsid1 = Tsid.from(number);\n",
            "commit_hashes": {
                "0ea1f24a": "    Optimize comparison and hash #16",
                "b4fa4c38": "    feat: handle clock drift #14",
                "4cf7e846": "    Version 4.0.0 #10"
            },
            "Commit&issueIDs": {
                "0ea1f24a": [
                    "#16"
                ],
                "b4fa4c38": [
                    "#14"
                ],
                "4cf7e846": [
                    "#10"
                ]
            },
            "links": [
                "https://github.com/f4b6a3/tsid-creator/issues/16",
                "https://github.com/f4b6a3/tsid-creator/commit/0ea1f24a",
                "https://github.com/f4b6a3/tsid-creator/issues/14",
                "https://github.com/f4b6a3/tsid-creator/commit/b4fa4c38",
                "https://github.com/f4b6a3/tsid-creator/issues/10",
                "https://github.com/f4b6a3/tsid-creator/commit/4cf7e846"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/indexing-service/src/test/java/org/apache/druid/indexing/overlord/TaskStorageUtilsTest.java",
            "test_name": "test_processTaskLookups_oneCompleteTask_3000",
            "FQS": "org.apache.druid.indexing.overlord.TaskStorageUtilsTest.test_processTaskLookups_oneCompleteTask_3000()",
            "start_line": "73",
            "blame_result": "2f9619a96fb (Gian Merlino 2023-07-24 21:14:27 -0700 74)   {\n2f9619a96fb (Gian Merlino 2023-07-24 21:14:27 -0700 75)     Assert.assertEquals(\n2f9619a96fb (Gian Merlino 2023-07-24 21:14:27 -0700 76)         ImmutableMap.of(\n2f9619a96fb (Gian Merlino 2023-07-24 21:14:27 -0700 77)             TaskLookup.TaskLookupType.ACTIVE,\n2f9619a96fb (Gian Merlino 2023-07-24 21:14:27 -0700 78)             TaskLookup.ActiveTaskLookup.getInstance(),\n",
            "commit_hashes": {
                "2f9619a96fb": "    Use OverlordClient for all Overlord RPCs. (#14581)"
            },
            "Commit&issueIDs": {
                "2f9619a96fb": [
                    "(#14581)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/14581",
                "https://github.com/apache/druid/commit/2f9619a96fb"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/processing/src/test/java/org/apache/druid/collections/CloseableResourceHolderTest.java",
            "test_name": "testCloseableResourceHolder",
            "FQS": "org.apache.druid.collections.CloseableResourceHolderTest.testCloseableResourceHolder()",
            "start_line": "31",
            "blame_result": "752475b7992 (Gian Merlino 2023-04-25 20:49:27 -0700 32)   {\n752475b7992 (Gian Merlino 2023-04-25 20:49:27 -0700 33)     final AtomicLong closeCounter = new AtomicLong();\n752475b7992 (Gian Merlino 2023-04-25 20:49:27 -0700 34)     final Closeable closeable = closeCounter::incrementAndGet;\n752475b7992 (Gian Merlino 2023-04-25 20:49:27 -0700 35)     final ResourceHolder<Closeable> holder = ResourceHolder.fromCloseable(closeable);\n752475b7992 (Gian Merlino 2023-04-25 20:49:27 -0700 36) \n",
            "commit_hashes": {
                "752475b7992": "    Fix two concurrency issues with segment fetching. (#14042)"
            },
            "Commit&issueIDs": {
                "752475b7992": [
                    "(#14042)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/14042",
                "https://github.com/apache/druid/commit/752475b7992"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/processing/src/test/java/org/apache/druid/common/config/NullHandlingTest.java",
            "test_name": "test_defaultValueForType",
            "FQS": "org.apache.druid.common.config.NullHandlingTest.test_defaultValueForType()",
            "start_line": "96",
            "blame_result": "ae88f2c0b6e (Zoltan Haindrich 2023-10-11 21:34:31 +0200  97)   {\nae88f2c0b6e (Zoltan Haindrich 2023-10-11 21:34:31 +0200  98)     assertEquals(defaultValueForClass(Float.class), defaultValueForType(ValueType.FLOAT));\nae88f2c0b6e (Zoltan Haindrich 2023-10-11 21:34:31 +0200  99)     assertEquals(defaultValueForClass(Double.class), defaultValueForType(ValueType.DOUBLE));\nae88f2c0b6e (Zoltan Haindrich 2023-10-11 21:34:31 +0200 100)     assertEquals(defaultValueForClass(Long.class), defaultValueForType(ValueType.LONG));\nae88f2c0b6e (Zoltan Haindrich 2023-10-11 21:34:31 +0200 101)     assertEquals(defaultValueForClass(String.class), defaultValueForType(ValueType.STRING));\n",
            "commit_hashes": {
                "ae88f2c0b6e": "    Fix non-sqlcompat validation in CalciteWindowQueryTest (#15086)"
            },
            "Commit&issueIDs": {
                "ae88f2c0b6e": [
                    "(#15086)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/15086",
                "https://github.com/apache/druid/commit/ae88f2c0b6e"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/processing/src/test/java/org/apache/druid/frame/allocation/AppendableMemoryTest.java",
            "test_name": "testReserveAdditionalWithLargeLastBlockAndSmallAllocator",
            "FQS": "org.apache.druid.frame.allocation.AppendableMemoryTest.testReserveAdditionalWithLargeLastBlockAndSmallAllocator()",
            "start_line": "29",
            "blame_result": "5b093294791 (Laksh Singla 2024-10-18 09:05:53 +0530 30)   {\n5b093294791 (Laksh Singla 2024-10-18 09:05:53 +0530 31)     /*\n5b093294791 (Laksh Singla 2024-10-18 09:05:53 +0530 32)     This tests the edge case when the last chunk of memory allocated by the allocator has greater available free space\n5b093294791 (Laksh Singla 2024-10-18 09:05:53 +0530 33)     than what can be allocated by the allocator. In that case, the availableToReserve call should return the free memory from\n5b093294791 (Laksh Singla 2024-10-18 09:05:53 +0530 34)     the last allocated block, and reserveAdditional when called with that value should return true (and not do any additional\n",
            "commit_hashes": {
                "5b093294791": "    Fixes an issue with AppendableMemory that can cause MSQ jobs to fail (#17369)"
            },
            "Commit&issueIDs": {
                "5b093294791": [
                    "17369"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/17369",
                "https://github.com/apache/druid/commit/5b093294791"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/confignode/src/test/java/org/apache/iotdb/confignode/manager/pipe/extractor/PipeConfigPhysicalPlanPatternParseVisitorTest.java",
            "test_name": "testExtendSchemaTemplate",
            "FQS": "org.apache.iotdb.confignode.manager.pipe.extractor.PipeConfigPhysicalPlanPatternParseVisitorTest.testExtendSchemaTemplate()",
            "start_line": "186",
            "blame_result": "49dc7650e80 (Caideyipi 2024-05-21 22:07:26 +0800 187)     final ExtendSchemaTemplatePlan extendSchemaTemplatePlan =\n49dc7650e80 (Caideyipi 2024-05-21 22:07:26 +0800 188)         new ExtendSchemaTemplatePlan(\n49dc7650e80 (Caideyipi 2024-05-21 22:07:26 +0800 189)             new TemplateExtendInfo(\n49dc7650e80 (Caideyipi 2024-05-21 22:07:26 +0800 190)                 \"template_name\",\n49dc7650e80 (Caideyipi 2024-05-21 22:07:26 +0800 191)                 Arrays.asList(\"s1\", \"s2\"),\n",
            "commit_hashes": {
                "49dc7650e80": "    Pipe: Support parsing pattern when tranferring schema plans (#12464)"
            },
            "Commit&issueIDs": {
                "49dc7650e80": [
                    "12464"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/12464",
                "https://github.com/apache/iotdb/commit/49dc7650e80"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/confignode/src/test/java/org/apache/iotdb/confignode/persistence/ClusterInfoTest.java",
            "test_name": "testSnapshot",
            "FQS": "org.apache.iotdb.confignode.persistence.ClusterInfoTest.testSnapshot()",
            "start_line": "56",
            "blame_result": "fd9cb6ed8b7 (Li Yu Heng 2023-12-15 19:02:52 +0800 57)     final String clusterId = String.valueOf(UUID.randomUUID());\nfd9cb6ed8b7 (Li Yu Heng 2023-12-15 19:02:52 +0800 58)     UpdateClusterIdPlan updateClusterIdPlan = new UpdateClusterIdPlan(clusterId);\nfd9cb6ed8b7 (Li Yu Heng 2023-12-15 19:02:52 +0800 59)     clusterInfo.updateClusterId(updateClusterIdPlan);\nfd9cb6ed8b7 (Li Yu Heng 2023-12-15 19:02:52 +0800 60) \nfd9cb6ed8b7 (Li Yu Heng 2023-12-15 19:02:52 +0800 61)     Assert.assertTrue(clusterInfo.processTakeSnapshot(snapshotDir));\n",
            "commit_hashes": {
                "fd9cb6ed8b7": "    Implement Cluster ID (#11702)"
            },
            "Commit&issueIDs": {
                "fd9cb6ed8b7": [
                    "(#11702)"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/11702",
                "https://github.com/apache/iotdb/commit/fd9cb6ed8b7"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/confignode/src/test/java/org/apache/iotdb/confignode/persistence/PipeInfoTest.java",
            "test_name": "testSnapshot",
            "FQS": "org.apache.iotdb.confignode.persistence.PipeInfoTest.testSnapshot()",
            "start_line": "77",
            "blame_result": "66e9f306437 iotdb-core/confignode/src/test/java/org/apache/iotdb/confignode/persistence/PipeInfoTest.java (Caideyipi       2023-07-01 11:04:31 +0800 78)     // Create pipe test pipe\n8f6244a5431 confignode/src/test/java/org/apache/iotdb/confignode/persistence/PipeInfoTest.java            (Steve Yurong Su 2023-06-24 10:13:54 +0800 79)     Map<String, String> extractorAttributes = new HashMap<>();\n110ea557860 confignode/src/test/java/org/apache/iotdb/confignode/persistence/PipeInfoTest.java            (Caideyipi       2023-04-18 16:47:17 +0800 80)     Map<String, String> processorAttributes = new HashMap<>();\n110ea557860 confignode/src/test/java/org/apache/iotdb/confignode/persistence/PipeInfoTest.java            (Caideyipi       2023-04-18 16:47:17 +0800 81)     Map<String, String> connectorAttributes = new HashMap<>();\n66e9f306437 iotdb-core/confignode/src/test/java/org/apache/iotdb/confignode/persistence/PipeInfoTest.java (Caideyipi       2023-07-01 11:04:31 +0800 82) \n",
            "commit_hashes": {
                "66e9f306437": "    UT: add unit tests for sync/pipe/load packages in confignode (#10398)",
                "8f6244a5431": "    Pipe: rename collector to extractor (#10286)",
                "110ea557860": "    [IOTDB-5727] pipe task management at config node  (#9533)"
            },
            "Commit&issueIDs": {
                "66e9f306437": [
                    "(#10398)"
                ],
                "8f6244a5431": [
                    "(#10286)"
                ],
                "110ea557860": [
                    "(#9533)"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/10398",
                "https://github.com/apache/iotdb/commit/66e9f306437",
                "https://github.com/apache/iotdb/issues/10286",
                "https://github.com/apache/iotdb/commit/8f6244a5431",
                "https://github.com/apache/iotdb/issues/9533",
                "https://github.com/apache/iotdb/commit/110ea557860"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/confignode/src/test/java/org/apache/iotdb/confignode/persistence/ProcedureInfoTest.java",
            "test_name": "testSnapshot",
            "FQS": "org.apache.iotdb.confignode.persistence.ProcedureInfoTest.testSnapshot()",
            "start_line": "66",
            "blame_result": "18fc93be959 (Li Yu Heng 2024-03-22 10:45:14 +0800 67)     procedureInfo.updateProcedure(new UpdateProcedurePlan(new NeverFinishProcedure(1)));\n18fc93be959 (Li Yu Heng 2024-03-22 10:45:14 +0800 68)     procedureInfo.updateProcedure(new UpdateProcedurePlan(new NeverFinishProcedure(100)));\n18fc93be959 (Li Yu Heng 2024-03-22 10:45:14 +0800 69)     procedureInfo.updateProcedure(new UpdateProcedurePlan(new NeverFinishProcedure(99999)));\n18fc93be959 (Li Yu Heng 2024-03-22 10:45:14 +0800 70)     Assert.assertTrue(procedureInfo.processTakeSnapshot(snapshotDir));\n18fc93be959 (Li Yu Heng 2024-03-22 10:45:14 +0800 71)     ProcedureInfo procedureInfo1 = new ProcedureInfo(null);\n",
            "commit_hashes": {
                "18fc93be959": "    Refactor Procedure recover framework (#12202)"
            },
            "Commit&issueIDs": {
                "18fc93be959": [
                    "12202"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/12202",
                "https://github.com/apache/iotdb/commit/18fc93be959"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/confignode/src/test/java/org/apache/iotdb/confignode/persistence/TTLInfoTest.java",
            "test_name": "testSnapshot",
            "FQS": "org.apache.iotdb.confignode.persistence.TTLInfoTest.testSnapshot()",
            "start_line": "249",
            "blame_result": "9465ac242ef (\u5468\u6c9b\u8fb0 2024-05-30 11:42:48 +0800 250)     // set ttl\n9465ac242ef (\u5468\u6c9b\u8fb0 2024-05-30 11:42:48 +0800 251)     PartialPath path = new PartialPath(\"root.test.db1.**\");\n9465ac242ef (\u5468\u6c9b\u8fb0 2024-05-30 11:42:48 +0800 252)     ttlInfo.setTTL(new SetTTLPlan(Arrays.asList(path.getNodes()), 121322323L));\n9465ac242ef (\u5468\u6c9b\u8fb0 2024-05-30 11:42:48 +0800 253) \n9465ac242ef (\u5468\u6c9b\u8fb0 2024-05-30 11:42:48 +0800 254)     // set ttl\n",
            "commit_hashes": {
                "9465ac242ef": "    Implementation of device TTL  (#12122)"
            },
            "Commit&issueIDs": {
                "9465ac242ef": [
                    "12122"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/12122",
                "https://github.com/apache/iotdb/commit/9465ac242ef"
            ]
        },
        {
            "poj_link": "https://github.com/arquillian/arquillian-graphene/",
            "file_path": "arquillian/arquillian-graphene/ftest/src/test/java/org/jboss/arquillian/graphene/ftest/enricher/TestEnrichedElementsEqualsMethod.java",
            "test_name": "testUnwrappedHashCodeEqualsToProxified",
            "FQS": "org.jboss.arquillian.graphene.ftest.enricher.TestEnrichedElementsEqualsMethod.testUnwrappedHashCodeEqualsToProxified()",
            "start_line": "223",
            "blame_result": "3ef8438cd (VsevolodGolovanov 2017-04-11 11:56:22 +0300 224)         assertTrue(getUnwrapped().hashCode() == getProxified().hashCode());\n3ef8438cd (VsevolodGolovanov 2017-04-11 11:56:22 +0300 225)     }\n3ef8438cd (VsevolodGolovanov 2017-04-11 11:56:22 +0300 226) \n3ef8438cd (VsevolodGolovanov 2017-04-11 11:56:22 +0300 227)     @Test\n3ef8438cd (VsevolodGolovanov 2017-04-11 11:56:22 +0300 228)     public void testProxifiedEqualsToUnwrapped() {\n",
            "commit_hashes": {
                "3ef8438cd": "    ARQGRA-484: fixing equals & hashCode in GrapheneElementImpl (#164)"
            },
            "Commit&issueIDs": {
                "3ef8438cd": [
                    "164"
                ]
            },
            "links": [
                "https://github.com/arquillian/arquillian-graphene/issues/164",
                "https://github.com/arquillian/arquillian-graphene/commit/3ef8438cd"
            ]
        },
        {
            "poj_link": "https://github.com/arquillian/arquillian-graphene/",
            "file_path": "arquillian/arquillian-graphene/ftest/src/test/java/org/jboss/arquillian/graphene/ftest/enricher/TestEnrichedElementsEqualsMethod.java",
            "test_name": "testProxifiedHashCodeEqualsToUnwrapped",
            "FQS": "org.jboss.arquillian.graphene.ftest.enricher.TestEnrichedElementsEqualsMethod.testProxifiedHashCodeEqualsToUnwrapped()",
            "start_line": "233",
            "blame_result": "3ef8438cd (VsevolodGolovanov 2017-04-11 11:56:22 +0300 234)         assertTrue(getProxified().hashCode() == getUnwrapped().hashCode());\n3ef8438cd (VsevolodGolovanov 2017-04-11 11:56:22 +0300 235)     }\n3ef8438cd (VsevolodGolovanov 2017-04-11 11:56:22 +0300 236) \n3ef8438cd (VsevolodGolovanov 2017-04-11 11:56:22 +0300 237)     // -------------------------------------------------------------------------\n3ef8438cd (VsevolodGolovanov 2017-04-11 11:56:22 +0300 238)     // Specific edge cases\n",
            "commit_hashes": {
                "3ef8438cd": "    ARQGRA-484: fixing equals & hashCode in GrapheneElementImpl (#164)"
            },
            "Commit&issueIDs": {
                "3ef8438cd": [
                    "164"
                ]
            },
            "links": [
                "https://github.com/arquillian/arquillian-graphene/issues/164",
                "https://github.com/arquillian/arquillian-graphene/commit/3ef8438cd"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/processing/src/test/java/org/apache/druid/query/QueryDataSourceTest.java",
            "test_name": "test_withSegmentMapFunction",
            "FQS": "org.apache.druid.query.QueryDataSourceTest.test_withSegmentMapFunction()",
            "start_line": "174",
            "blame_result": "8d60edcfcb3 (Soumyava 2023-04-20 13:22:29 -0700 175)   {\n8d60edcfcb3 (Soumyava 2023-04-20 13:22:29 -0700 176)     Function<SegmentReference, SegmentReference> parentsegmentMapFunction = queryDataSource.createSegmentMapFunction(\n8d60edcfcb3 (Soumyava 2023-04-20 13:22:29 -0700 177)         groupByQuery,\n8d60edcfcb3 (Soumyava 2023-04-20 13:22:29 -0700 178)         new AtomicLong()\n8d60edcfcb3 (Soumyava 2023-04-20 13:22:29 -0700 179)     );\n",
            "commit_hashes": {
                "8d60edcfcb3": "    Updating segment map function for QueryDataSource to ensure group by \u2026 (#14112)"
            },
            "Commit&issueIDs": {
                "8d60edcfcb3": [
                    "(#14112)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/14112",
                "https://github.com/apache/druid/commit/8d60edcfcb3"
            ]
        },
        {
            "poj_link": "https://github.com/wmixvideo/nfe/",
            "file_path": "wmixvideo/nfe/src/test/java/com/fincatto/documentofiscal/nfe400/classes/nota/NFNotaInfoItemProdutoTest.java",
            "test_name": "deveObterCodigoDeBarrasComoFoiSetado",
            "FQS": "com.fincatto.documentofiscal.nfe400.classes.nota.NFNotaInfoItemProdutoTest.deveObterCodigoDeBarrasComoFoiSetado()",
            "start_line": "1303",
            "blame_result": "4a0ec2e68 (Carine Bockorny 2018-01-19 11:46:50 -0200 1304)         final NFNotaInfoItemProduto produto = new NFNotaInfoItemProduto();\n4a0ec2e68 (Carine Bockorny 2018-01-19 11:46:50 -0200 1305)         final String codigoDeBarras = \"36811963532505\";\n335c5f72a (Mauricio Dantas 2022-01-20 19:57:41 -0300 1306)         produto.setCodigoDeBarrasGtin(codigoDeBarras);\n335c5f72a (Mauricio Dantas 2022-01-20 19:57:41 -0300 1307)         Assert.assertEquals(codigoDeBarras, produto.getCodigoDeBarrasGtin());\n4a0ec2e68 (Carine Bockorny 2018-01-19 11:46:50 -0200 1308)     }\n",
            "commit_hashes": {
                "4a0ec2e68": "    Criados testes unitarios.",
                "335c5f72a": "    Inclus\u00e3o de novos campos para adequa\u00e7\u00e3o de Nota T\u00e9cnica 2021.004 (#783)"
            },
            "Commit&issueIDs": {
                "335c5f72a": [
                    "(#783)"
                ]
            },
            "links": [
                "https://github.com/wmixvideo/nfe/issues/783",
                "https://github.com/wmixvideo/nfe/commit/335c5f72a"
            ]
        },
        {
            "poj_link": "https://github.com/wmixvideo/nfe/",
            "file_path": "wmixvideo/nfe/src/test/java/com/fincatto/documentofiscal/nfe400/classes/nota/NFNotaInfoItemProdutoTest.java",
            "test_name": "deveObterCodigoDeBarrasTributavelComoFoiSetado",
            "FQS": "com.fincatto.documentofiscal.nfe400.classes.nota.NFNotaInfoItemProdutoTest.deveObterCodigoDeBarrasTributavelComoFoiSetado()",
            "start_line": "1311",
            "blame_result": "4a0ec2e68 (Carine Bockorny 2018-01-19 11:46:50 -0200 1312)         final NFNotaInfoItemProduto produto = new NFNotaInfoItemProduto();\n4a0ec2e68 (Carine Bockorny 2018-01-19 11:46:50 -0200 1313)         final String codigoDeBarrasTributavel = \"36811963532505\";\n335c5f72a (Mauricio Dantas 2022-01-20 19:57:41 -0300 1314)         produto.setCodigoDeBarrasGtinTributavel(codigoDeBarrasTributavel);\n335c5f72a (Mauricio Dantas 2022-01-20 19:57:41 -0300 1315)         Assert.assertEquals(codigoDeBarrasTributavel, produto.getCodigoDeBarrasGtinTributavel());\n4a0ec2e68 (Carine Bockorny 2018-01-19 11:46:50 -0200 1316)     }\n",
            "commit_hashes": {
                "4a0ec2e68": "    Criados testes unitarios.",
                "335c5f72a": "    Inclus\u00e3o de novos campos para adequa\u00e7\u00e3o de Nota T\u00e9cnica 2021.004 (#783)"
            },
            "Commit&issueIDs": {
                "335c5f72a": [
                    "(#783)"
                ]
            },
            "links": [
                "https://github.com/wmixvideo/nfe/issues/783",
                "https://github.com/wmixvideo/nfe/commit/335c5f72a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/processing/src/test/java/org/apache/druid/query/aggregation/SingleValueAggregationTest.java",
            "test_name": "testEqualsAndHashCode",
            "FQS": "org.apache.druid.query.aggregation.SingleValueAggregationTest.testEqualsAndHashCode()",
            "start_line": "248",
            "blame_result": "57e12df3525 (Sree Charan Manamala 2024-02-08 19:20:30 +0530 249)   {\n57e12df3525 (Sree Charan Manamala 2024-02-08 19:20:30 +0530 250)     SingleValueAggregatorFactory one = new SingleValueAggregatorFactory(\"name1\", \"fieldName1\", ColumnType.LONG);\n57e12df3525 (Sree Charan Manamala 2024-02-08 19:20:30 +0530 251)     SingleValueAggregatorFactory oneMore = new SingleValueAggregatorFactory(\"name1\", \"fieldName1\", ColumnType.LONG);\n57e12df3525 (Sree Charan Manamala 2024-02-08 19:20:30 +0530 252)     SingleValueAggregatorFactory two = new SingleValueAggregatorFactory(\"name2\", \"fieldName2\", ColumnType.LONG);\n57e12df3525 (Sree Charan Manamala 2024-02-08 19:20:30 +0530 253) \n",
            "commit_hashes": {
                "57e12df3525": "    Sql Single Value Aggregator for scalar queries (#15700)"
            },
            "Commit&issueIDs": {
                "57e12df3525": [
                    "15700"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/15700",
                "https://github.com/apache/druid/commit/57e12df3525"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/consensus/src/test/java/org/apache/iotdb/consensus/iot/ReplicateTest.java",
            "test_name": "parsingAndConstructIDTest",
            "FQS": "org.apache.iotdb.consensus.iot.ReplicateTest.parsingAndConstructIDTest()",
            "start_line": "321",
            "blame_result": "f52d752bf84 iotdb-core/consensus/src/test/java/org/apache/iotdb/consensus/iot/ReplicateTest.java         (Li Yu Heng   2024-04-12 19:09:52 +0800 322)     logger.info(\"Start ParsingAndConstructIDTest\");\ne891a5d1f31 iotdb-core/consensus/src/test/java/org/apache/iotdb/consensus/iot/ReplicateTest.java         (Potato       2023-08-23 10:10:58 +0800 323)     servers.get(0).createLocalPeer(group.getGroupId(), group.getPeers());\n63c2f720b4f consensus/src/test/java/org/apache/iotdb/consensus/multileader/MultiLeaderConsensusTest.java (Zhang.Jinrui 2022-09-19 20:01:12 +0800 324)     for (int i = 0; i < CHECK_POINT_GAP; i++) {\n8f68e51bbe8 consensus/src/test/java/org/apache/iotdb/consensus/multileader/MultiLeaderConsensusTest.java (Potato       2022-05-28 17:37:08 +0800 325)       servers.get(0).write(gid, new TestEntry(i, peers.get(0)));\nf52d752bf84 iotdb-core/consensus/src/test/java/org/apache/iotdb/consensus/iot/ReplicateTest.java         (Li Yu Heng   2024-04-12 19:09:52 +0800 326)     }\n",
            "commit_hashes": {
                "f52d752bf84": "    Region migration related work (#12293)",
                "e891a5d1f31": "    [IOTDB-6121] Consensus layer interface and exception handling refactoring (#10896)",
                "63c2f720b4f": "    Optimize batch constructing way for MultiLeaderConsensus log sync (#7318)",
                "8f68e51bbe8": "    [IOTDB-3188] Multi leader consensus algorithm implementation (#5939)"
            },
            "Commit&issueIDs": {
                "f52d752bf84": [
                    "12293"
                ],
                "e891a5d1f31": [
                    "10896"
                ],
                "63c2f720b4f": [
                    "7318"
                ],
                "8f68e51bbe8": [
                    "5939"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/12293",
                "https://github.com/apache/iotdb/commit/f52d752bf84",
                "https://github.com/apache/iotdb/issues/10896",
                "https://github.com/apache/iotdb/commit/e891a5d1f31",
                "https://github.com/apache/iotdb/issues/7318",
                "https://github.com/apache/iotdb/commit/63c2f720b4f",
                "https://github.com/apache/iotdb/issues/5939",
                "https://github.com/apache/iotdb/commit/8f68e51bbe8"
            ]
        },
        {
            "poj_link": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/",
            "file_path": "GoogleCloudPlatform/cloud-opensource-java/dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageProblemTest.java",
            "test_name": "testFormatSymbolProblem",
            "FQS": "com.google.cloud.tools.opensource.classpath.LinkageProblemTest.testFormatSymbolProblem()",
            "start_line": "142",
            "blame_result": "47805ea01 (Tomo Suzuki 2020-07-13 15:45:25 -0400 143)     assertEquals(\n47805ea01 (Tomo Suzuki 2020-07-13 15:45:25 -0400 144)         \"Class java.lang.Integer is not found\", classLinkageProblem1.formatSymbolProblem());\n47805ea01 (Tomo Suzuki 2020-07-13 15:45:25 -0400 145) \n47805ea01 (Tomo Suzuki 2020-07-13 15:45:25 -0400 146)     // classLinkageProblem1 and classLinkageProblem2 are the same except the sourceClass field.\n47805ea01 (Tomo Suzuki 2020-07-13 15:45:25 -0400 147)     // formatSymbolProblem only contains the problem on symbol.\n",
            "commit_hashes": {
                "47805ea01": "    LinkageProblem class to replace Multimap<SymbolProblem, ClassFile> (#1523)"
            },
            "Commit&issueIDs": {
                "47805ea01": [
                    "1523"
                ]
            },
            "links": [
                "https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/1523",
                "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/47805ea01"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/consensus/src/test/java/org/apache/iotdb/consensus/ratis/utils/UtilsTest.java",
            "test_name": "testEncryption",
            "FQS": "org.apache.iotdb.consensus.ratis.utils.UtilsTest.testEncryption()",
            "start_line": "35",
            "blame_result": "3ef36de873d consensus/src/test/java/org/apache/iotdb/consensus/ratis/UtilsTest.java (Potato 2023-02-28 21:21:21 +0800 36)     ConsensusGroupId raw = new ConfigRegionId(100);\nf9b3b0f8d2b consensus/src/test/java/org/apache/iotdb/consensus/ratis/UtilsTest.java (Potato 2022-05-06 10:18:52 +0800 37)     RaftGroupId id = Utils.fromConsensusGroupIdToRaftGroupId(raw);\nf9b3b0f8d2b consensus/src/test/java/org/apache/iotdb/consensus/ratis/UtilsTest.java (Potato 2022-05-06 10:18:52 +0800 38)     ConsensusGroupId cgid = Utils.fromRaftGroupIdToConsensusGroupId(id);\nbd01ddea00a consensus/src/test/java/org/apache/iotdb/consensus/ratis/UtilsTest.java (Potato 2022-04-08 19:59:41 +0800 39)     Assert.assertEquals(raw.getId(), cgid.getId());\nbd01ddea00a consensus/src/test/java/org/apache/iotdb/consensus/ratis/UtilsTest.java (Potato 2022-04-08 19:59:41 +0800 40)     Assert.assertEquals(raw.getType(), cgid.getType());\n",
            "commit_hashes": {
                "3ef36de873d": "    [IOTDB-5596] Rename ConfigNodeRegion to ConfigRegion (#9168)",
                "f9b3b0f8d2b": "    [IOTDB-3104] Add Consensus Module StateMachine Event API (#5806)",
                "bd01ddea00a": "    [IOTDB-2832] Initialize the consensus layer of the Datanode (#5417)"
            },
            "Commit&issueIDs": {
                "3ef36de873d": [
                    "(#9168)"
                ],
                "f9b3b0f8d2b": [
                    "(#5806)"
                ],
                "bd01ddea00a": [
                    "(#5417)"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/9168",
                "https://github.com/apache/iotdb/commit/3ef36de873d",
                "https://github.com/apache/iotdb/issues/5806",
                "https://github.com/apache/iotdb/commit/f9b3b0f8d2b",
                "https://github.com/apache/iotdb/issues/5417",
                "https://github.com/apache/iotdb/commit/bd01ddea00a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/datanode/src/test/java/org/apache/iotdb/db/queryengine/execution/fragment/FragmentInstanceExecutionTest.java",
            "test_name": "testFragmentInstanceExecution",
            "FQS": "org.apache.iotdb.db.queryengine.execution.fragment.FragmentInstanceExecutionTest.testFragmentInstanceExecution()",
            "start_line": "49",
            "blame_result": "e776067109b (Jackie Tien 2023-06-30 15:34:54 +0800 50)     ExecutorService instanceNotificationExecutor =\ne776067109b (Jackie Tien 2023-06-30 15:34:54 +0800 51)         IoTDBThreadPoolFactory.newFixedThreadPool(1, \"test-instance-notification\");\ne776067109b (Jackie Tien 2023-06-30 15:34:54 +0800 52)     try {\ne776067109b (Jackie Tien 2023-06-30 15:34:54 +0800 53)       IDriverScheduler scheduler = Mockito.mock(IDriverScheduler.class);\ne776067109b (Jackie Tien 2023-06-30 15:34:54 +0800 54)       FragmentInstanceId instanceId =\n",
            "commit_hashes": {
                "e776067109b": "    Improve UT coverage for query engine (#10367)"
            },
            "Commit&issueIDs": {
                "e776067109b": [
                    "10367"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/10367",
                "https://github.com/apache/iotdb/commit/e776067109b"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/processing/src/test/java/org/apache/druid/query/operator/ScanOperatorFactoryTest.java",
            "test_name": "testWrappedOperatorCarriesThroughValues",
            "FQS": "org.apache.druid.query.operator.ScanOperatorFactoryTest.testWrappedOperatorCarriesThroughValues()",
            "start_line": "82",
            "blame_result": "5fc122a144c (imply-cheddar 2023-07-07 01:20:32 +0900 83)   {\n5fc122a144c (imply-cheddar 2023-07-07 01:20:32 +0900 84)     ObjectMapper mapper = new DefaultObjectMapper();\n5fc122a144c (imply-cheddar 2023-07-07 01:20:32 +0900 85)     mapper.setInjectableValues(new InjectableValues.Std().addValue(ExprMacroTable.class, TestExprMacroTable.INSTANCE));\n5fc122a144c (imply-cheddar 2023-07-07 01:20:32 +0900 86) \n5fc122a144c (imply-cheddar 2023-07-07 01:20:32 +0900 87)     Interval[] intervals = new Interval[]{Intervals.utc(0, 6), Intervals.utc(6, 13), Intervals.utc(4, 8)};\n",
            "commit_hashes": {
                "5fc122a144c": "    Add window-focused tests from Drill (#13773)"
            },
            "Commit&issueIDs": {
                "5fc122a144c": [
                    "(#13773)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/13773",
                "https://github.com/apache/druid/commit/5fc122a144c"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/datanode/src/test/java/org/apache/iotdb/db/storageengine/DevicePathCacheTests.java",
            "test_name": "test02",
            "FQS": "org.apache.iotdb.db.storageengine.DevicePathCacheTests.test02()",
            "start_line": "58",
            "blame_result": "479122a082f (Zhijia Cao 2024-02-06 16:10:01 +0800 59)     String path1 = \"root.testdb.testd1.s1\";\n479122a082f (Zhijia Cao 2024-02-06 16:10:01 +0800 60)     String deviceId1 =\n479122a082f (Zhijia Cao 2024-02-06 16:10:01 +0800 61)         DataNodeDevicePathCache.getInstance().getDeviceId(new String(\"root.testdb.testd1.s1\"));\n479122a082f (Zhijia Cao 2024-02-06 16:10:01 +0800 62)     String deviceId2 =\n479122a082f (Zhijia Cao 2024-02-06 16:10:01 +0800 63)         DataNodeDevicePathCache.getInstance().getDeviceId(new String(\"root.testdb.testd1.s1\"));\n",
            "commit_hashes": {
                "479122a082f": "    Storage Engine: put DeviceCache into the total memory of the storage engine (#12016)"
            },
            "Commit&issueIDs": {
                "479122a082f": [
                    "12016"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/12016",
                "https://github.com/apache/iotdb/commit/479122a082f"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/datanode/src/test/java/org/apache/iotdb/db/storageengine/dataregion/compaction/CompactionTaskManagerTest.java",
            "test_name": "testSizeTieredCompactionStatus",
            "FQS": "org.apache.iotdb.db.storageengine.dataregion.compaction.CompactionTaskManagerTest.testSizeTieredCompactionStatus()",
            "start_line": "212",
            "blame_result": "f5a7b990d90 server/src/test/java/org/apache/iotdb/db/engine/compaction/CompactionTaskManagerTest.java                                (liuxuxin     2021-11-27 09:59:38 +0800 213)     TsFileManager tsFileManager =\nf5a7b990d90 server/src/test/java/org/apache/iotdb/db/engine/compaction/CompactionTaskManagerTest.java                                (liuxuxin     2021-11-27 09:59:38 +0800 214)         new TsFileManager(\"root.compactionTest\", \"0\", tempSGDir.getAbsolutePath());\nf5a7b990d90 server/src/test/java/org/apache/iotdb/db/engine/compaction/CompactionTaskManagerTest.java                                (liuxuxin     2021-11-27 09:59:38 +0800 215)     tsFileManager.addAll(seqResources, true);\nc889624e3e3 server/src/test/java/org/apache/iotdb/db/engine/compaction/CompactionTaskManagerTest.java                                (Liu Xuxin    2022-04-12 02:01:06 -0700 216)     InnerSpaceCompactionTask task =\n9111d69d217 iotdb-core/datanode/src/test/java/org/apache/iotdb/db/storageengine/dataregion/compaction/CompactionTaskManagerTest.java (Zhang.Jinrui 2023-10-11 18:24:12 +0800 217)         new InnerSpaceCompactionTask(0, tsFileManager, seqResources, true, performer, 0);\n",
            "commit_hashes": {
                "f5a7b990d90": "    [IOTDB-1899] Fix stream closed exception during compaction (#4457)",
                "c889624e3e3": "    [IOTDB-2817] Clear Compaction Framework (#5437)",
                "9111d69d217": "    Refactor the CompactionWorker part of Compaction framework (#11242)"
            },
            "Commit&issueIDs": {
                "f5a7b990d90": [
                    "(#4457)"
                ],
                "c889624e3e3": [
                    "(#5437)"
                ],
                "9111d69d217": [
                    "(#11242)"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/4457",
                "https://github.com/apache/iotdb/commit/f5a7b990d90",
                "https://github.com/apache/iotdb/issues/5437",
                "https://github.com/apache/iotdb/commit/c889624e3e3",
                "https://github.com/apache/iotdb/issues/11242",
                "https://github.com/apache/iotdb/commit/9111d69d217"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/datanode/src/test/java/org/apache/iotdb/db/storageengine/dataregion/compaction/cross/InsertionCrossSpaceCompactionTest.java",
            "test_name": "testInsertionCompactionUpdateFileMetrics",
            "FQS": "org.apache.iotdb.db.storageengine.dataregion.compaction.cross.InsertionCrossSpaceCompactionTest.testInsertionCompactionUpdateFileMetrics()",
            "start_line": "479",
            "blame_result": "a4879954d5c (shuwenwei 2023-10-31 18:17:42 +0800 480)     TsFileResource unseqResource1 =\na4879954d5c (shuwenwei 2023-10-31 18:17:42 +0800 481)         generateSingleNonAlignedSeriesFileWithDevices(\na4879954d5c (shuwenwei 2023-10-31 18:17:42 +0800 482)             \"2-2-0-0.tsfile\", new String[] {\"d1\"}, new TimeRange[] {new TimeRange(1, 4)}, false);\ne10934948e1 (shuwenwei 2024-10-10 10:24:16 +0800 483)     FileMetrics.getInstance()\ne10934948e1 (shuwenwei 2024-10-10 10:24:16 +0800 484)         .addTsFile(\n",
            "commit_hashes": {
                "a4879954d5c": "    Add InsertionCrossSpaceCompaction to move non overlapped unsequence file to sequence space directly (#11414)",
                "e10934948e1": "    fix compaction file metrics (#13691)"
            },
            "Commit&issueIDs": {
                "a4879954d5c": [
                    "11414"
                ],
                "e10934948e1": [
                    "13691"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/11414",
                "https://github.com/apache/iotdb/commit/a4879954d5c",
                "https://github.com/apache/iotdb/issues/13691",
                "https://github.com/apache/iotdb/commit/e10934948e1"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/datanode/src/test/java/org/apache/iotdb/db/storageengine/dataregion/compaction/utils/CompactionUpdateFileCountTest.java",
            "test_name": "testSeqSpaceCompactionFileMetric",
            "FQS": "org.apache.iotdb.db.storageengine.dataregion.compaction.utils.CompactionUpdateFileCountTest.testSeqSpaceCompactionFileMetric()",
            "start_line": "53",
            "blame_result": "420af60cd8d (shuwenwei    2023-09-08 15:05:47 +0800 54)       throws MetadataException, IOException, WriteProcessException {\n420af60cd8d (shuwenwei    2023-09-08 15:05:47 +0800 55)     registerTimeseriesInMManger(2, 3, false);\nf36af625129 (ZhangHongYin 2023-10-10 20:31:19 -0500 56)     long initSeqFileNum = FileMetrics.getInstance().getFileCount(true);\nf36af625129 (ZhangHongYin 2023-10-10 20:31:19 -0500 57)     long initUnSeqFileNum = FileMetrics.getInstance().getFileCount(false);\n420af60cd8d (shuwenwei    2023-09-08 15:05:47 +0800 58)     createFiles(1, 2, 3, 100, 1, 0, 50, 0, false, true);\n",
            "commit_hashes": {
                "420af60cd8d": "    Fix seq space file num and size statistics (#10982)",
                "f36af625129": "    Add database and region tag into tsfile metrics (#11228)"
            },
            "Commit&issueIDs": {
                "420af60cd8d": [
                    "(#10982)"
                ],
                "f36af625129": [
                    "(#11228)"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/10982",
                "https://github.com/apache/iotdb/commit/420af60cd8d",
                "https://github.com/apache/iotdb/issues/11228",
                "https://github.com/apache/iotdb/commit/f36af625129"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/datanode/src/test/java/org/apache/iotdb/db/storageengine/dataregion/compaction/utils/CompactionUpdateFileCountTest.java",
            "test_name": "testUnSeqSpaceCompactionFileMetric",
            "FQS": "org.apache.iotdb.db.storageengine.dataregion.compaction.utils.CompactionUpdateFileCountTest.testUnSeqSpaceCompactionFileMetric()",
            "start_line": "70",
            "blame_result": "420af60cd8d (shuwenwei    2023-09-08 15:05:47 +0800 71)       throws MetadataException, IOException, WriteProcessException {\n420af60cd8d (shuwenwei    2023-09-08 15:05:47 +0800 72)     registerTimeseriesInMManger(2, 3, false);\nf36af625129 (ZhangHongYin 2023-10-10 20:31:19 -0500 73)     long initSeqFileNum = FileMetrics.getInstance().getFileCount(true);\nf36af625129 (ZhangHongYin 2023-10-10 20:31:19 -0500 74)     long initUnSeqFileNum = FileMetrics.getInstance().getFileCount(false);\n420af60cd8d (shuwenwei    2023-09-08 15:05:47 +0800 75)     createFiles(1, 2, 3, 100, 1, 0, 50, 0, false, false);\n",
            "commit_hashes": {
                "420af60cd8d": "    Fix seq space file num and size statistics (#10982)",
                "f36af625129": "    Add database and region tag into tsfile metrics (#11228)"
            },
            "Commit&issueIDs": {
                "420af60cd8d": [
                    "(#10982)"
                ],
                "f36af625129": [
                    "(#11228)"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/10982",
                "https://github.com/apache/iotdb/commit/420af60cd8d",
                "https://github.com/apache/iotdb/issues/11228",
                "https://github.com/apache/iotdb/commit/f36af625129"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/node-commons/src/test/java/org/apache/iotdb/commons/exception/pipe/PipeRuntimeExceptionTest.java",
            "test_name": "testPipeRuntimeNonCriticalException",
            "FQS": "org.apache.iotdb.commons.exception.pipe.PipeRuntimeExceptionTest.testPipeRuntimeNonCriticalException()",
            "start_line": "31",
            "blame_result": "bc0f87e2714 (Caideyipi 2023-07-06 22:38:00 +0800 32)     long currentTime = System.currentTimeMillis();\nbc0f87e2714 (Caideyipi 2023-07-06 22:38:00 +0800 33)     PipeRuntimeNonCriticalException e = new PipeRuntimeNonCriticalException(\"test\", currentTime);\nbc0f87e2714 (Caideyipi 2023-07-06 22:38:00 +0800 34)     Assert.assertEquals(new PipeRuntimeNonCriticalException(\"test\", currentTime), e);\nc749d5b2fb2 (\u9a6c\u5b50\u5764    2023-07-01 11:30:03 +0800 35)     ByteBuffer buffer = ByteBuffer.allocate(32);\nc749d5b2fb2 (\u9a6c\u5b50\u5764    2023-07-01 11:30:03 +0800 36)     e.serialize(buffer);\n",
            "commit_hashes": {
                "bc0f87e2714": "    [IOTDB-6044] Pipe: Upgraded the exception handling logic for better user experience (#10433)",
                "c749d5b2fb2": "    UT: add unit tests for sync/pipe/load packages in datanode & node-commons (#10390)"
            },
            "Commit&issueIDs": {
                "bc0f87e2714": [
                    "(#10433)"
                ],
                "c749d5b2fb2": [
                    "(#10390)"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/10433",
                "https://github.com/apache/iotdb/commit/bc0f87e2714",
                "https://github.com/apache/iotdb/issues/10390",
                "https://github.com/apache/iotdb/commit/c749d5b2fb2"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/node-commons/src/test/java/org/apache/iotdb/commons/exception/pipe/PipeRuntimeExceptionTest.java",
            "test_name": "testPipeRuntimeConnectorCriticalException",
            "FQS": "org.apache.iotdb.commons.exception.pipe.PipeRuntimeExceptionTest.testPipeRuntimeConnectorCriticalException()",
            "start_line": "67",
            "blame_result": "bc0f87e2714 (Caideyipi 2023-07-06 22:38:00 +0800 68)     long currentTime = System.currentTimeMillis();\nbc0f87e2714 (Caideyipi 2023-07-06 22:38:00 +0800 69)     PipeRuntimeConnectorCriticalException e =\nbc0f87e2714 (Caideyipi 2023-07-06 22:38:00 +0800 70)         new PipeRuntimeConnectorCriticalException(\"test\", currentTime);\nbc0f87e2714 (Caideyipi 2023-07-06 22:38:00 +0800 71)     Assert.assertEquals(new PipeRuntimeConnectorCriticalException(\"test\", currentTime), e);\nc749d5b2fb2 (\u9a6c\u5b50\u5764    2023-07-01 11:30:03 +0800 72)     ByteBuffer buffer = ByteBuffer.allocate(32);\n",
            "commit_hashes": {
                "bc0f87e2714": "    [IOTDB-6044] Pipe: Upgraded the exception handling logic for better user experience (#10433)",
                "c749d5b2fb2": "    UT: add unit tests for sync/pipe/load packages in datanode & node-commons (#10390)"
            },
            "Commit&issueIDs": {
                "bc0f87e2714": [
                    "(#10433)"
                ],
                "c749d5b2fb2": [
                    "(#10390)"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/10433",
                "https://github.com/apache/iotdb/commit/bc0f87e2714",
                "https://github.com/apache/iotdb/issues/10390",
                "https://github.com/apache/iotdb/commit/c749d5b2fb2"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/node-commons/src/test/java/org/apache/iotdb/commons/pipe/task/PipeMetaDeSerTest.java",
            "test_name": "test",
            "FQS": "org.apache.iotdb.commons.pipe.task.PipeMetaDeSerTest.test()",
            "start_line": "53",
            "blame_result": "3cb544e39b2 iotdb-core/node-commons/src/test/java/org/apache/iotdb/commons/pipe/task/PipeMetaDeSerTest.java      (Caideyipi       2024-11-21 15:45:59 +0800 54)     final PipeStaticMeta pipeStaticMeta =\n803c87fcdb0 node-commons/src/test/java/org/apache/iotdb/commons/pipe/task/meta/PipeMetaDeSerTest.java            (Steve Yurong Su 2023-05-15 03:24:18 +0800 55)         new PipeStaticMeta(\n803c87fcdb0 node-commons/src/test/java/org/apache/iotdb/commons/pipe/task/meta/PipeMetaDeSerTest.java            (Steve Yurong Su 2023-05-15 03:24:18 +0800 56)             \"pipeName\",\n803c87fcdb0 node-commons/src/test/java/org/apache/iotdb/commons/pipe/task/meta/PipeMetaDeSerTest.java            (Steve Yurong Su 2023-05-15 03:24:18 +0800 57)             123L,\n27a0d1973b5 iotdb-core/node-commons/src/test/java/org/apache/iotdb/commons/pipe/task/meta/PipeMetaDeSerTest.java (Steve Yurong Su 2024-03-10 09:31:26 +0800 58)             new HashMap<String, String>() {\n",
            "commit_hashes": {
                "3cb544e39b2": "    Pipe: Reduce the memory usage & Enable insertNode memory control for stream mode degrade and stuck restart (#14102)",
                "803c87fcdb0": "    [IOTDB-5873] Pipe: Support `CREATE`, `DROP`, `START`, `STOP` & `SHOW` Clauses (#9849)",
                "27a0d1973b5": "    Pipe meta sync: support meta data sync between different clusters (#11794)"
            },
            "Commit&issueIDs": {
                "3cb544e39b2": [
                    "14102"
                ],
                "803c87fcdb0": [
                    "9849"
                ],
                "27a0d1973b5": [
                    "11794"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/14102",
                "https://github.com/apache/iotdb/commit/3cb544e39b2",
                "https://github.com/apache/iotdb/issues/9849",
                "https://github.com/apache/iotdb/commit/803c87fcdb0",
                "https://github.com/apache/iotdb/issues/11794",
                "https://github.com/apache/iotdb/commit/27a0d1973b5"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/node-commons/src/test/java/org/apache/iotdb/commons/subscription/consumer/ConsumerGroupDeSerTest.java",
            "test_name": "test",
            "FQS": "org.apache.iotdb.commons.subscription.consumer.ConsumerGroupDeSerTest.test()",
            "start_line": "40",
            "blame_result": "a8e9bbd297c (Itami Sho 2024-03-18 00:00:14 +0800 41)     Map<String, String> consumerAttributes = new HashMap<>();\na8e9bbd297c (Itami Sho 2024-03-18 00:00:14 +0800 42)     consumerAttributes.put(\"k1\", \"v1\");\na8e9bbd297c (Itami Sho 2024-03-18 00:00:14 +0800 43)     consumerAttributes.put(\"k2\", \"v2\");\na8e9bbd297c (Itami Sho 2024-03-18 00:00:14 +0800 44) \na8e9bbd297c (Itami Sho 2024-03-18 00:00:14 +0800 45)     ConsumerGroupMeta consumerGroupMeta =\n",
            "commit_hashes": {
                "a8e9bbd297c": "    Subscription: Subscription Management On ConfigNode (#12149)"
            },
            "Commit&issueIDs": {
                "a8e9bbd297c": [
                    "12149"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/12149",
                "https://github.com/apache/iotdb/commit/a8e9bbd297c"
            ]
        },
        {
            "poj_link": "https://github.com/apache/iotdb/",
            "file_path": "apache/iotdb/iotdb-core/node-commons/src/test/java/org/apache/iotdb/commons/subscription/topic/TopicDeSerTest.java",
            "test_name": "test",
            "FQS": "org.apache.iotdb.commons.subscription.topic.TopicDeSerTest.test()",
            "start_line": "35",
            "blame_result": "a8e9bbd297c (Itami Sho 2024-03-18 00:00:14 +0800 36)     Map<String, String> topicAttributes = new HashMap<>();\na8e9bbd297c (Itami Sho 2024-03-18 00:00:14 +0800 37)     topicAttributes.put(\"k1\", \"v1\");\na8e9bbd297c (Itami Sho 2024-03-18 00:00:14 +0800 38)     topicAttributes.put(\"k2\", \"v2\");\na8e9bbd297c (Itami Sho 2024-03-18 00:00:14 +0800 39) \na8e9bbd297c (Itami Sho 2024-03-18 00:00:14 +0800 40)     TopicMeta topicMeta = new TopicMeta(\"test_topic\", 1, topicAttributes);\n",
            "commit_hashes": {
                "a8e9bbd297c": "    Subscription: Subscription Management On ConfigNode (#12149)"
            },
            "Commit&issueIDs": {
                "a8e9bbd297c": [
                    "12149"
                ]
            },
            "links": [
                "https://github.com/apache/iotdb/issues/12149",
                "https://github.com/apache/iotdb/commit/a8e9bbd297c"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/processing/src/test/java/org/apache/druid/segment/serde/CombineFirstTwoValuesColumnarMultiIntsTest.java",
            "test_name": "testGetUnshared",
            "FQS": "org.apache.druid.segment.serde.CombineFirstTwoValuesColumnarMultiIntsTest.testGetUnshared()",
            "start_line": "74",
            "blame_result": "82fbb31c7c5 (Gian Merlino 2023-06-28 10:30:27 -0700 75)   {\n82fbb31c7c5 (Gian Merlino 2023-06-28 10:30:27 -0700 76)     assertEquals(new int[]{0, 1, 2}, combined.getUnshared(0));\n82fbb31c7c5 (Gian Merlino 2023-06-28 10:30:27 -0700 77)     assertEquals(new int[]{0, 0, 1, 2}, combined.getUnshared(1));\n82fbb31c7c5 (Gian Merlino 2023-06-28 10:30:27 -0700 78)     assertEquals(new int[]{2, 0, 1, 0, 4, 0}, combined.getUnshared(2));\n82fbb31c7c5 (Gian Merlino 2023-06-28 10:30:27 -0700 79) \n",
            "commit_hashes": {
                "82fbb31c7c5": "    Properly read SQL-compatible segments in default-value mode. (#14142)"
            },
            "Commit&issueIDs": {
                "82fbb31c7c5": [
                    "(#14142)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/14142",
                "https://github.com/apache/druid/commit/82fbb31c7c5"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/collections/JedisByteHashMapTest.java",
            "test_name": "serialize",
            "FQS": "redis.clients.jedis.collections.JedisByteHashMapTest.serialize()",
            "start_line": "115",
            "blame_result": "844477cb4 src/test/java/redis/clients/jedis/tests/collections/JedisByteHashMapTest.java (M Sazzadul Hoque 2021-03-10 22:36:33 +0600 116)     for (int i = 0; i < keys.length; i++) {\n844477cb4 src/test/java/redis/clients/jedis/tests/collections/JedisByteHashMapTest.java (M Sazzadul Hoque 2021-03-10 22:36:33 +0600 117)       map.put(keys[i], vals[i]);\n1bebbcde4 src/test/java/redis/clients/jedis/tests/collections/JedisByteHashMapTest.java (\u6768\u535a\u4e1c           2019-07-17 12:12:18 +0800 118)     }\n844477cb4 src/test/java/redis/clients/jedis/tests/collections/JedisByteHashMapTest.java (M Sazzadul Hoque 2021-03-10 22:36:33 +0600 119) \n844477cb4 src/test/java/redis/clients/jedis/tests/collections/JedisByteHashMapTest.java (M Sazzadul Hoque 2021-03-10 22:36:33 +0600 120)     ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n",
            "commit_hashes": {
                "844477cb4": "    run formatter (#2416)",
                "1bebbcde4": "    Fix JedisByteHashMap transient (#2008)"
            },
            "Commit&issueIDs": {
                "844477cb4": [
                    "(#2416)"
                ],
                "1bebbcde4": [
                    "(#2008)"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2416",
                "https://github.com/redis/jedis/commit/844477cb4",
                "https://github.com/redis/jedis/issues/2008",
                "https://github.com/redis/jedis/commit/1bebbcde4"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/commands/jedis/AccessControlListCommandsTest.java",
            "test_name": "aclCatTest",
            "FQS": "redis.clients.jedis.commands.jedis.AccessControlListCommandsTest.aclCatTest()",
            "start_line": "316",
            "blame_result": "645790854 src/test/java/redis/clients/jedis/tests/commands/AccessControlListCommandsTest.java (Tugdual Grall    2020-03-14 09:04:10 +0100 317)     List<String> categories = jedis.aclCat();\ne166fb55c src/test/java/redis/clients/jedis/commands/jedis/AccessControlListCommandsTest.java (M Sazzadul Hoque 2022-10-17 13:35:39 +0600 318)     assertFalse(categories.isEmpty());\n645790854 src/test/java/redis/clients/jedis/tests/commands/AccessControlListCommandsTest.java (Tugdual Grall    2020-03-14 09:04:10 +0100 319) \n645790854 src/test/java/redis/clients/jedis/tests/commands/AccessControlListCommandsTest.java (Tugdual Grall    2020-03-14 09:04:10 +0100 320)     // test binary\n645790854 src/test/java/redis/clients/jedis/tests/commands/AccessControlListCommandsTest.java (Tugdual Grall    2020-03-14 09:04:10 +0100 321)     List<byte[]> categoriesBinary = jedis.aclCatBinary();\n",
            "commit_hashes": {
                "645790854": "    Adding support for Redis 6 ACL - Issue #2035 (#2077)",
                "e166fb55c": "    Test: Address ACL error messaging changes (#3170)"
            },
            "Commit&issueIDs": {
                "645790854": [
                    "#2035",
                    "(#2077)"
                ],
                "e166fb55c": [
                    "(#3170)"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2035",
                "https://github.com/redis/jedis/commit/645790854",
                "https://github.com/redis/jedis/issues/3170",
                "https://github.com/redis/jedis/commit/e166fb55c"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/commands/jedis/ClientCommandsTest.java",
            "test_name": "clientIdReconnect",
            "FQS": "redis.clients.jedis.commands.jedis.ClientCommandsTest.clientIdReconnect()",
            "start_line": "100",
            "blame_result": "d4cbd1378 src/test/java/redis/clients/jedis/tests/commands/ClientCommandsTest.java (Amit Gangrade    2020-05-04 09:48:32 +0530 101)     long clientIdInitial = client.clientId();\nd4cbd1378 src/test/java/redis/clients/jedis/tests/commands/ClientCommandsTest.java (Amit Gangrade    2020-05-04 09:48:32 +0530 102)     client.disconnect();\nd4cbd1378 src/test/java/redis/clients/jedis/tests/commands/ClientCommandsTest.java (Amit Gangrade    2020-05-04 09:48:32 +0530 103)     client.connect();\n858c80513 src/test/java/redis/clients/jedis/commands/jedis/ClientCommandsTest.java (M Sazzadul Hoque 2021-12-08 16:44:10 +0600 104)     client.auth(\"foobared\");\nd4cbd1378 src/test/java/redis/clients/jedis/tests/commands/ClientCommandsTest.java (Amit Gangrade    2020-05-04 09:48:32 +0530 105)     long clientIdAfterReconnect = client.clientId();\n",
            "commit_hashes": {
                "d4cbd1378": "    issue#2126 - Add support for 'client id' command (#2131)",
                "858c80513": "    Jedis 4 changes (#2693)"
            },
            "Commit&issueIDs": {
                "d4cbd1378": [
                    "(#2131)"
                ],
                "858c80513": [
                    "(#2693)"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2131",
                "https://github.com/redis/jedis/commit/d4cbd1378",
                "https://github.com/redis/jedis/issues/2693",
                "https://github.com/redis/jedis/commit/858c80513"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/commands/jedis/MigrateTest.java",
            "test_name": "migrateConflict",
            "FQS": "redis.clients.jedis.commands.jedis.MigrateTest.migrateConflict()",
            "start_line": "212",
            "blame_result": "26e750641 src/test/java/redis/clients/jedis/tests/commands/MigrateTest.java (M Sazzadul Hoque 2018-08-14 14:29:10 +0600 213)     jedis.mset(\"foo1\", \"bar1\", \"foo2\", \"bar2\", \"foo3\", \"bar3\");\n26e750641 src/test/java/redis/clients/jedis/tests/commands/MigrateTest.java (M Sazzadul Hoque 2018-08-14 14:29:10 +0600 214)     dest.set(\"foo2\", \"bar\");\n26e750641 src/test/java/redis/clients/jedis/tests/commands/MigrateTest.java (M Sazzadul Hoque 2018-08-14 14:29:10 +0600 215)     try {\n5479c27bd src/test/java/redis/clients/jedis/tests/commands/MigrateTest.java (M Sazzadul Hoque 2019-07-04 13:00:06 +0600 216)       jedis.migrate(host, port, db, timeout, new MigrateParams(), \"foo1\", \"foo2\", \"foo3\");\n26e750641 src/test/java/redis/clients/jedis/tests/commands/MigrateTest.java (M Sazzadul Hoque 2018-08-14 14:29:10 +0600 217)       fail(\"Should get BUSYKEY error\");\n",
            "commit_hashes": {
                "26e750641": "    MIGRATE multikey and filter implementation (#1748)",
                "5479c27bd": "    Update Migrate tests for Redis 6 and Support MIGRATE with AUTH (#2006)"
            },
            "Commit&issueIDs": {
                "26e750641": [
                    "(#1748)"
                ],
                "5479c27bd": [
                    "(#2006)"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/1748",
                "https://github.com/redis/jedis/commit/26e750641",
                "https://github.com/redis/jedis/issues/2006",
                "https://github.com/redis/jedis/commit/5479c27bd"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/commands/jedis/StreamsCommandsTest.java",
            "test_name": "xrange",
            "FQS": "redis.clients.jedis.commands.jedis.StreamsCommandsTest.xrange()",
            "start_line": "215",
            "blame_result": "844477cb4 src/test/java/redis/clients/jedis/tests/commands/StreamsCommandsTest.java (M Sazzadul Hoque 2021-03-10 22:36:33 +0600 216)     List<StreamEntry> range = jedis.xrange(\"xrange-stream\", (StreamEntryID) null,\n844477cb4 src/test/java/redis/clients/jedis/tests/commands/StreamsCommandsTest.java (M Sazzadul Hoque 2021-03-10 22:36:33 +0600 217)       (StreamEntryID) null, Integer.MAX_VALUE);\n421b63108 src/test/java/redis/clients/jedis/tests/commands/StreamsCommandsTest.java (Guy Korland      2019-03-26 18:07:50 +0200 218)     assertEquals(0, range.size());\n844477cb4 src/test/java/redis/clients/jedis/tests/commands/StreamsCommandsTest.java (M Sazzadul Hoque 2021-03-10 22:36:33 +0600 219) \n844477cb4 src/test/java/redis/clients/jedis/tests/commands/StreamsCommandsTest.java (M Sazzadul Hoque 2021-03-10 22:36:33 +0600 220)     Map<String, String> map = new HashMap<>();\n",
            "commit_hashes": {
                "844477cb4": "    run formatter (#2416)",
                "421b63108": "    Add Redis Streams (#1880)"
            },
            "Commit&issueIDs": {
                "844477cb4": [
                    "(#2416)"
                ],
                "421b63108": [
                    "(#1880)"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2416",
                "https://github.com/redis/jedis/commit/844477cb4",
                "https://github.com/redis/jedis/issues/1880",
                "https://github.com/redis/jedis/commit/421b63108"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/modules/json/PathTest.java",
            "test_name": "testPathEquals",
            "FQS": "redis.clients.jedis.modules.json.PathTest.testPathEquals()",
            "start_line": "22",
            "blame_result": "858c80513 (M Sazzadul Hoque 2021-12-08 16:44:10 +0600 23)     assertEquals(Path.of(\".a.b.c\"), Path.of(\".a.b.c\"));\n858c80513 (M Sazzadul Hoque 2021-12-08 16:44:10 +0600 24)     assertNotEquals(Path.of(\".a.b.c\"), Path.of(\".b.c\"));\n858c80513 (M Sazzadul Hoque 2021-12-08 16:44:10 +0600 25)     assertNotEquals(Path.of(\".a.b.c\"), null);\n858c80513 (M Sazzadul Hoque 2021-12-08 16:44:10 +0600 26)     assertNotEquals(Path.of(\".a.b.c\"), \".a.b.c\");\n858c80513 (M Sazzadul Hoque 2021-12-08 16:44:10 +0600 27)     Path aPath = Path.of(\".a\");\n",
            "commit_hashes": {
                "858c80513": "    Jedis 4 changes (#2693)"
            },
            "Commit&issueIDs": {
                "858c80513": [
                    "(#2693)"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2693",
                "https://github.com/redis/jedis/commit/858c80513"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/modules/json/PathTest.java",
            "test_name": "testPathHashCode",
            "FQS": "redis.clients.jedis.modules.json.PathTest.testPathHashCode()",
            "start_line": "32",
            "blame_result": "858c80513 (M Sazzadul Hoque 2021-12-08 16:44:10 +0600 33)     assertEquals(Path.of(\".a.b.c\").hashCode(), Path.of(\".a.b.c\").hashCode());\n858c80513 (M Sazzadul Hoque 2021-12-08 16:44:10 +0600 34)     assertNotEquals(Path.of(\".a.b.c\").hashCode(), Path.of(\".b.c\").hashCode());\n858c80513 (M Sazzadul Hoque 2021-12-08 16:44:10 +0600 35)   }\n858c80513 (M Sazzadul Hoque 2021-12-08 16:44:10 +0600 36) }\n",
            "commit_hashes": {
                "858c80513": "    Jedis 4 changes (#2693)"
            },
            "Commit&issueIDs": {
                "858c80513": [
                    "(#2693)"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2693",
                "https://github.com/redis/jedis/commit/858c80513"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/BitPosParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.BitPosParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         BitPosParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         BitPosParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/BitPosParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.BitPosParamsTest.checkHashCodeVariousParams()",
            "start_line": "32",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 33)         BitPosParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         BitPosParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         secondParam.start(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)     }\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/server/src/test/java/org/apache/druid/messages/server/OutboxImplTest.java",
            "test_name": "test_normalOperation",
            "FQS": "org.apache.druid.messages.server.OutboxImplTest.test_normalOperation()",
            "start_line": "55",
            "blame_result": "878adff9aaa (Gian Merlino 2024-10-01 14:38:55 -0700 56)   {\n878adff9aaa (Gian Merlino 2024-10-01 14:38:55 -0700 57)     // Send first three messages.\n878adff9aaa (Gian Merlino 2024-10-01 14:38:55 -0700 58)     final ListenableFuture<?> sendFuture1 = outbox.sendMessage(HOST, \"1\");\n878adff9aaa (Gian Merlino 2024-10-01 14:38:55 -0700 59)     final ListenableFuture<?> sendFuture2 = outbox.sendMessage(HOST, \"2\");\n878adff9aaa (Gian Merlino 2024-10-01 14:38:55 -0700 60)     final ListenableFuture<?> sendFuture3 = outbox.sendMessage(HOST, \"3\");\n",
            "commit_hashes": {
                "878adff9aaa": "    MSQ profile for Brokers and Historicals. (#17140)"
            },
            "Commit&issueIDs": {
                "878adff9aaa": [
                    "17140"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/17140",
                "https://github.com/apache/druid/commit/878adff9aaa"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.ClientKillParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "18",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         ClientKillParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         ClientKillParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 23)     \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.ClientKillParamsTest.checkHashCodeVariousParams()",
            "start_line": "34",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         ClientKillParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         firstParam.type(ClientType.NORMAL);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         ClientKillParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         secondParam.skipMe(ClientKillParams.SkipMe.NO);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 39)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/server/src/test/java/org/apache/druid/messages/server/OutboxImplTest.java",
            "test_name": "test_getMessages_nonexistentHost",
            "FQS": "org.apache.druid.messages.server.OutboxImplTest.test_getMessages_nonexistentHost()",
            "start_line": "127",
            "blame_result": "878adff9aaa (Gian Merlino 2024-10-01 14:38:55 -0700 128)   {\n878adff9aaa (Gian Merlino 2024-10-01 14:38:55 -0700 129)     // Calling getMessages with a nonexistent host creates an outbox.\n878adff9aaa (Gian Merlino 2024-10-01 14:38:55 -0700 130)     final String nonexistentHost = \"nonexistent\";\n878adff9aaa (Gian Merlino 2024-10-01 14:38:55 -0700 131)     final ListenableFuture<MessageBatch<String>> batchFuture = outbox.getMessages(\n878adff9aaa (Gian Merlino 2024-10-01 14:38:55 -0700 132)         nonexistentHost,\n",
            "commit_hashes": {
                "878adff9aaa": "    MSQ profile for Brokers and Historicals. (#17140)"
            },
            "Commit&issueIDs": {
                "878adff9aaa": [
                    "17140"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/17140",
                "https://github.com/apache/druid/commit/878adff9aaa"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/CommandListFilterByParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.CommandListFilterByParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         CommandListFilterByParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         CommandListFilterByParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/CommandListFilterByParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.CommandListFilterByParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         CommandListFilterByParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.filterByAclCat(\"admin\");\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         CommandListFilterByParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.filterByModule(\"JSON\");\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/FraunhoferIOSB/FAAAST-Service/",
            "file_path": "FraunhoferIOSB/FAAAST-Service/starter/src/test/java/de/fraunhofer/iosb/ilt/faaast/service/starter/AppTest.java",
            "test_name": "testConfigOverrideViaEnvironmentUnderscoreSeparated",
            "FQS": "de.fraunhofer.iosb.ilt.faaast.service.starter.AppTest.testConfigOverrideViaEnvironmentUnderscoreSeparated()",
            "start_line": "246",
            "blame_result": "cf5ccae9c (tbischoff2 2024-03-06 08:09:36 +0100 247)         ServiceConfig expected = ServiceConfigHelper.getDefaultServiceConfig();\ncf5ccae9c (tbischoff2 2024-03-06 08:09:36 +0100 248)         ((HttpEndpointConfig) expected.getEndpoints().get(0)).setPort(1234);\ncf5ccae9c (tbischoff2 2024-03-06 08:09:36 +0100 249)         ServiceConfig config = ServiceConfigHelper.getDefaultServiceConfig();\ncf5ccae9c (tbischoff2 2024-03-06 08:09:36 +0100 250)         Map<String, String> env = Map.of(\"endpoints[0]_port\", \"1234\");\ncf5ccae9c (tbischoff2 2024-03-06 08:09:36 +0100 251)         List<ConfigOverride> overrides = withEnv(env).execute(() -> {\n",
            "commit_hashes": {
                "cf5ccae9c": "    Update to AAS specification v3 (#581)"
            },
            "Commit&issueIDs": {
                "cf5ccae9c": [
                    "581"
                ]
            },
            "links": [
                "https://github.com/FraunhoferIOSB/FAAAST-Service/issues/581",
                "https://github.com/FraunhoferIOSB/FAAAST-Service/commit/cf5ccae9c"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/CommandListFilterByParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.CommandListFilterByParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         CommandListFilterByParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.filterByAclCat(\"admin\");\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         CommandListFilterByParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.filterByModule(\"JSON\");\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/FailoverParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.FailoverParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         FailoverParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         FailoverParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/server/src/test/java/org/apache/druid/segment/metadata/FingerprintGeneratorTest.java",
            "test_name": "testGenerateFingerprint_columnPermutation",
            "FQS": "org.apache.druid.segment.metadata.FingerprintGeneratorTest.testGenerateFingerprint_columnPermutation()",
            "start_line": "69",
            "blame_result": "e30790e0139 (Rishabh Singh 2024-04-24 22:22:53 +0530 70)   {\ne30790e0139 (Rishabh Singh 2024-04-24 22:22:53 +0530 71)     RowSignature rowSignature =\ne30790e0139 (Rishabh Singh 2024-04-24 22:22:53 +0530 72)         RowSignature.builder()\ne30790e0139 (Rishabh Singh 2024-04-24 22:22:53 +0530 73)                     .add(\"c2\", ColumnType.LONG)\ne30790e0139 (Rishabh Singh 2024-04-24 22:22:53 +0530 74)                     .add(\"c1\", ColumnType.FLOAT)\n",
            "commit_hashes": {
                "e30790e0139": "    Introduce Segment Schema Publishing and Polling for Efficient Datasource Schema Building (#15817)"
            },
            "Commit&issueIDs": {
                "e30790e0139": [
                    "15817"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/15817",
                "https://github.com/apache/druid/commit/e30790e0139"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/FailoverParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.FailoverParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         FailoverParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.timeout(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         FailoverParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.timeout(20);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/FailoverParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.FailoverParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         FailoverParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.timeout(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         FailoverParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.timeout(20);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/GeoAddParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.GeoAddParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         GeoAddParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         GeoAddParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/server/src/test/java/org/apache/druid/segment/metadata/FingerprintGeneratorTest.java",
            "test_name": "testGenerateFingerprint_differentDatasources",
            "FQS": "org.apache.druid.segment.metadata.FingerprintGeneratorTest.testGenerateFingerprint_differentDatasources()",
            "start_line": "111",
            "blame_result": "e30790e0139 (Rishabh Singh 2024-04-24 22:22:53 +0530 112)   {\ne30790e0139 (Rishabh Singh 2024-04-24 22:22:53 +0530 113)     RowSignature rowSignature =\ne30790e0139 (Rishabh Singh 2024-04-24 22:22:53 +0530 114)         RowSignature.builder()\ne30790e0139 (Rishabh Singh 2024-04-24 22:22:53 +0530 115)                     .add(\"c1\", ColumnType.FLOAT)\ne30790e0139 (Rishabh Singh 2024-04-24 22:22:53 +0530 116)                     .add(\"c2\", ColumnType.LONG)\n",
            "commit_hashes": {
                "e30790e0139": "    Introduce Segment Schema Publishing and Polling for Efficient Datasource Schema Building (#15817)"
            },
            "Commit&issueIDs": {
                "e30790e0139": [
                    "15817"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/15817",
                "https://github.com/apache/druid/commit/e30790e0139"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/GeoAddParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.GeoAddParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         GeoAddParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.nx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         GeoAddParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.xx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/GeoAddParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.GeoAddParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         GeoAddParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.nx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         GeoAddParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.xx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/GetExParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.GetExParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         GetExParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         GetExParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/incubator-uniffle/",
            "file_path": "apache/incubator-uniffle/common/src/test/java/org/apache/uniffle/common/BufferSegmentTest.java",
            "test_name": "testEquals",
            "FQS": "org.apache.uniffle.common.BufferSegmentTest.testEquals()",
            "start_line": "31",
            "blame_result": "f7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 32)     BufferSegment segment1 = new BufferSegment(0, 1, 2, 3, 4, 5);\nf7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 33)     BufferSegment segment2 = new BufferSegment(0, 1, 2, 3, 4, 5);\nf7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 34)     assertEquals(segment1, segment2);\n174e6bb7c (Kaijie Chen 2022-07-21 16:55:00 +0800 35)     assertEquals(segment1.hashCode(), segment2.hashCode());\nf7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 36)     assertNotEquals(segment1, null);\n",
            "commit_hashes": {
                "f7c9a2abc": "    [TEST] Improve code coverage in rss-common (#26)",
                "174e6bb7c": "    [TEST] Add more unit tests in rss-common (#63)"
            },
            "Commit&issueIDs": {
                "f7c9a2abc": [
                    "(#26)"
                ],
                "174e6bb7c": [
                    "(#63)"
                ]
            },
            "links": [
                "https://github.com/apache/incubator-uniffle/issues/26",
                "https://github.com/apache/incubator-uniffle/commit/f7c9a2abc",
                "https://github.com/apache/incubator-uniffle/issues/63",
                "https://github.com/apache/incubator-uniffle/commit/174e6bb7c"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/GetExParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.GetExParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         GetExParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.ex(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         GetExParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.px(20);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/incubator-uniffle/",
            "file_path": "apache/incubator-uniffle/common/src/test/java/org/apache/uniffle/common/PartitionRangeTest.java",
            "test_name": "testEquals",
            "FQS": "org.apache.uniffle.common.PartitionRangeTest.testEquals()",
            "start_line": "41",
            "blame_result": "f7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 42)     PartitionRange partitionRange1 = new PartitionRange(1, 2);\nf7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 43)     PartitionRange partitionRange2 = new PartitionRange(1, 2);\nf7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 44)     assertEquals(partitionRange1, partitionRange1);\n174e6bb7c (Kaijie Chen 2022-07-21 16:55:00 +0800 45)     assertEquals(partitionRange1.hashCode(), partitionRange1.hashCode());\nf7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 46)     assertEquals(partitionRange1, partitionRange2);\n",
            "commit_hashes": {
                "f7c9a2abc": "    [TEST] Improve code coverage in rss-common (#26)",
                "174e6bb7c": "    [TEST] Add more unit tests in rss-common (#63)"
            },
            "Commit&issueIDs": {
                "f7c9a2abc": [
                    "(#26)"
                ],
                "174e6bb7c": [
                    "(#63)"
                ]
            },
            "links": [
                "https://github.com/apache/incubator-uniffle/issues/26",
                "https://github.com/apache/incubator-uniffle/commit/f7c9a2abc",
                "https://github.com/apache/incubator-uniffle/issues/63",
                "https://github.com/apache/incubator-uniffle/commit/174e6bb7c"
            ]
        },
        {
            "poj_link": "https://github.com/apache/incubator-uniffle/",
            "file_path": "apache/incubator-uniffle/common/src/test/java/org/apache/uniffle/common/PartitionRangeTest.java",
            "test_name": "testHashCode",
            "FQS": "org.apache.uniffle.common.PartitionRangeTest.testHashCode()",
            "start_line": "63",
            "blame_result": "f7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 64)     PartitionRange partitionRange1 = new PartitionRange(1, 2);\nf7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 65)     PartitionRange partitionRange2 = new PartitionRange(1, 2);\nf7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 66)     assertEquals(partitionRange1.hashCode(), partitionRange2.hashCode());\nf7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 67)   }\nf7c9a2abc (Kaijie Chen 2022-07-05 16:24:23 +0800 68) \n",
            "commit_hashes": {
                "f7c9a2abc": "    [TEST] Improve code coverage in rss-common (#26)"
            },
            "Commit&issueIDs": {
                "f7c9a2abc": [
                    "(#26)"
                ]
            },
            "links": [
                "https://github.com/apache/incubator-uniffle/issues/26",
                "https://github.com/apache/incubator-uniffle/commit/f7c9a2abc"
            ]
        },
        {
            "poj_link": "https://github.com/apache/incubator-uniffle/",
            "file_path": "apache/incubator-uniffle/common/src/test/java/org/apache/uniffle/common/ShuffleRegisterInfoTest.java",
            "test_name": "testEquals",
            "FQS": "org.apache.uniffle.common.ShuffleRegisterInfoTest.testEquals()",
            "start_line": "31",
            "blame_result": "174e6bb7c (Kaijie Chen 2022-07-21 16:55:00 +0800 32)     ShuffleServerInfo shuffleServerInfo = new ShuffleServerInfo(\"1\", \"localhost\", 1234);\n174e6bb7c (Kaijie Chen 2022-07-21 16:55:00 +0800 33)     List<PartitionRange> partitionRanges = Collections.singletonList(new PartitionRange(2, 3));\n174e6bb7c (Kaijie Chen 2022-07-21 16:55:00 +0800 34)     ShuffleRegisterInfo info1 = new ShuffleRegisterInfo(shuffleServerInfo, partitionRanges);\n411b445c0 (advancedxy  2023-07-14 19:07:38 +0800 35)     ShuffleRegisterInfo info2 =\n411b445c0 (advancedxy  2023-07-14 19:07:38 +0800 36)         new ShuffleRegisterInfo(info1.getShuffleServerInfo(), info1.getPartitionRanges());\n",
            "commit_hashes": {
                "174e6bb7c": "    [TEST] Add more unit tests in rss-common (#63)",
                "411b445c0": "    [#1010]chore: enable and enforce spotless (#1009)"
            },
            "Commit&issueIDs": {
                "174e6bb7c": [
                    "(#63)"
                ],
                "411b445c0": [
                    "(#1009)"
                ]
            },
            "links": [
                "https://github.com/apache/incubator-uniffle/issues/63",
                "https://github.com/apache/incubator-uniffle/commit/174e6bb7c",
                "https://github.com/apache/incubator-uniffle/issues/1009",
                "https://github.com/apache/incubator-uniffle/commit/411b445c0"
            ]
        },
        {
            "poj_link": "https://github.com/apache/incubator-uniffle/",
            "file_path": "apache/incubator-uniffle/common/src/test/java/org/apache/uniffle/common/ShuffleServerInfoTest.java",
            "test_name": "testEquals",
            "FQS": "org.apache.uniffle.common.ShuffleServerInfoTest.testEquals()",
            "start_line": "28",
            "blame_result": "174e6bb7c (Kaijie Chen 2022-07-21 16:55:00 +0800 29)     ShuffleServerInfo info = new ShuffleServerInfo(\"1\", \"localhost\", 1234);\n174e6bb7c (Kaijie Chen 2022-07-21 16:55:00 +0800 30)     ShuffleServerInfo info2 = new ShuffleServerInfo(\"1\", \"localhost\", 1234);\n174e6bb7c (Kaijie Chen 2022-07-21 16:55:00 +0800 31)     assertEquals(info, info);\n174e6bb7c (Kaijie Chen 2022-07-21 16:55:00 +0800 32)     assertEquals(info.hashCode(), info.hashCode());\n174e6bb7c (Kaijie Chen 2022-07-21 16:55:00 +0800 33)     assertEquals(info, info2);\n",
            "commit_hashes": {
                "174e6bb7c": "    [TEST] Add more unit tests in rss-common (#63)"
            },
            "Commit&issueIDs": {
                "174e6bb7c": [
                    "(#63)"
                ]
            },
            "links": [
                "https://github.com/apache/incubator-uniffle/issues/63",
                "https://github.com/apache/incubator-uniffle/commit/174e6bb7c"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/LCSParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.LCSParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         LCSParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         LCSParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/FraunhoferIOSB/FAAAST-Service/",
            "file_path": "FraunhoferIOSB/FAAAST-Service/starter/src/test/java/de/fraunhofer/iosb/ilt/faaast/service/starter/AppTest.java",
            "test_name": "testConfigOverrideViaEnvironmentDotSeparated",
            "FQS": "de.fraunhofer.iosb.ilt.faaast.service.starter.AppTest.testConfigOverrideViaEnvironmentDotSeparated()",
            "start_line": "260",
            "blame_result": "cf5ccae9c (tbischoff2 2024-03-06 08:09:36 +0100 261)         ServiceConfig expected = ServiceConfigHelper.getDefaultServiceConfig();\ncf5ccae9c (tbischoff2 2024-03-06 08:09:36 +0100 262)         ((HttpEndpointConfig) expected.getEndpoints().get(0)).setPort(1234);\ncf5ccae9c (tbischoff2 2024-03-06 08:09:36 +0100 263)         ServiceConfig config = ServiceConfigHelper.getDefaultServiceConfig();\ncf5ccae9c (tbischoff2 2024-03-06 08:09:36 +0100 264)         Map<String, String> env = Map.of(\"faaast.config.extension.endpoints[0].port\", \"1234\");\ncf5ccae9c (tbischoff2 2024-03-06 08:09:36 +0100 265)         List<ConfigOverride> overrides = withEnv(env).execute(() -> {\n",
            "commit_hashes": {
                "cf5ccae9c": "    Update to AAS specification v3 (#581)"
            },
            "Commit&issueIDs": {
                "cf5ccae9c": [
                    "581"
                ]
            },
            "links": [
                "https://github.com/FraunhoferIOSB/FAAAST-Service/issues/581",
                "https://github.com/FraunhoferIOSB/FAAAST-Service/commit/cf5ccae9c"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/LCSParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.LCSParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         LCSParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.idx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         LCSParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.len();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/incubator-uniffle/",
            "file_path": "apache/incubator-uniffle/common/src/test/java/org/apache/uniffle/common/util/BlockIdLayoutTest.java",
            "test_name": "testEquals",
            "FQS": "org.apache.uniffle.common.util.BlockIdLayoutTest.testEquals()",
            "start_line": "182",
            "blame_result": "dc890ffce (Enrico Minack 2024-03-07 08:21:02 +0100 183)     BlockIdLayout layout1 = BlockIdLayout.from(20, 21, 22);\ndc890ffce (Enrico Minack 2024-03-07 08:21:02 +0100 184)     BlockIdLayout layout2 = BlockIdLayout.from(20, 21, 22);\ndc890ffce (Enrico Minack 2024-03-07 08:21:02 +0100 185)     BlockIdLayout layout3 = BlockIdLayout.from(18, 22, 23);\ndc890ffce (Enrico Minack 2024-03-07 08:21:02 +0100 186) \ndc890ffce (Enrico Minack 2024-03-07 08:21:02 +0100 187)     assertEquals(layout1, layout1);\n",
            "commit_hashes": {
                "dc890ffce": "    [#731] feat(spark): Make blockid layout configurable for Spark clients (#1528)"
            },
            "Commit&issueIDs": {
                "dc890ffce": [
                    "1528"
                ]
            },
            "links": [
                "https://github.com/apache/incubator-uniffle/issues/1528",
                "https://github.com/apache/incubator-uniffle/commit/dc890ffce"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/LCSParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.LCSParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         LCSParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.idx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         LCSParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.len();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/incubator-uniffle/",
            "file_path": "apache/incubator-uniffle/common/src/test/java/org/apache/uniffle/common/util/ChecksumUtilsTest.java",
            "test_name": "crc32ByteBufferTest",
            "FQS": "org.apache.uniffle.common.util.ChecksumUtilsTest.crc32ByteBufferTest()",
            "start_line": "92",
            "blame_result": "^44ff3174 common/src/test/java/com/tencent/rss/common/util/ChecksumUtilsTest.java    (colinma 2021-10-29 16:05:32 +0800 93)     int length = 32 * 1024 * 1024;\n^44ff3174 common/src/test/java/com/tencent/rss/common/util/ChecksumUtilsTest.java    (colinma 2021-10-29 16:05:32 +0800 94)     byte[] data = new byte[length];\ncae7cd9e3 common/src/test/java/org/apache/uniffle/common/util/ChecksumUtilsTest.java (roryqi  2023-04-10 12:38:35 +0800 95)     Random random = new Random();\ncae7cd9e3 common/src/test/java/org/apache/uniffle/common/util/ChecksumUtilsTest.java (roryqi  2023-04-10 12:38:35 +0800 96)     random.nextBytes(data);\ncae7cd9e3 common/src/test/java/org/apache/uniffle/common/util/ChecksumUtilsTest.java (roryqi  2023-04-10 12:38:35 +0800 97)     long expectCrc = ChecksumUtils.getCrc32(data);\n",
            "commit_hashes": {
                "44ff3174": "    Initial version",
                "cae7cd9e3": "    [#804] improvement: Optimize CRC calculation of ByteBuffer (#805)"
            },
            "Commit&issueIDs": {
                "cae7cd9e3": [
                    "(#805)"
                ]
            },
            "links": [
                "https://github.com/apache/incubator-uniffle/issues/805",
                "https://github.com/apache/incubator-uniffle/commit/cae7cd9e3"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/LPosParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.LPosParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         LPosParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         LPosParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/LPosParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.LPosParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         LPosParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.rank(1);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         LPosParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.rank(2);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/LPosParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.LPosParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         LPosParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.rank(1);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         LPosParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.rank(2);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/LolwutParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.LolwutParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         LolwutParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         LolwutParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/LolwutParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.LolwutParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         LolwutParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.version(1);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         LolwutParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.version(2);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/LolwutParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.LolwutParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         LolwutParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.version(1);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         LolwutParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.version(2);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/MigrateParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.MigrateParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         MigrateParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         MigrateParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/MigrateParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.MigrateParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         MigrateParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.auth(\"123\");\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         MigrateParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.auth(\"234\");\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/MigrateParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.MigrateParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         MigrateParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.auth(\"123\");\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         MigrateParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.auth(\"234\");\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ModuleLoadExParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.ModuleLoadExParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         ModuleLoadExParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         ModuleLoadExParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ModuleLoadExParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.ModuleLoadExParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         ModuleLoadExParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.arg(\"123\");\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         ModuleLoadExParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.arg(\"234\");\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/RestoreParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.RestoreParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         RestoreParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         RestoreParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/RestoreParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.RestoreParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         RestoreParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.idleTime(14);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         RestoreParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.idleTime(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/RestoreParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.RestoreParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         RestoreParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.idleTime(14);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         RestoreParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.idleTime(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ScanParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.ScanParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         ScanParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         ScanParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/server/src/test/java/org/apache/druid/server/coordinator/balancer/SegmentToMoveCalculatorTest.java",
            "test_name": "testHalfSegmentsArePickedForMoveWhenFullSkew",
            "FQS": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testHalfSegmentsArePickedForMoveWhenFullSkew()",
            "start_line": "171",
            "blame_result": "5d4ac641783 (Kashif Faraz 2023-08-17 11:14:54 +0530 172)   {\n5d4ac641783 (Kashif Faraz 2023-08-17 11:14:54 +0530 173)     final List<ServerHolder> historicals = Arrays.asList(\n5d4ac641783 (Kashif Faraz 2023-08-17 11:14:54 +0530 174)         createServer(\"A\", WIKI_SEGMENTS),\n5d4ac641783 (Kashif Faraz 2023-08-17 11:14:54 +0530 175)         createServer(\"B\", Collections.emptyList())\n5d4ac641783 (Kashif Faraz 2023-08-17 11:14:54 +0530 176)     );\n",
            "commit_hashes": {
                "5d4ac641783": "    Adapt maxSegmentsToMove based on cluster skew (#14584)"
            },
            "Commit&issueIDs": {
                "5d4ac641783": [
                    "(#14584)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/14584",
                "https://github.com/apache/druid/commit/5d4ac641783"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ScanParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.ScanParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         ScanParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.count(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         ScanParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.count(16);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/SetParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.SetParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         SetParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         SetParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/server/src/test/java/org/apache/druid/server/coordinator/loading/LoadingRateTrackerTest.java",
            "test_name": "test100UpdatesInABatch",
            "FQS": "org.apache.druid.server.coordinator.loading.LoadingRateTrackerTest.test100UpdatesInABatch()",
            "start_line": "95",
            "blame_result": "9dc2569f227 (Kashif Faraz 2024-08-03 00:44:21 -0700  96)   {\n9dc2569f227 (Kashif Faraz 2024-08-03 00:44:21 -0700  97)     final Random random = new Random(1001);\n9dc2569f227 (Kashif Faraz 2024-08-03 00:44:21 -0700  98) \n9dc2569f227 (Kashif Faraz 2024-08-03 00:44:21 -0700  99)     tracker.markBatchLoadingStarted();\n9dc2569f227 (Kashif Faraz 2024-08-03 00:44:21 -0700 100) \n",
            "commit_hashes": {
                "9dc2569f227": "    Track and emit segment loading rate for HttpLoadQueuePeon on Coordinator (#16691)"
            },
            "Commit&issueIDs": {
                "9dc2569f227": [
                    "16691"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/16691",
                "https://github.com/apache/druid/commit/9dc2569f227"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/SetParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.SetParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         SetParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.nx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         SetParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.xx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/server/src/test/java/org/apache/druid/server/http/DataSegmentPlusTest.java",
            "test_name": "testSerde",
            "FQS": "org.apache.druid.server.http.DataSegmentPlusTest.testSerde()",
            "start_line": "68",
            "blame_result": "ae6afc0751b (zachjsh 2024-01-26 15:47:40 -0500 69)   {\nae6afc0751b (zachjsh 2024-01-26 15:47:40 -0500 70)     final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\nae6afc0751b (zachjsh 2024-01-26 15:47:40 -0500 71)     final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\nae6afc0751b (zachjsh 2024-01-26 15:47:40 -0500 72) \nae6afc0751b (zachjsh 2024-01-26 15:47:40 -0500 73)     String createdDateStr = \"2024-01-20T00:00:00.701Z\";\n",
            "commit_hashes": {
                "ae6afc0751b": "    Extend unused segment metadata api response to include created date and last used updated time (#15738)"
            },
            "Commit&issueIDs": {
                "ae6afc0751b": [
                    "(#15738)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/15738",
                "https://github.com/apache/druid/commit/ae6afc0751b"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/SetParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.SetParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         SetParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.nx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         SetParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.xx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ShutdownParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.ShutdownParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         ShutdownParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         ShutdownParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ShutdownParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.ShutdownParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         ShutdownParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.force();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         ShutdownParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.nosave();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.SortingParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         SortingParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         SortingParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.SortingParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         SortingParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.limit(15, 20);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         SortingParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.limit(10, 15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/speedment/speedment/",
            "file_path": "speedment/speedment/common-parent/mapstream/src/test/java/com/speedment/common/mapstream/MapStreamTest.java",
            "test_name": "testOf",
            "FQS": "com.speedment.common.mapstream.MapStreamTest.testOf()",
            "start_line": "55",
            "blame_result": "e752209283 (Per-\u00c5ke Minborg 2019-12-16 09:10:52 +0100 56)         final MapStream<String, Integer> ms = MapStream.of(stringToInt);\ne752209283 (Per-\u00c5ke Minborg 2019-12-16 09:10:52 +0100 57)         assertEquals(stringToInt, ms.toMap());\n16327f54f2 (Per-\u00c5ke Minborg 2019-12-15 17:01:17 +0100 58)     }\n16327f54f2 (Per-\u00c5ke Minborg 2019-12-15 17:01:17 +0100 59) \n16327f54f2 (Per-\u00c5ke Minborg 2019-12-15 17:01:17 +0100 60)     @Test\n",
            "commit_hashes": {
                "e752209283": "    mapstream: fix typo",
                "16327f54f2": "    map-stream: Protect null invariant, fix #849"
            },
            "Commit&issueIDs": {
                "16327f54f2": [
                    "#849"
                ]
            },
            "links": [
                "https://github.com/speedment/speedment/issues/849",
                "https://github.com/speedment/speedment/commit/16327f54f2"
            ]
        },
        {
            "poj_link": "https://github.com/speedment/speedment/",
            "file_path": "speedment/speedment/common-parent/mapstream/src/test/java/com/speedment/common/mapstream/MapStreamTest.java",
            "test_name": "testOf3",
            "FQS": "com.speedment.common.mapstream.MapStreamTest.testOf3()",
            "start_line": "75",
            "blame_result": "e752209283 (Per-\u00c5ke Minborg 2019-12-16 09:10:52 +0100 76)         final MapStream<String, Integer> msSequential = MapStream.of(stringToInt, false);\ne752209283 (Per-\u00c5ke Minborg 2019-12-16 09:10:52 +0100 77)         assertEquals(stringToInt, msSequential.toMap());\ne752209283 (Per-\u00c5ke Minborg 2019-12-16 09:10:52 +0100 78)         final MapStream<String, Integer> msParallel = MapStream.of(stringToInt, true);\ne752209283 (Per-\u00c5ke Minborg 2019-12-16 09:10:52 +0100 79)         assertEquals(stringToInt, msParallel.toMap());\n16327f54f2 (Per-\u00c5ke Minborg 2019-12-15 17:01:17 +0100 80)     }\n",
            "commit_hashes": {
                "e752209283": "    mapstream: fix typo",
                "16327f54f2": "    map-stream: Protect null invariant, fix #849"
            },
            "Commit&issueIDs": {
                "16327f54f2": [
                    "#849"
                ]
            },
            "links": [
                "https://github.com/speedment/speedment/issues/849",
                "https://github.com/speedment/speedment/commit/16327f54f2"
            ]
        },
        {
            "poj_link": "https://github.com/speedment/speedment/",
            "file_path": "speedment/speedment/common-parent/mapstream/src/test/java/com/speedment/common/mapstream/MapStreamTest.java",
            "test_name": "testDistinctValues",
            "FQS": "com.speedment.common.mapstream.MapStreamTest.testDistinctValues()",
            "start_line": "362",
            "blame_result": "a0122b94ff (Per-\u00c5ke Minborg 2019-12-15 21:18:12 +0100 363)         final Map<String, Integer> expected = MapStream.of(entry(\"Einsjedan\", 1)).toMap();\na0122b94ff (Per-\u00c5ke Minborg 2019-12-15 21:18:12 +0100 364)         final MapStream<String, Integer> ms = MapStream.of(entry(\"jedan\", 1), entry(\"Eins\", 1));\na0122b94ff (Per-\u00c5ke Minborg 2019-12-15 21:18:12 +0100 365)         final Map<String, Integer> actual = ms.distinctValues((a, b) -> a + b).toMap();\n16327f54f2 (Per-\u00c5ke Minborg 2019-12-15 17:01:17 +0100 366)         assertEquals(expected, actual);\n16327f54f2 (Per-\u00c5ke Minborg 2019-12-15 17:01:17 +0100 367)     }\n",
            "commit_hashes": {
                "a0122b94ff": "    mapstream: Add tests",
                "16327f54f2": "    map-stream: Protect null invariant, fix #849"
            },
            "Commit&issueIDs": {
                "16327f54f2": [
                    "#849"
                ]
            },
            "links": [
                "https://github.com/speedment/speedment/issues/849",
                "https://github.com/speedment/speedment/commit/16327f54f2"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.XAddParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         XAddParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         XAddParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.XAddParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         XAddParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.id(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         XAddParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.id(20);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XAutoClaimParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.XAutoClaimParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         XAutoClaimParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         XAutoClaimParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/speedment/speedment/",
            "file_path": "speedment/speedment/runtime-parent/runtime-typemapper/src/test/java/com/speedment/runtime/typemapper/largeobject/BlobToByteArrayMapperTest.java",
            "test_name": "dbTypeToJavaType",
            "FQS": "com.speedment.runtime.typemapper.largeobject.BlobToByteArrayMapperTest.dbTypeToJavaType()",
            "start_line": "47",
            "blame_result": "8bf23ed695 runtime-parent/runtime-typemapper/src/main/test/com/speedment/runtime/typemapper/largeobject/BlobToByteArrayMapperTest.java (Unknown         2017-05-01 13:39:12 -0700 48)         byte[] array= new byte[10];\n8bf23ed695 runtime-parent/runtime-typemapper/src/main/test/com/speedment/runtime/typemapper/largeobject/BlobToByteArrayMapperTest.java (Unknown         2017-05-01 13:39:12 -0700 49)         IntStream.range(0,array.length).forEach(index -> array[index] = nextByte());\n8bf23ed695 runtime-parent/runtime-typemapper/src/main/test/com/speedment/runtime/typemapper/largeobject/BlobToByteArrayMapperTest.java (Unknown         2017-05-01 13:39:12 -0700 50)         Blob blob = mapper.toDatabaseType(array);\n8bf23ed695 runtime-parent/runtime-typemapper/src/main/test/com/speedment/runtime/typemapper/largeobject/BlobToByteArrayMapperTest.java (Unknown         2017-05-01 13:39:12 -0700 51)         byte[] actual = mapper.toJavaType(null,null,blob);\n4104200321 runtime-parent/runtime-typemapper/src/test/java/com/speedment/runtime/typemapper/largeobject/BlobToByteArrayMapperTest.java (Per-\u00c5ke Minborg 2018-12-06 14:39:17 +0100 52)         assertArrayEquals(array,actual);\n",
            "commit_hashes": {
                "8bf23ed695": "    #419 Typemapper Blob to byte[]",
                "4104200321": "    runtime-typemapper: Migrate to JUnit5"
            },
            "Commit&issueIDs": {
                "8bf23ed695": [
                    "#419"
                ]
            },
            "links": [
                "https://github.com/speedment/speedment/issues/419",
                "https://github.com/speedment/speedment/commit/8bf23ed695"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XAutoClaimParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.XAutoClaimParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         XAutoClaimParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.count(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         XAutoClaimParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.count(20);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XAutoClaimParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.XAutoClaimParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         XAutoClaimParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.count(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         XAutoClaimParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.count(20);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XClaimParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.XClaimParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         XClaimParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         XClaimParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XClaimParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.XClaimParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         XClaimParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.time(20);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         XClaimParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.time(21);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XClaimParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.XClaimParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         XClaimParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.time(20);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         XClaimParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.time(21);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.XPendingParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "18",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         XPendingParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         XPendingParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 23) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.XPendingParamsTest.checkEqualsVariousParams()",
            "start_line": "25",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         XPendingParams firstParam = getDefaultValue();\na02b2eb2d (M Sazzadul Hoque  2024-03-27 19:15:58 +0600 27)         firstParam.start(StreamEntryID.XGROUP_LAST_ENTRY);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         XPendingParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         secondParam.start(StreamEntryID.NEW_ENTRY);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 30)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)",
                "a02b2eb2d": "    Add last entry id for XREADs and support XREADs reply as map (#3791)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ],
                "a02b2eb2d": [
                    "3791"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a",
                "https://github.com/redis/jedis/issues/3791",
                "https://github.com/redis/jedis/commit/a02b2eb2d"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.XPendingParamsTest.checkHashCodeVariousParams()",
            "start_line": "34",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         XPendingParams firstParam = getDefaultValue();\na02b2eb2d (M Sazzadul Hoque  2024-03-27 19:15:58 +0600 36)         firstParam.start(StreamEntryID.XGROUP_LAST_ENTRY);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         XPendingParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         secondParam.start(StreamEntryID.NEW_ENTRY);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 39)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)",
                "a02b2eb2d": "    Add last entry id for XREADs and support XREADs reply as map (#3791)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ],
                "a02b2eb2d": [
                    "3791"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a",
                "https://github.com/redis/jedis/issues/3791",
                "https://github.com/redis/jedis/commit/a02b2eb2d"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XReadGroupParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.XReadGroupParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         XReadGroupParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         XReadGroupParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XReadGroupParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.XReadGroupParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         XReadGroupParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.block(14);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         XReadGroupParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.block(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XReadGroupParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.XReadGroupParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         XReadGroupParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.block(14);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         XReadGroupParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.block(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XReadParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.XReadParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         XReadParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         XReadParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/jtablesaw/tablesaw/",
            "file_path": "jtablesaw/tablesaw/core/src/test/java/tech/tablesaw/columns/dates/PackedLocalDateTest.java",
            "test_name": "testEquals",
            "FQS": "tech.tablesaw.columns.dates.PackedLocalDateTest.testEquals()",
            "start_line": "311",
            "blame_result": "75914d454 core/src/test/java/tech/tablesaw/columns/dates/PackedLocalDateTest.java (Ben McCann  2019-08-05 14:04:32 -0700 312)     int date = pack(LocalDate.of(2015, 1, 25));\n75914d454 core/src/test/java/tech/tablesaw/columns/dates/PackedLocalDateTest.java (Ben McCann  2019-08-05 14:04:32 -0700 313)     int date2 = pack(LocalDate.of(2015, 1, 25));\n75914d454 core/src/test/java/tech/tablesaw/columns/dates/PackedLocalDateTest.java (Ben McCann  2019-08-05 14:04:32 -0700 314)     assertTrue(isEqualTo(date, date2));\n75914d454 core/src/test/java/tech/tablesaw/columns/dates/PackedLocalDateTest.java (Ben McCann  2019-08-05 14:04:32 -0700 315)   }\n16612c3f2 core/src/test/java/tech/tablesaw/columns/PackedLocalDateTest.java       (Larry White 2018-04-01 17:31:12 -0400 316) \n",
            "commit_hashes": {
                "75914d454": "    Format the code with Google Code Formatter (#568)",
                "16612c3f2": "    Version1 (#260)"
            },
            "Commit&issueIDs": {
                "75914d454": [
                    "(#568)"
                ],
                "16612c3f2": [
                    "(#260)"
                ]
            },
            "links": [
                "https://github.com/jtablesaw/tablesaw/issues/568",
                "https://github.com/jtablesaw/tablesaw/commit/75914d454",
                "https://github.com/jtablesaw/tablesaw/issues/260",
                "https://github.com/jtablesaw/tablesaw/commit/16612c3f2"
            ]
        },
        {
            "poj_link": "https://github.com/jtablesaw/tablesaw/",
            "file_path": "jtablesaw/tablesaw/core/src/test/java/tech/tablesaw/columns/dates/PackedLocalDateTest.java",
            "test_name": "testAfter",
            "FQS": "tech.tablesaw.columns.dates.PackedLocalDateTest.testAfter()",
            "start_line": "318",
            "blame_result": "75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 319)     int date = pack(LocalDate.of(2015, 1, 25));\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 320)     int date2 = minusDays(1, date);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 321)     assertTrue(isAfter(date, date2));\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 322)     assertFalse(isEqualTo(date, date2));\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 323)     assertFalse(isBefore(date, date2));\n",
            "commit_hashes": {
                "75914d454": "    Format the code with Google Code Formatter (#568)"
            },
            "Commit&issueIDs": {
                "75914d454": [
                    "(#568)"
                ]
            },
            "links": [
                "https://github.com/jtablesaw/tablesaw/issues/568",
                "https://github.com/jtablesaw/tablesaw/commit/75914d454"
            ]
        },
        {
            "poj_link": "https://github.com/jtablesaw/tablesaw/",
            "file_path": "jtablesaw/tablesaw/core/src/test/java/tech/tablesaw/columns/dates/PackedLocalDateTest.java",
            "test_name": "testBefore",
            "FQS": "tech.tablesaw.columns.dates.PackedLocalDateTest.testBefore()",
            "start_line": "327",
            "blame_result": "75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 328)     int date = pack(LocalDate.of(2015, 1, 25));\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 329)     int date2 = plusDays(1, date);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 330)     assertTrue(isBefore(date, date2));\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 331)     assertFalse(isAfter(date, date2));\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 332)     assertFalse(isEqualTo(date, date2));\n",
            "commit_hashes": {
                "75914d454": "    Format the code with Google Code Formatter (#568)"
            },
            "Commit&issueIDs": {
                "75914d454": [
                    "(#568)"
                ]
            },
            "links": [
                "https://github.com/jtablesaw/tablesaw/issues/568",
                "https://github.com/jtablesaw/tablesaw/commit/75914d454"
            ]
        },
        {
            "poj_link": "https://github.com/jtablesaw/tablesaw/",
            "file_path": "jtablesaw/tablesaw/core/src/test/java/tech/tablesaw/columns/dates/PackedLocalDateTest.java",
            "test_name": "testGetDayOfWeek",
            "FQS": "tech.tablesaw.columns.dates.PackedLocalDateTest.testGetDayOfWeek()",
            "start_line": "336",
            "blame_result": "75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 337)     LocalDate date = LocalDate.of(2015, 12, 25);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 338)     int dateTime = pack(date);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 339)     assertEquals(date.getDayOfWeek(), getDayOfWeek(dateTime));\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 340)   }\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 341) }\n",
            "commit_hashes": {
                "75914d454": "    Format the code with Google Code Formatter (#568)"
            },
            "Commit&issueIDs": {
                "75914d454": [
                    "(#568)"
                ]
            },
            "links": [
                "https://github.com/jtablesaw/tablesaw/issues/568",
                "https://github.com/jtablesaw/tablesaw/commit/75914d454"
            ]
        },
        {
            "poj_link": "https://github.com/jtablesaw/tablesaw/",
            "file_path": "jtablesaw/tablesaw/core/src/test/java/tech/tablesaw/columns/times/PackedLocalTimeTest.java",
            "test_name": "testToNanoOfDay",
            "FQS": "tech.tablesaw.columns.times.PackedLocalTimeTest.testToNanoOfDay()",
            "start_line": "109",
            "blame_result": "75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 110)     int pTime = of(7, 18, 32, 232);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 111)     LocalTime time = asLocalTime(pTime);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 112)     assertEquals(time.getLong(ChronoField.NANO_OF_DAY), toNanoOfDay(pTime));\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 113)   }\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 114) \n",
            "commit_hashes": {
                "75914d454": "    Format the code with Google Code Formatter (#568)"
            },
            "Commit&issueIDs": {
                "75914d454": [
                    "(#568)"
                ]
            },
            "links": [
                "https://github.com/jtablesaw/tablesaw/issues/568",
                "https://github.com/jtablesaw/tablesaw/commit/75914d454"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XReadParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.XReadParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         XReadParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.block(14);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         XReadParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.block(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/jtablesaw/tablesaw/",
            "file_path": "jtablesaw/tablesaw/core/src/test/java/tech/tablesaw/columns/times/PackedLocalTimeTest.java",
            "test_name": "testConstructors1",
            "FQS": "tech.tablesaw.columns.times.PackedLocalTimeTest.testConstructors1()",
            "start_line": "122",
            "blame_result": "75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 123)     LocalTime localTime = LocalTime.of(5, 11, 36);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 124)     int packedTime = pack(localTime);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 125) \n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 126)     int packedTime2 = of(5, 11, 36);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 127) \n",
            "commit_hashes": {
                "75914d454": "    Format the code with Google Code Formatter (#568)"
            },
            "Commit&issueIDs": {
                "75914d454": [
                    "(#568)"
                ]
            },
            "links": [
                "https://github.com/jtablesaw/tablesaw/issues/568",
                "https://github.com/jtablesaw/tablesaw/commit/75914d454"
            ]
        },
        {
            "poj_link": "https://github.com/jtablesaw/tablesaw/",
            "file_path": "jtablesaw/tablesaw/core/src/test/java/tech/tablesaw/columns/times/PackedLocalTimeTest.java",
            "test_name": "testConstructors2",
            "FQS": "tech.tablesaw.columns.times.PackedLocalTimeTest.testConstructors2()",
            "start_line": "135",
            "blame_result": "75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 136)     LocalTime localTime = LocalTime.of(5, 11);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 137)     int packedTime = pack(localTime);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 138) \n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 139)     int packedTime2 = of(5, 11);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 140) \n",
            "commit_hashes": {
                "75914d454": "    Format the code with Google Code Formatter (#568)"
            },
            "Commit&issueIDs": {
                "75914d454": [
                    "(#568)"
                ]
            },
            "links": [
                "https://github.com/jtablesaw/tablesaw/issues/568",
                "https://github.com/jtablesaw/tablesaw/commit/75914d454"
            ]
        },
        {
            "poj_link": "https://github.com/jtablesaw/tablesaw/",
            "file_path": "jtablesaw/tablesaw/core/src/test/java/tech/tablesaw/columns/times/PackedLocalTimeTest.java",
            "test_name": "testConstructors3",
            "FQS": "tech.tablesaw.columns.times.PackedLocalTimeTest.testConstructors3()",
            "start_line": "148",
            "blame_result": "75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 149)     LocalTime localTime = LocalTime.of(5, 11, 33, 811 * 1_000_000);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 150)     int packedTime = pack(localTime);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 151) \n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 152)     int packedTime2 = of(5, 11, 33, 811);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 153) \n",
            "commit_hashes": {
                "75914d454": "    Format the code with Google Code Formatter (#568)"
            },
            "Commit&issueIDs": {
                "75914d454": [
                    "(#568)"
                ]
            },
            "links": [
                "https://github.com/jtablesaw/tablesaw/issues/568",
                "https://github.com/jtablesaw/tablesaw/commit/75914d454"
            ]
        },
        {
            "poj_link": "https://github.com/jtablesaw/tablesaw/",
            "file_path": "jtablesaw/tablesaw/core/src/test/java/tech/tablesaw/columns/times/PackedLocalTimeTest.java",
            "test_name": "testPack",
            "FQS": "tech.tablesaw.columns.times.PackedLocalTimeTest.testPack()",
            "start_line": "270",
            "blame_result": "75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 271)     LocalTime time = LocalTime.now();\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 272)     int packed = pack(time);\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 273) \n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 274)     LocalTime t1 = asLocalTime(PackedLocalDateTime.time(packed));\n75914d454 (Ben McCann 2019-08-05 14:04:32 -0700 275)     assertNotNull(t1);\n",
            "commit_hashes": {
                "75914d454": "    Format the code with Google Code Formatter (#568)"
            },
            "Commit&issueIDs": {
                "75914d454": [
                    "(#568)"
                ]
            },
            "links": [
                "https://github.com/jtablesaw/tablesaw/issues/568",
                "https://github.com/jtablesaw/tablesaw/commit/75914d454"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XReadParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.XReadParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         XReadParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.block(14);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         XReadParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.block(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.XTrimParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         XTrimParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         XTrimParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.XTrimParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         XTrimParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.maxLen(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         XTrimParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.maxLen(16);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.XTrimParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         XTrimParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.maxLen(15);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         XTrimParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.maxLen(16);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.ZAddParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         ZAddParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         ZAddParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.ZAddParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         ZAddParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.nx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         ZAddParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.xx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.ZAddParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         ZAddParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.nx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         ZAddParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.xx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ZIncrByParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.ZIncrByParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         ZIncrByParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         ZIncrByParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/networknt/light-4j/",
            "file_path": "networknt/light-4j/service/src/test/java/com/networknt/service/SingletonServiceFactoryTest.java",
            "test_name": "testMultipleInterfaceOneBean",
            "FQS": "com.networknt.service.SingletonServiceFactoryTest.testMultipleInterfaceOneBean()",
            "start_line": "66",
            "blame_result": "d865c642a7 (Steve Hu 2017-08-30 22:24:14 -0400 67)         D1 d1 = SingletonServiceFactory.getBean(D1.class);\nd865c642a7 (Steve Hu 2017-08-30 22:24:14 -0400 68)         D2 d2 = SingletonServiceFactory.getBean(D2.class);\nd865c642a7 (Steve Hu 2017-08-30 22:24:14 -0400 69)         Assert.assertEquals(d1, d2);\n6d9c286043 (Steve Hu 2016-11-28 20:05:53 -0500 70)     }\n6d9c286043 (Steve Hu 2016-11-28 20:05:53 -0500 71) \n",
            "commit_hashes": {
                "d865c642a7": "    fixes #99 update test cases to reflect the change",
                "6d9c286043": "    add multiple interfaces to one implementation and multiple to multiple"
            },
            "Commit&issueIDs": {
                "d865c642a7": [
                    "#99"
                ]
            },
            "links": [
                "https://github.com/networknt/light-4j/issues/99",
                "https://github.com/networknt/light-4j/commit/d865c642a7"
            ]
        },
        {
            "poj_link": "https://github.com/networknt/light-4j/",
            "file_path": "networknt/light-4j/status/src/test/java/com/networknt/status/StatusDefaultTest.java",
            "test_name": "testToStringWithEverything",
            "FQS": "com.networknt.status.StatusDefaultTest.testToStringWithEverything()",
            "start_line": "103",
            "blame_result": "d8fe23b2e6 status/src/test/java/com/networknt/status/StatusDefaultTest.java (Balloon  2021-01-04 11:36:39 -0500 104) \nd8fe23b2e6 status/src/test/java/com/networknt/status/StatusDefaultTest.java (Balloon  2021-01-04 11:36:39 -0500 105)         Status status = new Status(\"ERR11000\", Map.of(\"metaKey\", Map.of(\"nestedKey\", \"nestedValue\")), \"parameter name\", \"original url\");\nc460d79d4f status/src/test/java/com/networknt/status/StatusTest.java        (Steve Hu 2016-09-24 16:48:30 -0400 106)         System.out.println(status);\nd8fe23b2e6 status/src/test/java/com/networknt/status/StatusDefaultTest.java (Balloon  2021-01-04 11:36:39 -0500 107)         String expected = \"{\\\"statusCode\\\":400,\\\"code\\\":\\\"ERR11000\\\",\\\"message\\\":\\\"VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING\\\",\\\"description\\\":\\\"Query parameter parameter name is required on path original url but not found in request.\\\",\\\"metadata\\\":{\\\"metaKey\\\":{\\\"nestedKey\\\":\\\"nestedValue\\\"}},\\\"severity\\\":\\\"ERROR\\\"}\";\nd8fe23b2e6 status/src/test/java/com/networknt/status/StatusDefaultTest.java (Balloon  2021-01-04 11:36:39 -0500 108)         Assert.assertEquals(expected, status.toString());\n",
            "commit_hashes": {
                "d8fe23b2e6": "    Feat/#884 add metadata to Status (#889)",
                "c460d79d4f": "    Using toString instead of ObjectMapper to serialize Status object"
            },
            "Commit&issueIDs": {
                "d8fe23b2e6": [
                    "(#889)"
                ]
            },
            "links": [
                "https://github.com/networknt/light-4j/issues/889",
                "https://github.com/networknt/light-4j/commit/d8fe23b2e6"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ZIncrByParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.ZIncrByParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         ZIncrByParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.nx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         ZIncrByParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.xx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ZIncrByParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.ZIncrByParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         ZIncrByParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.nx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         ZIncrByParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.xx();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ZParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.ZParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         ZParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         ZParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ZParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.ZParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         ZParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.aggregate(ZParams.Aggregate.MIN);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         ZParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.aggregate(ZParams.Aggregate.MAX);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java",
            "test_name": "checkHashCodeIdenticalParams",
            "FQS": "redis.clients.jedis.params.ZRangeParamsTest.checkHashCodeIdenticalParams()",
            "start_line": "17",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 18)         ZRangeParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 19)         ZRangeParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 20)         assertEquals(firstParam.hashCode(), secondParam.hashCode());\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 21)     }\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 22) \n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java",
            "test_name": "checkEqualsVariousParams",
            "FQS": "redis.clients.jedis.params.ZRangeParamsTest.checkEqualsVariousParams()",
            "start_line": "24",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 25)         ZRangeParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 26)         firstParam.limit(15, 20);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 27)         ZRangeParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 28)         secondParam.limit(16, 21);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 29)         assertFalse(firstParam.equals(secondParam));\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/extensions-contrib/kubernetes-overlord-extensions/src/test/java/org/apache/druid/k8s/overlord/common/KubernetesOverlordUtilsTest.java",
            "test_name": "test_stripJobName_avoidDuplicatesWithLongDataSourceName",
            "FQS": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest.test_stripJobName_avoidDuplicatesWithLongDataSourceName()",
            "start_line": "72",
            "blame_result": "28914bbab82 (George Shiqi Wu 2023-07-24 11:45:10 -0400 73)   {\n28914bbab82 (George Shiqi Wu 2023-07-24 11:45:10 -0400 74)     String jobName1 = KubernetesOverlordUtils.convertTaskIdToJobName(\"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\");\n28914bbab82 (George Shiqi Wu 2023-07-24 11:45:10 -0400 75)     String jobName2 = KubernetesOverlordUtils.convertTaskIdToJobName(\"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\");\n28914bbab82 (George Shiqi Wu 2023-07-24 11:45:10 -0400 76)     Assert.assertNotEquals(jobName1, jobName2);\n28914bbab82 (George Shiqi Wu 2023-07-24 11:45:10 -0400 77)   }\n",
            "commit_hashes": {
                "28914bbab82": "    Fix issue with long data source names (#14620)"
            },
            "Commit&issueIDs": {
                "28914bbab82": [
                    "(#14620)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/14620",
                "https://github.com/apache/druid/commit/28914bbab82"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java",
            "test_name": "checkHashCodeVariousParams",
            "FQS": "redis.clients.jedis.params.ZRangeParamsTest.checkHashCodeVariousParams()",
            "start_line": "33",
            "blame_result": "b5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 34)         ZRangeParams firstParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 35)         firstParam.limit(15, 20);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 36)         ZRangeParams secondParam = getDefaultValue();\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 37)         secondParam.limit(16, 21);\nb5308044a (Tyshchenko Leonid 2024-03-25 08:33:35 +0300 38)         assertNotEquals(firstParam.hashCode(), secondParam.hashCode());\n",
            "commit_hashes": {
                "b5308044a": "    SetParams should implement equals and hashcode issue #2687 (#3728)"
            },
            "Commit&issueIDs": {
                "b5308044a": [
                    "#2687",
                    "3728"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2687",
                "https://github.com/redis/jedis/commit/b5308044a"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/util/JedisClusterCRC16Test.java",
            "test_name": "testRedisHashtagGetSlot",
            "FQS": "redis.clients.jedis.util.JedisClusterCRC16Test.testRedisHashtagGetSlot()",
            "start_line": "44",
            "blame_result": "c6e8c39fd src/test/java/redis/clients/jedis/tests/JedisClusterTest.java            (Jungtaek Lim     2014-12-11 00:11:03 +0900 45)     assertEquals(JedisClusterCRC16.getSlot(\"{bar\"), JedisClusterCRC16.getSlot(\"foo{{bar}}zap\"));\nc6e8c39fd src/test/java/redis/clients/jedis/tests/JedisClusterTest.java            (Jungtaek Lim     2014-12-11 00:11:03 +0900 46)     assertEquals(JedisClusterCRC16.getSlot(\"{user1000}.following\"),\nc6e8c39fd src/test/java/redis/clients/jedis/tests/JedisClusterTest.java            (Jungtaek Lim     2014-12-11 00:11:03 +0900 47)       JedisClusterCRC16.getSlot(\"{user1000}.followers\"));\ncf31202ff src/test/java/redis/clients/jedis/tests/utils/JedisClusterCRC16Test.java (M Sazzadul Hoque 2018-08-13 11:59:57 +0600 48)     assertNotEquals(JedisClusterCRC16.getSlot(\"foo{}{bar}\"), JedisClusterCRC16.getSlot(\"bar\"));\ncf31202ff src/test/java/redis/clients/jedis/tests/utils/JedisClusterCRC16Test.java (M Sazzadul Hoque 2018-08-13 11:59:57 +0600 49)     assertEquals(JedisClusterCRC16.getSlot(\"foo{bar}{zap}\"), JedisClusterCRC16.getSlot(\"bar\"));\n",
            "commit_hashes": {
                "c6e8c39fd": "    Apply HBase formatter by mvn java-formatter:format",
                "cf31202ff": "    JedisClusterCRC16.getSlot() wraps NullPointerException (#1774)"
            },
            "Commit&issueIDs": {
                "cf31202ff": [
                    "(#1774)"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/1774",
                "https://github.com/redis/jedis/commit/cf31202ff"
            ]
        },
        {
            "poj_link": "https://github.com/redis/jedis/",
            "file_path": "redis/jedis/src/test/java/redis/clients/jedis/util/JedisClusterCRC16Test.java",
            "test_name": "testBinaryHashtagGetSlot",
            "FQS": "redis.clients.jedis.util.JedisClusterCRC16Test.testBinaryHashtagGetSlot()",
            "start_line": "53",
            "blame_result": "844477cb4 src/test/java/redis/clients/jedis/tests/utils/JedisClusterCRC16Test.java             (M Sazzadul Hoque 2021-03-10 22:36:33 +0600 54)     assertEquals(JedisClusterCRC16.getSlot(\"{bar\".getBytes()),\n844477cb4 src/test/java/redis/clients/jedis/tests/utils/JedisClusterCRC16Test.java             (M Sazzadul Hoque 2021-03-10 22:36:33 +0600 55)       JedisClusterCRC16.getSlot(\"{bar\".getBytes()));\n61a706555 src/test/java/redis/clients/jedis/tests/commands/ClusterBinaryJedisCommandsTest.java (Jungtaek Lim     2014-12-15 09:38:41 +0900 56)     assertEquals(JedisClusterCRC16.getSlot(\"{user1000}.following\".getBytes()),\n61a706555 src/test/java/redis/clients/jedis/tests/commands/ClusterBinaryJedisCommandsTest.java (Jungtaek Lim     2014-12-15 09:38:41 +0900 57)       JedisClusterCRC16.getSlot(\"{user1000}.followers\".getBytes()));\ncf31202ff src/test/java/redis/clients/jedis/tests/utils/JedisClusterCRC16Test.java             (M Sazzadul Hoque 2018-08-13 11:59:57 +0600 58)     assertNotEquals(JedisClusterCRC16.getSlot(\"foo{}{bar}\".getBytes()),\n",
            "commit_hashes": {
                "844477cb4": "    run formatter (#2416)",
                "61a706555": "",
                "cf31202ff": "    JedisClusterCRC16.getSlot() wraps NullPointerException (#1774)"
            },
            "Commit&issueIDs": {
                "844477cb4": [
                    "(#2416)"
                ],
                "cf31202ff": [
                    "(#1774)"
                ]
            },
            "links": [
                "https://github.com/redis/jedis/issues/2416",
                "https://github.com/redis/jedis/commit/844477cb4",
                "https://github.com/redis/jedis/issues/1774",
                "https://github.com/redis/jedis/commit/cf31202ff"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/extensions-contrib/spectator-histogram/src/test/java/org/apache/druid/spectator/histogram/NullableOffsetsHeaderTest.java",
            "test_name": "testShouldSerializeAndDeserialize",
            "FQS": "org.apache.druid.spectator.histogram.NullableOffsetsHeaderTest.testShouldSerializeAndDeserialize()",
            "start_line": "160",
            "blame_result": "e49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 161)   {\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 162)     NullableOffsetsHeader header = NullableOffsetsHeader.create(new OnHeapMemorySegmentWriteOutMedium());\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 163)     header.writeOffset(123);\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 164)     header.writeNull();\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 165)     header.writeNull();\n",
            "commit_hashes": {
                "e49a7bb3cd9": "    Add SpectatorHistogram extension (#15340)"
            },
            "Commit&issueIDs": {
                "e49a7bb3cd9": [
                    "(#15340)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/15340",
                "https://github.com/apache/druid/commit/e49a7bb3cd9"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/extensions-contrib/spectator-histogram/src/test/java/org/apache/druid/spectator/histogram/NullableOffsetsHeaderTest.java",
            "test_name": "testShouldSerializeAndDeserializeAllNulls",
            "FQS": "org.apache.druid.spectator.histogram.NullableOffsetsHeaderTest.testShouldSerializeAndDeserializeAllNulls()",
            "start_line": "207",
            "blame_result": "e49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 208)   {\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 209)     NullableOffsetsHeader header = NullableOffsetsHeader.create(new OnHeapMemorySegmentWriteOutMedium());\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 210)     for (int i = 0; i < 10000; i++) {\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 211)       header.writeNull();\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 212)     }\n",
            "commit_hashes": {
                "e49a7bb3cd9": "    Add SpectatorHistogram extension (#15340)"
            },
            "Commit&issueIDs": {
                "e49a7bb3cd9": [
                    "(#15340)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/15340",
                "https://github.com/apache/druid/commit/e49a7bb3cd9"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/extensions-contrib/spectator-histogram/src/test/java/org/apache/druid/spectator/histogram/NullableOffsetsHeaderTest.java",
            "test_name": "testShouldSerializeAndDeserializeAllValues",
            "FQS": "org.apache.druid.spectator.histogram.NullableOffsetsHeaderTest.testShouldSerializeAndDeserializeAllValues()",
            "start_line": "241",
            "blame_result": "e49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 242)   {\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 243)     NullableOffsetsHeader header = NullableOffsetsHeader.create(new OnHeapMemorySegmentWriteOutMedium());\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 244)     for (int i = 0; i < 10000; i++) {\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 245)       header.writeOffset(i + 1);\ne49a7bb3cd9 (Ben Sykes 2024-01-14 09:52:30 -0800 246)     }\n",
            "commit_hashes": {
                "e49a7bb3cd9": "    Add SpectatorHistogram extension (#15340)"
            },
            "Commit&issueIDs": {
                "e49a7bb3cd9": [
                    "(#15340)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/15340",
                "https://github.com/apache/druid/commit/e49a7bb3cd9"
            ]
        },
        {
            "poj_link": "https://github.com/HdrHistogram/HdrHistogram/",
            "file_path": "HdrHistogram/HdrHistogram/src/test/java/org/HdrHistogram/HistogramLogReaderWriterTest.java",
            "test_name": "taggedV2LogTest",
            "FQS": "org.HdrHistogram.HistogramLogReaderWriterTest.taggedV2LogTest()",
            "start_line": "34",
            "blame_result": "3e30f089 (Gil Tene       2016-05-02 12:06:36 -0700 35)         InputStream readerStream = HistogramLogReaderWriterTest.class.getResourceAsStream(\"tagged-Log.logV2.hlog\");\n1999200d (Michael Barker 2015-09-09 13:59:52 +1200 36) \n305c61e2 (nitsanw        2015-08-06 09:23:54 +0200 37)         HistogramLogReader reader = new HistogramLogReader(readerStream);\n305c61e2 (nitsanw        2015-08-06 09:23:54 +0200 38)         int histogramCount = 0;\n11d167c9 (Gil Tene       2015-08-06 07:15:49 -0700 39)         long totalCount = 0;\n",
            "commit_hashes": {
                "3e30f089": "    Adds optional \"Tag=tag\" text field to Histogram log files",
                "1999200d": "    Fix incorrect file name for v2 log.",
                "305c61e2": "    Add a test to cover #69 with a log produced by YCSB.",
                "11d167c9": "    Adds V0 and V1 logs to test resources, along with regression tests to verify their contents are read correctly"
            },
            "Commit&issueIDs": {
                "305c61e2": [
                    "#69"
                ]
            },
            "links": [
                "https://github.com/HdrHistogram/HdrHistogram/issues/69",
                "https://github.com/HdrHistogram/HdrHistogram/commit/305c61e2"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/HllSketchAggregatorTest.java",
            "test_name": "testRelocation",
            "FQS": "org.apache.druid.query.aggregation.datasketches.hll.HllSketchAggregatorTest.testRelocation()",
            "start_line": "425",
            "blame_result": "9576fd3141e (Adarsh Sanjeev 2023-11-03 08:31:22 +0530 426)   {\n9576fd3141e (Adarsh Sanjeev 2023-11-03 08:31:22 +0530 427)     final GroupByTestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n9576fd3141e (Adarsh Sanjeev 2023-11-03 08:31:22 +0530 428)     HllSketchHolder sketchHolder = new HllSketchHolder(null, new HllSketch());\n9576fd3141e (Adarsh Sanjeev 2023-11-03 08:31:22 +0530 429)     sketchHolder.getSketch().update(1);\n9576fd3141e (Adarsh Sanjeev 2023-11-03 08:31:22 +0530 430) \n",
            "commit_hashes": {
                "9576fd3141e": "    HllSketch Merge Aggregator optimizations (#15162)"
            },
            "Commit&issueIDs": {
                "9576fd3141e": [
                    "(#15162)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/15162",
                "https://github.com/apache/druid/commit/9576fd3141e"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/basic/authentication/validator/PasswordHashGeneratorTest.java",
            "test_name": "testHashIsNotRecomputedWhenCached",
            "FQS": "org.apache.druid.security.basic.authentication.validator.PasswordHashGeneratorTest.testHashIsNotRecomputedWhenCached()",
            "start_line": "43",
            "blame_result": "d623756c668 (Kashif Faraz 2024-01-10 17:46:09 +0530 44)   {\nd623756c668 (Kashif Faraz 2024-01-10 17:46:09 +0530 45)     final PasswordHashGenerator hashGenerator = new PasswordHashGenerator();\nd623756c668 (Kashif Faraz 2024-01-10 17:46:09 +0530 46) \nd623756c668 (Kashif Faraz 2024-01-10 17:46:09 +0530 47)     final char[] password = \"this_is_a_long_password\".toCharArray();\nd623756c668 (Kashif Faraz 2024-01-10 17:46:09 +0530 48)     final int iterations = BasicAuthUtils.DEFAULT_KEY_ITERATIONS;\n",
            "commit_hashes": {
                "d623756c668": "    Add cache for password hash in druid-basic-security (#15648)"
            },
            "Commit&issueIDs": {
                "d623756c668": [
                    "(#15648)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/15648",
                "https://github.com/apache/druid/commit/d623756c668"
            ]
        },
        {
            "poj_link": "https://github.com/apache/druid/",
            "file_path": "apache/druid/extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/data/input/kafka/KafkaTopicPartitionTest.java",
            "test_name": "testHashCode",
            "FQS": "org.apache.druid.data.input.kafka.KafkaTopicPartitionTest.testHashCode()",
            "start_line": "66",
            "blame_result": "30b5dd4ca78 (Abhishek Agarwal 2023-08-14 22:24:49 +0530 67)   {\n30b5dd4ca78 (Abhishek Agarwal 2023-08-14 22:24:49 +0530 68)     KafkaTopicPartition partition1 = new KafkaTopicPartition(false, \"topic\", 0);\n30b5dd4ca78 (Abhishek Agarwal 2023-08-14 22:24:49 +0530 69)     KafkaTopicPartition partition2 = new KafkaTopicPartition(false, \"topic\", 0);\n30b5dd4ca78 (Abhishek Agarwal 2023-08-14 22:24:49 +0530 70)     KafkaTopicPartition partition3 = new KafkaTopicPartition(false, \"topic\", 1);\n30b5dd4ca78 (Abhishek Agarwal 2023-08-14 22:24:49 +0530 71)     KafkaTopicPartition partition4 = new KafkaTopicPartition(false, \"topic2\", 0);\n",
            "commit_hashes": {
                "30b5dd4ca78": "    Add support to read from multiple kafka topics in same supervisor (#14424)"
            },
            "Commit&issueIDs": {
                "30b5dd4ca78": [
                    "(#14424)"
                ]
            },
            "links": [
                "https://github.com/apache/druid/issues/14424",
                "https://github.com/apache/druid/commit/30b5dd4ca78"
            ]
        },
        {
            "poj_link": "https://github.com/ReactiveX/RxJava/",
            "file_path": "ReactiveX/RxJava/src/test/java/io/reactivex/rxjava3/core/NotificationTest.java",
            "test_name": "twoEqual",
            "FQS": "io.reactivex.rxjava3.core.NotificationTest.twoEqual()",
            "start_line": "55",
            "blame_result": "0094304aec src/test/java/io/reactivex/NotificationTest.java              (David Karnok 2016-08-26 20:43:05 +0200 56)         Notification<Integer> n1 = Notification.createOnNext(0);\nb3ad0752de src/test/java/io/reactivex/rxjava3/core/NotificationTest.java (David Karnok 2020-02-12 16:26:52 +0100 57)         Notification<Integer> n2 = Notification.createOnNext(0);\nb3ad0752de src/test/java/io/reactivex/rxjava3/core/NotificationTest.java (David Karnok 2020-02-12 16:26:52 +0100 58)         assertEquals(n1, n2);\nb3ad0752de src/test/java/io/reactivex/rxjava3/core/NotificationTest.java (David Karnok 2020-02-12 16:26:52 +0100 59)         assertEquals(n2, n1);\n0094304aec src/test/java/io/reactivex/NotificationTest.java              (David Karnok 2016-08-26 20:43:05 +0200 60)     }\n",
            "commit_hashes": {
                "0094304aec": "    2.x Improve coverage, fix bugs (#4430)",
                "b3ad0752de": "    3.x: Add missing coverage, fix unused/inconsistent ops (#6901)"
            },
            "Commit&issueIDs": {
                "0094304aec": [
                    "(#4430)"
                ],
                "b3ad0752de": [
                    "(#6901)"
                ]
            },
            "links": [
                "https://github.com/ReactiveX/RxJava/issues/4430",
                "https://github.com/ReactiveX/RxJava/commit/0094304aec",
                "https://github.com/ReactiveX/RxJava/issues/6901",
                "https://github.com/ReactiveX/RxJava/commit/b3ad0752de"
            ]
        },
        {
            "poj_link": "https://github.com/ReactiveX/RxJava/",
            "file_path": "ReactiveX/RxJava/src/test/java/io/reactivex/rxjava3/disposables/CompositeDisposableTest.java",
            "test_name": "addAfterDisposed",
            "FQS": "io.reactivex.rxjava3.disposables.CompositeDisposableTest.addAfterDisposed()",
            "start_line": "405",
            "blame_result": "0094304aec src/test/java/io/reactivex/disposables/CompositeDisposableTest.java         (David Karnok 2016-08-26 20:43:05 +0200 406)         CompositeDisposable cd = new CompositeDisposable();\n0094304aec src/test/java/io/reactivex/disposables/CompositeDisposableTest.java         (David Karnok 2016-08-26 20:43:05 +0200 407)         cd.dispose();\n35281d5781 src/test/java/io/reactivex/disposables/CompositeDisposableTest.java         (Niklas Baudy 2016-09-07 17:27:56 +0200 408) \n166c529eb1 src/test/java/io/reactivex/rxjava3/disposables/CompositeDisposableTest.java (Jake Wharton 2019-12-19 13:39:40 -0500 409)         Disposable d1 = Disposable.empty();\n35281d5781 src/test/java/io/reactivex/disposables/CompositeDisposableTest.java         (Niklas Baudy 2016-09-07 17:27:56 +0200 410) \n",
            "commit_hashes": {
                "0094304aec": "    2.x Improve coverage, fix bugs (#4430)",
                "35281d5781": "    2.x: Remove trailing whitespace (#4496)",
                "166c529eb1": "    Migrate Disposables static factories to Disposable interface (#6781)"
            },
            "Commit&issueIDs": {
                "0094304aec": [
                    "(#4430)"
                ],
                "35281d5781": [
                    "(#4496)"
                ],
                "166c529eb1": [
                    "(#6781)"
                ]
            },
            "links": [
                "https://github.com/ReactiveX/RxJava/issues/4430",
                "https://github.com/ReactiveX/RxJava/commit/0094304aec",
                "https://github.com/ReactiveX/RxJava/issues/4496",
                "https://github.com/ReactiveX/RxJava/commit/35281d5781",
                "https://github.com/ReactiveX/RxJava/issues/6781",
                "https://github.com/ReactiveX/RxJava/commit/166c529eb1"
            ]
        },
        {
            "poj_link": "https://github.com/ReactiveX/RxJava/",
            "file_path": "ReactiveX/RxJava/src/test/java/io/reactivex/rxjava3/flowable/FlowableNotificationTest.java",
            "test_name": "onNextIntegerNotificationDoesNotEqualNullNotification",
            "FQS": "io.reactivex.rxjava3.flowable.FlowableNotificationTest.onNextIntegerNotificationDoesNotEqualNullNotification()",
            "start_line": "23",
            "blame_result": "6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 24)         final Notification<Integer> integerNotification = Notification.createOnNext(1);\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 25)         final Notification<Integer> nullNotification = Notification.createOnNext(null);\nae8025d02b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (jimin        2019-06-30 18:20:35 +0800 26)         Assert.assertNotEquals(integerNotification, nullNotification);\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 27)     }\n35281d5781 src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (Niklas Baudy 2016-09-07 17:27:56 +0200 28) \n",
            "commit_hashes": {
                "6ff866ae1b": "    2.x: cleanup of style and other minor things, 9/14-1 (#4552)",
                "ae8025d02b": "    3.x: Simplify JUnit tests with more appropriate assert methods (#6549)",
                "35281d5781": "    2.x: Remove trailing whitespace (#4496)"
            },
            "Commit&issueIDs": {
                "6ff866ae1b": [
                    "(#4552)"
                ],
                "ae8025d02b": [
                    "(#6549)"
                ],
                "35281d5781": [
                    "(#4496)"
                ]
            },
            "links": [
                "https://github.com/ReactiveX/RxJava/issues/4552",
                "https://github.com/ReactiveX/RxJava/commit/6ff866ae1b",
                "https://github.com/ReactiveX/RxJava/issues/6549",
                "https://github.com/ReactiveX/RxJava/commit/ae8025d02b",
                "https://github.com/ReactiveX/RxJava/issues/4496",
                "https://github.com/ReactiveX/RxJava/commit/35281d5781"
            ]
        },
        {
            "poj_link": "https://github.com/ReactiveX/RxJava/",
            "file_path": "ReactiveX/RxJava/src/test/java/io/reactivex/rxjava3/flowable/FlowableNotificationTest.java",
            "test_name": "onNextNullNotificationDoesNotEqualIntegerNotification",
            "FQS": "io.reactivex.rxjava3.flowable.FlowableNotificationTest.onNextNullNotificationDoesNotEqualIntegerNotification()",
            "start_line": "30",
            "blame_result": "6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 31)         final Notification<Integer> integerNotification = Notification.createOnNext(1);\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 32)         final Notification<Integer> nullNotification = Notification.createOnNext(null);\nae8025d02b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (jimin        2019-06-30 18:20:35 +0800 33)         Assert.assertNotEquals(nullNotification, integerNotification);\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 34)     }\n35281d5781 src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (Niklas Baudy 2016-09-07 17:27:56 +0200 35) \n",
            "commit_hashes": {
                "6ff866ae1b": "    2.x: cleanup of style and other minor things, 9/14-1 (#4552)",
                "ae8025d02b": "    3.x: Simplify JUnit tests with more appropriate assert methods (#6549)",
                "35281d5781": "    2.x: Remove trailing whitespace (#4496)"
            },
            "Commit&issueIDs": {
                "6ff866ae1b": [
                    "(#4552)"
                ],
                "ae8025d02b": [
                    "(#6549)"
                ],
                "35281d5781": [
                    "(#4496)"
                ]
            },
            "links": [
                "https://github.com/ReactiveX/RxJava/issues/4552",
                "https://github.com/ReactiveX/RxJava/commit/6ff866ae1b",
                "https://github.com/ReactiveX/RxJava/issues/6549",
                "https://github.com/ReactiveX/RxJava/commit/ae8025d02b",
                "https://github.com/ReactiveX/RxJava/issues/4496",
                "https://github.com/ReactiveX/RxJava/commit/35281d5781"
            ]
        },
        {
            "poj_link": "https://github.com/ReactiveX/RxJava/",
            "file_path": "ReactiveX/RxJava/src/test/java/io/reactivex/rxjava3/flowable/FlowableNotificationTest.java",
            "test_name": "onNextIntegerNotificationsWhenEqual",
            "FQS": "io.reactivex.rxjava3.flowable.FlowableNotificationTest.onNextIntegerNotificationsWhenEqual()",
            "start_line": "37",
            "blame_result": "6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 38)         final Notification<Integer> integerNotification = Notification.createOnNext(1);\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 39)         final Notification<Integer> integerNotification2 = Notification.createOnNext(1);\nae8025d02b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (jimin        2019-06-30 18:20:35 +0800 40)         Assert.assertEquals(integerNotification, integerNotification2);\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 41)     }\n35281d5781 src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (Niklas Baudy 2016-09-07 17:27:56 +0200 42) \n",
            "commit_hashes": {
                "6ff866ae1b": "    2.x: cleanup of style and other minor things, 9/14-1 (#4552)",
                "ae8025d02b": "    3.x: Simplify JUnit tests with more appropriate assert methods (#6549)",
                "35281d5781": "    2.x: Remove trailing whitespace (#4496)"
            },
            "Commit&issueIDs": {
                "6ff866ae1b": [
                    "(#4552)"
                ],
                "ae8025d02b": [
                    "(#6549)"
                ],
                "35281d5781": [
                    "(#4496)"
                ]
            },
            "links": [
                "https://github.com/ReactiveX/RxJava/issues/4552",
                "https://github.com/ReactiveX/RxJava/commit/6ff866ae1b",
                "https://github.com/ReactiveX/RxJava/issues/6549",
                "https://github.com/ReactiveX/RxJava/commit/ae8025d02b",
                "https://github.com/ReactiveX/RxJava/issues/4496",
                "https://github.com/ReactiveX/RxJava/commit/35281d5781"
            ]
        },
        {
            "poj_link": "https://github.com/ReactiveX/RxJava/",
            "file_path": "ReactiveX/RxJava/src/test/java/io/reactivex/rxjava3/flowable/FlowableNotificationTest.java",
            "test_name": "onNextIntegerNotificationsWhenNotEqual",
            "FQS": "io.reactivex.rxjava3.flowable.FlowableNotificationTest.onNextIntegerNotificationsWhenNotEqual()",
            "start_line": "44",
            "blame_result": "6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 45)         final Notification<Integer> integerNotification = Notification.createOnNext(1);\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 46)         final Notification<Integer> integerNotification2 = Notification.createOnNext(2);\nae8025d02b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (jimin        2019-06-30 18:20:35 +0800 47)         Assert.assertNotEquals(integerNotification, integerNotification2);\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 48)     }\n35281d5781 src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (Niklas Baudy 2016-09-07 17:27:56 +0200 49) \n",
            "commit_hashes": {
                "6ff866ae1b": "    2.x: cleanup of style and other minor things, 9/14-1 (#4552)",
                "ae8025d02b": "    3.x: Simplify JUnit tests with more appropriate assert methods (#6549)",
                "35281d5781": "    2.x: Remove trailing whitespace (#4496)"
            },
            "Commit&issueIDs": {
                "6ff866ae1b": [
                    "(#4552)"
                ],
                "ae8025d02b": [
                    "(#6549)"
                ],
                "35281d5781": [
                    "(#4496)"
                ]
            },
            "links": [
                "https://github.com/ReactiveX/RxJava/issues/4552",
                "https://github.com/ReactiveX/RxJava/commit/6ff866ae1b",
                "https://github.com/ReactiveX/RxJava/issues/6549",
                "https://github.com/ReactiveX/RxJava/commit/ae8025d02b",
                "https://github.com/ReactiveX/RxJava/issues/4496",
                "https://github.com/ReactiveX/RxJava/commit/35281d5781"
            ]
        },
        {
            "poj_link": "https://github.com/ReactiveX/RxJava/",
            "file_path": "ReactiveX/RxJava/src/test/java/io/reactivex/rxjava3/flowable/FlowableNotificationTest.java",
            "test_name": "onErrorIntegerNotificationsWhenEqual",
            "FQS": "io.reactivex.rxjava3.flowable.FlowableNotificationTest.onErrorIntegerNotificationsWhenEqual()",
            "start_line": "51",
            "blame_result": "6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 52)         final Exception exception = new Exception();\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 53)         final Notification<Integer> onErrorNotification = Notification.createOnError(exception);\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 54)         final Notification<Integer> onErrorNotification2 = Notification.createOnError(exception);\nae8025d02b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (jimin        2019-06-30 18:20:35 +0800 55)         Assert.assertEquals(onErrorNotification, onErrorNotification2);\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok 2016-09-14 18:33:17 +0200 56)     }\n",
            "commit_hashes": {
                "6ff866ae1b": "    2.x: cleanup of style and other minor things, 9/14-1 (#4552)",
                "ae8025d02b": "    3.x: Simplify JUnit tests with more appropriate assert methods (#6549)"
            },
            "Commit&issueIDs": {
                "6ff866ae1b": [
                    "(#4552)"
                ],
                "ae8025d02b": [
                    "(#6549)"
                ]
            },
            "links": [
                "https://github.com/ReactiveX/RxJava/issues/4552",
                "https://github.com/ReactiveX/RxJava/commit/6ff866ae1b",
                "https://github.com/ReactiveX/RxJava/issues/6549",
                "https://github.com/ReactiveX/RxJava/commit/ae8025d02b"
            ]
        },
        {
            "poj_link": "https://github.com/ReactiveX/RxJava/",
            "file_path": "ReactiveX/RxJava/src/test/java/io/reactivex/rxjava3/flowable/FlowableNotificationTest.java",
            "test_name": "onErrorIntegerNotificationWhenNotEqual",
            "FQS": "io.reactivex.rxjava3.flowable.FlowableNotificationTest.onErrorIntegerNotificationWhenNotEqual()",
            "start_line": "59",
            "blame_result": "6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok    2016-09-14 18:33:17 +0200 60)         final Notification<Integer> onErrorNotification = Notification.createOnError(new Exception());\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok    2016-09-14 18:33:17 +0200 61)         final Notification<Integer> onErrorNotification2 = Notification.createOnError(new Exception());\nae8025d02b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (jimin           2019-06-30 18:20:35 +0800 62)         Assert.assertNotEquals(onErrorNotification, onErrorNotification2);\n6ff866ae1b src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (David Karnok    2016-09-14 18:33:17 +0200 63)     }\nf6965b1e69 src/test/java/io/reactivex/flowable/FlowableNotificationTest.java (Ben Christensen 2017-01-09 15:20:48 -0800 64) }\n",
            "commit_hashes": {
                "6ff866ae1b": "    2.x: cleanup of style and other minor things, 9/14-1 (#4552)",
                "ae8025d02b": "    3.x: Simplify JUnit tests with more appropriate assert methods (#6549)",
                "f6965b1e69": "    Add newline to end of files missing a newline (#4979)"
            },
            "Commit&issueIDs": {
                "6ff866ae1b": [
                    "(#4552)"
                ],
                "ae8025d02b": [
                    "(#6549)"
                ],
                "f6965b1e69": [
                    "(#4979)"
                ]
            },
            "links": [
                "https://github.com/ReactiveX/RxJava/issues/4552",
                "https://github.com/ReactiveX/RxJava/commit/6ff866ae1b",
                "https://github.com/ReactiveX/RxJava/issues/6549",
                "https://github.com/ReactiveX/RxJava/commit/ae8025d02b",
                "https://github.com/ReactiveX/RxJava/issues/4979",
                "https://github.com/ReactiveX/RxJava/commit/f6965b1e69"
            ]
        },
        {
            "poj_link": "https://github.com/ReactiveX/RxJava/",
            "file_path": "ReactiveX/RxJava/src/test/java/io/reactivex/rxjava3/internal/disposables/ListCompositeDisposableTest.java",
            "test_name": "remove",
            "FQS": "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest.remove()",
            "start_line": "153",
            "blame_result": "f97c50dadc src/test/java/io/reactivex/internal/disposables/ListCompositeDisposableTest.java         (David Karnok 2016-08-28 22:56:08 +0200 154)         ListCompositeDisposable lcd = new ListCompositeDisposable();\n166c529eb1 src/test/java/io/reactivex/rxjava3/internal/disposables/ListCompositeDisposableTest.java (Jake Wharton 2019-12-19 13:39:40 -0500 155)         Disposable d = Disposable.empty();\n35281d5781 src/test/java/io/reactivex/internal/disposables/ListCompositeDisposableTest.java         (Niklas Baudy 2016-09-07 17:27:56 +0200 156) \nf97c50dadc src/test/java/io/reactivex/internal/disposables/ListCompositeDisposableTest.java         (David Karnok 2016-08-28 22:56:08 +0200 157)         lcd.add(d);\n35281d5781 src/test/java/io/reactivex/internal/disposables/ListCompositeDisposableTest.java         (Niklas Baudy 2016-09-07 17:27:56 +0200 158) \n",
            "commit_hashes": {
                "f97c50dadc": "    2.x: cleanup, behavior clarifications, fixes, coverage 8/28-1 (#4435)",
                "166c529eb1": "    Migrate Disposables static factories to Disposable interface (#6781)",
                "35281d5781": "    2.x: Remove trailing whitespace (#4496)"
            },
            "Commit&issueIDs": {
                "f97c50dadc": [
                    "(#4435)"
                ],
                "166c529eb1": [
                    "(#6781)"
                ],
                "35281d5781": [
                    "(#4496)"
                ]
            },
            "links": [
                "https://github.com/ReactiveX/RxJava/issues/4435",
                "https://github.com/ReactiveX/RxJava/commit/f97c50dadc",
                "https://github.com/ReactiveX/RxJava/issues/6781",
                "https://github.com/ReactiveX/RxJava/commit/166c529eb1",
                "https://github.com/ReactiveX/RxJava/issues/4496",
                "https://github.com/ReactiveX/RxJava/commit/35281d5781"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/BufferToolsTest.java",
            "test_name": "shouldConvertStringToBufferAndBack",
            "FQS": "com.mpatric.mp3agic.BufferToolsTest.shouldConvertStringToBufferAndBack()",
            "start_line": "87",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 88) \t\tString original = \"1234567890QWERTYUIOP\";\n887574c9 (Anosh D. Ullenius  2022-04-21 17:44:40 +0200 89) \t\tbyte[] buffer = BufferTools.stringToByteBuffer(original, 0, original.length());\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 90) \t\tString converted = BufferTools.byteBufferToString(buffer, 0, buffer.length);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 91) \t\tassertEquals(original, converted);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 92) \t}\n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121",
                "887574c9": "    Refactoring - second try (#193)"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ],
                "887574c9": [
                    "(#193)"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d",
                "https://github.com/mpatric/mp3agic/issues/193",
                "https://github.com/mpatric/mp3agic/commit/887574c9"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/BufferToolsTest.java",
            "test_name": "shouldConvertUnicodeStringToBufferAndBack",
            "FQS": "com.mpatric.mp3agic.BufferToolsTest.shouldConvertUnicodeStringToBufferAndBack()",
            "start_line": "103",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 104) \t\tString original = \"\\u03B3\\u03B5\\u03B9\\u03AC \\u03C3\\u03BF\\u03C5\";\n887574c9 (Anosh D. Ullenius  2022-04-21 17:44:40 +0200 105) \t\tbyte[] buffer = BufferTools.stringToByteBuffer(original, 0, original.length(), \"UTF-16LE\");\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 106) \t\tString converted = BufferTools.byteBufferToString(buffer, 0, buffer.length, \"UTF-16LE\");\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 107) \t\tassertEquals(original, converted);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 108) \t}\n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121",
                "887574c9": "    Refactoring - second try (#193)"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ],
                "887574c9": [
                    "(#193)"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d",
                "https://github.com/mpatric/mp3agic/issues/193",
                "https://github.com/mpatric/mp3agic/commit/887574c9"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/BufferToolsTest.java",
            "test_name": "shouldPackAndUnpackIntegerBackToOriginalValue",
            "FQS": "com.mpatric.mp3agic.BufferToolsTest.shouldPackAndUnpackIntegerBackToOriginalValue()",
            "start_line": "370",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 371) \t\tint original = 12345;\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 372) \t\tbyte[] bytes = BufferTools.packInteger(original);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 373) \t\tint unpacked = BufferTools.unpackInteger(bytes[0], bytes[1], bytes[2], bytes[3]);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 374) \t\tassertEquals(original, unpacked);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 375) \t}\n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/BufferToolsTest.java",
            "test_name": "shouldPackAndUnpackSynchsafeIntegerBackToOriginalValue",
            "FQS": "com.mpatric.mp3agic.BufferToolsTest.shouldPackAndUnpackSynchsafeIntegerBackToOriginalValue()",
            "start_line": "378",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 379) \t\tint original = 12345;\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 380) \t\tbyte[] bytes = BufferTools.packSynchsafeInteger(original);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 381) \t\tint unpacked = BufferTools.unpackSynchsafeInteger(bytes[0], bytes[1], bytes[2], bytes[3]);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 382) \t\tassertEquals(original, unpacked);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 383) \t}\n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/BufferToolsTest.java",
            "test_name": "shouldUnsynchroniseThenSynchroniseFFExBytesCorrectly",
            "FQS": "com.mpatric.mp3agic.BufferToolsTest.shouldUnsynchroniseThenSynchroniseFFExBytesCorrectly()",
            "start_line": "438",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 439) \t\tbyte[] buffer = {BYTE_FF, BYTE_FB, 2, 3, 4, BYTE_FF, BYTE_E0, 7, 8, 9, 10, 11, 12, 13, BYTE_FF, BYTE_F0};\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 440) \t\tbyte[] expectedBuffer = {BYTE_FF, 0, BYTE_FB, 2, 3, 4, BYTE_FF, 0, BYTE_E0, 7, 8, 9, 10, 11, 12, 13, BYTE_FF, 0, BYTE_F0};\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 441) \t\tbyte[] unsynchronised = BufferTools.unsynchroniseBuffer(buffer);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 442) \t\tbyte[] synchronised = BufferTools.synchroniseBuffer(unsynchronised);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 443) \t\tassertArrayEquals(expectedBuffer, unsynchronised);\n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/BufferToolsTest.java",
            "test_name": "shouldUnsynchroniseThenSynchroniseFF00BytesCorrectly",
            "FQS": "com.mpatric.mp3agic.BufferToolsTest.shouldUnsynchroniseThenSynchroniseFF00BytesCorrectly()",
            "start_line": "448",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 449) \t\tbyte[] buffer = {BYTE_FF, 0, 2, 3, 4, BYTE_FF, 0, 7, 8, 9, 10, 11, 12, 13, BYTE_FF, 0};\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 450) \t\tbyte[] expectedBuffer = {BYTE_FF, 0, 0, 2, 3, 4, BYTE_FF, 0, 0, 7, 8, 9, 10, 11, 12, 13, BYTE_FF, 0, 0};\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 451) \t\tbyte[] unsynchronised = BufferTools.unsynchroniseBuffer(buffer);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 452) \t\tbyte[] synchronised = BufferTools.synchroniseBuffer(unsynchronised);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 453) \t\tassertArrayEquals(expectedBuffer, unsynchronised);\n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/BufferToolsTest.java",
            "test_name": "shouldUnsynchroniseThenSynchroniseBufferFullOfFFsCorrectly",
            "FQS": "com.mpatric.mp3agic.BufferToolsTest.shouldUnsynchroniseThenSynchroniseBufferFullOfFFsCorrectly()",
            "start_line": "458",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 459) \t\tbyte[] buffer = {BYTE_FF, BYTE_FF, BYTE_FF, BYTE_FF};\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 460) \t\tbyte[] expectedBuffer = {BYTE_FF, 0, BYTE_FF, 0, BYTE_FF, 0, BYTE_FF, 0};\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 461) \t\tbyte[] unsynchronised = BufferTools.unsynchroniseBuffer(buffer);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 462) \t\tbyte[] synchronised = BufferTools.synchroniseBuffer(unsynchronised);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 463) \t\tassertArrayEquals(expectedBuffer, unsynchronised);\n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/BufferToolsTest.java",
            "test_name": "shouldUnsynchroniseThenSynchroniseBufferMinimalBufferCorrectly",
            "FQS": "com.mpatric.mp3agic.BufferToolsTest.shouldUnsynchroniseThenSynchroniseBufferMinimalBufferCorrectly()",
            "start_line": "468",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 469) \t\tbyte[] buffer = {BYTE_FF};\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 470) \t\tbyte[] expectedBuffer = {BYTE_FF, 0};\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 471) \t\tbyte[] unsynchronised = BufferTools.unsynchroniseBuffer(buffer);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 472) \t\tbyte[] synchronised = BufferTools.synchroniseBuffer(unsynchronised);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 473) \t\tassertArrayEquals(expectedBuffer, unsynchronised);\n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/BufferToolsTest.java",
            "test_name": "shouldReturnOriginalBufferIfNoUnynchronisationOrSynchronisationIsRequired",
            "FQS": "com.mpatric.mp3agic.BufferToolsTest.shouldReturnOriginalBufferIfNoUnynchronisationOrSynchronisationIsRequired()",
            "start_line": "478",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 479) \t\tbyte[] buffer = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 480) \t\tbyte[] unsynchronised = BufferTools.unsynchroniseBuffer(buffer);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 481) \t\tbyte[] synchronised = BufferTools.synchroniseBuffer(buffer);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 482) \t\tassertEquals(buffer, unsynchronised);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 483) \t\tassertEquals(buffer, synchronised);\n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/ID3v2ChapterFrameDataTest.java",
            "test_name": "shouldConsiderTwoEquivalentObjectsEqual",
            "FQS": "com.mpatric.mp3agic.ID3v2ChapterFrameDataTest.shouldConsiderTwoEquivalentObjectsEqual()",
            "start_line": "30",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 31) \t\tID3v2ChapterFrameData frameData1 = new ID3v2ChapterFrameData(false, \"ch1\", 1, 380, 3, 400);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 32) \t\tID3v2TextFrameData subFrameData1 = new ID3v2TextFrameData(false, new EncodedText(\"Hello there\"));\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 33) \t\tframeData1.addSubframe(\"TIT2\", subFrameData1);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 34) \t\tID3v2ChapterFrameData frameData2 = new ID3v2ChapterFrameData(false, \"ch1\", 1, 380, 3, 400);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 35) \t\tID3v2TextFrameData subFrameData2 = new ID3v2TextFrameData(false, new EncodedText(\"Hello there\"));\n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/ID3v2ChapterFrameDataTest.java",
            "test_name": "equalObjectsHaveSameHashCode",
            "FQS": "com.mpatric.mp3agic.ID3v2ChapterFrameDataTest.equalObjectsHaveSameHashCode()",
            "start_line": "112",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 113) \t\tID3v2ChapterFrameData frameData = new ID3v2ChapterFrameData(false, \"ch1\", 1, 380, 3, 400);\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 114) \t\tID3v2ChapterFrameData frameDataAgain = new ID3v2ChapterFrameData(false, \"ch1\", 1, 380, 3, 400);\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 115) \t\tassertEquals(frameData.hashCode(), frameDataAgain.hashCode());\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 116) \t}\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 117) \n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121",
                "93d1eaba": "    add unit tests around untested code"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/ID3v2ChapterTOCFrameDataTest.java",
            "test_name": "shouldConsiderTwoEquivalentObjectsEqual",
            "FQS": "com.mpatric.mp3agic.ID3v2ChapterTOCFrameDataTest.shouldConsiderTwoEquivalentObjectsEqual()",
            "start_line": "30",
            "blame_result": "887574c9 (Anosh D. Ullenius  2022-04-21 17:44:40 +0200 31) \t\tString[] children = {\"ch1\", \"ch2\"};\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 32) \t\tID3v2ChapterTOCFrameData frameData1 = new ID3v2ChapterTOCFrameData(false, true, false, \"toc1\", children);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 33) \t\tID3v2TextFrameData subFrameData1 = new ID3v2TextFrameData(false, new EncodedText(\"Hello there\"));\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 34) \t\tframeData1.addSubframe(\"TIT2\", subFrameData1);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 35) \t\tID3v2ChapterTOCFrameData frameData2 = new ID3v2ChapterTOCFrameData(false, true, false, \"toc1\", children);\n",
            "commit_hashes": {
                "887574c9": "    Refactoring - second try (#193)",
                "3bd2057d": "    reformat code following the editorconfig file; closes #121"
            },
            "Commit&issueIDs": {
                "887574c9": [
                    "(#193)"
                ],
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/193",
                "https://github.com/mpatric/mp3agic/commit/887574c9",
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/ID3v2PictureFrameDataTest.java",
            "test_name": "equalObjectsHaveSameHashCode",
            "FQS": "com.mpatric.mp3agic.ID3v2PictureFrameDataTest.equalObjectsHaveSameHashCode()",
            "start_line": "130",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 131) \t\tID3v2PictureFrameData frameData = new ID3v2PictureFrameData(false, TEST_MIME_TYPE, (byte) 3, new EncodedText((byte) 0, TEST_DESCRIPTION), DUMMY_IMAGE_DATA);\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 132) \t\tID3v2PictureFrameData frameDataAgain = new ID3v2PictureFrameData(false, TEST_MIME_TYPE, (byte) 3, new EncodedText((byte) 0, TEST_DESCRIPTION), DUMMY_IMAGE_DATA);\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 133) \t\tassertEquals(frameData.hashCode(), frameDataAgain.hashCode());\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 134) \t}\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 135) \n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121",
                "93d1eaba": "    add unit tests around untested code"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/ID3v2PopmFrameDataTest.java",
            "test_name": "hashCodeOfTwoDifferentObjectsAreDifferent",
            "FQS": "com.mpatric.mp3agic.ID3v2PopmFrameDataTest.hashCodeOfTwoDifferentObjectsAreDifferent()",
            "start_line": "96",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200  97) \t\tID3v2PopmFrameData iD3v2PopmFrameData1 = new ID3v2PopmFrameData(false, 0);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200  98) \t\tID3v2PopmFrameData iD3v2PopmFrameData2 = new ID3v2PopmFrameData(false, 1);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200  99) \t\tassertFalse(iD3v2PopmFrameData1.hashCode() == iD3v2PopmFrameData2.hashCode());\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 100) \t}\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 101) \n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/ID3v2TextFrameDataTest.java",
            "test_name": "equalObjectsHaveSameHashCode",
            "FQS": "com.mpatric.mp3agic.ID3v2TextFrameDataTest.equalObjectsHaveSameHashCode()",
            "start_line": "68",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 69) \t\tID3v2TextFrameData frameData = new ID3v2TextFrameData(false, new EncodedText(EncodedText.TEXT_ENCODING_ISO_8859_1, TEST_TEXT));\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 70) \t\tID3v2TextFrameData frameDataAgain = new ID3v2TextFrameData(false, new EncodedText(EncodedText.TEXT_ENCODING_ISO_8859_1, TEST_TEXT));\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 71) \t\tassertEquals(frameData.hashCode(), frameDataAgain.hashCode());\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 72) \t}\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 73) \n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121",
                "93d1eaba": "    add unit tests around untested code"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/ID3v2UrlFrameDataTest.java",
            "test_name": "equalObjectsHaveSameHashCode",
            "FQS": "com.mpatric.mp3agic.ID3v2UrlFrameDataTest.equalObjectsHaveSameHashCode()",
            "start_line": "97",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200  98) \t\tID3v2UrlFrameData frameData = new ID3v2UrlFrameData(false, new EncodedText((byte) 0, TEST_DESCRIPTION), TEST_URL);\n93d1eaba (Scott              2017-04-23 19:05:38 -0400  99) \t\tID3v2UrlFrameData frameDataAgain = new ID3v2UrlFrameData(false, new EncodedText((byte) 0, TEST_DESCRIPTION), TEST_URL);\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 100) \t\tassertEquals(frameData.hashCode(), frameDataAgain.hashCode());\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 101) \t}\n93d1eaba (Scott              2017-04-23 19:05:38 -0400 102) \n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121",
                "93d1eaba": "    add unit tests around untested code"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/MutableIntegerTest.java",
            "test_name": "equalObjectsHaveSameHashCode",
            "FQS": "com.mpatric.mp3agic.MutableIntegerTest.equalObjectsHaveSameHashCode()",
            "start_line": "69",
            "blame_result": "3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 70) \t\tMutableInteger eight = new MutableInteger(8);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 71) \t\tMutableInteger eightAgain = new MutableInteger(8);\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 72) \t\tassertEquals(eight.hashCode(), eightAgain.hashCode());\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 73) \t}\n3bd2057d (Jan-Hendrik Peters 2017-04-01 22:05:44 +0200 74) }\n",
            "commit_hashes": {
                "3bd2057d": "    reformat code following the editorconfig file; closes #121"
            },
            "Commit&issueIDs": {
                "3bd2057d": [
                    "#121"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/121",
                "https://github.com/mpatric/mp3agic/commit/3bd2057d"
            ]
        },
        {
            "poj_link": "https://github.com/mpatric/mp3agic/",
            "file_path": "mpatric/mp3agic/src/test/java/com/mpatric/mp3agic/TestHelper.java",
            "test_name": "shouldConvertBytesToHexAndBack",
            "FQS": "com.mpatric.mp3agic.TestHelper.shouldConvertBytesToHexAndBack()",
            "start_line": "66",
            "blame_result": "887574c9 (Anosh D. Ullenius 2022-04-21 17:44:40 +0200 67) \t\tbyte[] bytes = {(byte) 0x48, (byte) 0x45, (byte) 0x4C, (byte) 0x4C, (byte) 0x4F, (byte) 0x20, (byte) 0x74, (byte) 0x68, (byte) 0x65, (byte) 0x72, (byte) 0x65, (byte) 0x21};\nea1e4b4a (Michael Patricios 2012-05-08 09:39:29 +0100 68) \t\tString hexString = TestHelper.bytesToHexString(bytes);\nea1e4b4a (Michael Patricios 2012-05-08 09:39:29 +0100 69) \t\tassertEquals(\"48 45 4c 4c 4f 20 74 68 65 72 65 21\", hexString);\n653688e9 (hennr             2015-02-14 20:03:09 +0100 70) \t\tassertArrayEquals(bytes, TestHelper.hexStringToBytes(hexString));\nea1e4b4a (Michael Patricios 2012-05-08 09:39:29 +0100 71) \t}\n",
            "commit_hashes": {
                "887574c9": "    Refactoring - second try (#193)",
                "ea1e4b4a": "    Move into test helper",
                "653688e9": "    make all test use JUnit 4"
            },
            "Commit&issueIDs": {
                "887574c9": [
                    "(#193)"
                ]
            },
            "links": [
                "https://github.com/mpatric/mp3agic/issues/193",
                "https://github.com/mpatric/mp3agic/commit/887574c9"
            ]
        },
        {
            "poj_link": "https://github.com/jitsi/ice4j/",
            "file_path": "jitsi/ice4j/src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttributeTest.java",
            "test_name": "testEqualsObject",
            "FQS": "org.ice4j.attribute.RequestedAddressFamilyAttributeTest.testEqualsObject()",
            "start_line": "89",
            "blame_result": "e48e5630 test/org/ice4j/attribute/RequestedAddressFamilyAttributeTest.java          (paweldomas      2014-05-13 19:49:45 +0000 90)     {\ne48e5630 test/org/ice4j/attribute/RequestedAddressFamilyAttributeTest.java          (paweldomas      2014-05-13 19:49:45 +0000 91)         // null test\n34c2ce50 src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttributeTest.java (Ingo Bauersachs 2021-01-04 21:34:02 +0100 92)         assertNotEquals(requestedAddressFamilyAttribute, null);\ne48e5630 test/org/ice4j/attribute/RequestedAddressFamilyAttributeTest.java          (paweldomas      2014-05-13 19:49:45 +0000 93) \ne48e5630 test/org/ice4j/attribute/RequestedAddressFamilyAttributeTest.java          (paweldomas      2014-05-13 19:49:45 +0000 94)         // difference test\n",
            "commit_hashes": {
                "e48e5630": "    Adds unit test for TURN attributes and minor fixes. Patch by Aakash Garg.",
                "34c2ce50": "    Migrate tests to JUnit 5 and release Maven Central (#221)"
            },
            "Commit&issueIDs": {
                "34c2ce50": [
                    "(#221)"
                ]
            },
            "links": [
                "https://github.com/jitsi/ice4j/issues/221",
                "https://github.com/jitsi/ice4j/commit/34c2ce50"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-agent-bootstrap/src/test/java/io/arex/agent/bootstrap/TraceContextManagerTest.java",
            "test_name": "test",
            "FQS": "io.arex.agent.bootstrap.TraceContextManagerTest.test()",
            "start_line": "13",
            "blame_result": "664afac0 (Mark Zhang 2024-01-15 15:05:04 +0800 14)         TraceContextManager.init(\"test-ip\");\n664afac0 (Mark Zhang 2024-01-15 15:05:04 +0800 15)         String get1 = TraceContextManager.get(true);\n664afac0 (Mark Zhang 2024-01-15 15:05:04 +0800 16)         String get2 = TraceContextManager.get();\n664afac0 (Mark Zhang 2024-01-15 15:05:04 +0800 17)         assertEquals(get1, get2);\n664afac0 (Mark Zhang 2024-01-15 15:05:04 +0800 18) \n",
            "commit_hashes": {
                "664afac0": "    ci: change ci workflow trigger (#376)"
            },
            "Commit&issueIDs": {
                "664afac0": [
                    "(#376)"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/376",
                "https://github.com/arextest/arex-agent-java/commit/664afac0"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-agent-bootstrap/src/test/java/io/arex/agent/bootstrap/util/ConcurrentHashSetTest.java",
            "test_name": "testEquals",
            "FQS": "io.arex.agent.bootstrap.util.ConcurrentHashSetTest.testEquals()",
            "start_line": "69",
            "blame_result": "6d0a23d0 (mr3 2023-03-20 20:02:25 +0800 70)         ConcurrentHashSet<String> set1 = new ConcurrentHashSet<>();\n6d0a23d0 (mr3 2023-03-20 20:02:25 +0800 71)         set1.add(\"x1\");\n6d0a23d0 (mr3 2023-03-20 20:02:25 +0800 72)         set1.add(\"x2\");\n6d0a23d0 (mr3 2023-03-20 20:02:25 +0800 73) \n6d0a23d0 (mr3 2023-03-20 20:02:25 +0800 74)         ConcurrentHashSet<String> set2 = new ConcurrentHashSet<>();\n",
            "commit_hashes": {
                "6d0a23d0": "    fix: infinite loop in matcher at startup (#124)"
            },
            "Commit&issueIDs": {
                "6d0a23d0": [
                    "(#124)"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/124",
                "https://github.com/arextest/arex-agent-java/commit/6d0a23d0"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-agent-bootstrap/src/test/java/io/arex/agent/bootstrap/util/ConcurrentHashSetTest.java",
            "test_name": "testHashCode",
            "FQS": "io.arex.agent.bootstrap.util.ConcurrentHashSetTest.testHashCode()",
            "start_line": "88",
            "blame_result": "6d0a23d0 (mr3 2023-03-20 20:02:25 +0800 89)         ConcurrentHashSet<String> set1 = new ConcurrentHashSet<>();\n6d0a23d0 (mr3 2023-03-20 20:02:25 +0800 90) \n6d0a23d0 (mr3 2023-03-20 20:02:25 +0800 91)         ConcurrentHashSet<String> set2 = new ConcurrentHashSet<>();\n6d0a23d0 (mr3 2023-03-20 20:02:25 +0800 92) \n6d0a23d0 (mr3 2023-03-20 20:02:25 +0800 93)         assertEquals(set1.hashCode(), set2.hashCode());\n",
            "commit_hashes": {
                "6d0a23d0": "    fix: infinite loop in matcher at startup (#124)"
            },
            "Commit&issueIDs": {
                "6d0a23d0": [
                    "(#124)"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/124",
                "https://github.com/arextest/arex-agent-java/commit/6d0a23d0"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/model/DynamicClassEntityTest.java",
            "test_name": "testHashCode",
            "FQS": "io.arex.inst.runtime.model.DynamicClassEntityTest.testHashCode()",
            "start_line": "25",
            "blame_result": "fc09f15c (YongwuHe 2023-06-09 11:34:09 +0800 26)         assertEquals(entity1.hashCode(), entity2.hashCode());\nfc09f15c (YongwuHe 2023-06-09 11:34:09 +0800 27)         assertNotEquals(entity1.hashCode(), entity3.hashCode());\nfc09f15c (YongwuHe 2023-06-09 11:34:09 +0800 28)         assertNotEquals(entity1.hashCode(), entity4.hashCode());\nfc09f15c (YongwuHe 2023-06-09 11:34:09 +0800 29)         assertEquals(entity3.hashCode(), entity5.hashCode());\nfc09f15c (YongwuHe 2023-06-09 11:34:09 +0800 30)         assertEquals(entity1.hashCode(), entity1.hashCode());\n",
            "commit_hashes": {
                "fc09f15c": "    feat: support dynamic retransform (#160)"
            },
            "Commit&issueIDs": {
                "fc09f15c": [
                    "(#160)"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/160",
                "https://github.com/arextest/arex-agent-java/commit/fc09f15c"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/model/SerializeSkipInfoTest.java",
            "test_name": "testHashCode",
            "FQS": "io.arex.inst.runtime.model.SerializeSkipInfoTest.testHashCode()",
            "start_line": "53",
            "blame_result": "8abea975 (YongwuHe 2023-05-09 18:08:28 +0800 54)         assertEquals(serializeSkipInfo2.hashCode(), serializeSkipInfo.hashCode());\n8abea975 (YongwuHe 2023-05-09 18:08:28 +0800 55)     }\n8abea975 (YongwuHe 2023-05-09 18:08:28 +0800 56) \n8abea975 (YongwuHe 2023-05-09 18:08:28 +0800 57)     @Test\n8abea975 (YongwuHe 2023-05-09 18:08:28 +0800 58)     void testToString() {\n",
            "commit_hashes": {
                "8abea975": "    feat: supports serialization to ignore specified fields (#112)"
            },
            "Commit&issueIDs": {
                "8abea975": [
                    "(#112)"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/112",
                "https://github.com/arextest/arex-agent-java/commit/8abea975"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/model/SerializeSkipInfoTest.java",
            "test_name": "testToString",
            "FQS": "io.arex.inst.runtime.model.SerializeSkipInfoTest.testToString()",
            "start_line": "58",
            "blame_result": "8abea975 (YongwuHe 2023-05-09 18:08:28 +0800 59)         assertEquals(serializeSkipInfo.toString(), serializeSkipInfo2.toString());\n8abea975 (YongwuHe 2023-05-09 18:08:28 +0800 60)     }\n8abea975 (YongwuHe 2023-05-09 18:08:28 +0800 61) }\n",
            "commit_hashes": {
                "8abea975": "    feat: supports serialization to ignore specified fields (#112)"
            },
            "Commit&issueIDs": {
                "8abea975": [
                    "(#112)"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/112",
                "https://github.com/arextest/arex-agent-java/commit/8abea975"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-instrumentation-foundation/src/test/java/io/arex/foundation/serializer/GsonSerializerTest.java",
            "test_name": "testSqlDate",
            "FQS": "io.arex.foundation.serializer.GsonSerializerTest.testSqlDate()",
            "start_line": "25",
            "blame_result": "a715501a (YongwuHe 2023-05-25 14:34:38 +0800 26)         java.sql.Date expectedSqlDate = new java.sql.Date(System.currentTimeMillis());\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 27)         String expectedJson = GsonSerializer.INSTANCE.serialize(expectedSqlDate);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 28)         System.out.println(expectedJson);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 29)         java.util.Date actualSqlDate = GsonSerializer.INSTANCE.deserialize(expectedJson, java.sql.Date.class);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 30)         String actualJson = GsonSerializer.INSTANCE.serialize(actualSqlDate);\n",
            "commit_hashes": {
                "a715501a": "    fix: gson date deserialize error (#181)"
            },
            "Commit&issueIDs": {
                "a715501a": [
                    "(#181)"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/181",
                "https://github.com/arextest/arex-agent-java/commit/a715501a"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-instrumentation-foundation/src/test/java/io/arex/foundation/serializer/GsonSerializerTest.java",
            "test_name": "testSqlTime",
            "FQS": "io.arex.foundation.serializer.GsonSerializerTest.testSqlTime()",
            "start_line": "36",
            "blame_result": "a715501a (YongwuHe 2023-05-25 14:34:38 +0800 37)         Time expectedTime = new Time(System.currentTimeMillis());\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 38)         String expectedJson = GsonSerializer.INSTANCE.serialize(expectedTime);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 39)         System.out.println(expectedJson);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 40)         java.util.Date actualTime = GsonSerializer.INSTANCE.deserialize(expectedJson, Time.class);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 41)         String actualJson = GsonSerializer.INSTANCE.serialize(actualTime);\n",
            "commit_hashes": {
                "a715501a": "    fix: gson date deserialize error (#181)"
            },
            "Commit&issueIDs": {
                "a715501a": [
                    "(#181)"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/181",
                "https://github.com/arextest/arex-agent-java/commit/a715501a"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-instrumentation-foundation/src/test/java/io/arex/foundation/serializer/JacksonSerializerTest.java",
            "test_name": "testSqlDate",
            "FQS": "io.arex.foundation.serializer.JacksonSerializerTest.testSqlDate()",
            "start_line": "49",
            "blame_result": "a715501a (YongwuHe 2023-05-25 14:34:38 +0800 50)         java.sql.Date expectedSqlDate = new java.sql.Date(System.currentTimeMillis());\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 51)         String expectedJson = JacksonSerializer.INSTANCE.serialize(expectedSqlDate);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 52)         Thread.sleep(10);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 53)         System.out.println(expectedJson);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 54)         java.util.Date actualSqlDate = JacksonSerializer.INSTANCE.deserialize(expectedJson, java.sql.Date.class);\n",
            "commit_hashes": {
                "a715501a": "    fix: gson date deserialize error (#181)"
            },
            "Commit&issueIDs": {
                "a715501a": [
                    "(#181)"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/181",
                "https://github.com/arextest/arex-agent-java/commit/a715501a"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-instrumentation-foundation/src/test/java/io/arex/foundation/serializer/JacksonSerializerTest.java",
            "test_name": "testSqlTime",
            "FQS": "io.arex.foundation.serializer.JacksonSerializerTest.testSqlTime()",
            "start_line": "61",
            "blame_result": "a715501a (YongwuHe 2023-05-25 14:34:38 +0800 62)         Time expectedTime = new Time(System.currentTimeMillis());\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 63)         String expectedJson = JacksonSerializer.INSTANCE.serialize(expectedTime);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 64)         Thread.sleep(10);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 65)         System.out.println(expectedJson);\na715501a (YongwuHe 2023-05-25 14:34:38 +0800 66)         java.util.Date actualTime = JacksonSerializer.INSTANCE.deserialize(expectedJson, Time.class);\n",
            "commit_hashes": {
                "a715501a": "    fix: gson date deserialize error (#181)"
            },
            "Commit&issueIDs": {
                "a715501a": [
                    "(#181)"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/181",
                "https://github.com/arextest/arex-agent-java/commit/a715501a"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-instrumentation-foundation/src/test/java/io/arex/foundation/serializer/NumberStrategyTest.java",
            "test_name": "test",
            "FQS": "io.arex.foundation.serializer.NumberStrategyTest.test()",
            "start_line": "28",
            "blame_result": "5c1722846 arex-instrumentation-foundation/src/test/java/io/arex/foundation/serializer/custom/NumberStrategyTest.java (YongwuHe 2023-12-18 11:48:07 +0800 29)         NumberTest numberTest = new NumberTest();\n5c1722846 arex-instrumentation-foundation/src/test/java/io/arex/foundation/serializer/custom/NumberStrategyTest.java (YongwuHe 2023-12-18 11:48:07 +0800 30)         Map<String, Object> map = new HashMap<>();\n5c1722846 arex-instrumentation-foundation/src/test/java/io/arex/foundation/serializer/custom/NumberStrategyTest.java (YongwuHe 2023-12-18 11:48:07 +0800 31)         map.put(\"Integer\", 1);\n5c1722846 arex-instrumentation-foundation/src/test/java/io/arex/foundation/serializer/custom/NumberStrategyTest.java (YongwuHe 2023-12-18 11:48:07 +0800 32)         map.put(\"Double\", 1.1);\n5c1722846 arex-instrumentation-foundation/src/test/java/io/arex/foundation/serializer/custom/NumberStrategyTest.java (YongwuHe 2023-12-18 11:48:07 +0800 33)         map.put(\"Long\", 1111111111111111111L);\n",
            "commit_hashes": {
                "5c1722846": "    fix: object to number (#354)"
            },
            "Commit&issueIDs": {
                "5c1722846": [
                    "354"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/354",
                "https://github.com/arextest/arex-agent-java/commit/5c1722846"
            ]
        },
        {
            "poj_link": "https://github.com/arextest/arex-agent-java/",
            "file_path": "arextest/arex-agent-java/arex-instrumentation-foundation/src/test/java/io/arex/foundation/services/ConfigServiceTest.java",
            "test_name": "serialize",
            "FQS": "io.arex.foundation.services.ConfigServiceTest.serialize()",
            "start_line": "19",
            "blame_result": "ad38c481 (mr3        2023-05-08 16:21:49 +0800 20) import io.arex.foundation.util.NetUtils;\n18fcfc6c (Mark Zhang 2023-07-24 16:43:11 +0800 21) import io.arex.foundation.util.httpclient.AsyncHttpClientUtil;\nad38c481 (mr3        2023-05-08 16:21:49 +0800 22) import java.time.DayOfWeek;\nad38c481 (mr3        2023-05-08 16:21:49 +0800 23) import java.util.EnumSet;\n18fcfc6c (Mark Zhang 2023-07-24 16:43:11 +0800 24) import java.util.HashMap;\n",
            "commit_hashes": {
                "ad38c481": "    fix: optimize load agent config (#157)",
                "18fcfc6c": "    feat: add report agent status (#216)"
            },
            "Commit&issueIDs": {
                "ad38c481": [
                    "(#157)"
                ],
                "18fcfc6c": [
                    "(#216)"
                ]
            },
            "links": [
                "https://github.com/arextest/arex-agent-java/issues/157",
                "https://github.com/arextest/arex-agent-java/commit/ad38c481",
                "https://github.com/arextest/arex-agent-java/issues/216",
                "https://github.com/arextest/arex-agent-java/commit/18fcfc6c"
            ]
        },
        {
            "poj_link": "https://github.com/DataDog/java-dogstatsd-client/",
            "file_path": "DataDog/java-dogstatsd-client/src/test/java/com/timgroup/statsd/NonBlockingStatsDClientTest.java",
            "test_name": "testMessageHashcode",
            "FQS": "com.timgroup.statsd.NonBlockingStatsDClientTest.testMessageHashcode()",
            "start_line": "1519",
            "blame_result": "0eb2814d (Jaime Fullaondo 2021-09-29 23:40:07 -0400 1520) \n0eb2814d (Jaime Fullaondo 2021-09-29 23:40:07 -0400 1521)         StatsDTestMessage previous = new StatsDTestMessage<Long>(\"my.count\", Message.Type.COUNT, Long.valueOf(1), 0, new String[0]) {\n0eb2814d (Jaime Fullaondo 2021-09-29 23:40:07 -0400 1522)             @Override protected void writeValue(StringBuilder builder) {\n0eb2814d (Jaime Fullaondo 2021-09-29 23:40:07 -0400 1523)                 builder.append(this.value);\n0eb2814d (Jaime Fullaondo 2021-09-29 23:40:07 -0400 1524)             };\n",
            "commit_hashes": {
                "0eb2814d": "    [client] enable aggregation by default (#158)"
            },
            "Commit&issueIDs": {
                "0eb2814d": [
                    "158"
                ]
            },
            "links": [
                "https://github.com/DataDog/java-dogstatsd-client/issues/158",
                "https://github.com/DataDog/java-dogstatsd-client/commit/0eb2814d"
            ]
        },
        {
            "poj_link": "https://github.com/vdurmont/semver4j/",
            "file_path": "vdurmont/semver4j/src/test/java/com/vdurmont/semver4j/RangeTest.java",
            "test_name": "testHashCode",
            "FQS": "com.vdurmont.semver4j.RangeTest.testHashCode()",
            "start_line": "85",
            "blame_result": "^f19ef7d src/test/java/com/vdurmont/semver/RangeTest.java   (Vincent DURMONT  2015-04-26 11:45:18 -0700 86)         Range range = new Range(\"1.2.3\", Range.RangeOperator.EQ);\n^f19ef7d src/test/java/com/vdurmont/semver/RangeTest.java   (Vincent DURMONT  2015-04-26 11:45:18 -0700 87) \ncdbd3adb src/test/java/com/vdurmont/semver4j/RangeTest.java (Jochen Schalanda 2019-08-16 06:25:18 +0200 88)         assertEquals(range.hashCode(), range.hashCode());\ncdbd3adb src/test/java/com/vdurmont/semver4j/RangeTest.java (Jochen Schalanda 2019-08-16 06:25:18 +0200 89)         assertNotEquals(range.hashCode(), new Range(\"1.2.3\", Range.RangeOperator.GTE).hashCode());\ncdbd3adb src/test/java/com/vdurmont/semver4j/RangeTest.java (Jochen Schalanda 2019-08-16 06:25:18 +0200 90)         assertNotEquals(range.hashCode(), new Range(\"1.2.4\", Range.RangeOperator.EQ).hashCode());\n",
            "commit_hashes": {
                "f19ef7d": "    First commit",
                "cdbd3adb": "    Implement equals() and hashCode() for Range and Requirement (#34)"
            },
            "Commit&issueIDs": {
                "cdbd3adb": [
                    "(#34)"
                ]
            },
            "links": [
                "https://github.com/vdurmont/semver4j/issues/34",
                "https://github.com/vdurmont/semver4j/commit/cdbd3adb"
            ]
        },
        {
            "poj_link": "https://github.com/vdurmont/semver4j/",
            "file_path": "vdurmont/semver4j/src/test/java/com/vdurmont/semver4j/RequirementTest.java",
            "test_name": "testEquals",
            "FQS": "com.vdurmont.semver4j.RequirementTest.testEquals()",
            "start_line": "474",
            "blame_result": "cdbd3adb (Jochen Schalanda 2019-08-16 06:25:18 +0200 475)         Requirement requirement = Requirement.buildStrict(\"1.2.3\");\ncdbd3adb (Jochen Schalanda 2019-08-16 06:25:18 +0200 476) \ncdbd3adb (Jochen Schalanda 2019-08-16 06:25:18 +0200 477)         assertEquals(requirement, requirement);\ncdbd3adb (Jochen Schalanda 2019-08-16 06:25:18 +0200 478)         assertEquals(requirement, Requirement.buildStrict(\"1.2.3\"));\ncdbd3adb (Jochen Schalanda 2019-08-16 06:25:18 +0200 479)         assertEquals(requirement, Requirement.buildLoose(\"1.2.3\"));\n",
            "commit_hashes": {
                "cdbd3adb": "    Implement equals() and hashCode() for Range and Requirement (#34)"
            },
            "Commit&issueIDs": {
                "cdbd3adb": [
                    "(#34)"
                ]
            },
            "links": [
                "https://github.com/vdurmont/semver4j/issues/34",
                "https://github.com/vdurmont/semver4j/commit/cdbd3adb"
            ]
        },
        {
            "poj_link": "https://github.com/vdurmont/semver4j/",
            "file_path": "vdurmont/semver4j/src/test/java/com/vdurmont/semver4j/RequirementTest.java",
            "test_name": "testHashCode",
            "FQS": "com.vdurmont.semver4j.RequirementTest.testHashCode()",
            "start_line": "489",
            "blame_result": "cdbd3adb (Jochen Schalanda 2019-08-16 06:25:18 +0200 490)         Requirement requirement = Requirement.buildStrict(\"1.2.3\");\ncdbd3adb (Jochen Schalanda 2019-08-16 06:25:18 +0200 491) \ncdbd3adb (Jochen Schalanda 2019-08-16 06:25:18 +0200 492)         assertEquals(requirement.hashCode(), requirement.hashCode());\ncdbd3adb (Jochen Schalanda 2019-08-16 06:25:18 +0200 493)         assertEquals(requirement.hashCode(), Requirement.buildStrict(\"1.2.3\").hashCode());\ncdbd3adb (Jochen Schalanda 2019-08-16 06:25:18 +0200 494)         assertEquals(requirement.hashCode(), Requirement.buildLoose(\"1.2.3\").hashCode());\n",
            "commit_hashes": {
                "cdbd3adb": "    Implement equals() and hashCode() for Range and Requirement (#34)"
            },
            "Commit&issueIDs": {
                "cdbd3adb": [
                    "(#34)"
                ]
            },
            "links": [
                "https://github.com/vdurmont/semver4j/issues/34",
                "https://github.com/vdurmont/semver4j/commit/cdbd3adb"
            ]
        },
        {
            "poj_link": "https://github.com/twitter/GraphJet/",
            "file_path": "twitter/GraphJet/graphjet-core/src/test/java/com/twitter/graphjet/hashing/ShardedBigLongArrayTest.java",
            "test_name": "testSequentialReadWrites",
            "FQS": "com.twitter.graphjet.hashing.ShardedBigLongArrayTest.testSequentialReadWrites()",
            "start_line": "16",
            "blame_result": "7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 17)     int maxNumNodes = 1 << 16;\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 18)     int shardSize = 1 << 10;\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 19)     long nullEntry = -1L;\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 20)     BigLongArray shardedBigLongArray = new ShardedBigLongArray(\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 21)       maxNumNodes / 16, shardSize, nullEntry, new NullStatsReceiver());\n",
            "commit_hashes": {
                "7cdc26cb": "    Jjiang/add big long array (#75)"
            },
            "Commit&issueIDs": {
                "7cdc26cb": [
                    "(#75)"
                ]
            },
            "links": [
                "https://github.com/twitter/GraphJet/issues/75",
                "https://github.com/twitter/GraphJet/commit/7cdc26cb"
            ]
        },
        {
            "poj_link": "https://github.com/twitter/GraphJet/",
            "file_path": "twitter/GraphJet/graphjet-core/src/test/java/com/twitter/graphjet/hashing/ShardedBigLongArrayTest.java",
            "test_name": "testIntegerRandomReadWrites",
            "FQS": "com.twitter.graphjet.hashing.ShardedBigLongArrayTest.testIntegerRandomReadWrites()",
            "start_line": "37",
            "blame_result": "7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 38)     int maxNumNodes = 1 << 16;\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 39)     int shardSize = 1 << 10;\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 40)     long nullEntry = -1L;\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 41)     List<Integer> indexList = Lists.newArrayListWithCapacity(maxNumNodes);\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 42)     BigLongArray shardedBigLongArray = new ShardedBigLongArray(\n",
            "commit_hashes": {
                "7cdc26cb": "    Jjiang/add big long array (#75)"
            },
            "Commit&issueIDs": {
                "7cdc26cb": [
                    "(#75)"
                ]
            },
            "links": [
                "https://github.com/twitter/GraphJet/issues/75",
                "https://github.com/twitter/GraphJet/commit/7cdc26cb"
            ]
        },
        {
            "poj_link": "https://github.com/twitter/GraphJet/",
            "file_path": "twitter/GraphJet/graphjet-core/src/test/java/com/twitter/graphjet/hashing/ShardedBigLongArrayTest.java",
            "test_name": "testLongRandomReadWrites",
            "FQS": "com.twitter.graphjet.hashing.ShardedBigLongArrayTest.testLongRandomReadWrites()",
            "start_line": "67",
            "blame_result": "7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 68)     int maxNumNodes = 1 << 16;\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 69)     int shardSize = 1 << 10;\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 70)     long nullEntry = -1L;\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 71)     List<Integer> indexList = Lists.newArrayListWithCapacity(maxNumNodes);\n7cdc26cb (Jerry Jiang 2017-05-03 13:55:42 -0700 72)     BigLongArray shardedBigLongArray = new ShardedBigLongArray(\n",
            "commit_hashes": {
                "7cdc26cb": "    Jjiang/add big long array (#75)"
            },
            "Commit&issueIDs": {
                "7cdc26cb": [
                    "(#75)"
                ]
            },
            "links": [
                "https://github.com/twitter/GraphJet/issues/75",
                "https://github.com/twitter/GraphJet/commit/7cdc26cb"
            ]
        },
        {
            "poj_link": "https://github.com/intuit/wasabi/",
            "file_path": "intuit/wasabi/modules/repository-datastax/src/test/java/com/intuit/wasabi/repository/cassandra/impl/CassandraAuthorizationRepositoryTest.java",
            "test_name": "getAppSpecificPermissionSingleElementTest",
            "FQS": "com.intuit.wasabi.repository.cassandra.impl.CassandraAuthorizationRepositoryTest.getAppSpecificPermissionSingleElementTest()",
            "start_line": "601",
            "blame_result": "1b426cef2 (Nilesh 2017-01-11 15:10:42 -0800 602)         Optional<Application.Name> testApp = Optional.ofNullable(Application.Name.valueOf(\"TestApp\"));\n1b426cef2 (Nilesh 2017-01-11 15:10:42 -0800 603)         List<com.intuit.wasabi.repository.cassandra.pojo.UserRole> expected = new ArrayList<>();\n1b426cef2 (Nilesh 2017-01-11 15:10:42 -0800 604)         expected.add(UserRole.builder()\n1b426cef2 (Nilesh 2017-01-11 15:10:42 -0800 605)                 .userId(\"user1\")\n1b426cef2 (Nilesh 2017-01-11 15:10:42 -0800 606)                 .role(Role.READONLY.name())\n",
            "commit_hashes": {
                "1b426cef2": "    Feature/repository datastax migration (#152)"
            },
            "Commit&issueIDs": {
                "1b426cef2": [
                    "(#152)"
                ]
            },
            "links": [
                "https://github.com/intuit/wasabi/issues/152",
                "https://github.com/intuit/wasabi/commit/1b426cef2"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-lang/",
            "file_path": "apache/commons-lang/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java",
            "test_name": "testRandomParameter",
            "FQS": "org.apache.commons.lang3.RandomStringUtilsTest.testRandomParameter()",
            "start_line": "745",
            "blame_result": "de3614e3dc (Gary Gregory   2021-02-02 17:40:29 -0500 746)         final long seedMillis = System.currentTimeMillis();\nc95ee37dff (Gary Gregory   2024-07-25 19:38:15 -0400 747)         final String r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seedMillis));\nc95ee37dff (Gary Gregory   2024-07-25 19:38:15 -0400 748)         final String r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seedMillis));\ne99b0dde8e (Allon Mureinik 2018-10-11 16:21:52 +0300 749)         assertEquals(r1, r2, \"r1.equals(r2)\");\nc95ee37dff (Gary Gregory   2024-07-25 19:38:15 -0400 750)     }\n",
            "commit_hashes": {
                "de3614e3dc": "    Use the scale in the var name.",
                "c95ee37dff": "    Feature/randomutils secure() and insecure() (#1250)",
                "e99b0dde8e": "    Update tests to JUnit Jupiter (closes #375)"
            },
            "Commit&issueIDs": {
                "c95ee37dff": [
                    "1250"
                ]
            },
            "links": [
                "https://github.com/apache/commons-lang/issues/1250",
                "https://github.com/apache/commons-lang/commit/c95ee37dff"
            ]
        },
        {
            "poj_link": "https://github.com/aws/event-ruler/",
            "file_path": "aws/event-ruler/src/test/software/amazon/event/ruler/ByteMapTest.java",
            "test_name": "testGetTransition",
            "FQS": "software.amazon.event.ruler.ByteMapTest.testGetTransition()",
            "start_line": "296",
            "blame_result": "a771cdef (jonessha 2022-08-22 17:09:49 -0600 297)         map.addTransition((byte) 'b', trans1);\na771cdef (jonessha 2022-08-22 17:09:49 -0600 298)         assertNull(map.getTransition((byte) 'a'));\na771cdef (jonessha 2022-08-22 17:09:49 -0600 299) \na771cdef (jonessha 2022-08-22 17:09:49 -0600 300)         map.addTransition((byte) 'a', trans1);\na771cdef (jonessha 2022-08-22 17:09:49 -0600 301)         assertEquals(trans1, map.getTransition((byte) 'a'));\n",
            "commit_hashes": {
                "a771cdef": "    Adding wildcard matcher (#18)"
            },
            "Commit&issueIDs": {
                "a771cdef": [
                    "(#18)"
                ]
            },
            "links": [
                "https://github.com/aws/event-ruler/issues/18",
                "https://github.com/aws/event-ruler/commit/a771cdef"
            ]
        },
        {
            "poj_link": "https://github.com/aws/event-ruler/",
            "file_path": "aws/event-ruler/src/test/software/amazon/event/ruler/ByteMapTest.java",
            "test_name": "testToString",
            "FQS": "software.amazon.event.ruler.ByteMapTest.testToString()",
            "start_line": "373",
            "blame_result": "a771cdef (jonessha 2022-08-22 17:09:49 -0600 374)         map.addTransition((byte) 'a', trans1);\na771cdef (jonessha 2022-08-22 17:09:49 -0600 375)         map.addTransition((byte) 'b', trans2);\na771cdef (jonessha 2022-08-22 17:09:49 -0600 376)         map.addTransition((byte) 'b', trans3);\na771cdef (jonessha 2022-08-22 17:09:49 -0600 377)         // Don't know which order the 'b' transitions will be listed, so accept either.\na771cdef (jonessha 2022-08-22 17:09:49 -0600 378)         String toString = map.toString();\n",
            "commit_hashes": {
                "a771cdef": "    Adding wildcard matcher (#18)"
            },
            "Commit&issueIDs": {
                "a771cdef": [
                    "(#18)"
                ]
            },
            "links": [
                "https://github.com/aws/event-ruler/issues/18",
                "https://github.com/aws/event-ruler/commit/a771cdef"
            ]
        },
        {
            "poj_link": "https://github.com/aws/event-ruler/",
            "file_path": "aws/event-ruler/src/test/software/amazon/event/ruler/NameStateTest.java",
            "test_name": "testNextNameStateWithAdditionalNameStateReuse",
            "FQS": "software.amazon.event.ruler.NameStateTest.testNextNameStateWithAdditionalNameStateReuse()",
            "start_line": "120",
            "blame_result": "1928acc8 (jonessha 2023-05-23 15:12:26 -0600 121)         NameState nameState = new NameState();\n41572f6c (jonessha 2023-11-20 17:04:04 -0700 122)         NameState nextNameState = new NameState();\n68bdcd4c (jonessha 2024-01-22 10:16:45 -0700 123)         nameState.addNextNameState(\"key\", nextNameState);\n41572f6c (jonessha 2023-11-20 17:04:04 -0700 124)         assertEquals(nextNameState, nameState.getNextNameState(\"key\"));\n68bdcd4c (jonessha 2024-01-22 10:16:45 -0700 125)         nameState.removeNextNameState(\"key\");\n",
            "commit_hashes": {
                "1928acc8": "    Exponential memory improvement by re-using NameState across multiple patterns (#88)",
                "41572f6c": "    Adding optional Configuration to Machine that can be used to enable a\u2026 (#125)",
                "68bdcd4c": "    Fixing bug where sub-rule would not be considered new if its keys and\u2026 (#140)"
            },
            "Commit&issueIDs": {
                "1928acc8": [
                    "(#88)"
                ],
                "41572f6c": [
                    "(#125)"
                ],
                "68bdcd4c": [
                    "(#140)"
                ]
            },
            "links": [
                "https://github.com/aws/event-ruler/issues/88",
                "https://github.com/aws/event-ruler/commit/1928acc8",
                "https://github.com/aws/event-ruler/issues/125",
                "https://github.com/aws/event-ruler/commit/41572f6c",
                "https://github.com/aws/event-ruler/issues/140",
                "https://github.com/aws/event-ruler/commit/68bdcd4c"
            ]
        },
        {
            "poj_link": "https://github.com/aws/event-ruler/",
            "file_path": "aws/event-ruler/src/test/software/amazon/event/ruler/NameStateWithPatternTest.java",
            "test_name": "testEquals",
            "FQS": "software.amazon.event.ruler.NameStateWithPatternTest.testEquals()",
            "start_line": "36",
            "blame_result": "1928acc8 (jonessha      2023-05-23 15:12:26 -0600 37)         NameState nameState1 = new NameState();\n1928acc8 (jonessha      2023-05-23 15:12:26 -0600 38)         NameState nameState2 = new NameState();\n1928acc8 (jonessha      2023-05-23 15:12:26 -0600 39)         Patterns pattern1 = Patterns.exactMatch(\"abc\");\n1928acc8 (jonessha      2023-05-23 15:12:26 -0600 40)         Patterns pattern2 = Patterns.exactMatch(\"def\");\n431a6ede (Rishi Baldawa 2024-07-11 10:44:22 -0700 41)         assertEquals(new NameStateWithPattern(nameState1, pattern1), new NameStateWithPattern(nameState1, pattern1));\n",
            "commit_hashes": {
                "1928acc8": "    Exponential memory improvement by re-using NameState across multiple patterns (#88)",
                "431a6ede": "    Cleaning up code based on IDE / autoamted tools (#169)"
            },
            "Commit&issueIDs": {
                "1928acc8": [
                    "88"
                ],
                "431a6ede": [
                    "169"
                ]
            },
            "links": [
                "https://github.com/aws/event-ruler/issues/88",
                "https://github.com/aws/event-ruler/commit/1928acc8",
                "https://github.com/aws/event-ruler/issues/169",
                "https://github.com/aws/event-ruler/commit/431a6ede"
            ]
        },
        {
            "poj_link": "https://github.com/aws/event-ruler/",
            "file_path": "aws/event-ruler/src/test/software/amazon/event/ruler/NameStateWithPatternTest.java",
            "test_name": "testHashCode",
            "FQS": "software.amazon.event.ruler.NameStateWithPatternTest.testHashCode()",
            "start_line": "52",
            "blame_result": "1928acc8 (jonessha 2023-05-23 15:12:26 -0600 53)         NameState nameState1 = new NameState();\n1928acc8 (jonessha 2023-05-23 15:12:26 -0600 54)         NameState nameState2 = new NameState();\n1928acc8 (jonessha 2023-05-23 15:12:26 -0600 55)         Patterns pattern1 = Patterns.exactMatch(\"abc\");\n1928acc8 (jonessha 2023-05-23 15:12:26 -0600 56)         Patterns pattern2 = Patterns.exactMatch(\"def\");\n1928acc8 (jonessha 2023-05-23 15:12:26 -0600 57)         assertEquals(new NameStateWithPattern(nameState1, pattern1).hashCode(),\n",
            "commit_hashes": {
                "1928acc8": "    Exponential memory improvement by re-using NameState across multiple patterns (#88)"
            },
            "Commit&issueIDs": {
                "1928acc8": [
                    "(#88)"
                ]
            },
            "links": [
                "https://github.com/aws/event-ruler/issues/88",
                "https://github.com/aws/event-ruler/commit/1928acc8"
            ]
        },
        {
            "poj_link": "https://github.com/aws/event-ruler/",
            "file_path": "aws/event-ruler/src/test/software/amazon/event/ruler/SubRuleContextTest.java",
            "test_name": "testEquals",
            "FQS": "software.amazon.event.ruler.SubRuleContextTest.testEquals()",
            "start_line": "54",
            "blame_result": "1928acc8 (jonessha 2023-05-23 15:12:26 -0600 55)         SubRuleContext.Generator generatorA = new SubRuleContext.Generator();\n68bdcd4c (jonessha 2024-01-22 10:16:45 -0700 56)         SubRuleContext contextA1 = generatorA.generate(NAME);\n68bdcd4c (jonessha 2024-01-22 10:16:45 -0700 57)         SubRuleContext contextA2 = generatorA.generate(NAME);\n1928acc8 (jonessha 2023-05-23 15:12:26 -0600 58) \n1928acc8 (jonessha 2023-05-23 15:12:26 -0600 59)         SubRuleContext.Generator generatorB = new SubRuleContext.Generator();\n",
            "commit_hashes": {
                "1928acc8": "    Exponential memory improvement by re-using NameState across multiple patterns (#88)",
                "68bdcd4c": "    Fixing bug where sub-rule would not be considered new if its keys and\u2026 (#140)"
            },
            "Commit&issueIDs": {
                "1928acc8": [
                    "(#88)"
                ],
                "68bdcd4c": [
                    "(#140)"
                ]
            },
            "links": [
                "https://github.com/aws/event-ruler/issues/88",
                "https://github.com/aws/event-ruler/commit/1928acc8",
                "https://github.com/aws/event-ruler/issues/140",
                "https://github.com/aws/event-ruler/commit/68bdcd4c"
            ]
        },
        {
            "poj_link": "https://github.com/aws/event-ruler/",
            "file_path": "aws/event-ruler/src/test/software/amazon/event/ruler/SubRuleContextTest.java",
            "test_name": "testHashCode",
            "FQS": "software.amazon.event.ruler.SubRuleContextTest.testHashCode()",
            "start_line": "67",
            "blame_result": "1928acc8 (jonessha 2023-05-23 15:12:26 -0600 68)         SubRuleContext.Generator generatorA = new SubRuleContext.Generator();\n68bdcd4c (jonessha 2024-01-22 10:16:45 -0700 69)         SubRuleContext contextA1 = generatorA.generate(NAME);\n68bdcd4c (jonessha 2024-01-22 10:16:45 -0700 70)         SubRuleContext contextA2 = generatorA.generate(NAME);\n1928acc8 (jonessha 2023-05-23 15:12:26 -0600 71) \n1928acc8 (jonessha 2023-05-23 15:12:26 -0600 72)         SubRuleContext.Generator generatorB = new SubRuleContext.Generator();\n",
            "commit_hashes": {
                "1928acc8": "    Exponential memory improvement by re-using NameState across multiple patterns (#88)",
                "68bdcd4c": "    Fixing bug where sub-rule would not be considered new if its keys and\u2026 (#140)"
            },
            "Commit&issueIDs": {
                "1928acc8": [
                    "(#88)"
                ],
                "68bdcd4c": [
                    "(#140)"
                ]
            },
            "links": [
                "https://github.com/aws/event-ruler/issues/88",
                "https://github.com/aws/event-ruler/commit/1928acc8",
                "https://github.com/aws/event-ruler/issues/140",
                "https://github.com/aws/event-ruler/commit/68bdcd4c"
            ]
        },
        {
            "poj_link": "https://github.com/aws/event-ruler/",
            "file_path": "aws/event-ruler/src/test/software/amazon/event/ruler/input/InputMultiByteSetTest.java",
            "test_name": "testHashCode",
            "FQS": "software.amazon.event.ruler.input.InputMultiByteSetTest.testHashCode()",
            "start_line": "47",
            "blame_result": "a771cdef (jonessha 2022-08-22 17:09:49 -0600 48)         InputMultiByteSet setA1 = new InputMultiByteSet(new HashSet<>(Arrays.asList(new MultiByte((byte) 'a'))));\na771cdef (jonessha 2022-08-22 17:09:49 -0600 49)         InputMultiByteSet setA2 = new InputMultiByteSet(new HashSet<>(Arrays.asList(new MultiByte((byte) 'a'))));\na771cdef (jonessha 2022-08-22 17:09:49 -0600 50)         InputMultiByteSet setB = new InputMultiByteSet(new HashSet<>(Arrays.asList(new MultiByte((byte) 'b'))));\na771cdef (jonessha 2022-08-22 17:09:49 -0600 51)         assertEquals(setA1.hashCode(), setA2.hashCode());\na771cdef (jonessha 2022-08-22 17:09:49 -0600 52)         assertNotEquals(setA1.hashCode(), setB.hashCode());\n",
            "commit_hashes": {
                "a771cdef": "    Adding wildcard matcher (#18)"
            },
            "Commit&issueIDs": {
                "a771cdef": [
                    "(#18)"
                ]
            },
            "links": [
                "https://github.com/aws/event-ruler/issues/18",
                "https://github.com/aws/event-ruler/commit/a771cdef"
            ]
        },
        {
            "poj_link": "https://github.com/aws/event-ruler/",
            "file_path": "aws/event-ruler/src/test/software/amazon/event/ruler/input/MultiByteTest.java",
            "test_name": "testHashCode",
            "FQS": "software.amazon.event.ruler.input.MultiByteTest.testHashCode()",
            "start_line": "121",
            "blame_result": "a771cdef (jonessha 2022-08-22 17:09:49 -0600 122)         assertEquals(new MultiByte((byte) 'a').hashCode(), new MultiByte((byte) 'a').hashCode());\na771cdef (jonessha 2022-08-22 17:09:49 -0600 123)         assertNotEquals(new MultiByte((byte) 'a').hashCode(), new MultiByte((byte) 'b').hashCode());\na771cdef (jonessha 2022-08-22 17:09:49 -0600 124)     }\na771cdef (jonessha 2022-08-22 17:09:49 -0600 125) }\n",
            "commit_hashes": {
                "a771cdef": "    Adding wildcard matcher (#18)"
            },
            "Commit&issueIDs": {
                "a771cdef": [
                    "(#18)"
                ]
            },
            "links": [
                "https://github.com/aws/event-ruler/issues/18",
                "https://github.com/aws/event-ruler/commit/a771cdef"
            ]
        },
        {
            "poj_link": "https://github.com/Adobe-Consulting-Services/acs-aem-commons/",
            "file_path": "Adobe-Consulting-Services/acs-aem-commons/bundle/src/test/java/com/adobe/acs/commons/redirects/models/RedirectRuleTest.java",
            "test_name": "testEquals",
            "FQS": "com.adobe.acs.commons.redirects.models.RedirectRuleTest.testEquals()",
            "start_line": "102",
            "blame_result": "4f1ae0689d (Yegor Kozlov 2021-03-13 22:20:45 +0300 103)         Map<String, Object> props = MapUtil.toMap(\"source\", \"/content/we-retail/en/one\",\n4f1ae0689d (Yegor Kozlov 2021-03-13 22:20:45 +0300 104)                 \"target\", \"/content/we-retail/en/two\",\n4f1ae0689d (Yegor Kozlov 2021-03-13 22:20:45 +0300 105)                 \"statusCode\", 302,\n4f1ae0689d (Yegor Kozlov 2021-03-13 22:20:45 +0300 106)                 \"untilDate\", \"11 January 2021\");\n4f1ae0689d (Yegor Kozlov 2021-03-13 22:20:45 +0300 107) \n",
            "commit_hashes": {
                "4f1ae0689d": "    ACS Redirect Manager (#2513)"
            },
            "Commit&issueIDs": {
                "4f1ae0689d": [
                    "(#2513)"
                ]
            },
            "links": [
                "https://github.com/Adobe-Consulting-Services/acs-aem-commons/issues/2513",
                "https://github.com/Adobe-Consulting-Services/acs-aem-commons/commit/4f1ae0689d"
            ]
        },
        {
            "poj_link": "https://github.com/Adobe-Consulting-Services/acs-aem-commons/",
            "file_path": "Adobe-Consulting-Services/acs-aem-commons/bundle/src/test/java/com/adobe/acs/commons/synth/impl/SynthesizedSlingHttpServletRequestTest.java",
            "test_name": "test_getAndSetMethod",
            "FQS": "com.adobe.acs.commons.synth.impl.SynthesizedSlingHttpServletRequestTest.test_getAndSetMethod()",
            "start_line": "48",
            "blame_result": "1a25b35360 (Nicholaus Chipping 2021-12-13 14:51:36 -0700 49)         String newMethod = HttpMethod.POST.toString();\n1a25b35360 (Nicholaus Chipping 2021-12-13 14:51:36 -0700 50)         Assert.assertEquals(synthesizedSlingHttpServletRequest.getMethod(), HttpMethod.GET.toString());\n1a25b35360 (Nicholaus Chipping 2021-12-13 14:51:36 -0700 51)         synthesizedSlingHttpServletRequest.setMethod(newMethod);\n1a25b35360 (Nicholaus Chipping 2021-12-13 14:51:36 -0700 52)         Assert.assertEquals(synthesizedSlingHttpServletRequest.getMethod(), newMethod);\n1a25b35360 (Nicholaus Chipping 2021-12-13 14:51:36 -0700 53)     }\n",
            "commit_hashes": {
                "1a25b35360": "    #2658 fix removing implementation of requestpathinfo (#2750)"
            },
            "Commit&issueIDs": {
                "1a25b35360": [
                    "#2658",
                    "(#2750)"
                ]
            },
            "links": [
                "https://github.com/Adobe-Consulting-Services/acs-aem-commons/issues/2658",
                "https://github.com/Adobe-Consulting-Services/acs-aem-commons/commit/1a25b35360"
            ]
        },
        {
            "poj_link": "https://github.com/Adobe-Consulting-Services/acs-aem-commons/",
            "file_path": "Adobe-Consulting-Services/acs-aem-commons/bundle/src/test/java/com/adobe/acs/commons/wcm/comparisons/impl/PageCompareDataLineImplTest.java",
            "test_name": "hashCode_sameValues_sameHashCode",
            "FQS": "com.adobe.acs.commons.wcm.comparisons.impl.PageCompareDataLineImplTest.hashCode_sameValues_sameHashCode()",
            "start_line": "140",
            "blame_result": "e31e6fee29 (Dominik F\u00f6rderreuther 2017-03-14 15:10:14 +0100 141)         // given\ne31e6fee29 (Dominik F\u00f6rderreuther 2017-03-14 15:10:14 +0100 142)         Property property = mockProperty(\"myValue\", \"/base/path/relative/path/jcr:content\", \"propertyName\");\ne31e6fee29 (Dominik F\u00f6rderreuther 2017-03-14 15:10:14 +0100 143)         Property property2 = mockProperty(\"myValue\", \"/base/path/relative/path/jcr:content\", \"propertyName\");\ne31e6fee29 (Dominik F\u00f6rderreuther 2017-03-14 15:10:14 +0100 144) \ne31e6fee29 (Dominik F\u00f6rderreuther 2017-03-14 15:10:14 +0100 145)         // when\n",
            "commit_hashes": {
                "e31e6fee29": "    Feature/page compare (#915)"
            },
            "Commit&issueIDs": {
                "e31e6fee29": [
                    "(#915)"
                ]
            },
            "links": [
                "https://github.com/Adobe-Consulting-Services/acs-aem-commons/issues/915",
                "https://github.com/Adobe-Consulting-Services/acs-aem-commons/commit/e31e6fee29"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/geography/atlas/change/MemberMergeStrategiesTest.java",
            "test_name": "testConflictingBeforeViewRelationBeanMergeSuccess",
            "FQS": "org.openstreetmap.atlas.geography.atlas.change.MemberMergeStrategiesTest.testConflictingBeforeViewRelationBeanMergeSuccess()",
            "start_line": "107",
            "blame_result": "3c79e5998 (lucaspcram 2019-04-19 07:53:01 -0700 108)     {\n3c79e5998 (lucaspcram 2019-04-19 07:53:01 -0700 109)         final RelationBean beforeBean1 = new RelationBean();\n3c79e5998 (lucaspcram 2019-04-19 07:53:01 -0700 110)         beforeBean1.addItem(new RelationBeanItem(1L, \"lineRole1\", ItemType.LINE));\n3c79e5998 (lucaspcram 2019-04-19 07:53:01 -0700 111)         beforeBean1.addItem(new RelationBeanItem(2L, \"lineRole2\", ItemType.LINE));\n3c79e5998 (lucaspcram 2019-04-19 07:53:01 -0700 112)         beforeBean1.addItem(new RelationBeanItem(3L, \"lineRole3\", ItemType.LINE));\n",
            "commit_hashes": {
                "3c79e5998": "    Conflicting beforeView forgiveness for Relations (#418)"
            },
            "Commit&issueIDs": {
                "3c79e5998": [
                    "(#418)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/418",
                "https://github.com/osmlab/atlas/commit/3c79e5998"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/geography/atlas/change/MemberMergeStrategiesTest.java",
            "test_name": "testDiffBasedRelationBeanMergeSuccess",
            "FQS": "org.openstreetmap.atlas.geography.atlas.change.MemberMergeStrategiesTest.testDiffBasedRelationBeanMergeSuccess()",
            "start_line": "592",
            "blame_result": "8f02aa576 (lucaspcram 2019-03-29 10:07:42 -0700 593)     {\n8f02aa576 (lucaspcram 2019-03-29 10:07:42 -0700 594)         final RelationBean beforeBean = new RelationBean();\n8f02aa576 (lucaspcram 2019-03-29 10:07:42 -0700 595)         beforeBean.addItem(new RelationBeanItem(1L, \"pointRole1\", ItemType.POINT));\n8f02aa576 (lucaspcram 2019-03-29 10:07:42 -0700 596)         beforeBean.addItem(new RelationBeanItem(2L, \"pointRole2\", ItemType.POINT));\n8f02aa576 (lucaspcram 2019-03-29 10:07:42 -0700 597)         beforeBean.addItem(new RelationBeanItem(3L, \"pointRole3\", ItemType.POINT));\n",
            "commit_hashes": {
                "8f02aa576": "    FeatureChange now supports a beforeView for more robust merging (#393)"
            },
            "Commit&issueIDs": {
                "8f02aa576": [
                    "(#393)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/393",
                "https://github.com/osmlab/atlas/commit/8f02aa576"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/tags/filters/matcher/parsing/ParserTest.java",
            "test_name": "testParentheticalChanges",
            "FQS": "org.openstreetmap.atlas.tags.filters.matcher.parsing.ParserTest.testParentheticalChanges()",
            "start_line": "142",
            "blame_result": "b35f4e9f2 (lucaspcram 2020-12-14 14:05:08 -0800 143)     {\nb35f4e9f2 (lucaspcram 2020-12-14 14:05:08 -0800 144)         final String input1 = \"foo = bar | (baz = bat & hello = world)\";\nb35f4e9f2 (lucaspcram 2020-12-14 14:05:08 -0800 145)         final String expected1 = \"OR_4\\n\" + \"OR_4 left: EQ_0\\n\" + \"OR_4 right: AND_3\\n\" + \"EQ_0\\n\"\nb35f4e9f2 (lucaspcram 2020-12-14 14:05:08 -0800 146)                 + \"EQ_0 left: foo_0\\n\" + \"EQ_0 right: bar_1\\n\" + \"foo_0\\n\" + \"bar_1\\n\" + \"AND_3\\n\"\nb35f4e9f2 (lucaspcram 2020-12-14 14:05:08 -0800 147)                 + \"AND_3 left: EQ_1\\n\" + \"AND_3 right: EQ_2\\n\" + \"EQ_1\\n\" + \"EQ_1 left: baz_2\\n\"\n",
            "commit_hashes": {
                "b35f4e9f2": "    TaggableFilters overhauled with new TaggableMatcher class (#711)"
            },
            "Commit&issueIDs": {
                "b35f4e9f2": [
                    "(#711)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/711",
                "https://github.com/osmlab/atlas/commit/b35f4e9f2"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/utilities/collections/IterablesTest.java",
            "test_name": "testLast",
            "FQS": "org.openstreetmap.atlas.utilities.collections.IterablesTest.testLast()",
            "start_line": "151",
            "blame_result": "4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 152)     {\n4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 153)         // As list\n^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 154)         final List<Integer> input = new ArrayList<>();\n^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 155)         input.add(1);\n^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 156)         input.add(2);\n",
            "commit_hashes": {
                "4cfd62841": "    Apply a set of changes to an Atlas as a view (#300)",
                "1dbcbe58": "    Initial import"
            },
            "Commit&issueIDs": {
                "4cfd62841": [
                    "(#300)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/300",
                "https://github.com/osmlab/atlas/commit/4cfd62841"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/utilities/collections/MapsTest.java",
            "test_name": "testWithMaps",
            "FQS": "org.openstreetmap.atlas.utilities.collections.MapsTest.testWithMaps()",
            "start_line": "20",
            "blame_result": "4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 21)     {\n4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 22)         final Map<String, String> map1 = Maps.hashMap(\"key1\", \"value1\");\n4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 23)         final Map<String, String> map2 = Maps.hashMap(\"key2\", \"value2\");\n4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 24)         final Map<String, String> result = Maps.hashMap(\"key1\", \"value1\", \"key2\", \"value2\");\n4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 25) \n",
            "commit_hashes": {
                "4cfd62841": "    Apply a set of changes to an Atlas as a view (#300)"
            },
            "Commit&issueIDs": {
                "4cfd62841": [
                    "(#300)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/300",
                "https://github.com/osmlab/atlas/commit/4cfd62841"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/utilities/collections/SetsTest.java",
            "test_name": "testWithSets",
            "FQS": "org.openstreetmap.atlas.utilities.collections.SetsTest.testWithSets()",
            "start_line": "20",
            "blame_result": "4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 21)     {\n4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 22)         final Set<String> set1 = Sets.hashSet(\"key1\");\n4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 23)         final Set<String> set2 = Sets.hashSet(\"key2\");\n4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 24)         final Set<String> result = Sets.hashSet(\"key1\", \"key2\");\n4cfd62841 (matthieun 2018-12-12 09:47:54 -0800 25) \n",
            "commit_hashes": {
                "4cfd62841": "    Apply a set of changes to an Atlas as a view (#300)"
            },
            "Commit&issueIDs": {
                "4cfd62841": [
                    "(#300)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/300",
                "https://github.com/osmlab/atlas/commit/4cfd62841"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/utilities/conversion/HexStringByteArrayConverterTest.java",
            "test_name": "testConversion",
            "FQS": "org.openstreetmap.atlas.utilities.conversion.HexStringByteArrayConverterTest.testConversion()",
            "start_line": "14",
            "blame_result": "daeeae0a7 (matthieun 2020-08-04 10:01:16 -0700 15)     {\ndaeeae0a7 (matthieun 2020-08-04 10:01:16 -0700 16)         final String hex = \"0103000000020000000600000036A094FF7FBA\";\ndaeeae0a7 (matthieun 2020-08-04 10:01:16 -0700 17)         final byte[] bytes2 = HEX_STRING_BYTE_ARRAY_CONVERTER.convert(hex);\ndaeeae0a7 (matthieun 2020-08-04 10:01:16 -0700 18)         final String hex2 = HEX_STRING_BYTE_ARRAY_CONVERTER.backwardConvert(bytes2);\ndaeeae0a7 (matthieun 2020-08-04 10:01:16 -0700 19)         Assert.assertEquals(hex, hex2);\n",
            "commit_hashes": {
                "daeeae0a7": "    Allow ConfiguredFilter to filter on geometry (#660)"
            },
            "Commit&issueIDs": {
                "daeeae0a7": [
                    "(#660)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/660",
                "https://github.com/osmlab/atlas/commit/daeeae0a7"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/utilities/scalars/DistanceTest.java",
            "test_name": "testConversion",
            "FQS": "org.openstreetmap.atlas.utilities.scalars.DistanceTest.testConversion()",
            "start_line": "22",
            "blame_result": "^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 23)     {\n^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 24)         final Distance tenMiles = Distance.miles(10);\n5ca51b513 (matthieun 2018-09-12 13:41:24 -0700 25)         Assert.assertEquals(16093440.0, tenMiles.asMillimeters(), 5);\n^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 26)         Assert.assertEquals(52800.0, tenMiles.asFeet(), 0);\n^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 27)         Assert.assertEquals(16.09344, tenMiles.asKilometers(), 0);\n",
            "commit_hashes": {
                "1dbcbe58": "    Initial import",
                "5ca51b513": "    Double precision in Distance (#213)"
            },
            "Commit&issueIDs": {
                "5ca51b513": [
                    "(#213)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/213",
                "https://github.com/osmlab/atlas/commit/5ca51b513"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/utilities/scalars/DistanceTest.java",
            "test_name": "testEquals",
            "FQS": "org.openstreetmap.atlas.utilities.scalars.DistanceTest.testEquals()",
            "start_line": "71",
            "blame_result": "^1dbcbe58 (matthieun  2017-08-08 10:16:12 -0700 72)     {\n4b8219eb9 (lucaspcram 2020-09-21 16:59:58 -0700 73)         Assert.assertEquals(Distance.meters(1000.001), Distance.meters(1000.001));\n4b8219eb9 (lucaspcram 2020-09-21 16:59:58 -0700 74)         Assert.assertNotEquals(Distance.meters(1000.001), Distance.meters(1000.002));\n^1dbcbe58 (matthieun  2017-08-08 10:16:12 -0700 75)     }\n^1dbcbe58 (matthieun  2017-08-08 10:16:12 -0700 76) }\n",
            "commit_hashes": {
                "1dbcbe58": "    Initial import",
                "4b8219eb9": "    Capped Rectangle expansion at geographic poles (#671)"
            },
            "Commit&issueIDs": {
                "4b8219eb9": [
                    "(#671)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/671",
                "https://github.com/osmlab/atlas/commit/4b8219eb9"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/utilities/scalars/DurationTest.java",
            "test_name": "testEquals",
            "FQS": "org.openstreetmap.atlas.utilities.scalars.DurationTest.testEquals()",
            "start_line": "30",
            "blame_result": "^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 31)     {\n2cdc299c0 (matthieun 2019-08-12 13:05:17 -0700 32)         Assert.assertEquals(Duration.seconds(3600), Duration.hours(1));\n2cdc299c0 (matthieun 2019-08-12 13:05:17 -0700 33)         Assert.assertNotEquals(Duration.seconds(1.001), Duration.seconds(1.002));\n^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 34)     }\na892cb444 (matthieun 2018-10-12 06:41:17 -0700 35) \n",
            "commit_hashes": {
                "1dbcbe58": "    Initial import",
                "2cdc299c0": "    Fix sonar issues (#501)",
                "a892cb444": "    Pool can have a companion ticker thread (#236)"
            },
            "Commit&issueIDs": {
                "2cdc299c0": [
                    "(#501)"
                ],
                "a892cb444": [
                    "(#236)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/501",
                "https://github.com/osmlab/atlas/commit/2cdc299c0",
                "https://github.com/osmlab/atlas/issues/236",
                "https://github.com/osmlab/atlas/commit/a892cb444"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/utilities/scalars/DurationTest.java",
            "test_name": "testLowestAndHighest",
            "FQS": "org.openstreetmap.atlas.utilities.scalars.DurationTest.testLowestAndHighest()",
            "start_line": "37",
            "blame_result": "a892cb444 (matthieun 2018-10-12 06:41:17 -0700 38)     {\na892cb444 (matthieun 2018-10-12 06:41:17 -0700 39)         final Duration lowest = Duration.seconds(5);\na892cb444 (matthieun 2018-10-12 06:41:17 -0700 40)         final Duration highest = Duration.seconds(10);\na892cb444 (matthieun 2018-10-12 06:41:17 -0700 41)         Assert.assertEquals(lowest, lowest.lowest(highest));\na892cb444 (matthieun 2018-10-12 06:41:17 -0700 42)         Assert.assertEquals(lowest, highest.lowest(lowest));\n",
            "commit_hashes": {
                "a892cb444": "    Pool can have a companion ticker thread (#236)"
            },
            "Commit&issueIDs": {
                "a892cb444": [
                    "(#236)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/236",
                "https://github.com/osmlab/atlas/commit/a892cb444"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/utilities/scalars/SpeedTest.java",
            "test_name": "testEquals",
            "FQS": "org.openstreetmap.atlas.utilities.scalars.SpeedTest.testEquals()",
            "start_line": "54",
            "blame_result": "^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 55)     {\n^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 56)         Assert.assertEquals(Speed.kilometersPerHour(9.999999), Speed.kilometersPerHour(9.999999));\n^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 57)         Assert.assertNotEquals(Speed.kilometersPerHour(9.99999), Speed.kilometersPerHour(9.99998));\n5ca51b513 (matthieun 2018-09-12 13:41:24 -0700 58)         Assert.assertNotEquals(Speed.kilometersPerHour(9.9999999),\n5ca51b513 (matthieun 2018-09-12 13:41:24 -0700 59)                 Speed.kilometersPerHour(9.9999998));\n",
            "commit_hashes": {
                "1dbcbe58": "    Initial import",
                "5ca51b513": "    Double precision in Distance (#213)"
            },
            "Commit&issueIDs": {
                "5ca51b513": [
                    "(#213)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/213",
                "https://github.com/osmlab/atlas/commit/5ca51b513"
            ]
        },
        {
            "poj_link": "https://github.com/osmlab/atlas/",
            "file_path": "osmlab/atlas/src/test/java/org/openstreetmap/atlas/utilities/scalars/SurfaceTest.java",
            "test_name": "passZeroScale",
            "FQS": "org.openstreetmap.atlas.utilities.scalars.SurfaceTest.passZeroScale()",
            "start_line": "36",
            "blame_result": "^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 37)     {\n0fa255252 (matthieun 2018-01-12 09:51:15 -0800 38)         Assert.assertEquals(FREEZE_DRY.apply(Surface.forDm7Squared(0)),\n0fa255252 (matthieun 2018-01-12 09:51:15 -0800 39)                 FREEZE_DRY.apply(Surface.UNIT_METER_SQUARED_ON_EARTH_SURFACE.scaleBy(0)));\n^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 40)     }\n^1dbcbe58 (matthieun 2017-08-08 10:16:12 -0700 41) }\n",
            "commit_hashes": {
                "1dbcbe58": "    Initial import",
                "0fa255252": "    Fixed serialization for the NameFinder (#50)"
            },
            "Commit&issueIDs": {
                "0fa255252": [
                    "(#50)"
                ]
            },
            "links": [
                "https://github.com/osmlab/atlas/issues/50",
                "https://github.com/osmlab/atlas/commit/0fa255252"
            ]
        },
        {
            "poj_link": "https://github.com/godcrampy/fireflydb/",
            "file_path": "godcrampy/fireflydb/src/test/java/com/sahilbondre/firefly/FireflyDBStaticTest.java",
            "test_name": "givenSameFolder_whenGetInstance_thenSameObjectReferenced",
            "FQS": "com.sahilbondre.firefly.FireflyDBStaticTest.givenSameFolder_whenGetInstance_thenSameObjectReferenced()",
            "start_line": "16",
            "blame_result": "bcc5aede src/test/java/com/sahilbondre/firefly/FireflyDBTest.java (Sahil Bondre 2023-12-29 12:12:41 +0000 17)         // Given\nbcc5aede src/test/java/com/sahilbondre/firefly/FireflyDBTest.java (Sahil Bondre 2023-12-29 12:12:41 +0000 18)         // Two instances with the same folder should reference the same object\nbcc5aede src/test/java/com/sahilbondre/firefly/FireflyDBTest.java (Sahil Bondre 2023-12-29 12:12:41 +0000 19) \nbcc5aede src/test/java/com/sahilbondre/firefly/FireflyDBTest.java (Sahil Bondre 2023-12-29 12:12:41 +0000 20)         // When\nbcc5aede src/test/java/com/sahilbondre/firefly/FireflyDBTest.java (Sahil Bondre 2023-12-29 12:12:41 +0000 21)         FireflyDB dbA1 = FireflyDB.getInstance(FOLDER_A);\n",
            "commit_hashes": {
                "bcc5aede": "    FFDB-005: Add FireflyDB as a syncronized factory, setup tests & CI (#10)"
            },
            "Commit&issueIDs": {
                "bcc5aede": [
                    "10"
                ]
            },
            "links": [
                "https://github.com/godcrampy/fireflydb/issues/10",
                "https://github.com/godcrampy/fireflydb/commit/bcc5aede"
            ]
        },
        {
            "poj_link": "https://github.com/godcrampy/fireflydb/",
            "file_path": "godcrampy/fireflydb/src/test/java/com/sahilbondre/firefly/FireflyDBStaticTest.java",
            "test_name": "givenDifferentFolders_whenGetInstance_thenDifferentObjectsReferenced",
            "FQS": "com.sahilbondre.firefly.FireflyDBStaticTest.givenDifferentFolders_whenGetInstance_thenDifferentObjectsReferenced()",
            "start_line": "31",
            "blame_result": "bcc5aede src/test/java/com/sahilbondre/firefly/FireflyDBTest.java (Sahil Bondre 2023-12-29 12:12:41 +0000 32)         // Given\nbcc5aede src/test/java/com/sahilbondre/firefly/FireflyDBTest.java (Sahil Bondre 2023-12-29 12:12:41 +0000 33)         // Two instances with different folders should reference different objects\nbcc5aede src/test/java/com/sahilbondre/firefly/FireflyDBTest.java (Sahil Bondre 2023-12-29 12:12:41 +0000 34) \nbcc5aede src/test/java/com/sahilbondre/firefly/FireflyDBTest.java (Sahil Bondre 2023-12-29 12:12:41 +0000 35)         // When\nbcc5aede src/test/java/com/sahilbondre/firefly/FireflyDBTest.java (Sahil Bondre 2023-12-29 12:12:41 +0000 36)         FireflyDB dbA = FireflyDB.getInstance(FOLDER_A);\n",
            "commit_hashes": {
                "bcc5aede": "    FFDB-005: Add FireflyDB as a syncronized factory, setup tests & CI (#10)"
            },
            "Commit&issueIDs": {
                "bcc5aede": [
                    "10"
                ]
            },
            "links": [
                "https://github.com/godcrampy/fireflydb/issues/10",
                "https://github.com/godcrampy/fireflydb/commit/bcc5aede"
            ]
        },
        {
            "poj_link": "https://github.com/godcrampy/fireflydb/",
            "file_path": "godcrampy/fireflydb/src/test/java/com/sahilbondre/firefly/model/SegmentTest.java",
            "test_name": "givenKeyAndValue_whenCreatingSegment_thenSegmentIsCreatedWithCorrectSizes",
            "FQS": "com.sahilbondre.firefly.model.SegmentTest.givenKeyAndValue_whenCreatingSegment_thenSegmentIsCreatedWithCorrectSizes()",
            "start_line": "159",
            "blame_result": "c7311b66 (Sahil Bondre 2023-12-29 17:04:41 +0000 160)         // Given\nc7311b66 (Sahil Bondre 2023-12-29 17:04:41 +0000 161)         byte[] key = \"Hello\".getBytes();\nc7311b66 (Sahil Bondre 2023-12-29 17:04:41 +0000 162)         byte[] value = \"World\".getBytes();\nc7311b66 (Sahil Bondre 2023-12-29 17:04:41 +0000 163) \nc7311b66 (Sahil Bondre 2023-12-29 17:04:41 +0000 164)         // When\n",
            "commit_hashes": {
                "c7311b66": "    FFDB-006: Introduce RandomAccessLog with a FileChannel backed implementation + Segment model  (#12)"
            },
            "Commit&issueIDs": {
                "c7311b66": [
                    "12"
                ]
            },
            "links": [
                "https://github.com/godcrampy/fireflydb/issues/12",
                "https://github.com/godcrampy/fireflydb/commit/c7311b66"
            ]
        },
        {
            "poj_link": "https://github.com/jmdns/jmdns/",
            "file_path": "jmdns/jmdns/src/test/java/javax/jmdns/impl/DNSCacheTest.java",
            "test_name": "testCacheAddEntry",
            "FQS": "javax.jmdns.impl.DNSCacheTest.testCacheAddEntry()",
            "start_line": "36",
            "blame_result": "496ae3fd src/test/java/javax/jmdns/test/DNSCacheTest.java (spearway 2011-01-05 11:50:24 +0000 37)         DNSCache cache = new DNSCache();\n1ea20434 src/test/java/javax/jmdns/test/DNSCacheTest.java (spearway 2012-04-16 17:09:38 +0000 38) \n1ea20434 src/test/java/javax/jmdns/test/DNSCacheTest.java (spearway 2012-04-16 17:09:38 +0000 39)         DNSEntry entry = new DNSRecord.Service(\"pierre._home-sharing._tcp.local.\", DNSRecordClass.CLASS_IN, false, 0, 0, 0, 0, \"panoramix.local.\");\n1ea20434 src/test/java/javax/jmdns/test/DNSCacheTest.java (spearway 2012-04-16 17:09:38 +0000 40)         cache.addDNSEntry(entry);\naef13506 src/test/java/javax/jmdns/impl/DNSCacheTest.java (janossch 2024-10-24 09:26:12 +0200 41)         assertEquals(entry, cache.getDNSEntry(entry), \"Could not retrieve the value we inserted\");\n",
            "commit_hashes": {
                "496ae3fd": "    ServiceInfo doesn't allow more than one IPV4 address.- ID: 3150462",
                "1ea20434": "    ConcurrentModificationException - ID: 3509434",
                "aef13506": "    TEST ONLY. Upgrade to JUnit5. Remove easymock. Add logback-classic for tests. Make tests 'green'. (#318)"
            },
            "Commit&issueIDs": {
                "aef13506": [
                    "318"
                ]
            },
            "links": [
                "https://github.com/jmdns/jmdns/issues/318",
                "https://github.com/jmdns/jmdns/commit/aef13506"
            ]
        },
        {
            "poj_link": "https://github.com/jmdns/jmdns/",
            "file_path": "jmdns/jmdns/src/test/java/javax/jmdns/impl/DNSCacheTest.java",
            "test_name": "testCacheRemoveEntry",
            "FQS": "javax.jmdns.impl.DNSCacheTest.testCacheRemoveEntry()",
            "start_line": "45",
            "blame_result": "496ae3fd src/test/java/javax/jmdns/test/DNSCacheTest.java (spearway 2011-01-05 11:50:24 +0000 46)         DNSCache cache = new DNSCache();\n1ea20434 src/test/java/javax/jmdns/test/DNSCacheTest.java (spearway 2012-04-16 17:09:38 +0000 47) \n1ea20434 src/test/java/javax/jmdns/test/DNSCacheTest.java (spearway 2012-04-16 17:09:38 +0000 48)         DNSEntry entry = new DNSRecord.Service(\"pierre._home-sharing._tcp.local.\", DNSRecordClass.CLASS_IN, false, 0, 0, 0, 0, \"panoramix.local.\");\n1ea20434 src/test/java/javax/jmdns/test/DNSCacheTest.java (spearway 2012-04-16 17:09:38 +0000 49)         cache.addDNSEntry(entry);\naef13506 src/test/java/javax/jmdns/impl/DNSCacheTest.java (janossch 2024-10-24 09:26:12 +0200 50)         assertEquals(entry, cache.getDNSEntry(entry), \"Could not retrieve the value we inserted\");\n",
            "commit_hashes": {
                "496ae3fd": "    ServiceInfo doesn't allow more than one IPV4 address.- ID: 3150462",
                "1ea20434": "    ConcurrentModificationException - ID: 3509434",
                "aef13506": "    TEST ONLY. Upgrade to JUnit5. Remove easymock. Add logback-classic for tests. Make tests 'green'. (#318)"
            },
            "Commit&issueIDs": {
                "aef13506": [
                    "318"
                ]
            },
            "links": [
                "https://github.com/jmdns/jmdns/issues/318",
                "https://github.com/jmdns/jmdns/commit/aef13506"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/conf/ConfigurationTest.java",
            "test_name": "testToStringParseEmpty",
            "FQS": "com.alipay.sofa.jraft.conf.ConfigurationTest.testToStringParseEmpty()",
            "start_line": "32",
            "blame_result": "6be4448a (Cancai Cai  2024-06-24 10:55:38 +0800 33)         final String confStr = \"\";\n^373c087 (jiachun.fjc 2019-03-04 19:17:56 +0800 34)         final Configuration conf = JRaftUtils.getConfiguration(confStr);\n^373c087 (jiachun.fjc 2019-03-04 19:17:56 +0800 35)         assertTrue(conf.isEmpty());\n6be4448a (Cancai Cai  2024-06-24 10:55:38 +0800 36)         assertEquals(\"\", conf.toString());\n^373c087 (jiachun.fjc 2019-03-04 19:17:56 +0800 37)         final Configuration newConf = new Configuration();\n",
            "commit_hashes": {
                "6be4448a": "    Add testToStringParseEmpty Test (#1111)",
                "373c087": "    Initial commit"
            },
            "Commit&issueIDs": {
                "6be4448a": [
                    "1111"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/1111",
                "https://github.com/sofastack/sofa-jraft/commit/6be4448a"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/conf/ConfigurationTest.java",
            "test_name": "testToStringParseWithSpace",
            "FQS": "com.alipay.sofa.jraft.conf.ConfigurationTest.testToStringParseWithSpace()",
            "start_line": "45",
            "blame_result": "a71fae7e (MindFocus   2024-06-26 02:49:04 +0800 46)         final String confStr = \"localhost:8081, localhost:8082, localhost:8083\";\n^373c087 (jiachun.fjc 2019-03-04 19:17:56 +0800 47)         final Configuration conf = JRaftUtils.getConfiguration(confStr);\n^373c087 (jiachun.fjc 2019-03-04 19:17:56 +0800 48)         assertEquals(3, conf.size());\n^373c087 (jiachun.fjc 2019-03-04 19:17:56 +0800 49)         for (final PeerId peer : conf) {\n^373c087 (jiachun.fjc 2019-03-04 19:17:56 +0800 50)             assertTrue(peer.toString().startsWith(\"localhost:80\"));\n",
            "commit_hashes": {
                "a71fae7e": "    fix: trim peer str (#1115)",
                "373c087": "    Initial commit"
            },
            "Commit&issueIDs": {
                "a71fae7e": [
                    "1115"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/1115",
                "https://github.com/sofastack/sofa-jraft/commit/a71fae7e"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/conf/ConfigurationTest.java",
            "test_name": "testToStringParseStuffWithPriority",
            "FQS": "com.alipay.sofa.jraft.conf.ConfigurationTest.testToStringParseStuffWithPriority()",
            "start_line": "53",
            "blame_result": "6fa6ecce (block       2019-11-25 20:05:53 +0800 54)         final String confStr = \"localhost:8081:1:100,localhost:8082:1:100,localhost:8083:1:100\";\n^373c087 (jiachun.fjc 2019-03-04 19:17:56 +0800 55)         final Configuration conf = JRaftUtils.getConfiguration(confStr);\n^373c087 (jiachun.fjc 2019-03-04 19:17:56 +0800 56)         assertEquals(3, conf.size());\n^373c087 (jiachun.fjc 2019-03-04 19:17:56 +0800 57)         for (final PeerId peer : conf) {\n^373c087 (jiachun.fjc 2019-03-04 19:17:56 +0800 58)             assertTrue(peer.toString().startsWith(\"localhost:80\"));\n",
            "commit_hashes": {
                "6fa6ecce": "    feat/priority_by_zongtanghu (#345)",
                "373c087": "    Initial commit"
            },
            "Commit&issueIDs": {
                "6fa6ecce": [
                    "(#345)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/345",
                "https://github.com/sofastack/sofa-jraft/commit/6fa6ecce"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/conf/ConfigurationTest.java",
            "test_name": "testLearnerStuff",
            "FQS": "com.alipay.sofa.jraft.conf.ConfigurationTest.testLearnerStuff()",
            "start_line": "102",
            "blame_result": "^373c087 (jiachun.fjc   2019-03-04 19:17:56 +0800 103)         final String confStr = \"localhost:8081,localhost:8082,localhost:8083\";\n^373c087 (jiachun.fjc   2019-03-04 19:17:56 +0800 104)         final Configuration conf = JRaftUtils.getConfiguration(confStr);\n^373c087 (jiachun.fjc   2019-03-04 19:17:56 +0800 105)         assertEquals(3, conf.size());\n^373c087 (jiachun.fjc   2019-03-04 19:17:56 +0800 106)         assertEquals(confStr, conf.toString());\n0fdb2af3 (dennis zhuang 2019-11-05 21:02:03 +0800 107)         assertTrue(conf.isValid());\n",
            "commit_hashes": {
                "373c087": "    Initial commit",
                "0fdb2af3": "    Impl learner for jraft, #8 (#312)"
            },
            "Commit&issueIDs": {
                "0fdb2af3": [
                    "#8",
                    "(#312)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/8",
                "https://github.com/sofastack/sofa-jraft/commit/0fdb2af3"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/entity/LogIdTest.java",
            "test_name": "testChecksum",
            "FQS": "com.alipay.sofa.jraft.entity.LogIdTest.testChecksum()",
            "start_line": "43",
            "blame_result": "0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 44)         LogId logId = new LogId();\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 45)         logId.setIndex(1);\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 46)         logId.setTerm(2);\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 47)         long c = logId.checksum();\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 48)         assertTrue(c != 0);\n",
            "commit_hashes": {
                "0798207b": "    (feat) Adds JRaftServiceFactory (#110)"
            },
            "Commit&issueIDs": {
                "0798207b": [
                    "(#110)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/110",
                "https://github.com/sofastack/sofa-jraft/commit/0798207b"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/entity/PeerIdTest.java",
            "test_name": "testToStringParseWithIdxAndPriority",
            "FQS": "com.alipay.sofa.jraft.entity.PeerIdTest.testToStringParseWithIdxAndPriority()",
            "start_line": "61",
            "blame_result": "6fa6ecce (block 2019-11-25 20:05:53 +0800 62) \n6fa6ecce (block 2019-11-25 20:05:53 +0800 63)         // 1.String format is, ip:port::priority\n6fa6ecce (block 2019-11-25 20:05:53 +0800 64)         final Endpoint endpoint1 = new Endpoint(\"192.168.1.1\", 8081);\n6fa6ecce (block 2019-11-25 20:05:53 +0800 65)         final PeerId peer1 = new PeerId(endpoint1, 0, 100);\n6fa6ecce (block 2019-11-25 20:05:53 +0800 66)         assertEquals(\"192.168.1.1:8081::100\", peer1.toString());\n",
            "commit_hashes": {
                "6fa6ecce": "    feat/priority_by_zongtanghu (#345)"
            },
            "Commit&issueIDs": {
                "6fa6ecce": [
                    "(#345)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/345",
                "https://github.com/sofastack/sofa-jraft/commit/6fa6ecce"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/entity/PeerIdTest.java",
            "test_name": "testChecksum",
            "FQS": "com.alipay.sofa.jraft.entity.PeerIdTest.testChecksum()",
            "start_line": "128",
            "blame_result": "^373c087 (jiachun.fjc   2019-03-04 19:17:56 +0800 129)         PeerId peer = new PeerId(\"192.168.1.1\", 8081, 1);\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 130)         long c = peer.checksum();\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 131)         assertTrue(c != 0);\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 132)         assertEquals(c, peer.checksum());\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 133)     }\n",
            "commit_hashes": {
                "373c087": "    Initial commit",
                "0798207b": "    (feat) Adds JRaftServiceFactory (#110)"
            },
            "Commit&issueIDs": {
                "0798207b": [
                    "(#110)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/110",
                "https://github.com/sofastack/sofa-jraft/commit/0798207b"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-extension/rpc-grpc-impl/src/test/java/com/alipay/sofa/jraft/rpc/impl/core/AppendEntriesRequestProcessorTest.java",
            "test_name": "testPairOf",
            "FQS": "com.alipay.sofa.jraft.rpc.impl.core.AppendEntriesRequestProcessorTest.testPairOf()",
            "start_line": "98",
            "blame_result": "59853a78 (block         2020-05-12 15:26:11 +0800  99)         final AppendEntriesRequestProcessor processor = (AppendEntriesRequestProcessor) newProcessor();\nb395fe33 (dennis zhuang 2020-11-03 18:04:24 +0800 100) \nb395fe33 (dennis zhuang 2020-11-03 18:04:24 +0800 101)         PeerPair pair = processor.pairOf(this.peerIdStr, this.serverId);\nb395fe33 (dennis zhuang 2020-11-03 18:04:24 +0800 102)         assertEquals(pair.remote, this.serverId);\nb395fe33 (dennis zhuang 2020-11-03 18:04:24 +0800 103)         assertEquals(pair.local, this.peerIdStr);\n",
            "commit_hashes": {
                "59853a78": "    feat/grpc impl (#433)",
                "b395fe33": "    (fix) peer context should not be shared between connections, see #461 (#528)"
            },
            "Commit&issueIDs": {
                "59853a78": [
                    "(#433)"
                ],
                "b395fe33": [
                    "#461",
                    "(#528)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/433",
                "https://github.com/sofastack/sofa-jraft/commit/59853a78",
                "https://github.com/sofastack/sofa-jraft/issues/461",
                "https://github.com/sofastack/sofa-jraft/commit/b395fe33"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-extension/rpc-grpc-impl/src/test/java/com/alipay/sofa/jraft/rpc/impl/core/AppendEntriesRequestProcessorTest.java",
            "test_name": "testOnClosed",
            "FQS": "com.alipay.sofa.jraft.rpc.impl.core.AppendEntriesRequestProcessorTest.testOnClosed()",
            "start_line": "111",
            "blame_result": "b395fe33 (dennis zhuang 2020-11-03 18:04:24 +0800 112)         mockNode();\n59853a78 (block         2020-05-12 15:26:11 +0800 113)         final AppendEntriesRequestProcessor processor = (AppendEntriesRequestProcessor) newProcessor();\nb395fe33 (dennis zhuang 2020-11-03 18:04:24 +0800 114) \nb395fe33 (dennis zhuang 2020-11-03 18:04:24 +0800 115)         PeerPair pair = processor.pairOf(this.peerIdStr, this.serverId);\nb395fe33 (dennis zhuang 2020-11-03 18:04:24 +0800 116)         final PeerRequestContext ctx = processor.getOrCreatePeerRequestContext(this.groupId, pair, this.conn);\n",
            "commit_hashes": {
                "b395fe33": "    (fix) peer context should not be shared between connections, see #461 (#528)",
                "59853a78": "    feat/grpc impl (#433)"
            },
            "Commit&issueIDs": {
                "b395fe33": [
                    "#461",
                    "(#528)"
                ],
                "59853a78": [
                    "(#433)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/461",
                "https://github.com/sofastack/sofa-jraft/commit/b395fe33",
                "https://github.com/sofastack/sofa-jraft/issues/433",
                "https://github.com/sofastack/sofa-jraft/commit/59853a78"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-extension/rpc-grpc-impl/src/test/java/com/alipay/sofa/jraft/rpc/impl/core/AppendEntriesRequestProcessorTest.java",
            "test_name": "testTooManyPendingResponses",
            "FQS": "com.alipay.sofa.jraft.rpc.impl.core.AppendEntriesRequestProcessorTest.testTooManyPendingResponses()",
            "start_line": "182",
            "blame_result": "b395fe33 (dennis zhuang 2020-11-03 18:04:24 +0800 183)         final PeerId peer = mockNode();\nb395fe33 (dennis zhuang 2020-11-03 18:04:24 +0800 184)         NodeManager.getInstance().get(this.groupId, peer).getRaftOptions().setMaxReplicatorInflightMsgs(2);\n59853a78 (block         2020-05-12 15:26:11 +0800 185) \n59853a78 (block         2020-05-12 15:26:11 +0800 186)         final RpcContext asyncContext = Mockito.mock(RpcContext.class);\n59853a78 (block         2020-05-12 15:26:11 +0800 187)         final AppendEntriesRequestProcessor processor = (AppendEntriesRequestProcessor) newProcessor();\n",
            "commit_hashes": {
                "b395fe33": "    (fix) peer context should not be shared between connections, see #461 (#528)",
                "59853a78": "    feat/grpc impl (#433)"
            },
            "Commit&issueIDs": {
                "b395fe33": [
                    "#461",
                    "(#528)"
                ],
                "59853a78": [
                    "(#433)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/461",
                "https://github.com/sofastack/sofa-jraft/commit/b395fe33",
                "https://github.com/sofastack/sofa-jraft/issues/433",
                "https://github.com/sofastack/sofa-jraft/commit/59853a78"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/util/ByteBufferCollectorTest.java",
            "test_name": "testMultipleRecycleAtDifferentThread",
            "FQS": "com.alipay.sofa.jraft.util.ByteBufferCollectorTest.testMultipleRecycleAtDifferentThread()",
            "start_line": "53",
            "blame_result": "ba43a164 (block 2019-05-22 17:38:56 +0800 54)         final ByteBufferCollector object = ByteBufferCollector.allocateByRecyclers();\nba43a164 (block 2019-05-22 17:38:56 +0800 55)         final Thread thread1 = new Thread(object::recycle);\nba43a164 (block 2019-05-22 17:38:56 +0800 56)         thread1.start();\nba43a164 (block 2019-05-22 17:38:56 +0800 57)         thread1.join();\nba43a164 (block 2019-05-22 17:38:56 +0800 58)         assertSame(object, ByteBufferCollector.allocateByRecyclers());\n",
            "commit_hashes": {
                "ba43a164": "    (feat) add pooled buf allocator (#161)"
            },
            "Commit&issueIDs": {
                "ba43a164": [
                    "(#161)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/161",
                "https://github.com/sofastack/sofa-jraft/commit/ba43a164"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/util/ByteBufferCollectorTest.java",
            "test_name": "testRecycle",
            "FQS": "com.alipay.sofa.jraft.util.ByteBufferCollectorTest.testRecycle()",
            "start_line": "62",
            "blame_result": "ba43a164 (block 2019-05-22 17:38:56 +0800 63)         final ByteBufferCollector object = ByteBufferCollector.allocateByRecyclers();\nba43a164 (block 2019-05-22 17:38:56 +0800 64)         object.recycle();\nba43a164 (block 2019-05-22 17:38:56 +0800 65)         final ByteBufferCollector object2 = ByteBufferCollector.allocateByRecyclers();\nba43a164 (block 2019-05-22 17:38:56 +0800 66)         Assert.assertSame(object, object2);\nba43a164 (block 2019-05-22 17:38:56 +0800 67)         object2.recycle();\n",
            "commit_hashes": {
                "ba43a164": "    (feat) add pooled buf allocator (#161)"
            },
            "Commit&issueIDs": {
                "ba43a164": [
                    "(#161)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/161",
                "https://github.com/sofastack/sofa-jraft/commit/ba43a164"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/util/CrcUtilTest.java",
            "test_name": "testCrc64",
            "FQS": "com.alipay.sofa.jraft.util.CrcUtilTest.testCrc64()",
            "start_line": "28",
            "blame_result": "0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 29)         byte[] bs = \"hello world\".getBytes();\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 30)         long c = CrcUtil.crc64(bs);\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 31)         assertEquals(c, CrcUtil.crc64(bs));\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 32)         assertEquals(c, CrcUtil.crc64(bs));\n0798207b (dennis zhuang 2019-04-24 15:48:26 +0800 33)         assertEquals(c, CrcUtil.crc64(bs, 0, bs.length));\n",
            "commit_hashes": {
                "0798207b": "    (feat) Adds JRaftServiceFactory (#110)"
            },
            "Commit&issueIDs": {
                "0798207b": [
                    "(#110)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/110",
                "https://github.com/sofastack/sofa-jraft/commit/0798207b"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/util/RecyclableByteBufferListTest.java",
            "test_name": "testMultipleRecycleAtDifferentThread",
            "FQS": "com.alipay.sofa.jraft.util.RecyclableByteBufferListTest.testMultipleRecycleAtDifferentThread()",
            "start_line": "37",
            "blame_result": "ba43a164 (block 2019-05-22 17:38:56 +0800 38)         final RecyclableByteBufferList object = RecyclableByteBufferList.newInstance();\nba43a164 (block 2019-05-22 17:38:56 +0800 39)         final Thread thread1 = new Thread(object::recycle);\nba43a164 (block 2019-05-22 17:38:56 +0800 40)         thread1.start();\nba43a164 (block 2019-05-22 17:38:56 +0800 41)         thread1.join();\nba43a164 (block 2019-05-22 17:38:56 +0800 42)         assertSame(object, RecyclableByteBufferList.newInstance());\n",
            "commit_hashes": {
                "ba43a164": "    (feat) add pooled buf allocator (#161)"
            },
            "Commit&issueIDs": {
                "ba43a164": [
                    "(#161)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/161",
                "https://github.com/sofastack/sofa-jraft/commit/ba43a164"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/util/RecyclableByteBufferListTest.java",
            "test_name": "testRecycle",
            "FQS": "com.alipay.sofa.jraft.util.RecyclableByteBufferListTest.testRecycle()",
            "start_line": "46",
            "blame_result": "ba43a164 (block 2019-05-22 17:38:56 +0800 47)         final RecyclableByteBufferList object = RecyclableByteBufferList.newInstance();\nba43a164 (block 2019-05-22 17:38:56 +0800 48)         object.recycle();\nba43a164 (block 2019-05-22 17:38:56 +0800 49)         final RecyclableByteBufferList object2 = RecyclableByteBufferList.newInstance();\nba43a164 (block 2019-05-22 17:38:56 +0800 50)         Assert.assertSame(object, object2);\nba43a164 (block 2019-05-22 17:38:56 +0800 51)         object2.recycle();\n",
            "commit_hashes": {
                "ba43a164": "    (feat) add pooled buf allocator (#161)"
            },
            "Commit&issueIDs": {
                "ba43a164": [
                    "(#161)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/161",
                "https://github.com/sofastack/sofa-jraft/commit/ba43a164"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/util/SegmentListTest.java",
            "test_name": "testRemoveFromFirst",
            "FQS": "com.alipay.sofa.jraft.util.SegmentListTest.testRemoveFromFirst()",
            "start_line": "94",
            "blame_result": "64daa8bc (dennis zhuang 2019-12-30 10:22:09 +0800 95)         fillList();\n64daa8bc (dennis zhuang 2019-12-30 10:22:09 +0800 96) \n64daa8bc (dennis zhuang 2019-12-30 10:22:09 +0800 97)         int len = SegmentList.SEGMENT_SIZE - 1;\n64daa8bc (dennis zhuang 2019-12-30 10:22:09 +0800 98)         this.list.removeFromFirst(len);\n64daa8bc (dennis zhuang 2019-12-30 10:22:09 +0800 99) \n",
            "commit_hashes": {
                "64daa8bc": "    (feat) Impl SegmentList to replace ArrayDequeue in LogManagerImpl, #335 (#377)"
            },
            "Commit&issueIDs": {
                "64daa8bc": [
                    "#335",
                    "(#377)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/335",
                "https://github.com/sofastack/sofa-jraft/commit/64daa8bc"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/util/SegmentListTest.java",
            "test_name": "testAddPeek",
            "FQS": "com.alipay.sofa.jraft.util.SegmentListTest.testAddPeek()",
            "start_line": "192",
            "blame_result": "64daa8bc (dennis zhuang 2019-12-30 10:22:09 +0800 193)         for (int i = 0; i < 1000; i++) {\n64daa8bc (dennis zhuang 2019-12-30 10:22:09 +0800 194)             this.list.add(i);\n64daa8bc (dennis zhuang 2019-12-30 10:22:09 +0800 195)             assertEquals(i, (int) this.list.peekLast());\n64daa8bc (dennis zhuang 2019-12-30 10:22:09 +0800 196)             assertEquals(0, (int) this.list.peekFirst());\n64daa8bc (dennis zhuang 2019-12-30 10:22:09 +0800 197)         }\n",
            "commit_hashes": {
                "64daa8bc": "    (feat) Impl SegmentList to replace ArrayDequeue in LogManagerImpl, #335 (#377)"
            },
            "Commit&issueIDs": {
                "64daa8bc": [
                    "#335",
                    "(#377)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/335",
                "https://github.com/sofastack/sofa-jraft/commit/64daa8bc"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/util/ThreadPoolsFactoryTest.java",
            "test_name": "testGlobalExecutor",
            "FQS": "com.alipay.sofa.jraft.util.ThreadPoolsFactoryTest.testGlobalExecutor()",
            "start_line": "55",
            "blame_result": "cebea9c9 (\u91ca\u6167\u5229 2022-07-14 15:20:57 +0800 56)         ThreadPoolExecutor executor1 = ThreadPoolsFactory.getExecutor(GROUP_ID_001);\ncebea9c9 (\u91ca\u6167\u5229 2022-07-14 15:20:57 +0800 57)         ThreadPoolExecutor executor2 = ThreadPoolsFactory.getExecutor(GROUP_ID_002);\ncebea9c9 (\u91ca\u6167\u5229 2022-07-14 15:20:57 +0800 58)         Assert.assertEquals(executor1, executor2);\ncebea9c9 (\u91ca\u6167\u5229 2022-07-14 15:20:57 +0800 59)     }\ncebea9c9 (\u91ca\u6167\u5229 2022-07-14 15:20:57 +0800 60) \n",
            "commit_hashes": {
                "cebea9c9": "    custom thread pool (#855)"
            },
            "Commit&issueIDs": {
                "cebea9c9": [
                    "(#855)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/855",
                "https://github.com/sofastack/sofa-jraft/commit/cebea9c9"
            ]
        },
        {
            "poj_link": "https://github.com/sofastack/sofa-jraft/",
            "file_path": "sofastack/sofa-jraft/jraft-core/src/test/java/com/alipay/sofa/jraft/util/ThreadPoolsFactoryTest.java",
            "test_name": "testInvalidGroup",
            "FQS": "com.alipay.sofa.jraft.util.ThreadPoolsFactoryTest.testInvalidGroup()",
            "start_line": "69",
            "blame_result": "cebea9c9 (\u91ca\u6167\u5229 2022-07-14 15:20:57 +0800 70)         ThreadPoolExecutor executor1 = ThreadPoolsFactory.getExecutor(GROUP_ID_001);\ncebea9c9 (\u91ca\u6167\u5229 2022-07-14 15:20:57 +0800 71)         ThreadPoolExecutor executor = ThreadPoolsFactory.getExecutor(\"test\");\ncebea9c9 (\u91ca\u6167\u5229 2022-07-14 15:20:57 +0800 72)         Assert.assertEquals(executor1, executor);\ncebea9c9 (\u91ca\u6167\u5229 2022-07-14 15:20:57 +0800 73)     }\ncebea9c9 (\u91ca\u6167\u5229 2022-07-14 15:20:57 +0800 74) \n",
            "commit_hashes": {
                "cebea9c9": "    custom thread pool (#855)"
            },
            "Commit&issueIDs": {
                "cebea9c9": [
                    "(#855)"
                ]
            },
            "links": [
                "https://github.com/sofastack/sofa-jraft/issues/855",
                "https://github.com/sofastack/sofa-jraft/commit/cebea9c9"
            ]
        },
        {
            "poj_link": "https://github.com/GoogleCloudPlatform/pgadapter/",
            "file_path": "GoogleCloudPlatform/pgadapter/src/test/java/com/google/cloud/spanner/pgadapter/ConnectionHandlerTest.java",
            "test_name": "testRegisterStatement",
            "FQS": "com.google.cloud.spanner.pgadapter.ConnectionHandlerTest.testRegisterStatement()",
            "start_line": "87",
            "blame_result": "cec7d43bc (Knut Olav L\u00f8ite 2022-05-23 19:57:20 +0200 88)     ProxyServer server = mock(ProxyServer.class);\ncec7d43bc (Knut Olav L\u00f8ite 2022-05-23 19:57:20 +0200 89)     Socket socket = mock(Socket.class);\nebdf1dd62 (Knut Olav L\u00f8ite 2024-02-16 07:39:53 +0100 90)     when(socket.getInetAddress()).thenReturn(InetAddress.getLoopbackAddress());\n980e764c4 (Knut Olav L\u00f8ite 2022-09-10 08:09:53 +0200 91)     IntermediatePreparedStatement statement = mock(IntermediatePreparedStatement.class);\n980e764c4 (Knut Olav L\u00f8ite 2022-09-10 08:09:53 +0200 92) \n",
            "commit_hashes": {
                "cec7d43bc": "    feat: support unix domain sockets (#150)",
                "ebdf1dd62": "    perf: support virtual threads on Java 21 and higher (#1406)",
                "980e764c4": "    feat: PREPARE statement support (#332)"
            },
            "Commit&issueIDs": {
                "cec7d43bc": [
                    "150"
                ],
                "ebdf1dd62": [
                    "1406"
                ],
                "980e764c4": [
                    "332"
                ]
            },
            "links": [
                "https://github.com/GoogleCloudPlatform/pgadapter/issues/150",
                "https://github.com/GoogleCloudPlatform/pgadapter/commit/cec7d43bc",
                "https://github.com/GoogleCloudPlatform/pgadapter/issues/1406",
                "https://github.com/GoogleCloudPlatform/pgadapter/commit/ebdf1dd62",
                "https://github.com/GoogleCloudPlatform/pgadapter/issues/332",
                "https://github.com/GoogleCloudPlatform/pgadapter/commit/980e764c4"
            ]
        },
        {
            "poj_link": "https://github.com/GoogleCloudPlatform/pgadapter/",
            "file_path": "GoogleCloudPlatform/pgadapter/src/test/java/com/google/cloud/spanner/pgadapter/ConnectionHandlerTest.java",
            "test_name": "testGetPortal",
            "FQS": "com.google.cloud.spanner.pgadapter.ConnectionHandlerTest.testGetPortal()",
            "start_line": "214",
            "blame_result": "cec7d43bc (Knut Olav L\u00f8ite 2022-05-23 19:57:20 +0200 215)     ProxyServer server = mock(ProxyServer.class);\ncec7d43bc (Knut Olav L\u00f8ite 2022-05-23 19:57:20 +0200 216)     Socket socket = mock(Socket.class);\nebdf1dd62 (Knut Olav L\u00f8ite 2024-02-16 07:39:53 +0100 217)     when(socket.getInetAddress()).thenReturn(InetAddress.getLoopbackAddress());\n687c9521e (Knut Olav L\u00f8ite 2022-09-10 06:44:47 +0200 218)     IntermediatePortalStatement portal1 = mock(IntermediatePortalStatement.class);\n687c9521e (Knut Olav L\u00f8ite 2022-09-10 06:44:47 +0200 219) \n",
            "commit_hashes": {
                "cec7d43bc": "    feat: support unix domain sockets (#150)",
                "ebdf1dd62": "    perf: support virtual threads on Java 21 and higher (#1406)",
                "687c9521e": "    fix: use main thread for CopyDataReceiver (#345)"
            },
            "Commit&issueIDs": {
                "cec7d43bc": [
                    "150"
                ],
                "ebdf1dd62": [
                    "1406"
                ],
                "687c9521e": [
                    "345"
                ]
            },
            "links": [
                "https://github.com/GoogleCloudPlatform/pgadapter/issues/150",
                "https://github.com/GoogleCloudPlatform/pgadapter/commit/cec7d43bc",
                "https://github.com/GoogleCloudPlatform/pgadapter/issues/1406",
                "https://github.com/GoogleCloudPlatform/pgadapter/commit/ebdf1dd62",
                "https://github.com/GoogleCloudPlatform/pgadapter/issues/345",
                "https://github.com/GoogleCloudPlatform/pgadapter/commit/687c9521e"
            ]
        },
        {
            "poj_link": "https://github.com/GoogleCloudPlatform/pgadapter/",
            "file_path": "GoogleCloudPlatform/pgadapter/src/test/java/com/google/cloud/spanner/pgadapter/error/PGExceptionTest.java",
            "test_name": "testEquals",
            "FQS": "com.google.cloud.spanner.pgadapter.error.PGExceptionTest.testEquals()",
            "start_line": "47",
            "blame_result": "afcd59e86 (Knut Olav L\u00f8ite 2022-09-25 19:55:35 +0200 48)     assertEquals(\nafcd59e86 (Knut Olav L\u00f8ite 2022-09-25 19:55:35 +0200 49)         PGException.newBuilder(\"test error\")\nafcd59e86 (Knut Olav L\u00f8ite 2022-09-25 19:55:35 +0200 50)             .setSeverity(Severity.ERROR)\nafcd59e86 (Knut Olav L\u00f8ite 2022-09-25 19:55:35 +0200 51)             .setSQLState(SQLState.RaiseException)\nafcd59e86 (Knut Olav L\u00f8ite 2022-09-25 19:55:35 +0200 52)             .build(),\n",
            "commit_hashes": {
                "afcd59e86": "    chore: remove [ERROR] from error messages (#354)"
            },
            "Commit&issueIDs": {
                "afcd59e86": [
                    "354"
                ]
            },
            "links": [
                "https://github.com/GoogleCloudPlatform/pgadapter/issues/354",
                "https://github.com/GoogleCloudPlatform/pgadapter/commit/afcd59e86"
            ]
        },
        {
            "poj_link": "https://github.com/awslabs/aws-glue-schema-registry/",
            "file_path": "awslabs/aws-glue-schema-registry/serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/GlueSchemaRegistryDeserializerDataParserTest.java",
            "test_name": "test_Invalid_Compression_Byte",
            "FQS": "com.amazonaws.services.schemaregistry.deserializers.GlueSchemaRegistryDeserializerDataParserTest.test_Invalid_Compression_Byte()",
            "start_line": "74",
            "blame_result": "771f6db2 avro-serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/AWSDeserializerDataParserTest.java           (mohit         2020-11-15 15:39:02 -0800 75)         byte[] serializedData = constructSerializedData(AWSSchemaRegistryConstants.HEADER_VERSION_BYTE, (byte) 99,\n771f6db2 avro-serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/AWSDeserializerDataParserTest.java           (mohit         2020-11-15 15:39:02 -0800 76)                 UUID.randomUUID());\n771f6db2 avro-serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/AWSDeserializerDataParserTest.java           (mohit         2020-11-15 15:39:02 -0800 77)         StringBuilder errorBuilder = new StringBuilder();\na7017fb7 serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/GlueSchemaRegistryDeserializerDataParserTest.java (Mohit Paliwal 2021-06-29 13:45:29 -0700 78)         assertFalse(GlueSchemaRegistryDeserializerDataParser.getInstance().isDataCompatible(ByteBuffer.wrap(serializedData),\na7017fb7 serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/GlueSchemaRegistryDeserializerDataParserTest.java (Mohit Paliwal 2021-06-29 13:45:29 -0700 79)                                                                                             errorBuilder));\n",
            "commit_hashes": {
                "771f6db2": "    Add AWS Glue Schema Registry library implementation",
                "a7017fb7": "    Add JSON Support (#49)"
            },
            "Commit&issueIDs": {
                "a7017fb7": [
                    "49"
                ]
            },
            "links": [
                "https://github.com/awslabs/aws-glue-schema-registry/issues/49",
                "https://github.com/awslabs/aws-glue-schema-registry/commit/a7017fb7"
            ]
        },
        {
            "poj_link": "https://github.com/GoogleCloudPlatform/pgadapter/",
            "file_path": "GoogleCloudPlatform/pgadapter/src/test/java/com/google/cloud/spanner/pgadapter/statements/SimpleParserTest.java",
            "test_name": "testParserTableOrIndexName",
            "FQS": "com.google.cloud.spanner.pgadapter.statements.SimpleParserTest.testParserTableOrIndexName()",
            "start_line": "490",
            "blame_result": "715f97fca (Knut Olav L\u00f8ite 2023-02-01 10:55:00 +0100 491)     assertEquals(TableOrIndexName.of(\"foo\"), TableOrIndexName.parse(\"foo\"));\n715f97fca (Knut Olav L\u00f8ite 2023-02-01 10:55:00 +0100 492)     assertEquals(\n715f97fca (Knut Olav L\u00f8ite 2023-02-01 10:55:00 +0100 493)         TableOrIndexName.of(/* schema= */ \"foo\", /* name= */ \"bar\"),\n715f97fca (Knut Olav L\u00f8ite 2023-02-01 10:55:00 +0100 494)         TableOrIndexName.parse(\"foo.bar\"));\n715f97fca (Knut Olav L\u00f8ite 2023-02-01 10:55:00 +0100 495) \n",
            "commit_hashes": {
                "715f97fca": "    chore: add table and function replacements for npgsql (#627)"
            },
            "Commit&issueIDs": {
                "715f97fca": [
                    "627"
                ]
            },
            "links": [
                "https://github.com/GoogleCloudPlatform/pgadapter/issues/627",
                "https://github.com/GoogleCloudPlatform/pgadapter/commit/715f97fca"
            ]
        },
        {
            "poj_link": "https://github.com/awslabs/aws-glue-schema-registry/",
            "file_path": "awslabs/aws-glue-schema-registry/serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/GlueSchemaRegistryDeserializerDataParserTest.java",
            "test_name": "test_Invalid_Length",
            "FQS": "com.amazonaws.services.schemaregistry.deserializers.GlueSchemaRegistryDeserializerDataParserTest.test_Invalid_Length()",
            "start_line": "87",
            "blame_result": "771f6db2 avro-serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/AWSDeserializerDataParserTest.java           (mohit         2020-11-15 15:39:02 -0800 88)         StringBuilder errorBuilder = new StringBuilder();\na7017fb7 serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/GlueSchemaRegistryDeserializerDataParserTest.java (Mohit Paliwal 2021-06-29 13:45:29 -0700 89)         assertFalse(GlueSchemaRegistryDeserializerDataParser.getInstance().isDataCompatible(ByteBuffer.wrap(new byte[2]),\na7017fb7 serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/GlueSchemaRegistryDeserializerDataParserTest.java (Mohit Paliwal 2021-06-29 13:45:29 -0700 90)                                                                                             errorBuilder));\na7017fb7 serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/GlueSchemaRegistryDeserializerDataParserTest.java (Mohit Paliwal 2021-06-29 13:45:29 -0700 91)         assertTrue(errorBuilder.toString().contains(GlueSchemaRegistryIncompatibleDataException.UNKNOWN_DATA_ERROR_MESSAGE));\n771f6db2 avro-serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/AWSDeserializerDataParserTest.java           (mohit         2020-11-15 15:39:02 -0800 92)     }\n",
            "commit_hashes": {
                "771f6db2": "    Add AWS Glue Schema Registry library implementation",
                "a7017fb7": "    Add JSON Support (#49)"
            },
            "Commit&issueIDs": {
                "a7017fb7": [
                    "49"
                ]
            },
            "links": [
                "https://github.com/awslabs/aws-glue-schema-registry/issues/49",
                "https://github.com/awslabs/aws-glue-schema-registry/commit/a7017fb7"
            ]
        },
        {
            "poj_link": "https://github.com/GoogleCloudPlatform/pgadapter/",
            "file_path": "GoogleCloudPlatform/pgadapter/src/test/java/com/google/cloud/spanner/pgadapter/statements/local/ListDatabasesStatementTest.java",
            "test_name": "testHashCode",
            "FQS": "com.google.cloud.spanner.pgadapter.statements.local.ListDatabasesStatementTest.testHashCode()",
            "start_line": "70",
            "blame_result": "b9d03630b (Knut Olav L\u00f8ite 2022-06-23 09:29:34 +0200 71)     ConnectionHandler connectionHandler1 = mock(ConnectionHandler.class);\nb9d03630b (Knut Olav L\u00f8ite 2022-06-23 09:29:34 +0200 72)     ConnectionHandler connectionHandler2 = mock(ConnectionHandler.class);\nb9d03630b (Knut Olav L\u00f8ite 2022-06-23 09:29:34 +0200 73)     ListDatabasesStatement statement1 = new ListDatabasesStatement(connectionHandler1);\nb9d03630b (Knut Olav L\u00f8ite 2022-06-23 09:29:34 +0200 74)     ListDatabasesStatement statement2 = new ListDatabasesStatement(connectionHandler1);\nb9d03630b (Knut Olav L\u00f8ite 2022-06-23 09:29:34 +0200 75)     ListDatabasesStatement statement3 = new ListDatabasesStatement(connectionHandler2);\n",
            "commit_hashes": {
                "b9d03630b": "    feat: support \\l meta command (#215)"
            },
            "Commit&issueIDs": {
                "b9d03630b": [
                    "215"
                ]
            },
            "links": [
                "https://github.com/GoogleCloudPlatform/pgadapter/issues/215",
                "https://github.com/GoogleCloudPlatform/pgadapter/commit/b9d03630b"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/ErrorReportConfigurationTest.java",
            "test_name": "builderConstructorWithErrorReportConfiguration",
            "FQS": "com.fasterxml.jackson.core.ErrorReportConfigurationTest.builderConstructorWithErrorReportConfiguration()",
            "start_line": "129",
            "blame_result": "5a562cf15 (Kim, Joo Hyuk  2023-07-29 12:53:45 +0900 130)     {\n32e0a6750 (Tatu Saloranta 2023-07-28 21:08:46 -0700 131)         ErrorReportConfiguration configA = ErrorReportConfiguration.builder()\n5a562cf15 (Kim, Joo Hyuk  2023-07-29 12:53:45 +0900 132)                 .maxErrorTokenLength(1234)\n5a562cf15 (Kim, Joo Hyuk  2023-07-29 12:53:45 +0900 133)                 .maxRawContentLength(5678)\n5a562cf15 (Kim, Joo Hyuk  2023-07-29 12:53:45 +0900 134)                 .build();\n",
            "commit_hashes": {
                "5a562cf15": "    Add new `ErrorReportConfiguration` (#1067)",
                "32e0a6750": "    ..."
            },
            "Commit&issueIDs": {
                "5a562cf15": [
                    "1067"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/1067",
                "https://github.com/FasterXML/jackson-core/commit/5a562cf15"
            ]
        },
        {
            "poj_link": "https://github.com/awslabs/aws-glue-schema-registry/",
            "file_path": "awslabs/aws-glue-schema-registry/serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/GlueSchemaRegistryDeserializerDataParserTest.java",
            "test_name": "test_Success",
            "FQS": "com.amazonaws.services.schemaregistry.deserializers.GlueSchemaRegistryDeserializerDataParserTest.test_Success()",
            "start_line": "137",
            "blame_result": "771f6db2 avro-serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/AWSDeserializerDataParserTest.java           (mohit         2020-11-15 15:39:02 -0800 138)         StringBuilder errorBuilder = new StringBuilder();\n771f6db2 avro-serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/AWSDeserializerDataParserTest.java           (mohit         2020-11-15 15:39:02 -0800 139)         byte[] serializedData = constructSerializedData(AWSSchemaRegistryConstants.HEADER_VERSION_BYTE,\n771f6db2 avro-serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/AWSDeserializerDataParserTest.java           (mohit         2020-11-15 15:39:02 -0800 140)                 AWSSchemaRegistryConstants.COMPRESSION_BYTE, UUID.randomUUID());\na7017fb7 serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/GlueSchemaRegistryDeserializerDataParserTest.java (Mohit Paliwal 2021-06-29 13:45:29 -0700 141)         assertTrue(GlueSchemaRegistryDeserializerDataParser.getInstance().isDataCompatible(ByteBuffer.wrap(serializedData),\na7017fb7 serializer-deserializer/src/test/java/com/amazonaws/services/schemaregistry/deserializers/GlueSchemaRegistryDeserializerDataParserTest.java (Mohit Paliwal 2021-06-29 13:45:29 -0700 142)                                                                                            errorBuilder));\n",
            "commit_hashes": {
                "771f6db2": "    Add AWS Glue Schema Registry library implementation",
                "a7017fb7": "    Add JSON Support (#49)"
            },
            "Commit&issueIDs": {
                "a7017fb7": [
                    "49"
                ]
            },
            "links": [
                "https://github.com/awslabs/aws-glue-schema-registry/issues/49",
                "https://github.com/awslabs/aws-glue-schema-registry/commit/a7017fb7"
            ]
        },
        {
            "poj_link": "https://github.com/graphhopper/jsprit/",
            "file_path": "graphhopper/jsprit/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java",
            "test_name": "whenPickupsAreAdded_vrpShouldContainThem",
            "FQS": "com.graphhopper.jsprit.core.problem.VehicleRoutingProblemTest.whenPickupsAreAdded_vrpShouldContainThem()",
            "start_line": "166",
            "blame_result": "33075b479 jsprit-core/src/test/java/jsprit/core/problem/VehicleRoutingProblemTest.java (oblonski 2015-08-29 12:46:52 +0200 167)         Pickup s1 = mock(Pickup.class);\n33075b479 jsprit-core/src/test/java/jsprit/core/problem/VehicleRoutingProblemTest.java (oblonski 2015-08-29 12:46:52 +0200 168)         when(s1.getId()).thenReturn(\"s1\");\n600087fd3 jsprit-core/src/test/java/jsprit/core/problem/VehicleRoutingProblemTest.java (oblonski 2014-12-18 16:21:18 +0100 169)         when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());\n33075b479 jsprit-core/src/test/java/jsprit/core/problem/VehicleRoutingProblemTest.java (oblonski 2015-08-29 12:46:52 +0200 170)         Pickup s2 = mock(Pickup.class);\n33075b479 jsprit-core/src/test/java/jsprit/core/problem/VehicleRoutingProblemTest.java (oblonski 2015-08-29 12:46:52 +0200 171)         when(s2.getId()).thenReturn(\"s2\");\n",
            "commit_hashes": {
                "33075b479": "    comply with .editorconfig",
                "600087fd3": "    issue #144 - replace deprecated methods"
            },
            "Commit&issueIDs": {
                "600087fd3": [
                    "#144"
                ]
            },
            "links": [
                "https://github.com/graphhopper/jsprit/issues/144",
                "https://github.com/graphhopper/jsprit/commit/600087fd3"
            ]
        },
        {
            "poj_link": "https://github.com/graphhopper/jsprit/",
            "file_path": "graphhopper/jsprit/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java",
            "test_name": "whenDelivieriesAreAdded_vrpShouldContainThem",
            "FQS": "com.graphhopper.jsprit.core.problem.VehicleRoutingProblemTest.whenDelivieriesAreAdded_vrpShouldContainThem()",
            "start_line": "204",
            "blame_result": "33075b479 jsprit-core/src/test/java/jsprit/core/problem/VehicleRoutingProblemTest.java (oblonski 2015-08-29 12:46:52 +0200 205)         Delivery s1 = mock(Delivery.class);\n33075b479 jsprit-core/src/test/java/jsprit/core/problem/VehicleRoutingProblemTest.java (oblonski 2015-08-29 12:46:52 +0200 206)         when(s1.getId()).thenReturn(\"s1\");\n4f2689529 jsprit-core/src/test/java/jsprit/core/problem/VehicleRoutingProblemTest.java (oblonski 2014-07-14 20:56:11 +0200 207)         when(s1.getSize()).thenReturn(Capacity.Builder.newInstance().build());\n600087fd3 jsprit-core/src/test/java/jsprit/core/problem/VehicleRoutingProblemTest.java (oblonski 2014-12-18 16:21:18 +0100 208)         when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());\n33075b479 jsprit-core/src/test/java/jsprit/core/problem/VehicleRoutingProblemTest.java (oblonski 2015-08-29 12:46:52 +0200 209)         Delivery s2 = mock(Delivery.class);\n",
            "commit_hashes": {
                "33075b479": "    comply with .editorconfig",
                "4f2689529": "    added indeces to main elements",
                "600087fd3": "    issue #144 - replace deprecated methods"
            },
            "Commit&issueIDs": {
                "600087fd3": [
                    "#144"
                ]
            },
            "links": [
                "https://github.com/graphhopper/jsprit/issues/144",
                "https://github.com/graphhopper/jsprit/commit/600087fd3"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/JDKSerializabilityTest.java",
            "test_name": "pointerSerializationNonEmpty",
            "FQS": "com.fasterxml.jackson.core.JDKSerializabilityTest.pointerSerializationNonEmpty()",
            "start_line": "216",
            "blame_result": "4f951150f src/test/java/com/fasterxml/jackson/core/TestJDKSerializability.java (Tatu Saloranta 2022-06-16 08:43:16 -0700 217)     {\n4f951150f src/test/java/com/fasterxml/jackson/core/TestJDKSerializability.java (Tatu Saloranta 2022-06-16 08:43:16 -0700 218)         // First, see that we can write and read a general JsonPointer\n240c45594 src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java        (Tatu Saloranta 2013-09-03 21:14:50 -0700 219)         final String INPUT = \"/Image/15/name\";\nca183933a src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java        (Evan Galpin    2022-06-16 11:20:28 -0400 220)         JsonPointer original = JsonPointer.compile(INPUT);\n4f951150f src/test/java/com/fasterxml/jackson/core/TestJDKSerializability.java (Tatu Saloranta 2022-06-16 08:43:16 -0700 221)         byte[] ser = jdkSerialize(original);\n",
            "commit_hashes": {
                "4f951150f": "    Add release notes wrt #762, minor cleanup",
                "240c45594": "    Yet more fixes to JsonPointer handling",
                "ca183933a": "    Make JsonPointer java.io.Serializable (#762)"
            },
            "Commit&issueIDs": {
                "ca183933a": [
                    "762"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/762",
                "https://github.com/FasterXML/jackson-core/commit/ca183933a"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/VersionClassTest.java",
            "test_name": "equalsAndHashCode",
            "FQS": "com.fasterxml.jackson.core.VersionClassTest.equalsAndHashCode()",
            "start_line": "15",
            "blame_result": "321ef007f src/test/java/com/fasterxml/jackson/core/VersionTest.java (Tatu Saloranta 2023-06-18 14:07:30 -0700 16)         Version version1 = new Version(1, 2, 3, \"\", \"\", \"\");\n321ef007f src/test/java/com/fasterxml/jackson/core/VersionTest.java (Tatu Saloranta 2023-06-18 14:07:30 -0700 17)         Version version2 = new Version(1, 2, 3, \"\", \"\", \"\");\n321ef007f src/test/java/com/fasterxml/jackson/core/VersionTest.java (Tatu Saloranta 2023-06-18 14:07:30 -0700 18) \n321ef007f src/test/java/com/fasterxml/jackson/core/VersionTest.java (Tatu Saloranta 2023-06-18 14:07:30 -0700 19)         assertEquals(version1, version2);\n321ef007f src/test/java/com/fasterxml/jackson/core/VersionTest.java (Tatu Saloranta 2023-06-18 14:07:30 -0700 20)         assertEquals(version2, version1);\n",
            "commit_hashes": {
                "321ef007f": "    Minor tweaking post #1050"
            },
            "Commit&issueIDs": {
                "321ef007f": [
                    "#1050"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/1050",
                "https://github.com/FasterXML/jackson-core/commit/321ef007f"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "singleMatchFilteringWithoutPath",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.singleMatchFilteringWithoutPath()",
            "start_line": "223",
            "blame_result": "e183d16b2 (Cowtowncoder    2015-04-29 16:05:00 -0700 224)     {\ne183d16b2 (Cowtowncoder    2015-04-29 16:05:00 -0700 225)         JsonParser p0 = JSON_F.createParser(SIMPLE);\n6feec20c8 (Rafal Foltynski 2017-06-04 05:32:03 +0200 226)         FilteringParserDelegate p = new FilteringParserDelegate(p0,\ne183d16b2 (Cowtowncoder    2015-04-29 16:05:00 -0700 227)                new NameMatchFilter(\"value\"),\n5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 228)                    Inclusion.ONLY_INCLUDE_ALL,\n",
            "commit_hashes": {
                "e183d16b2": "    More testing for parser/filter comb",
                "6feec20c8": "    Fix #208: FilteringParserDelegate match count support",
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)"
            },
            "Commit&issueIDs": {
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/opengoofy/crane4j/",
            "file_path": "opengoofy/crane4j/crane4j-core/src/test/java/cn/crane4j/core/support/DefaultContainerAdapterRegisterTest.java",
            "test_name": "testRegisterAdapter",
            "FQS": "cn.crane4j.core.support.DefaultContainerAdapterRegisterTest.testRegisterAdapter()",
            "start_line": "24",
            "blame_result": "17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 25)         DefaultContainerAdapterRegister register = new DefaultContainerAdapterRegister();\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 26)         Assert.assertNull(register.getAdapter(Void.TYPE));\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 27)         ContainerAdapterRegister.Adapter adapter = (ns, t) -> Containers.empty();\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 28)         register.registerAdapter(Void.TYPE, adapter);\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 29)         Assert.assertSame(adapter, register.getAdapter(Void.TYPE));\n",
            "commit_hashes": {
                "17ce3a5c0": "    Refactor/container adapter register (#151)"
            },
            "Commit&issueIDs": {
                "17ce3a5c0": [
                    "151"
                ]
            },
            "links": [
                "https://github.com/opengoofy/crane4j/issues/151",
                "https://github.com/opengoofy/crane4j/commit/17ce3a5c0"
            ]
        },
        {
            "poj_link": "https://github.com/opengoofy/crane4j/",
            "file_path": "opengoofy/crane4j/crane4j-core/src/test/java/cn/crane4j/core/support/DefaultContainerAdapterRegisterTest.java",
            "test_name": "testAdaptFunction",
            "FQS": "cn.crane4j.core.support.DefaultContainerAdapterRegisterTest.testAdaptFunction()",
            "start_line": "33",
            "blame_result": "17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 34)         ContainerAdapterRegister.Adapter functionAdapter = register.getAdapter(DataProvider.class);\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 35)         Assert.assertNotNull(functionAdapter);\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 36)         DataProvider<Object, Object> dp = ids -> Collections.emptyMap();\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 37)         Assert.assertEquals(functionAdapter, register.getAdapter(dp.getClass()));\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 38)         Container<Object> functionContainer = register.wrapIfPossible(\"test\", dp);\n",
            "commit_hashes": {
                "17ce3a5c0": "    Refactor/container adapter register (#151)"
            },
            "Commit&issueIDs": {
                "17ce3a5c0": [
                    "151"
                ]
            },
            "links": [
                "https://github.com/opengoofy/crane4j/issues/151",
                "https://github.com/opengoofy/crane4j/commit/17ce3a5c0"
            ]
        },
        {
            "poj_link": "https://github.com/opengoofy/crane4j/",
            "file_path": "opengoofy/crane4j/crane4j-core/src/test/java/cn/crane4j/core/support/DefaultContainerAdapterRegisterTest.java",
            "test_name": "testAdaptContainer",
            "FQS": "cn.crane4j.core.support.DefaultContainerAdapterRegisterTest.testAdaptContainer()",
            "start_line": "43",
            "blame_result": "17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 44)         ContainerAdapterRegister.Adapter containerAdapter = register.getAdapter(LambdaContainer.class);\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 45)         Assert.assertNotNull(containerAdapter);\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 46)         Assert.assertEquals(containerAdapter, register.getAdapter(Container.class));\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 47)         Container<Object> container = Containers.empty();\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 48)         Assert.assertSame(container, register.wrapIfPossible(Container.EMPTY_CONTAINER_NAMESPACE, container));\n",
            "commit_hashes": {
                "17ce3a5c0": "    Refactor/container adapter register (#151)"
            },
            "Commit&issueIDs": {
                "17ce3a5c0": [
                    "151"
                ]
            },
            "links": [
                "https://github.com/opengoofy/crane4j/issues/151",
                "https://github.com/opengoofy/crane4j/commit/17ce3a5c0"
            ]
        },
        {
            "poj_link": "https://github.com/opengoofy/crane4j/",
            "file_path": "opengoofy/crane4j/crane4j-core/src/test/java/cn/crane4j/core/support/DefaultContainerAdapterRegisterTest.java",
            "test_name": "testAdaptMap",
            "FQS": "cn.crane4j.core.support.DefaultContainerAdapterRegisterTest.testAdaptMap()",
            "start_line": "52",
            "blame_result": "17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 53)         ContainerAdapterRegister.Adapter mapAdapter = register.getAdapter(LinkedHashMap.class);\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 54)         Assert.assertNotNull(mapAdapter);\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 55)         Assert.assertSame(mapAdapter, register.getAdapter(Map.class));\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 56)         Map<String, Object> map = new HashMap<>();\n17ce3a5c0 (Createsequence 2023-09-11 00:06:35 +0800 57)         Assert.assertEquals(map, register.wrapIfPossible(\"test\", map).get(Collections.emptyList()));\n",
            "commit_hashes": {
                "17ce3a5c0": "    Refactor/container adapter register (#151)"
            },
            "Commit&issueIDs": {
                "17ce3a5c0": [
                    "151"
                ]
            },
            "links": [
                "https://github.com/opengoofy/crane4j/issues/151",
                "https://github.com/opengoofy/crane4j/commit/17ce3a5c0"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "multipleMatchFilteringWithPath1",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.multipleMatchFilteringWithPath1()",
            "start_line": "418",
            "blame_result": "e183d16b2 (Cowtowncoder    2015-04-29 16:05:00 -0700 419)     {\ne183d16b2 (Cowtowncoder    2015-04-29 16:05:00 -0700 420)         JsonParser p0 = JSON_F.createParser(SIMPLE);\n6feec20c8 (Rafal Foltynski 2017-06-04 05:32:03 +0200 421)         FilteringParserDelegate p = new FilteringParserDelegate(p0,\ne183d16b2 (Cowtowncoder    2015-04-29 16:05:00 -0700 422)                 new NameMatchFilter(\"value0\", \"value2\"),\n5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 423)                 Inclusion.INCLUDE_ALL_AND_PATH, true /* multipleMatches */ );\n",
            "commit_hashes": {
                "e183d16b2": "    More testing for parser/filter comb",
                "6feec20c8": "    Fix #208: FilteringParserDelegate match count support",
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)"
            },
            "Commit&issueIDs": {
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "noMatchFiltering1",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.noMatchFiltering1()",
            "start_line": "458",
            "blame_result": "5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 459)     {\n6f810ea79 (Tatu Saloranta  2022-01-02 17:16:13 -0800 460)         String jsonString = a2q(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\nfd32772bb (LokeshN         2016-03-20 17:28:25 +0530 461)         JsonParser p0 = JSON_F.createParser(jsonString);\n6feec20c8 (Rafal Foltynski 2017-06-04 05:32:03 +0200 462)         FilteringParserDelegate p = new FilteringParserDelegate(p0,\n5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 463)             new NameMatchFilter(\"invalid\"),\n",
            "commit_hashes": {
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)",
                "6f810ea79": "    Bit of test code cleanup",
                "fd32772bb": "    Fix for issue 209 - make use of _allowMultipleMatches FilterParsingDelegate",
                "6feec20c8": "    Fix #208: FilteringParserDelegate match count support"
            },
            "Commit&issueIDs": {
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/database/DatabaseErrorTest.java",
            "test_name": "testFromCode",
            "FQS": "com.google.firebase.database.DatabaseErrorTest.testFromCode()",
            "start_line": "12",
            "blame_result": "3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 13)     DatabaseError error = DatabaseError.fromCode(DatabaseError.DATA_STALE);\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 14)     assertEquals(DatabaseError.DATA_STALE, error.getCode());\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 15)     assertEquals(\"The transaction needs to be run again with current data\", error.getMessage());\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 16)     assertEquals(\"\", error.getDetails());\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 17)     assertEquals(\"DatabaseError: \" + error.getMessage(), error.toString());\n",
            "commit_hashes": {
                "3283aa80": "    Adding a Set of New Unit Tests (#96)"
            },
            "Commit&issueIDs": {
                "3283aa80": [
                    "(#96)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/96",
                "https://github.com/firebase/firebase-admin-java/commit/3283aa80"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/database/DatabaseReferenceTest.java",
            "test_name": "testChild",
            "FQS": "com.google.firebase.database.DatabaseReferenceTest.testChild()",
            "start_line": "94",
            "blame_result": "3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 95)     DatabaseReference reference = new DatabaseReference(DB_URL, config);\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 96)     DatabaseReference child = reference.child(\"bar\");\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 97)     assertNotNull(child);\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 98)     assertEquals(\"bar\", child.getKey());\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 99)     assertEquals(reference, child.getParent());\n",
            "commit_hashes": {
                "3283aa80": "    Adding a Set of New Unit Tests (#96)"
            },
            "Commit&issueIDs": {
                "3283aa80": [
                    "(#96)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/96",
                "https://github.com/firebase/firebase-admin-java/commit/3283aa80"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/database/DatabaseReferenceTest.java",
            "test_name": "testPush",
            "FQS": "com.google.firebase.database.DatabaseReferenceTest.testPush()",
            "start_line": "125",
            "blame_result": "3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 126)     DatabaseReference reference = new DatabaseReference(DB_URL, config);\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 127)     DatabaseReference child = reference.push();\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 128)     assertNotNull(child);\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 129)     assertTrue(!Strings.isNullOrEmpty(child.getKey()));\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 130)     assertEquals(reference, child.getParent());\n",
            "commit_hashes": {
                "3283aa80": "    Adding a Set of New Unit Tests (#96)"
            },
            "Commit&issueIDs": {
                "3283aa80": [
                    "(#96)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/96",
                "https://github.com/firebase/firebase-admin-java/commit/3283aa80"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/database/FirebaseDatabaseTest.java",
            "test_name": "testGetInstanceForUrl",
            "FQS": "com.google.firebase.database.FirebaseDatabaseTest.testGetInstanceForUrl()",
            "start_line": "65",
            "blame_result": "^0bc86f9 (Hiranya Jayathilaka 2017-05-04 10:32:58 -0700 66)     FirebaseApp.initializeApp(firebaseOptions);\n9ace7b1f (Saraj Munjal        2019-08-23 14:42:21 -0700 67)     try {\n9ace7b1f (Saraj Munjal        2019-08-23 14:42:21 -0700 68)       String url = \"https://firebase-db-test2.firebaseio.com\";\n9ace7b1f (Saraj Munjal        2019-08-23 14:42:21 -0700 69)       FirebaseDatabase otherDatabase = FirebaseDatabase.getInstance(url);\n9ace7b1f (Saraj Munjal        2019-08-23 14:42:21 -0700 70)       assertNotNull(otherDatabase);\n",
            "commit_hashes": {
                "0bc86f9": "    Initial code migration",
                "9ace7b1f": "    feat(rtdb): Connect to RTDB emulator when valid emulator URL is passed OR env vars are set correctly (#299)"
            },
            "Commit&issueIDs": {
                "9ace7b1f": [
                    "(#299)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/299",
                "https://github.com/firebase/firebase-admin-java/commit/9ace7b1f"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/database/FirebaseDatabaseTest.java",
            "test_name": "testGetInstanceForApp",
            "FQS": "com.google.firebase.database.FirebaseDatabaseTest.testGetInstanceForApp()",
            "start_line": "98",
            "blame_result": "^0bc86f9 (Hiranya Jayathilaka 2017-05-04 10:32:58 -0700  99)     FirebaseApp app = FirebaseApp.initializeApp(firebaseOptions, \"testGetInstanceForApp\");\n9ace7b1f (Saraj Munjal        2019-08-23 14:42:21 -0700 100)     try {\n9ace7b1f (Saraj Munjal        2019-08-23 14:42:21 -0700 101)       FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n9ace7b1f (Saraj Munjal        2019-08-23 14:42:21 -0700 102)       assertNotNull(db);\n9ace7b1f (Saraj Munjal        2019-08-23 14:42:21 -0700 103)       assertSame(db, FirebaseDatabase.getInstance(app));\n",
            "commit_hashes": {
                "0bc86f9": "    Initial code migration",
                "9ace7b1f": "    feat(rtdb): Connect to RTDB emulator when valid emulator URL is passed OR env vars are set correctly (#299)"
            },
            "Commit&issueIDs": {
                "9ace7b1f": [
                    "(#299)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/299",
                "https://github.com/firebase/firebase-admin-java/commit/9ace7b1f"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/database/collection/ImmutableSortedSetTest.java",
            "test_name": "testImmutableSortedSet",
            "FQS": "com.google.firebase.database.collection.ImmutableSortedSetTest.testImmutableSortedSet()",
            "start_line": "21",
            "blame_result": "cc470452 (Hiranya Jayathilaka 2017-12-06 12:06:09 -0800 22)     ImmutableSortedSet<String> set = newSet();\ncc470452 (Hiranya Jayathilaka 2017-12-06 12:06:09 -0800 23)     assertEquals(3, set.size());\ncc470452 (Hiranya Jayathilaka 2017-12-06 12:06:09 -0800 24)     assertFalse(set.isEmpty());\ncc470452 (Hiranya Jayathilaka 2017-12-06 12:06:09 -0800 25)     assertEquals(\"bar\", set.getMinEntry());\ncc470452 (Hiranya Jayathilaka 2017-12-06 12:06:09 -0800 26)     assertEquals(\"foo\", set.getMaxEntry());\n",
            "commit_hashes": {
                "cc470452": "    Improving Unit Test Coverage (#100)"
            },
            "Commit&issueIDs": {
                "cc470452": [
                    "(#100)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/100",
                "https://github.com/firebase/firebase-admin-java/commit/cc470452"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "noMatchFiltering2",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.noMatchFiltering2()",
            "start_line": "473",
            "blame_result": "5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 474)     {\n6f810ea79 (Tatu Saloranta  2022-01-02 17:16:13 -0800 475)         String object = a2q(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 476)         String jsonString = String.format(\"[%s,%s,%s]\", object, object, object);\nfd32772bb (LokeshN         2016-03-20 17:28:25 +0530 477)         JsonParser p0 = JSON_F.createParser(jsonString);\n6feec20c8 (Rafal Foltynski 2017-06-04 05:32:03 +0200 478)         FilteringParserDelegate p = new FilteringParserDelegate(p0,\n",
            "commit_hashes": {
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)",
                "6f810ea79": "    Bit of test code cleanup",
                "fd32772bb": "    Fix for issue 209 - make use of _allowMultipleMatches FilterParsingDelegate",
                "6feec20c8": "    Fix #208: FilteringParserDelegate match count support"
            },
            "Commit&issueIDs": {
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/database/utilities/PairTest.java",
            "test_name": "testPair",
            "FQS": "com.google.firebase.database.utilities.PairTest.testPair()",
            "start_line": "28",
            "blame_result": "3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 29)     Pair<String, Integer> pair1 = new Pair<>(\"foo\", 99);\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 30)     assertEquals(\"foo\", pair1.getFirst());\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 31)     assertEquals(99, (int) pair1.getSecond());\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 32)     assertEquals(\"Pair(foo,99)\", pair1.toString());\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 33) \n",
            "commit_hashes": {
                "3283aa80": "    Adding a Set of New Unit Tests (#96)"
            },
            "Commit&issueIDs": {
                "3283aa80": [
                    "(#96)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/96",
                "https://github.com/firebase/firebase-admin-java/commit/3283aa80"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/database/utilities/PairTest.java",
            "test_name": "testPairWithNull",
            "FQS": "com.google.firebase.database.utilities.PairTest.testPairWithNull()",
            "start_line": "52",
            "blame_result": "3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 53)     Pair<String, String> pair1 = new Pair<>(\"foo\", null);\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 54)     assertEquals(\"foo\", pair1.getFirst());\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 55)     assertNull(pair1.getSecond());\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 56)     assertEquals(\"Pair(foo,null)\", pair1.toString());\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 57) \n",
            "commit_hashes": {
                "3283aa80": "    Adding a Set of New Unit Tests (#96)"
            },
            "Commit&issueIDs": {
                "3283aa80": [
                    "(#96)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/96",
                "https://github.com/firebase/firebase-admin-java/commit/3283aa80"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/database/utilities/PushIdGeneratorTest.java",
            "test_name": "testGenerate",
            "FQS": "com.google.firebase.database.utilities.PushIdGeneratorTest.testGenerate()",
            "start_line": "34",
            "blame_result": "3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 35)     String id1 = PushIdGenerator.generatePushChildName(100L);\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 36)     checkId(id1);\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 37) \n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 38)     String id2 = PushIdGenerator.generatePushChildName(100L);\n3283aa80 (Hiranya Jayathilaka 2017-11-09 16:59:28 -0800 39)     checkId(id2);\n",
            "commit_hashes": {
                "3283aa80": "    Adding a Set of New Unit Tests (#96)"
            },
            "Commit&issueIDs": {
                "3283aa80": [
                    "(#96)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/96",
                "https://github.com/firebase/firebase-admin-java/commit/3283aa80"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/iid/FirebaseInstanceIdTest.java",
            "test_name": "testDeleteInstanceId",
            "FQS": "com.google.firebase.iid.FirebaseInstanceIdTest.testDeleteInstanceId()",
            "start_line": "137",
            "blame_result": "fc1d49ca src/test/java/com/google/firebase/iid/FirebaseInstanceIdTest.java   (Hiranya Jayathilaka 2017-12-20 11:11:15 -0800 138)     MockLowLevelHttpResponse response = new MockLowLevelHttpResponse().setContent(\"{}\");\n093c28ed src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java (Hiranya Jayathilaka 2017-06-01 15:04:57 -0700 139)     MockHttpTransport transport = new MockHttpTransport.Builder()\n093c28ed src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java (Hiranya Jayathilaka 2017-06-01 15:04:57 -0700 140)         .setLowLevelHttpResponse(response)\n093c28ed src/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java (Hiranya Jayathilaka 2017-06-01 15:04:57 -0700 141)         .build();\n0b356e1f src/test/java/com/google/firebase/iid/FirebaseInstanceIdTest.java   (Hiranya Jayathilaka 2020-09-10 14:27:15 -0700 142)     FirebaseOptions options = APP_OPTIONS.toBuilder()\n",
            "commit_hashes": {
                "fc1d49ca": "    Implemented IID Delete API (#99)",
                "093c28ed": "    Implementing the User Management API (#34)",
                "0b356e1f": "    fix: Cleaning up FirebaseApp state management (#476)"
            },
            "Commit&issueIDs": {
                "fc1d49ca": [
                    "(#99)"
                ],
                "093c28ed": [
                    "(#34)"
                ],
                "0b356e1f": [
                    "(#476)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/99",
                "https://github.com/firebase/firebase-admin-java/commit/fc1d49ca",
                "https://github.com/firebase/firebase-admin-java/issues/34",
                "https://github.com/firebase/firebase-admin-java/commit/093c28ed",
                "https://github.com/firebase/firebase-admin-java/issues/476",
                "https://github.com/firebase/firebase-admin-java/commit/0b356e1f"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/messaging/FirebaseMessagingTest.java",
            "test_name": "testGetInstance",
            "FQS": "com.google.firebase.messaging.FirebaseMessagingTest.testGetInstance()",
            "start_line": "95",
            "blame_result": "c9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700  96)     FirebaseApp.initializeApp(TEST_OPTIONS);\nf83cdecd (Hiranya Jayathilaka 2018-02-12 18:32:16 -0800  97) \nf83cdecd (Hiranya Jayathilaka 2018-02-12 18:32:16 -0800  98)     FirebaseMessaging messaging = FirebaseMessaging.getInstance();\nc9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700  99) \ne19ca297 (Hiranya Jayathilaka 2019-03-13 17:00:35 -0700 100)     assertSame(messaging, FirebaseMessaging.getInstance());\n",
            "commit_hashes": {
                "c9c9aaca": "    Refactoring the FCM API (#261)",
                "f83cdecd": "    Firebase Cloud Messaging API (#127)",
                "e19ca297": "    Implementing FCM sendAll and sendMulticast APIs (#247)"
            },
            "Commit&issueIDs": {
                "c9c9aaca": [
                    "(#261)"
                ],
                "f83cdecd": [
                    "(#127)"
                ],
                "e19ca297": [
                    "(#247)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/261",
                "https://github.com/firebase/firebase-admin-java/commit/c9c9aaca",
                "https://github.com/firebase/firebase-admin-java/issues/127",
                "https://github.com/firebase/firebase-admin-java/commit/f83cdecd",
                "https://github.com/firebase/firebase-admin-java/issues/247",
                "https://github.com/firebase/firebase-admin-java/commit/e19ca297"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/messaging/FirebaseMessagingTest.java",
            "test_name": "testGetInstanceByApp",
            "FQS": "com.google.firebase.messaging.FirebaseMessagingTest.testGetInstanceByApp()",
            "start_line": "104",
            "blame_result": "c9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700 105)     FirebaseApp app = FirebaseApp.initializeApp(TEST_OPTIONS, \"custom-app\");\ne19ca297 (Hiranya Jayathilaka 2019-03-13 17:00:35 -0700 106) \ne19ca297 (Hiranya Jayathilaka 2019-03-13 17:00:35 -0700 107)     FirebaseMessaging messaging = FirebaseMessaging.getInstance(app);\nc9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700 108) \nf83cdecd (Hiranya Jayathilaka 2018-02-12 18:32:16 -0800 109)     assertSame(messaging, FirebaseMessaging.getInstance(app));\n",
            "commit_hashes": {
                "c9c9aaca": "    Refactoring the FCM API (#261)",
                "e19ca297": "    Implementing FCM sendAll and sendMulticast APIs (#247)",
                "f83cdecd": "    Firebase Cloud Messaging API (#127)"
            },
            "Commit&issueIDs": {
                "c9c9aaca": [
                    "(#261)"
                ],
                "e19ca297": [
                    "(#247)"
                ],
                "f83cdecd": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/261",
                "https://github.com/firebase/firebase-admin-java/commit/c9c9aaca",
                "https://github.com/firebase/firebase-admin-java/issues/247",
                "https://github.com/firebase/firebase-admin-java/commit/e19ca297",
                "https://github.com/firebase/firebase-admin-java/issues/127",
                "https://github.com/firebase/firebase-admin-java/commit/f83cdecd"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/messaging/FirebaseMessagingTest.java",
            "test_name": "testDefaultMessagingClient",
            "FQS": "com.google.firebase.messaging.FirebaseMessagingTest.testDefaultMessagingClient()",
            "start_line": "113",
            "blame_result": "c9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700 114)     FirebaseApp app = FirebaseApp.initializeApp(TEST_OPTIONS, \"custom-app\");\ne19ca297 (Hiranya Jayathilaka 2019-03-13 17:00:35 -0700 115)     FirebaseMessaging messaging = FirebaseMessaging.getInstance(app);\nc9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700 116) \nc9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700 117)     FirebaseMessagingClient client = messaging.getMessagingClient();\nc9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700 118) \n",
            "commit_hashes": {
                "c9c9aaca": "    Refactoring the FCM API (#261)",
                "e19ca297": "    Implementing FCM sendAll and sendMulticast APIs (#247)"
            },
            "Commit&issueIDs": {
                "c9c9aaca": [
                    "(#261)"
                ],
                "e19ca297": [
                    "(#247)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/261",
                "https://github.com/firebase/firebase-admin-java/commit/c9c9aaca",
                "https://github.com/firebase/firebase-admin-java/issues/247",
                "https://github.com/firebase/firebase-admin-java/commit/e19ca297"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "noMatchFiltering3",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.noMatchFiltering3()",
            "start_line": "489",
            "blame_result": "5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 490)     {\n6f810ea79 (Tatu Saloranta  2022-01-02 17:16:13 -0800 491)         String object = a2q(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 492)         String jsonString = String.format(\"[[%s],[%s],[%s]]\", object, object, object);\nfd32772bb (LokeshN         2016-03-20 17:28:25 +0530 493)         JsonParser p0 = JSON_F.createParser(jsonString);\n6feec20c8 (Rafal Foltynski 2017-06-04 05:32:03 +0200 494)         FilteringParserDelegate p = new FilteringParserDelegate(p0,\n",
            "commit_hashes": {
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)",
                "6f810ea79": "    Bit of test code cleanup",
                "fd32772bb": "    Fix for issue 209 - make use of _allowMultipleMatches FilterParsingDelegate",
                "6feec20c8": "    Fix #208: FilteringParserDelegate match count support"
            },
            "Commit&issueIDs": {
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/messaging/FirebaseMessagingTest.java",
            "test_name": "testDefaultInstanceIdClient",
            "FQS": "com.google.firebase.messaging.FirebaseMessagingTest.testDefaultInstanceIdClient()",
            "start_line": "126",
            "blame_result": "c9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700 127)     FirebaseApp app = FirebaseApp.initializeApp(TEST_OPTIONS, \"custom-app\");\ne19ca297 (Hiranya Jayathilaka 2019-03-13 17:00:35 -0700 128)     FirebaseMessaging messaging = FirebaseMessaging.getInstance(app);\nc9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700 129) \nc9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700 130)     InstanceIdClient client = messaging.getInstanceIdClient();\nc9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700 131) \n",
            "commit_hashes": {
                "c9c9aaca": "    Refactoring the FCM API (#261)",
                "e19ca297": "    Implementing FCM sendAll and sendMulticast APIs (#247)"
            },
            "Commit&issueIDs": {
                "c9c9aaca": [
                    "(#261)"
                ],
                "e19ca297": [
                    "(#247)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/261",
                "https://github.com/firebase/firebase-admin-java/commit/c9c9aaca",
                "https://github.com/firebase/firebase-admin-java/issues/247",
                "https://github.com/firebase/firebase-admin-java/commit/e19ca297"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/messaging/FirebaseMessagingTest.java",
            "test_name": "testInstanceIdClientWithoutProjectId",
            "FQS": "com.google.firebase.messaging.FirebaseMessagingTest.testInstanceIdClientWithoutProjectId()",
            "start_line": "171",
            "blame_result": "c9c9aaca (Hiranya Jayathilaka 2019-04-18 14:45:30 -0700 172)     FirebaseOptions options = FirebaseOptions.builder()\nf83cdecd (Hiranya Jayathilaka 2018-02-12 18:32:16 -0800 173)         .setCredentials(new MockGoogleCredentials(\"test-token\"))\nf83cdecd (Hiranya Jayathilaka 2018-02-12 18:32:16 -0800 174)         .build();\nf83cdecd (Hiranya Jayathilaka 2018-02-12 18:32:16 -0800 175)     FirebaseApp.initializeApp(options);\nf83cdecd (Hiranya Jayathilaka 2018-02-12 18:32:16 -0800 176)     FirebaseMessaging messaging = FirebaseMessaging.getInstance();\n",
            "commit_hashes": {
                "c9c9aaca": "    Refactoring the FCM API (#261)",
                "f83cdecd": "    Firebase Cloud Messaging API (#127)"
            },
            "Commit&issueIDs": {
                "c9c9aaca": [
                    "(#261)"
                ],
                "f83cdecd": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/261",
                "https://github.com/firebase/firebase-admin-java/commit/c9c9aaca",
                "https://github.com/firebase/firebase-admin-java/issues/127",
                "https://github.com/firebase/firebase-admin-java/commit/f83cdecd"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/projectmanagement/AndroidAppTest.java",
            "test_name": "testAndroidAppMetadataEquality",
            "FQS": "com.google.firebase.projectmanagement.AndroidAppTest.testAndroidAppMetadataEquality()",
            "start_line": "202",
            "blame_result": "7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 203)     AndroidAppMetadata other =\n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 204)         new AndroidAppMetadata(APP_NAME, APP_ID, APP_DISPLAY_NAME, PROJECT_ID, APP_PACKAGE_NAME);\n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 205) \n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 206)     assertEquals(ANDROID_APP_METADATA.hashCode(), other.hashCode());\n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 207)     assertEquals(ANDROID_APP_METADATA, other);\n",
            "commit_hashes": {
                "7f5c012f": "    More unit tests for project management API (#229)"
            },
            "Commit&issueIDs": {
                "7f5c012f": [
                    "(#229)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/229",
                "https://github.com/firebase/firebase-admin-java/commit/7f5c012f"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/projectmanagement/IosAppTest.java",
            "test_name": "testIosAppMetadataEquality",
            "FQS": "com.google.firebase.projectmanagement.IosAppTest.testIosAppMetadataEquality()",
            "start_line": "213",
            "blame_result": "7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 214)     IosAppMetadata other = new IosAppMetadata(\n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 215)         TEST_APP_NAME,\n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 216)         TEST_APP_ID,\n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 217)         TEST_APP_DISPLAY_NAME,\n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 218)         TEST_PROJECT_ID,\n",
            "commit_hashes": {
                "7f5c012f": "    More unit tests for project management API (#229)"
            },
            "Commit&issueIDs": {
                "7f5c012f": [
                    "(#229)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/229",
                "https://github.com/firebase/firebase-admin-java/commit/7f5c012f"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/projectmanagement/ShaCertificateTest.java",
            "test_name": "testEquality",
            "FQS": "com.google.firebase.projectmanagement.ShaCertificateTest.testEquality()",
            "start_line": "63",
            "blame_result": "7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 64)     ShaCertificate shaOne = ShaCertificate.create(\"1111AAAA1111AAAA1111AAAA1111AAAA1111AAAA\");\n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 65)     ShaCertificate shaTwo = ShaCertificate.create(\"1111AAAA1111AAAA1111AAAA1111AAAA1111AAAA\");\n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 66) \n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 67)     assertEquals(shaOne, shaTwo);\n7f5c012f (Hiranya Jayathilaka 2018-11-30 13:49:13 -0800 68)     assertEquals(shaOne.hashCode(), shaTwo.hashCode());\n",
            "commit_hashes": {
                "7f5c012f": "    More unit tests for project management API (#229)"
            },
            "Commit&issueIDs": {
                "7f5c012f": [
                    "(#229)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/229",
                "https://github.com/firebase/firebase-admin-java/commit/7f5c012f"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java",
            "test_name": "testGetInstance",
            "FQS": "com.google.firebase.remoteconfig.FirebaseRemoteConfigTest.testGetInstance()",
            "start_line": "53",
            "blame_result": "5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 54)     FirebaseApp.initializeApp(TEST_OPTIONS);\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 55) \n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 56)     FirebaseRemoteConfig remoteConfig = FirebaseRemoteConfig.getInstance();\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 57) \n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 58)     assertSame(remoteConfig, FirebaseRemoteConfig.getInstance());\n",
            "commit_hashes": {
                "5f3b696d": "    feat(rc): Add Remote Config Management API  (#502)"
            },
            "Commit&issueIDs": {
                "5f3b696d": [
                    "(#502)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/502",
                "https://github.com/firebase/firebase-admin-java/commit/5f3b696d"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java",
            "test_name": "testGetInstanceByApp",
            "FQS": "com.google.firebase.remoteconfig.FirebaseRemoteConfigTest.testGetInstanceByApp()",
            "start_line": "62",
            "blame_result": "5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 63)     FirebaseApp app = FirebaseApp.initializeApp(TEST_OPTIONS, \"custom-app\");\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 64) \n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 65)     FirebaseRemoteConfig remoteConfig = FirebaseRemoteConfig.getInstance(app);\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 66) \n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 67)     assertSame(remoteConfig, FirebaseRemoteConfig.getInstance(app));\n",
            "commit_hashes": {
                "5f3b696d": "    feat(rc): Add Remote Config Management API  (#502)"
            },
            "Commit&issueIDs": {
                "5f3b696d": [
                    "(#502)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/502",
                "https://github.com/firebase/firebase-admin-java/commit/5f3b696d"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/remoteconfig/ParameterTest.java",
            "test_name": "testEquality",
            "FQS": "com.google.firebase.remoteconfig.ParameterTest.testEquality()",
            "start_line": "56",
            "blame_result": "5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 57)     final Parameter parameterOne = new Parameter()\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 58)             .setDefaultValue(ParameterValue.of(\"hello\"));\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 59)     final Parameter parameterTwo = new Parameter()\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 60)             .setDefaultValue(ParameterValue.of(\"hello\"));\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 61) \n",
            "commit_hashes": {
                "5f3b696d": "    feat(rc): Add Remote Config Management API  (#502)"
            },
            "Commit&issueIDs": {
                "5f3b696d": [
                    "(#502)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/502",
                "https://github.com/firebase/firebase-admin-java/commit/5f3b696d"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/remoteconfig/ParameterValueTest.java",
            "test_name": "testEquality",
            "FQS": "com.google.firebase.remoteconfig.ParameterValueTest.testEquality()",
            "start_line": "41",
            "blame_result": "5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 42)     ParameterValue.Explicit parameterValueOne = ParameterValue.of(\"value\");\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 43)     ParameterValue.Explicit parameterValueTwo = ParameterValue.of(\"value\");\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 44)     ParameterValue.Explicit parameterValueThree = ParameterValue.of(\"title\");\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 45) \n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 46)     assertEquals(parameterValueOne, parameterValueTwo);\n",
            "commit_hashes": {
                "5f3b696d": "    feat(rc): Add Remote Config Management API  (#502)"
            },
            "Commit&issueIDs": {
                "5f3b696d": [
                    "(#502)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/502",
                "https://github.com/firebase/firebase-admin-java/commit/5f3b696d"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java",
            "test_name": "testEquality",
            "FQS": "com.google.firebase.remoteconfig.TemplateTest.testEquality()",
            "start_line": "133",
            "blame_result": "5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 134)     final Template templateOne = new Template();\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 135) \n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 136)     assertEquals(EMPTY_TEMPLATE, templateOne);\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 137) \n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 138)     final Template templateTwo = new Template()\n",
            "commit_hashes": {
                "5f3b696d": "    feat(rc): Add Remote Config Management API  (#502)"
            },
            "Commit&issueIDs": {
                "5f3b696d": [
                    "(#502)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/502",
                "https://github.com/firebase/firebase-admin-java/commit/5f3b696d"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/remoteconfig/TemplateTest.java",
            "test_name": "testToJSONAndFromJSON",
            "FQS": "com.google.firebase.remoteconfig.TemplateTest.testToJSONAndFromJSON()",
            "start_line": "333",
            "blame_result": "5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 334)     Template originalTemplate = new Template();\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 335)     Template otherTemplate = Template.fromJSON(originalTemplate.toJSON());\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 336) \n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 337)     assertEquals(originalTemplate, otherTemplate);\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 338) \n",
            "commit_hashes": {
                "5f3b696d": "    feat(rc): Add Remote Config Management API  (#502)"
            },
            "Commit&issueIDs": {
                "5f3b696d": [
                    "(#502)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/502",
                "https://github.com/firebase/firebase-admin-java/commit/5f3b696d"
            ]
        },
        {
            "poj_link": "https://github.com/firebase/firebase-admin-java/",
            "file_path": "firebase/firebase-admin-java/src/test/java/com/google/firebase/remoteconfig/VersionTest.java",
            "test_name": "testEquality",
            "FQS": "com.google.firebase.remoteconfig.VersionTest.testEquality()",
            "start_line": "70",
            "blame_result": "5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 71)     final Version versionOne = new Version(new VersionResponse());\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 72)     final Version versionTwo = new Version(new VersionResponse());\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 73) \n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 74)     assertEquals(versionOne, versionTwo);\n5f3b696d (Lahiru Maramba 2020-12-14 14:40:18 -0500 75) \n",
            "commit_hashes": {
                "5f3b696d": "    feat(rc): Add Remote Config Management API  (#502)"
            },
            "Commit&issueIDs": {
                "5f3b696d": [
                    "(#502)"
                ]
            },
            "links": [
                "https://github.com/firebase/firebase-admin-java/issues/502",
                "https://github.com/firebase/firebase-admin-java/commit/5f3b696d"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "noMatchFiltering4",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.noMatchFiltering4()",
            "start_line": "505",
            "blame_result": "5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 506)     {\n6f810ea79 (Tatu Saloranta  2022-01-02 17:16:13 -0800 507)         String jsonString = a2q(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\nfd32772bb (LokeshN         2016-03-20 17:28:25 +0530 508)         JsonParser p0 = JSON_F.createParser(jsonString);\n6feec20c8 (Rafal Foltynski 2017-06-04 05:32:03 +0200 509)         FilteringParserDelegate p = new FilteringParserDelegate(p0,\n5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 510)             new StrictNameMatchFilter(\"invalid\"),\n",
            "commit_hashes": {
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)",
                "6f810ea79": "    Bit of test code cleanup",
                "fd32772bb": "    Fix for issue 209 - make use of _allowMultipleMatches FilterParsingDelegate",
                "6feec20c8": "    Fix #208: FilteringParserDelegate match count support"
            },
            "Commit&issueIDs": {
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "noMatchFiltering5",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.noMatchFiltering5()",
            "start_line": "520",
            "blame_result": "5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 521)     {\n6f810ea79 (Tatu Saloranta  2022-01-02 17:16:13 -0800 522)         String object = a2q(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 523)         String jsonString = String.format(\"[%s,%s,%s]\", object, object, object);\nfd32772bb (LokeshN         2016-03-20 17:28:25 +0530 524)         JsonParser p0 = JSON_F.createParser(jsonString);\n6feec20c8 (Rafal Foltynski 2017-06-04 05:32:03 +0200 525)         FilteringParserDelegate p = new FilteringParserDelegate(p0,\n",
            "commit_hashes": {
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)",
                "6f810ea79": "    Bit of test code cleanup",
                "fd32772bb": "    Fix for issue 209 - make use of _allowMultipleMatches FilterParsingDelegate",
                "6feec20c8": "    Fix #208: FilteringParserDelegate match count support"
            },
            "Commit&issueIDs": {
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "noMatchFiltering6",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.noMatchFiltering6()",
            "start_line": "536",
            "blame_result": "5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 537)     {\n6f810ea79 (Tatu Saloranta  2022-01-02 17:16:13 -0800 538)         String object = a2q(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 539)         String jsonString = String.format(\"[[%s],[%s],[%s]]\", object, object, object);\nfd32772bb (LokeshN         2016-03-20 17:28:25 +0530 540)         JsonParser p0 = JSON_F.createParser(jsonString);\n6feec20c8 (Rafal Foltynski 2017-06-04 05:32:03 +0200 541)         FilteringParserDelegate p = new FilteringParserDelegate(p0,\n",
            "commit_hashes": {
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)",
                "6f810ea79": "    Bit of test code cleanup",
                "fd32772bb": "    Fix for issue 209 - make use of _allowMultipleMatches FilterParsingDelegate",
                "6feec20c8": "    Fix #208: FilteringParserDelegate match count support"
            },
            "Commit&issueIDs": {
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "valueOmitsFieldName1",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.valueOmitsFieldName1()",
            "start_line": "552",
            "blame_result": "d4d97a6ab (Jonathan Haber  2022-01-24 18:51:50 -0500 553)     {\n5fc8c6655 (Tatu Saloranta  2022-07-25 13:57:08 -0700 554)         String jsonString = a2q(\"{'a':123,'array':[1,2]}\");\nb4708aa16 (Tatu Saloranta  2021-12-31 14:30:45 -0800 555)         JsonParser p0 = JSON_F.createParser(jsonString);\n6feec20c8 (Rafal Foltynski 2017-06-04 05:32:03 +0200 556)         FilteringParserDelegate p = new FilteringParserDelegate(p0,\nd4d97a6ab (Jonathan Haber  2022-01-24 18:51:50 -0500 557)             new NoArraysFilter(),\n",
            "commit_hashes": {
                "d4d97a6ab": "    Test is now passing (#740)",
                "5fc8c6655": "    Minor test cleanup",
                "b4708aa16": "    Revert \"Update Maven wrapper (#732)\" (#738)",
                "6feec20c8": "    Fix #208: FilteringParserDelegate match count support"
            },
            "Commit&issueIDs": {
                "d4d97a6ab": [
                    "740"
                ],
                "b4708aa16": [
                    "738"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/740",
                "https://github.com/FasterXML/jackson-core/commit/d4d97a6ab",
                "https://github.com/FasterXML/jackson-core/issues/738",
                "https://github.com/FasterXML/jackson-core/commit/b4708aa16"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "valueOmitsFieldName2",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.valueOmitsFieldName2()",
            "start_line": "567",
            "blame_result": "5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 568)     {\n6f810ea79 (Tatu Saloranta  2022-01-02 17:16:13 -0800 569)         String jsonString = a2q(\"['a',{'value0':3,'b':{'value':4}},123]\");\nfd32772bb (LokeshN         2016-03-20 17:28:25 +0530 570)         JsonParser p0 = JSON_F.createParser(jsonString);\n6feec20c8 (Rafal Foltynski 2017-06-04 05:32:03 +0200 571)         FilteringParserDelegate p = new FilteringParserDelegate(p0,\n5d3a25664 (Jonathan Haber  2020-11-06 17:21:37 -0500 572)             new NoObjectsFilter(),\n",
            "commit_hashes": {
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)",
                "6f810ea79": "    Bit of test code cleanup",
                "fd32772bb": "    Fix for issue 209 - make use of _allowMultipleMatches FilterParsingDelegate",
                "6feec20c8": "    Fix #208: FilteringParserDelegate match count support"
            },
            "Commit&issueIDs": {
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "basicSingleMatchFilteringWithPath",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.basicSingleMatchFilteringWithPath()",
            "start_line": "613",
            "blame_result": "e183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 614)     {\ne183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 615)         JsonParser p0 = JSON_F.createParser(SIMPLE);\ne183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 616)         JsonParser p = new FilteringParserDelegate(p0,\ne183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 617)                 new NameMatchFilter(\"value\"),\n5d3a25664 (Jonathan Haber 2020-11-06 17:21:37 -0500 618)                 Inclusion.INCLUDE_ALL_AND_PATH,\n",
            "commit_hashes": {
                "e183d16b2": "    More testing for parser/filter comb",
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)"
            },
            "Commit&issueIDs": {
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "tokensSingleMatchWithPath",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.tokensSingleMatchWithPath()",
            "start_line": "628",
            "blame_result": "e183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 629)     {\ne183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 630)         JsonParser p0 = JSON_F.createParser(SIMPLE);\ne183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 631)         JsonParser p = new FilteringParserDelegate(p0,\ne183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 632)                 new NameMatchFilter(\"value\"),\n5d3a25664 (Jonathan Haber 2020-11-06 17:21:37 -0500 633)                 Inclusion.INCLUDE_ALL_AND_PATH,\n",
            "commit_hashes": {
                "e183d16b2": "    More testing for parser/filter comb",
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)"
            },
            "Commit&issueIDs": {
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "includeEmptyArray",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.includeEmptyArray()",
            "start_line": "171",
            "blame_result": "6f810ea79 src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java    (Tatu Saloranta 2022-01-02 17:16:13 -0800 172)             return !contentsFiltered;\n6f810ea79 src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java    (Tatu Saloranta 2022-01-02 17:16:13 -0800 173)         }\n6f810ea79 src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java    (Tatu Saloranta 2022-01-02 17:16:13 -0800 174) \n8bed4d836 src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java (Nik Everett    2022-01-02 19:41:44 -0500 175)         @Override\n8bed4d836 src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java (Nik Everett    2022-01-02 19:41:44 -0500 176)         public boolean includeEmptyObject(boolean contentsFiltered) {\n",
            "commit_hashes": {
                "6f810ea79": "    Bit of test code cleanup",
                "8bed4d836": "    Allow TokenFilter to preserve empty (#729)"
            },
            "Commit&issueIDs": {
                "8bed4d836": [
                    "729"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/729",
                "https://github.com/FasterXML/jackson-core/commit/8bed4d836"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "includeEmptyObject",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.includeEmptyObject()",
            "start_line": "176",
            "blame_result": "8bed4d836 src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java (Nik Everett 2022-01-02 19:41:44 -0500 177)             return !contentsFiltered;\n8bed4d836 src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java (Nik Everett 2022-01-02 19:41:44 -0500 178)         }\n8bed4d836 src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java (Nik Everett 2022-01-02 19:41:44 -0500 179) \n8bed4d836 src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java (Nik Everett 2022-01-02 19:41:44 -0500 180)         @Override\n8bed4d836 src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java (Nik Everett 2022-01-02 19:41:44 -0500 181)         public boolean _includeScalar() {\n",
            "commit_hashes": {
                "8bed4d836": "    Allow TokenFilter to preserve empty (#729)"
            },
            "Commit&issueIDs": {
                "8bed4d836": [
                    "729"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/729",
                "https://github.com/FasterXML/jackson-core/commit/8bed4d836"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "includeEmptyArrayInObject",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.includeEmptyArrayInObject()",
            "start_line": "770",
            "blame_result": "6f810ea79 (Tatu Saloranta 2022-01-02 17:16:13 -0800 771)         JsonParser p0 = JSON_F.createParser(a2q(\n8bed4d836 (Nik Everett    2022-01-02 19:41:44 -0500 772)                 \"{'object_with_empty_array':{'foo':[]},'object_with_filtered_array':{'foo':[5]}}\"));\ne183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 773)         JsonParser p = new FilteringParserDelegate(p0,\n8bed4d836 (Nik Everett    2022-01-02 19:41:44 -0500 774)                 INCLUDE_EMPTY_IF_NOT_FILTERED,\n5d3a25664 (Jonathan Haber 2020-11-06 17:21:37 -0500 775)                 Inclusion.INCLUDE_ALL_AND_PATH,\n",
            "commit_hashes": {
                "6f810ea79": "    Bit of test code cleanup",
                "8bed4d836": "    Allow TokenFilter to preserve empty (#729)",
                "e183d16b2": "    More testing for parser/filter comb",
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)"
            },
            "Commit&issueIDs": {
                "8bed4d836": [
                    "729"
                ],
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/729",
                "https://github.com/FasterXML/jackson-core/commit/8bed4d836",
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "includeEmptyObjectInArray",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.includeEmptyObjectInArray()",
            "start_line": "796",
            "blame_result": "6f810ea79 (Tatu Saloranta 2022-01-02 17:16:13 -0800 797)         JsonParser p0 = JSON_F.createParser(a2q(\n8bed4d836 (Nik Everett    2022-01-02 19:41:44 -0500 798)                 \"{'array_with_empty_object':[{}],'array_with_filtered_object':[{'foo':5}]}\"));\ne183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 799)         JsonParser p = new FilteringParserDelegate(p0,\n8bed4d836 (Nik Everett    2022-01-02 19:41:44 -0500 800)                 INCLUDE_EMPTY_IF_NOT_FILTERED,\n5d3a25664 (Jonathan Haber 2020-11-06 17:21:37 -0500 801)                 Inclusion.INCLUDE_ALL_AND_PATH,\n",
            "commit_hashes": {
                "6f810ea79": "    Bit of test code cleanup",
                "8bed4d836": "    Allow TokenFilter to preserve empty (#729)",
                "e183d16b2": "    More testing for parser/filter comb",
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)"
            },
            "Commit&issueIDs": {
                "8bed4d836": [
                    "729"
                ],
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/729",
                "https://github.com/FasterXML/jackson-core/commit/8bed4d836",
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "includeEmptyArrayIfNotFilteredAfterFiltered",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.includeEmptyArrayIfNotFilteredAfterFiltered()",
            "start_line": "822",
            "blame_result": "6f810ea79 (Tatu Saloranta 2022-01-02 17:16:13 -0800 823)         JsonParser p0 = JSON_F.createParser(a2q(\n8bed4d836 (Nik Everett    2022-01-02 19:41:44 -0500 824)                 \"[5, {'empty_array':[],'filtered_array':[5]}]\"));\ne183d16b2 (Cowtowncoder   2015-04-29 16:05:00 -0700 825)         JsonParser p = new FilteringParserDelegate(p0,\n8bed4d836 (Nik Everett    2022-01-02 19:41:44 -0500 826)                 INCLUDE_EMPTY_IF_NOT_FILTERED,\n5d3a25664 (Jonathan Haber 2020-11-06 17:21:37 -0500 827)                 Inclusion.INCLUDE_ALL_AND_PATH,\n",
            "commit_hashes": {
                "6f810ea79": "    Bit of test code cleanup",
                "8bed4d836": "    Allow TokenFilter to preserve empty (#729)",
                "e183d16b2": "    More testing for parser/filter comb",
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)"
            },
            "Commit&issueIDs": {
                "8bed4d836": [
                    "729"
                ],
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/729",
                "https://github.com/FasterXML/jackson-core/commit/8bed4d836",
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "excludeObjectAtTheBeginningOfArray",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.excludeObjectAtTheBeginningOfArray()",
            "start_line": "834",
            "blame_result": "6f810ea79 (Tatu Saloranta     2022-01-02 17:16:13 -0800 835)         JsonParser p0 = JSON_F.createParser(a2q(\n9fd899d44 (Przemyslaw Gomulka 2023-01-08 01:27:39 +0100 836)                 \"{'parent':[{'exclude':false},{'include':true}]}\"));\ne183d16b2 (Cowtowncoder       2015-04-29 16:05:00 -0700 837)         JsonParser p = new FilteringParserDelegate(p0,\n9fd899d44 (Przemyslaw Gomulka 2023-01-08 01:27:39 +0100 838)                 new NameMatchFilter(new String[] { \"include\" } ),\n5d3a25664 (Jonathan Haber     2020-11-06 17:21:37 -0500 839)                 Inclusion.INCLUDE_ALL_AND_PATH,\n",
            "commit_hashes": {
                "6f810ea79": "    Bit of test code cleanup",
                "9fd899d44": "    Allow FilteringParserDelegate to skip last elements in array (#883)",
                "e183d16b2": "    More testing for parser/filter comb",
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)"
            },
            "Commit&issueIDs": {
                "9fd899d44": [
                    "883"
                ],
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/883",
                "https://github.com/FasterXML/jackson-core/commit/9fd899d44",
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "excludeObjectAtTheEndOfArray",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.excludeObjectAtTheEndOfArray()",
            "start_line": "846",
            "blame_result": "6f810ea79 (Tatu Saloranta     2022-01-02 17:16:13 -0800 847)         JsonParser p0 = JSON_F.createParser(a2q(\n9fd899d44 (Przemyslaw Gomulka 2023-01-08 01:27:39 +0100 848)                 \"{'parent':[{'include':true},{'exclude':false}]}\"));\ne183d16b2 (Cowtowncoder       2015-04-29 16:05:00 -0700 849)         JsonParser p = new FilteringParserDelegate(p0,\n9fd899d44 (Przemyslaw Gomulka 2023-01-08 01:27:39 +0100 850)                 new NameMatchFilter(new String[] { \"include\" } ),\n5d3a25664 (Jonathan Haber     2020-11-06 17:21:37 -0500 851)                 Inclusion.INCLUDE_ALL_AND_PATH,\n",
            "commit_hashes": {
                "6f810ea79": "    Bit of test code cleanup",
                "9fd899d44": "    Allow FilteringParserDelegate to skip last elements in array (#883)",
                "e183d16b2": "    More testing for parser/filter comb",
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)"
            },
            "Commit&issueIDs": {
                "9fd899d44": [
                    "883"
                ],
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/883",
                "https://github.com/FasterXML/jackson-core/commit/9fd899d44",
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/FasterXML/jackson-core/",
            "file_path": "FasterXML/jackson-core/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
            "test_name": "excludeObjectInMiddleOfArray",
            "FQS": "com.fasterxml.jackson.core.filter.BasicParserFilteringTest.excludeObjectInMiddleOfArray()",
            "start_line": "858",
            "blame_result": "6f810ea79 (Tatu Saloranta     2022-01-02 17:16:13 -0800 859)         JsonParser p0 = JSON_F.createParser(a2q(\n9fd899d44 (Przemyslaw Gomulka 2023-01-08 01:27:39 +0100 860)                 \"{'parent':[{'include-1':1},{'skip':0},{'include-2':2}]}\"));\ne183d16b2 (Cowtowncoder       2015-04-29 16:05:00 -0700 861)         JsonParser p = new FilteringParserDelegate(p0,\n9fd899d44 (Przemyslaw Gomulka 2023-01-08 01:27:39 +0100 862)                 new NameMatchFilter(new String[]{\"include-1\", \"include-2\"}),\n5d3a25664 (Jonathan Haber     2020-11-06 17:21:37 -0500 863)                 Inclusion.INCLUDE_ALL_AND_PATH,\n",
            "commit_hashes": {
                "6f810ea79": "    Bit of test code cleanup",
                "9fd899d44": "    Allow FilteringParserDelegate to skip last elements in array (#883)",
                "e183d16b2": "    More testing for parser/filter comb",
                "5d3a25664": "    More customizable TokenFilter inclusion (#573)"
            },
            "Commit&issueIDs": {
                "9fd899d44": [
                    "883"
                ],
                "5d3a25664": [
                    "573"
                ]
            },
            "links": [
                "https://github.com/FasterXML/jackson-core/issues/883",
                "https://github.com/FasterXML/jackson-core/commit/9fd899d44",
                "https://github.com/FasterXML/jackson-core/issues/573",
                "https://github.com/FasterXML/jackson-core/commit/5d3a25664"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/google-http-java-client/",
            "file_path": "googleapis/google-http-java-client/google-http-client/src/test/java/com/google/api/client/json/webtoken/JsonWebSignatureTest.java",
            "test_name": "testImmutableSignatureBytes",
            "FQS": "com.google.api.client.json.webtoken.JsonWebSignatureTest.testImmutableSignatureBytes()",
            "start_line": "76",
            "blame_result": "8a250ceb5 (Daniel Wang           2015-01-07 11:23:51 -0800 77)     JsonWebSignature signature = TestCertificates.getJsonWebSignature();\ndb1d97041 (Elliotte Rusty Harold 2019-08-07 10:44:40 -0400 78)     byte[] bytes = signature.getSignatureBytes();\ndb1d97041 (Elliotte Rusty Harold 2019-08-07 10:44:40 -0400 79)     bytes[0] = (byte) (bytes[0] + 1);\ndb1d97041 (Elliotte Rusty Harold 2019-08-07 10:44:40 -0400 80)     byte[] bytes2 = signature.getSignatureBytes();\ndb1d97041 (Elliotte Rusty Harold 2019-08-07 10:44:40 -0400 81)     Assert.assertNotEquals(bytes2[0], bytes[0]);\n",
            "commit_hashes": {
                "8a250ceb5": "    Extends JsonWebSignature to support verification with X.509 certificates.",
                "db1d97041": "    stop exposing internal private state in JsonWebSignature (#767)"
            },
            "Commit&issueIDs": {
                "db1d97041": [
                    "(#767)"
                ]
            },
            "links": [
                "https://github.com/googleapis/google-http-java-client/issues/767",
                "https://github.com/googleapis/google-http-java-client/commit/db1d97041"
            ]
        },
        {
            "poj_link": "https://github.com/googleapis/google-http-java-client/",
            "file_path": "googleapis/google-http-java-client/google-http-client/src/test/java/com/google/api/client/json/webtoken/JsonWebSignatureTest.java",
            "test_name": "testImmutableSignedContentBytes",
            "FQS": "com.google.api.client.json.webtoken.JsonWebSignatureTest.testImmutableSignedContentBytes()",
            "start_line": "85",
            "blame_result": "8a250ceb5 (Daniel Wang           2015-01-07 11:23:51 -0800 86)     JsonWebSignature signature = TestCertificates.getJsonWebSignature();\ndb1d97041 (Elliotte Rusty Harold 2019-08-07 10:44:40 -0400 87)     byte[] bytes = signature.getSignedContentBytes();\ndb1d97041 (Elliotte Rusty Harold 2019-08-07 10:44:40 -0400 88)     bytes[0] = (byte) (bytes[0] + 1);\ndb1d97041 (Elliotte Rusty Harold 2019-08-07 10:44:40 -0400 89)     byte[] bytes2 = signature.getSignedContentBytes();\ndb1d97041 (Elliotte Rusty Harold 2019-08-07 10:44:40 -0400 90)     Assert.assertNotEquals(bytes2[0], bytes[0]);\n",
            "commit_hashes": {
                "8a250ceb5": "    Extends JsonWebSignature to support verification with X.509 certificates.",
                "db1d97041": "    stop exposing internal private state in JsonWebSignature (#767)"
            },
            "Commit&issueIDs": {
                "db1d97041": [
                    "(#767)"
                ]
            },
            "links": [
                "https://github.com/googleapis/google-http-java-client/issues/767",
                "https://github.com/googleapis/google-http-java-client/commit/db1d97041"
            ]
        },
        {
            "poj_link": "https://github.com/oehf/ipf/",
            "file_path": "oehf/ipf/commons/core/src/test/java/org/openehealth/ipf/commons/core/OidGeneratorTest.java",
            "test_name": "ensureUniqueGeneration",
            "FQS": "org.openehealth.ipf.commons.core.OidGeneratorTest.ensureUniqueGeneration()",
            "start_line": "23",
            "blame_result": "3d59c2b48b (Christian Ohr 2021-11-05 09:43:23 +0100 24)         var uniqueOid1 = OidGenerator.uniqueOid();\n3d59c2b48b (Christian Ohr 2021-11-05 09:43:23 +0100 25)         var uniqueOid2 = OidGenerator.uniqueOid();\nd91aeaaef9 (Thomas Papke  2020-05-31 10:46:25 +0200 26)         assertNotEquals(uniqueOid1, uniqueOid2);\nd91aeaaef9 (Thomas Papke  2020-05-31 10:46:25 +0200 27)     }\nd91aeaaef9 (Thomas Papke  2020-05-31 10:46:25 +0200 28) \n",
            "commit_hashes": {
                "3d59c2b48b": "    Remove generics from interceptors, remove warnings",
                "d91aeaaef9": "    #310 Improvements to simplified XDS model for sources and consumer"
            },
            "Commit&issueIDs": {
                "d91aeaaef9": [
                    "#310"
                ]
            },
            "links": [
                "https://github.com/oehf/ipf/issues/310",
                "https://github.com/oehf/ipf/commit/d91aeaaef9"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/api/rdf/HttpIdentifierConverterTest.java",
            "test_name": "testRootUriWithTrailingSlash",
            "FQS": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverterTest.testRootUriWithTrailingSlash()",
            "start_line": "93",
            "blame_result": "9f085ceba79 (Jared Whiklo 2019-11-05 11:58:17 -0600 94)         final String testUri = uriBase + \"/\";\n2ecd5ee46d8 (Jared Whiklo 2019-11-12 12:40:07 -0600 95)         final String fedoraId = converter.toInternalId(testUri);\nd13e9c2a0c5 (Jared Whiklo 2020-04-08 18:16:37 -0500 96)         assertEquals(FEDORA_ID_PREFIX, fedoraId);\n2ecd5ee46d8 (Jared Whiklo 2019-11-12 12:40:07 -0600 97)         final String httpUri = converter.toExternalId(fedoraId);\n9f085ceba79 (Jared Whiklo 2019-11-05 11:58:17 -0600 98)         assertEquals(testUri, httpUri);\n",
            "commit_hashes": {
                "9f085ceba79": "    Add new identifier translator (#1555)",
                "2ecd5ee46d8": "    Refactor to a more understandable converter syntax",
                "d13e9c2a0c5": "    Switch codebase to use FedoraIDs (#1652)"
            },
            "Commit&issueIDs": {
                "9f085ceba79": [
                    "1555"
                ],
                "d13e9c2a0c5": [
                    "1652"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1555",
                "https://github.com/fcrepo/fcrepo/commit/9f085ceba79",
                "https://github.com/fcrepo/fcrepo/issues/1652",
                "https://github.com/fcrepo/fcrepo/commit/d13e9c2a0c5"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/api/rdf/HttpIdentifierConverterTest.java",
            "test_name": "testRootUriWithoutTrailingSlash",
            "FQS": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverterTest.testRootUriWithoutTrailingSlash()",
            "start_line": "102",
            "blame_result": "9f085ceba79 (Jared Whiklo 2019-11-05 11:58:17 -0600 103)         final String testUri = uriBase;\n2ecd5ee46d8 (Jared Whiklo 2019-11-12 12:40:07 -0600 104)         final String fedoraId = converter.toInternalId(testUri);\nd13e9c2a0c5 (Jared Whiklo 2020-04-08 18:16:37 -0500 105)         assertEquals(FEDORA_ID_PREFIX, fedoraId);\n2ecd5ee46d8 (Jared Whiklo 2019-11-12 12:40:07 -0600 106)         final String httpUri = converter.toExternalId(fedoraId);\n9f085ceba79 (Jared Whiklo 2019-11-05 11:58:17 -0600 107)         // We also return the trailing slash.\n",
            "commit_hashes": {
                "9f085ceba79": "    Add new identifier translator (#1555)",
                "2ecd5ee46d8": "    Refactor to a more understandable converter syntax",
                "d13e9c2a0c5": "    Switch codebase to use FedoraIDs (#1652)"
            },
            "Commit&issueIDs": {
                "9f085ceba79": [
                    "1555"
                ],
                "d13e9c2a0c5": [
                    "1652"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1555",
                "https://github.com/fcrepo/fcrepo/commit/9f085ceba79",
                "https://github.com/fcrepo/fcrepo/issues/1652",
                "https://github.com/fcrepo/fcrepo/commit/d13e9c2a0c5"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-http-commons/src/test/java/org/fcrepo/http/commons/api/rdf/HttpIdentifierConverterTest.java",
            "test_name": "testFirstLevel",
            "FQS": "org.fcrepo.http.commons.api.rdf.HttpIdentifierConverterTest.testFirstLevel()",
            "start_line": "112",
            "blame_result": "9f085ceba79 (Jared Whiklo 2019-11-05 11:58:17 -0600 113)         final String baseUid = getUniqueId();\n9f085ceba79 (Jared Whiklo 2019-11-05 11:58:17 -0600 114)         final String testUri = uriBase + \"/\" + baseUid;\n2ecd5ee46d8 (Jared Whiklo 2019-11-12 12:40:07 -0600 115)         final String fedoraId = converter.toInternalId(testUri);\nd13e9c2a0c5 (Jared Whiklo 2020-04-08 18:16:37 -0500 116)         assertEquals(FEDORA_ID_PREFIX + \"/\" + baseUid, fedoraId);\n2ecd5ee46d8 (Jared Whiklo 2019-11-12 12:40:07 -0600 117)         final String httpUri = converter.toExternalId(fedoraId);\n",
            "commit_hashes": {
                "9f085ceba79": "    Add new identifier translator (#1555)",
                "2ecd5ee46d8": "    Refactor to a more understandable converter syntax",
                "d13e9c2a0c5": "    Switch codebase to use FedoraIDs (#1652)"
            },
            "Commit&issueIDs": {
                "9f085ceba79": [
                    "1555"
                ],
                "d13e9c2a0c5": [
                    "1652"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1555",
                "https://github.com/fcrepo/fcrepo/commit/9f085ceba79",
                "https://github.com/fcrepo/fcrepo/issues/1652",
                "https://github.com/fcrepo/fcrepo/commit/d13e9c2a0c5"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
            "test_name": "testAddChildInTransaction",
            "FQS": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testAddChildInTransaction()",
            "start_line": "114",
            "blame_result": "e0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 115)         stubObject(\"parent1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 116)         stubObject(\"child1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 117)         stubObject(\"transaction1\");\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 118)         assertEquals(0, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 119)         containmentIndex.addContainedBy(transaction1, parent1.getFedoraId(), child1.getFedoraId());\n",
            "commit_hashes": {
                "e0188dd799b": "    First pass at containment index (#1645)",
                "e28dd00e972": "    Do not use the tx tables for short-lived transactions (#1896)"
            },
            "Commit&issueIDs": {
                "e0188dd799b": [
                    "1645"
                ],
                "e28dd00e972": [
                    "1896"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1645",
                "https://github.com/fcrepo/fcrepo/commit/e0188dd799b",
                "https://github.com/fcrepo/fcrepo/issues/1896",
                "https://github.com/fcrepo/fcrepo/commit/e28dd00e972"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
            "test_name": "testAddRemoveChildInSameTransaction",
            "FQS": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testAddRemoveChildInSameTransaction()",
            "start_line": "133",
            "blame_result": "e0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 134)         stubObject(\"parent1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 135)         stubObject(\"child1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 136)         stubObject(\"transaction1\");\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 137)         assertEquals(0, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 138)         assertEquals(0, containmentIndex.getContains(transaction1, parent1.getFedoraId()).count());\n",
            "commit_hashes": {
                "e0188dd799b": "    First pass at containment index (#1645)",
                "e28dd00e972": "    Do not use the tx tables for short-lived transactions (#1896)"
            },
            "Commit&issueIDs": {
                "e0188dd799b": [
                    "1645"
                ],
                "e28dd00e972": [
                    "1896"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1645",
                "https://github.com/fcrepo/fcrepo/commit/e0188dd799b",
                "https://github.com/fcrepo/fcrepo/issues/1896",
                "https://github.com/fcrepo/fcrepo/commit/e28dd00e972"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
            "test_name": "testAddRemoveChildInTwoTransactions",
            "FQS": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testAddRemoveChildInTwoTransactions()",
            "start_line": "154",
            "blame_result": "e0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 155)         stubObject(\"parent1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 156)         stubObject(\"child1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 157)         stubObject(\"transaction1\");\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 158)         assertEquals(0, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 159)         assertEquals(0, containmentIndex.getContains(transaction1, parent1.getFedoraId()).count());\n",
            "commit_hashes": {
                "e0188dd799b": "    First pass at containment index (#1645)",
                "e28dd00e972": "    Do not use the tx tables for short-lived transactions (#1896)"
            },
            "Commit&issueIDs": {
                "e0188dd799b": [
                    "1645"
                ],
                "e28dd00e972": [
                    "1896"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1645",
                "https://github.com/fcrepo/fcrepo/commit/e0188dd799b",
                "https://github.com/fcrepo/fcrepo/issues/1896",
                "https://github.com/fcrepo/fcrepo/commit/e28dd00e972"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
            "test_name": "testRollbackTransaction",
            "FQS": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testRollbackTransaction()",
            "start_line": "231",
            "blame_result": "e0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 232)         stubObject(\"parent1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 233)         stubObject(\"child1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 234)         stubObject(\"transaction1\");\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 235)         assertEquals(0, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 236)         assertEquals(0, containmentIndex.getContains(transaction1, parent1.getFedoraId()).count());\n",
            "commit_hashes": {
                "e0188dd799b": "    First pass at containment index (#1645)",
                "e28dd00e972": "    Do not use the tx tables for short-lived transactions (#1896)"
            },
            "Commit&issueIDs": {
                "e0188dd799b": [
                    "1645"
                ],
                "e28dd00e972": [
                    "1896"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1645",
                "https://github.com/fcrepo/fcrepo/commit/e0188dd799b",
                "https://github.com/fcrepo/fcrepo/issues/1896",
                "https://github.com/fcrepo/fcrepo/commit/e28dd00e972"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
            "test_name": "testCommitTransaction",
            "FQS": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testCommitTransaction()",
            "start_line": "255",
            "blame_result": "e0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 256)         stubObject(\"parent1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 257)         stubObject(\"child2\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 258)         stubObject(\"transaction1\");\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 259)         assertEquals(0, containmentIndex.getContains(shortLivedTx, parent1.getFedoraId()).count());\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 260)         assertEquals(0, containmentIndex.getContains(transaction1, parent1.getFedoraId()).count());\n",
            "commit_hashes": {
                "e0188dd799b": "    First pass at containment index (#1645)",
                "e28dd00e972": "    Do not use the tx tables for short-lived transactions (#1896)"
            },
            "Commit&issueIDs": {
                "e0188dd799b": [
                    "1645"
                ],
                "e28dd00e972": [
                    "1896"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1645",
                "https://github.com/fcrepo/fcrepo/commit/e0188dd799b",
                "https://github.com/fcrepo/fcrepo/issues/1896",
                "https://github.com/fcrepo/fcrepo/commit/e28dd00e972"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
            "test_name": "testSwapContained",
            "FQS": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testSwapContained()",
            "start_line": "283",
            "blame_result": "e0188dd799b (Jared Whiklo 2020-03-18 13:34:03 -0500 284)         stubObject(\"parent1\");\ne0188dd799b (Jared Whiklo 2020-03-18 13:34:03 -0500 285)         stubObject(\"child1\");\ne0188dd799b (Jared Whiklo 2020-03-18 13:34:03 -0500 286)         stubObject(\"child2\");\ne0188dd799b (Jared Whiklo 2020-03-18 13:34:03 -0500 287)         stubObject(\"transaction1\");\ne0188dd799b (Jared Whiklo 2020-03-18 13:34:03 -0500 288)         stubObject(\"transaction2\");\n",
            "commit_hashes": {
                "e0188dd799b": "    First pass at containment index (#1645)"
            },
            "Commit&issueIDs": {
                "e0188dd799b": [
                    "1645"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1645",
                "https://github.com/fcrepo/fcrepo/commit/e0188dd799b"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
            "test_name": "testRemoveResource",
            "FQS": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testRemoveResource()",
            "start_line": "457",
            "blame_result": "e0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 458)         stubObject(\"parent1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 459)         stubObject(\"child1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 460)         stubObject(\"transaction1\");\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 461)         containmentIndex.addContainedBy(transaction1, parent1.getFedoraId(), child1.getFedoraId());\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 462)         containmentIndex.commitTransaction(transaction1);\n",
            "commit_hashes": {
                "e0188dd799b": "    First pass at containment index (#1645)",
                "e28dd00e972": "    Do not use the tx tables for short-lived transactions (#1896)"
            },
            "Commit&issueIDs": {
                "e0188dd799b": [
                    "1645"
                ],
                "e28dd00e972": [
                    "1896"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1645",
                "https://github.com/fcrepo/fcrepo/commit/e0188dd799b",
                "https://github.com/fcrepo/fcrepo/issues/1896",
                "https://github.com/fcrepo/fcrepo/commit/e28dd00e972"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
            "test_name": "testRemoveNotFromTransaction",
            "FQS": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testRemoveNotFromTransaction()",
            "start_line": "473",
            "blame_result": "e0188dd799b (Jared Whiklo 2020-03-18 13:34:03 -0500 474)         stubObject(\"parent1\");\ne0188dd799b (Jared Whiklo 2020-03-18 13:34:03 -0500 475)         stubObject(\"child1\");\n68578d34266 (Jared Whiklo 2020-03-20 10:08:32 -0500 476)         stubObject(\"parent2\");\ne0188dd799b (Jared Whiklo 2020-03-18 13:34:03 -0500 477)         stubObject(\"transaction1\");\ne0188dd799b (Jared Whiklo 2020-03-18 13:34:03 -0500 478)         stubObject(\"transaction2\");\n",
            "commit_hashes": {
                "e0188dd799b": "    First pass at containment index (#1645)",
                "68578d34266": "    Implement containment triples service (#1647)"
            },
            "Commit&issueIDs": {
                "e0188dd799b": [
                    "1645"
                ],
                "68578d34266": [
                    "1647"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1645",
                "https://github.com/fcrepo/fcrepo/commit/e0188dd799b",
                "https://github.com/fcrepo/fcrepo/issues/1647",
                "https://github.com/fcrepo/fcrepo/commit/68578d34266"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
            "test_name": "testCommitRemoveFromTransaction",
            "FQS": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testCommitRemoveFromTransaction()",
            "start_line": "499",
            "blame_result": "e0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 500)         stubObject(\"parent1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 501)         stubObject(\"child1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 502)         stubObject(\"transaction1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 503)         stubObject(\"transaction2\");\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 504)         containmentIndex.addContainedBy(transaction2, parent1.getFedoraId(), child1.getFedoraId());\n",
            "commit_hashes": {
                "e0188dd799b": "    First pass at containment index (#1645)",
                "e28dd00e972": "    Do not use the tx tables for short-lived transactions (#1896)"
            },
            "Commit&issueIDs": {
                "e0188dd799b": [
                    "1645"
                ],
                "e28dd00e972": [
                    "1896"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1645",
                "https://github.com/fcrepo/fcrepo/commit/e0188dd799b",
                "https://github.com/fcrepo/fcrepo/issues/1896",
                "https://github.com/fcrepo/fcrepo/commit/e28dd00e972"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
            "test_name": "testResourceExistsFedoraIDNoTrailingSlash",
            "FQS": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testResourceExistsFedoraIDNoTrailingSlash()",
            "start_line": "524",
            "blame_result": "e0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 525)         stubObject(\"parent1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 526)         stubObject(\"child1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 527)         stubObject(\"transaction1\");\nd13e9c2a0c5 (Jared Whiklo   2020-04-08 18:16:37 -0500 528)         final FedoraId fedoraID = FedoraId.create(child1.getFedoraId().getFullId());\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 529)         containmentIndex.addContainedBy(transaction1, parent1.getFedoraId(), child1.getFedoraId());\n",
            "commit_hashes": {
                "e0188dd799b": "    First pass at containment index (#1645)",
                "d13e9c2a0c5": "    Switch codebase to use FedoraIDs (#1652)",
                "e28dd00e972": "    Do not use the tx tables for short-lived transactions (#1896)"
            },
            "Commit&issueIDs": {
                "e0188dd799b": [
                    "1645"
                ],
                "d13e9c2a0c5": [
                    "1652"
                ],
                "e28dd00e972": [
                    "1896"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1645",
                "https://github.com/fcrepo/fcrepo/commit/e0188dd799b",
                "https://github.com/fcrepo/fcrepo/issues/1652",
                "https://github.com/fcrepo/fcrepo/commit/d13e9c2a0c5",
                "https://github.com/fcrepo/fcrepo/issues/1896",
                "https://github.com/fcrepo/fcrepo/commit/e28dd00e972"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-kernel-impl/src/test/java/org/fcrepo/kernel/impl/ContainmentIndexImplTest.java",
            "test_name": "testResourceExistsFedoraIDTrailingSlash",
            "FQS": "org.fcrepo.kernel.impl.ContainmentIndexImplTest.testResourceExistsFedoraIDTrailingSlash()",
            "start_line": "542",
            "blame_result": "e0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 543)         stubObject(\"parent1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 544)         stubObject(\"child1\");\ne0188dd799b (Jared Whiklo   2020-03-18 13:34:03 -0500 545)         stubObject(\"transaction1\");\nd13e9c2a0c5 (Jared Whiklo   2020-04-08 18:16:37 -0500 546)         final FedoraId fedoraID = FedoraId.create(child1.getFedoraId().getFullId() + \"/\");\ne28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 547)         containmentIndex.addContainedBy(transaction1, parent1.getFedoraId(), child1.getFedoraId());\n",
            "commit_hashes": {
                "e0188dd799b": "    First pass at containment index (#1645)",
                "d13e9c2a0c5": "    Switch codebase to use FedoraIDs (#1652)",
                "e28dd00e972": "    Do not use the tx tables for short-lived transactions (#1896)"
            },
            "Commit&issueIDs": {
                "e0188dd799b": [
                    "1645"
                ],
                "d13e9c2a0c5": [
                    "1652"
                ],
                "e28dd00e972": [
                    "1896"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1645",
                "https://github.com/fcrepo/fcrepo/commit/e0188dd799b",
                "https://github.com/fcrepo/fcrepo/issues/1652",
                "https://github.com/fcrepo/fcrepo/commit/d13e9c2a0c5",
                "https://github.com/fcrepo/fcrepo/issues/1896",
                "https://github.com/fcrepo/fcrepo/commit/e28dd00e972"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-persistence-ocfl/src/test/java/org/fcrepo/persistence/ocfl/impl/DbFedoraToOcflObjectIndexTest.java",
            "test_name": "test",
            "FQS": "org.fcrepo.persistence.ocfl.impl.DbFedoraToOcflObjectIndexTest.test()",
            "start_line": "16",
            "blame_result": "5e54d133318 (Jared Whiklo 2021-02-04 16:12:41 -0600 17) \n5e54d133318 (Jared Whiklo 2021-02-04 16:12:41 -0600 18) import java.util.UUID;\n5e54d133318 (Jared Whiklo 2021-02-04 16:12:41 -0600 19) \n5e54d133318 (Jared Whiklo 2021-02-04 16:12:41 -0600 20) import org.fcrepo.config.FlywayFactory;\n4037df36a1a (Jared Whiklo 2021-05-05 10:25:37 -0500 21) import org.fcrepo.config.OcflPropsConfig;\n",
            "commit_hashes": {
                "5e54d133318": "    Use Flyway to manage database changes (#1857)",
                "4037df36a1a": "    Add cache to FedoraToOcflIndex getMapping (#1899)"
            },
            "Commit&issueIDs": {
                "5e54d133318": [
                    "1857"
                ],
                "4037df36a1a": [
                    "1899"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1857",
                "https://github.com/fcrepo/fcrepo/commit/5e54d133318",
                "https://github.com/fcrepo/fcrepo/issues/1899",
                "https://github.com/fcrepo/fcrepo/commit/4037df36a1a"
            ]
        },
        {
            "poj_link": "https://github.com/fcrepo/fcrepo/",
            "file_path": "fcrepo/fcrepo/fcrepo-persistence-ocfl/src/test/java/org/fcrepo/persistence/ocfl/impl/DbFedoraToOcflObjectIndexTest.java",
            "test_name": "testClearAllTransactions",
            "FQS": "org.fcrepo.persistence.ocfl.impl.DbFedoraToOcflObjectIndexTest.testClearAllTransactions()",
            "start_line": "222",
            "blame_result": "e28dd00e972 (Peter Winckles 2021-05-04 05:03:12 +0000 223)         final var mapping = index.addMapping(session, RESOURCE_ID_1, RESOURCE_ID_1, OCFL_ID);\n68bd82738d1 (Ben Pennell    2024-10-01 11:25:16 -0400 224)         index.commit(session);\n68bd82738d1 (Ben Pennell    2024-10-01 11:25:16 -0400 225) \n68bd82738d1 (Ben Pennell    2024-10-01 11:25:16 -0400 226)         final var mapping2 = index.addMapping(session, RESOURCE_ID_2, RESOURCE_ID_2, OCFL_ID);\n68bd82738d1 (Ben Pennell    2024-10-01 11:25:16 -0400 227) \n",
            "commit_hashes": {
                "e28dd00e972": "    Do not use the tx tables for short-lived transactions (#1896)",
                "68bd82738d1": "    FCREPO-3952 - Cleanup transactions around application restarts (#2092)"
            },
            "Commit&issueIDs": {
                "e28dd00e972": [
                    "1896"
                ],
                "68bd82738d1": [
                    "2092"
                ]
            },
            "links": [
                "https://github.com/fcrepo/fcrepo/issues/1896",
                "https://github.com/fcrepo/fcrepo/commit/e28dd00e972",
                "https://github.com/fcrepo/fcrepo/issues/2092",
                "https://github.com/fcrepo/fcrepo/commit/68bd82738d1"
            ]
        },
        {
            "poj_link": "https://github.com/protegeproject/protege/",
            "file_path": "protegeproject/protege/protege-editor-core/src/test/java/org/protege/editor/core/ui/menu/PopupMenuId_TestCase.java",
            "test_name": "shouldBeEqualToOtherHashCode",
            "FQS": "org.protege.editor.core.ui.menu.PopupMenuId_TestCase.shouldBeEqualToOtherHashCode()",
            "start_line": "57",
            "blame_result": "d9a985b47 (Matthew Horridge 2016-03-05 14:38:02 -0800 58)         assertThat(popupMenuId.hashCode(), is(new PopupMenuId(id).hashCode()));\nd9a985b47 (Matthew Horridge 2016-03-05 14:38:02 -0800 59)     }\nd9a985b47 (Matthew Horridge 2016-03-05 14:38:02 -0800 60) \nd9a985b47 (Matthew Horridge 2016-03-05 14:38:02 -0800 61)     @Test\nd9a985b47 (Matthew Horridge 2016-03-05 14:38:02 -0800 62)     public void shouldImplementToString() {\n",
            "commit_hashes": {
                "d9a985b47": "    Closes #348"
            },
            "Commit&issueIDs": {
                "d9a985b47": [
                    "#348"
                ]
            },
            "links": [
                "https://github.com/protegeproject/protege/issues/348",
                "https://github.com/protegeproject/protege/commit/d9a985b47"
            ]
        },
        {
            "poj_link": "https://github.com/protegeproject/protege/",
            "file_path": "protegeproject/protege/protege-editor-owl/src/test/java/org/protege/editor/owl/ui/breadcrumb/Breadcrumb_TestCase.java",
            "test_name": "shouldBeEqualToOtherHashCode",
            "FQS": "org.protege.editor.owl.ui.breadcrumb.Breadcrumb_TestCase.shouldBeEqualToOtherHashCode()",
            "start_line": "78",
            "blame_result": "22c6a3294 (Matthew Horridge 2017-08-22 15:56:06 -0700 79)         assertThat(breadcrumb.hashCode(), is(new Breadcrumb(object, parentRelationship).hashCode()));\n22c6a3294 (Matthew Horridge 2017-08-22 15:56:06 -0700 80)     }\n22c6a3294 (Matthew Horridge 2017-08-22 15:56:06 -0700 81) \n22c6a3294 (Matthew Horridge 2017-08-22 15:56:06 -0700 82)     @Test\n22c6a3294 (Matthew Horridge 2017-08-22 15:56:06 -0700 83)     public void shouldImplementToString() {\n",
            "commit_hashes": {
                "22c6a3294": "    Implements #692"
            },
            "Commit&issueIDs": {
                "22c6a3294": [
                    "#692"
                ]
            },
            "links": [
                "https://github.com/protegeproject/protege/issues/692",
                "https://github.com/protegeproject/protege/commit/22c6a3294"
            ]
        },
        {
            "poj_link": "https://github.com/Tencent/Firestorm/",
            "file_path": "Tencent/Firestorm/storage/src/test/java/com/tencent/rss/storage/handler/impl/LocalFileHandlerTest.java",
            "test_name": "writeTest",
            "FQS": "com.tencent.rss.storage.handler.impl.LocalFileHandlerTest.writeTest()",
            "start_line": "55",
            "blame_result": "^44ff317 (colinma 2021-10-29 16:05:32 +0800 56)     File tmpDir = Files.createTempDir();\nd7f02eac (roryqi  2022-03-08 16:31:33 +0800 57)     tmpDir.deleteOnExit();\n^44ff317 (colinma 2021-10-29 16:05:32 +0800 58)     File dataDir1 = new File(tmpDir, \"data1\");\n^44ff317 (colinma 2021-10-29 16:05:32 +0800 59)     File dataDir2 = new File(tmpDir, \"data2\");\n^44ff317 (colinma 2021-10-29 16:05:32 +0800 60)     String[] basePaths = new String[]{dataDir1.getAbsolutePath(),\n",
            "commit_hashes": {
                "44ff317": "    Initial version",
                "d7f02eac": "    [Bugfix] Fix uncorrect index file (#92)"
            },
            "Commit&issueIDs": {
                "d7f02eac": [
                    "(#92)"
                ]
            },
            "links": [
                "https://github.com/Tencent/Firestorm/issues/92",
                "https://github.com/Tencent/Firestorm/commit/d7f02eac"
            ]
        },
        {
            "poj_link": "https://github.com/docker-java/docker-java/",
            "file_path": "docker-java/docker-java/docker-java/src/test/java/com/github/dockerjava/api/model/BindingTest.java",
            "test_name": "parseEmptyString",
            "FQS": "com.github.dockerjava.api.model.BindingTest.parseEmptyString()",
            "start_line": "33",
            "blame_result": "2edfcb0e0 src/test/java/com/github/dockerjava/api/model/BindingTest.java (Marcus Linke         2016-05-08 22:24:06 +0200 34)         assertEquals(Binding.parse(\"\"), Binding.empty());\ne60e7de74 src/test/java/com/github/dockerjava/api/model/BindingTest.java (Marcus Linke         2015-06-26 20:44:26 +0200 35)     }\ne60e7de74 src/test/java/com/github/dockerjava/api/model/BindingTest.java (Marcus Linke         2015-06-26 20:44:26 +0200 36) \n4bf2648d9 src/test/java/com/github/dockerjava/api/model/BindingTest.java (francois             2016-05-01 23:44:39 +0200 37)     // Strings can be used since it can be a range. Let the docker daemon do the validation.\n6d9dec35e src/test/java/com/github/dockerjava/api/model/BindingTest.java (Kanstantsin Shautsou 2017-09-29 04:02:43 +0300 38)     @Test\n",
            "commit_hashes": {
                "2edfcb0e0": "    Polish binding for port ranges",
                "e60e7de74": "    Formatting sources",
                "4bf2648d9": "    Work on port ranges - change all to strings",
                "6d9dec35e": "    WIP Refactor tests. (#909)"
            },
            "Commit&issueIDs": {
                "6d9dec35e": [
                    "(#909)"
                ]
            },
            "links": [
                "https://github.com/docker-java/docker-java/issues/909",
                "https://github.com/docker-java/docker-java/commit/6d9dec35e"
            ]
        },
        {
            "poj_link": "https://github.com/docker-java/docker-java/",
            "file_path": "docker-java/docker-java/docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java",
            "test_name": "noRestart",
            "FQS": "com.github.dockerjava.api.model.RestartPolicyParsingTest.noRestart()",
            "start_line": "16",
            "blame_result": "26cd13ced docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java (Harald Albers 2023-02-09 21:49:21 +0000 17)         assertEquals(RestartPolicy.noRestart(), RestartPolicy.parse(\"no\"));\ne60e7de74 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (Marcus Linke  2015-06-26 20:44:26 +0200 18)     }\ne60e7de74 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (Marcus Linke  2015-06-26 20:44:26 +0200 19) \ne60e7de74 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (Marcus Linke  2015-06-26 20:44:26 +0200 20)     @Test\n26cd13ced docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java (Harald Albers 2023-02-09 21:49:21 +0000 21)     public void alwaysRestart() {\n",
            "commit_hashes": {
                "26cd13ced": "    Fix parameter order in `assertEquals` (#2066)",
                "e60e7de74": "    Formatting sources"
            },
            "Commit&issueIDs": {
                "26cd13ced": [
                    "(#2066)"
                ]
            },
            "links": [
                "https://github.com/docker-java/docker-java/issues/2066",
                "https://github.com/docker-java/docker-java/commit/26cd13ced"
            ]
        },
        {
            "poj_link": "https://github.com/docker-java/docker-java/",
            "file_path": "docker-java/docker-java/docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java",
            "test_name": "alwaysRestart",
            "FQS": "com.github.dockerjava.api.model.RestartPolicyParsingTest.alwaysRestart()",
            "start_line": "21",
            "blame_result": "26cd13ced docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java (Harald Albers        2023-02-09 21:49:21 +0000 22)         assertEquals(RestartPolicy.alwaysRestart(), RestartPolicy.parse(\"always\"));\ne60e7de74 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (Marcus Linke         2015-06-26 20:44:26 +0200 23)     }\ne60e7de74 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (Marcus Linke         2015-06-26 20:44:26 +0200 24) \n7016a6364 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (nimantha siriwardana 2017-03-29 09:40:50 +0100 25)     @Test\n26cd13ced docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java (Harald Albers        2023-02-09 21:49:21 +0000 26)     public void unlessStoppedRestart() {\n",
            "commit_hashes": {
                "26cd13ced": "    Fix parameter order in `assertEquals` (#2066)",
                "e60e7de74": "    Formatting sources",
                "7016a6364": "    adding support for unless-stopped restart policy"
            },
            "Commit&issueIDs": {
                "26cd13ced": [
                    "(#2066)"
                ]
            },
            "links": [
                "https://github.com/docker-java/docker-java/issues/2066",
                "https://github.com/docker-java/docker-java/commit/26cd13ced"
            ]
        },
        {
            "poj_link": "https://github.com/docker-java/docker-java/",
            "file_path": "docker-java/docker-java/docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java",
            "test_name": "unlessStoppedRestart",
            "FQS": "com.github.dockerjava.api.model.RestartPolicyParsingTest.unlessStoppedRestart()",
            "start_line": "26",
            "blame_result": "26cd13ced docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java (Harald Albers        2023-02-09 21:49:21 +0000 27)         assertEquals(RestartPolicy.unlessStoppedRestart(), RestartPolicy.parse(\"unless-stopped\"));\n7016a6364 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (nimantha siriwardana 2017-03-29 09:40:50 +0100 28)     }\n7016a6364 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (nimantha siriwardana 2017-03-29 09:40:50 +0100 29) \ne60e7de74 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (Marcus Linke         2015-06-26 20:44:26 +0200 30)     @Test\n26cd13ced docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java (Harald Albers        2023-02-09 21:49:21 +0000 31)     public void onFailureRestart() {\n",
            "commit_hashes": {
                "26cd13ced": "    Fix parameter order in `assertEquals` (#2066)",
                "7016a6364": "    adding support for unless-stopped restart policy",
                "e60e7de74": "    Formatting sources"
            },
            "Commit&issueIDs": {
                "26cd13ced": [
                    "(#2066)"
                ]
            },
            "links": [
                "https://github.com/docker-java/docker-java/issues/2066",
                "https://github.com/docker-java/docker-java/commit/26cd13ced"
            ]
        },
        {
            "poj_link": "https://github.com/docker-java/docker-java/",
            "file_path": "docker-java/docker-java/docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java",
            "test_name": "onFailureRestart",
            "FQS": "com.github.dockerjava.api.model.RestartPolicyParsingTest.onFailureRestart()",
            "start_line": "31",
            "blame_result": "26cd13ced docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java (Harald Albers 2023-02-09 21:49:21 +0000 32)         assertEquals(RestartPolicy.onFailureRestart(0), RestartPolicy.parse(\"on-failure\"));\ne60e7de74 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (Marcus Linke  2015-06-26 20:44:26 +0200 33)     }\ne60e7de74 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (Marcus Linke  2015-06-26 20:44:26 +0200 34) \ne60e7de74 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (Marcus Linke  2015-06-26 20:44:26 +0200 35)     @Test\n26cd13ced docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java (Harald Albers 2023-02-09 21:49:21 +0000 36)     public void onFailureRestartWithCount() {\n",
            "commit_hashes": {
                "26cd13ced": "    Fix parameter order in `assertEquals` (#2066)",
                "e60e7de74": "    Formatting sources"
            },
            "Commit&issueIDs": {
                "26cd13ced": [
                    "(#2066)"
                ]
            },
            "links": [
                "https://github.com/docker-java/docker-java/issues/2066",
                "https://github.com/docker-java/docker-java/commit/26cd13ced"
            ]
        },
        {
            "poj_link": "https://github.com/docker-java/docker-java/",
            "file_path": "docker-java/docker-java/docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java",
            "test_name": "onFailureRestartWithCount",
            "FQS": "com.github.dockerjava.api.model.RestartPolicyParsingTest.onFailureRestartWithCount()",
            "start_line": "36",
            "blame_result": "26cd13ced docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java (Harald Albers        2023-02-09 21:49:21 +0000 37)         assertEquals(RestartPolicy.onFailureRestart(2), RestartPolicy.parse(\"on-failure:2\"));\ne60e7de74 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (Marcus Linke         2015-06-26 20:44:26 +0200 38)     }\ne60e7de74 src/test/java/com/github/dockerjava/api/model/RestartPolicy_ParsingTest.java            (Marcus Linke         2015-06-26 20:44:26 +0200 39) \n6d9dec35e src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java             (Kanstantsin Shautsou 2017-09-29 04:02:43 +0300 40)     @Test\n26cd13ced docker-java/src/test/java/com/github/dockerjava/api/model/RestartPolicyParsingTest.java (Harald Albers        2023-02-09 21:49:21 +0000 41)     public void illegalSyntax() {\n",
            "commit_hashes": {
                "26cd13ced": "    Fix parameter order in `assertEquals` (#2066)",
                "e60e7de74": "    Formatting sources",
                "6d9dec35e": "    WIP Refactor tests. (#909)"
            },
            "Commit&issueIDs": {
                "26cd13ced": [
                    "(#2066)"
                ],
                "6d9dec35e": [
                    "(#909)"
                ]
            },
            "links": [
                "https://github.com/docker-java/docker-java/issues/2066",
                "https://github.com/docker-java/docker-java/commit/26cd13ced",
                "https://github.com/docker-java/docker-java/issues/909",
                "https://github.com/docker-java/docker-java/commit/6d9dec35e"
            ]
        },
        {
            "poj_link": "https://github.com/docker-java/docker-java/",
            "file_path": "docker-java/docker-java/docker-java/src/test/java/com/github/dockerjava/netty/NettyWebTargetTest.java",
            "test_name": "verifyImmutability",
            "FQS": "com.github.dockerjava.netty.NettyWebTargetTest.verifyImmutability()",
            "start_line": "25",
            "blame_result": "41eea383d docker-java/src/test/java/com/github/dockerjava/netty/NettyWebTargetTest.java (Sergei Egorov 2019-11-20 08:12:41 +0100 26)         NettyWebTarget emptyWebTarget = new NettyWebTarget(JSONTestHelper.getMapper(), channelProvider, \"DUMMY\");\n1c14bc3cf src/test/java/com/github/dockerjava/netty/WebTargetTest.java                  (tejksat       2016-07-09 11:19:43 +0300 27) \nfcb791a5e src/test/java/com/github/dockerjava/netty/NettyWebTargetTest.java             (Sergei Egorov 2018-01-23 22:11:41 +0100 28)         NettyWebTarget initWebTarget = emptyWebTarget.path(\"/containers/{id}/attach\").resolveTemplate(\"id\", \"d03da378b592\")\n1c14bc3cf src/test/java/com/github/dockerjava/netty/WebTargetTest.java                  (tejksat       2016-07-09 11:19:43 +0300 29)                 .queryParam(\"logs\", \"true\");\n1c14bc3cf src/test/java/com/github/dockerjava/netty/WebTargetTest.java                  (tejksat       2016-07-09 11:19:43 +0300 30) \n",
            "commit_hashes": {
                "41eea383d": "    Replace static `ObjectMapper`s with `DockerClientConfig#getObjectMapper` (#1275)",
                "1c14bc3cf": "    Fix for #625 (#630)",
                "fcb791a5e": "    Implement AbstractDockerCmdExecFactory (#980)"
            },
            "Commit&issueIDs": {
                "41eea383d": [
                    "(#1275)"
                ],
                "1c14bc3cf": [
                    "#625",
                    "(#630)"
                ],
                "fcb791a5e": [
                    "(#980)"
                ]
            },
            "links": [
                "https://github.com/docker-java/docker-java/issues/1275",
                "https://github.com/docker-java/docker-java/commit/41eea383d",
                "https://github.com/docker-java/docker-java/issues/625",
                "https://github.com/docker-java/docker-java/commit/1c14bc3cf",
                "https://github.com/docker-java/docker-java/issues/980",
                "https://github.com/docker-java/docker-java/commit/fcb791a5e"
            ]
        },
        {
            "poj_link": "https://github.com/hapifhir/org.hl7.fhir.core/",
            "file_path": "hapifhir/org.hl7.fhir.core/org.hl7.fhir.r4/src/test/java/org/hl7/fhir/r4/utils/client/network/ClientHeadersTest.java",
            "test_name": "addHeaders",
            "FQS": "org.hl7.fhir.r4.utils.client.network.ClientHeadersTest.addHeaders()",
            "start_line": "43",
            "blame_result": "59fe0c6d20 org.hl7.fhir.r4/src/test/java/org/hl7/fhir/r4/utils/client/network/ClientHeadersTest.java (dotasek       2024-11-08 16:42:26 -0500 44)     List<HTTPHeader> headersList = Arrays.asList(h1, h2, h3);\ne5a05f5562 org.hl7.fhir.r5/src/test/java/org/hl7/fhir/r5/utils/client/network/ClientHeadersTest.java (Mark Iantorno 2021-09-09 16:32:19 -0400 45)     clientHeaders.addHeaders(headersList);\ne5a05f5562 org.hl7.fhir.r5/src/test/java/org/hl7/fhir/r5/utils/client/network/ClientHeadersTest.java (Mark Iantorno 2021-09-09 16:32:19 -0400 46)     Assertions.assertEquals(3, clientHeaders.headers().size());\ne5a05f5562 org.hl7.fhir.r5/src/test/java/org/hl7/fhir/r5/utils/client/network/ClientHeadersTest.java (Mark Iantorno 2021-09-09 16:32:19 -0400 47)     Assertions.assertEquals(headersList, clientHeaders.headers());\ne5a05f5562 org.hl7.fhir.r5/src/test/java/org/hl7/fhir/r5/utils/client/network/ClientHeadersTest.java (Mark Iantorno 2021-09-09 16:32:19 -0400 48)   }\n",
            "commit_hashes": {
                "59fe0c6d20": "    Manage FhirRequestBuilders via ManagedWebAccess (#1788)",
                "e5a05f5562": "    Terminology client headers (#599)"
            },
            "Commit&issueIDs": {
                "59fe0c6d20": [
                    "1788"
                ],
                "e5a05f5562": [
                    "599"
                ]
            },
            "links": [
                "https://github.com/hapifhir/org.hl7.fhir.core/issues/1788",
                "https://github.com/hapifhir/org.hl7.fhir.core/commit/59fe0c6d20",
                "https://github.com/hapifhir/org.hl7.fhir.core/issues/599",
                "https://github.com/hapifhir/org.hl7.fhir.core/commit/e5a05f5562"
            ]
        },
        {
            "poj_link": "https://github.com/hapifhir/org.hl7.fhir.core/",
            "file_path": "hapifhir/org.hl7.fhir.core/org.hl7.fhir.r4b/src/test/java/org/hl7/fhir/r4b/utils/client/network/ClientHeadersTest.java",
            "test_name": "addHeaders",
            "FQS": "org.hl7.fhir.r4b.utils.client.network.ClientHeadersTest.addHeaders()",
            "start_line": "44",
            "blame_result": "59fe0c6d20 (dotasek        2024-11-08 16:42:26 -0500 45)     List<HTTPHeader> headersList = Arrays.asList(h1, h2, h3);\nc627ec43d9 (Grahame Grieve 2022-01-01 16:33:10 +1100 46)     clientHeaders.addHeaders(headersList);\nc627ec43d9 (Grahame Grieve 2022-01-01 16:33:10 +1100 47)     Assertions.assertEquals(3, clientHeaders.headers().size());\nc627ec43d9 (Grahame Grieve 2022-01-01 16:33:10 +1100 48)     Assertions.assertEquals(headersList, clientHeaders.headers());\nc627ec43d9 (Grahame Grieve 2022-01-01 16:33:10 +1100 49)   }\n",
            "commit_hashes": {
                "59fe0c6d20": "    Manage FhirRequestBuilders via ManagedWebAccess (#1788)",
                "c627ec43d9": "    Add R4B code + update generator for R4B generation"
            },
            "Commit&issueIDs": {
                "59fe0c6d20": [
                    "1788"
                ]
            },
            "links": [
                "https://github.com/hapifhir/org.hl7.fhir.core/issues/1788",
                "https://github.com/hapifhir/org.hl7.fhir.core/commit/59fe0c6d20"
            ]
        },
        {
            "poj_link": "https://github.com/hapifhir/org.hl7.fhir.core/",
            "file_path": "hapifhir/org.hl7.fhir.core/org.hl7.fhir.r5/src/test/java/org/hl7/fhir/r5/utils/client/network/ClientHeadersTest.java",
            "test_name": "addHeaders",
            "FQS": "org.hl7.fhir.r5.utils.client.network.ClientHeadersTest.addHeaders()",
            "start_line": "44",
            "blame_result": "59fe0c6d20 (dotasek       2024-11-08 16:42:26 -0500 45)     List<HTTPHeader> headersList = Arrays.asList(h1, h2, h3);\ne5a05f5562 (Mark Iantorno 2021-09-09 16:32:19 -0400 46)     clientHeaders.addHeaders(headersList);\ne5a05f5562 (Mark Iantorno 2021-09-09 16:32:19 -0400 47)     Assertions.assertEquals(3, clientHeaders.headers().size());\ne5a05f5562 (Mark Iantorno 2021-09-09 16:32:19 -0400 48)     Assertions.assertEquals(headersList, clientHeaders.headers());\ne5a05f5562 (Mark Iantorno 2021-09-09 16:32:19 -0400 49)   }\n",
            "commit_hashes": {
                "59fe0c6d20": "    Manage FhirRequestBuilders via ManagedWebAccess (#1788)",
                "e5a05f5562": "    Terminology client headers (#599)"
            },
            "Commit&issueIDs": {
                "59fe0c6d20": [
                    "1788"
                ],
                "e5a05f5562": [
                    "599"
                ]
            },
            "links": [
                "https://github.com/hapifhir/org.hl7.fhir.core/issues/1788",
                "https://github.com/hapifhir/org.hl7.fhir.core/commit/59fe0c6d20",
                "https://github.com/hapifhir/org.hl7.fhir.core/issues/599",
                "https://github.com/hapifhir/org.hl7.fhir.core/commit/e5a05f5562"
            ]
        },
        {
            "poj_link": "https://github.com/hapifhir/org.hl7.fhir.core/",
            "file_path": "hapifhir/org.hl7.fhir.core/org.hl7.fhir.utilities/src/test/java/org/hl7/fhir/utilities/tests/PackageCacheTests.java",
            "test_name": "testMinimal",
            "FQS": "org.hl7.fhir.utilities.tests.PackageCacheTests.testMinimal()",
            "start_line": "71",
            "blame_result": "0afea8dc1d (dotasek        2023-12-13 11:27:15 -0500 72)     FilesystemPackageCacheManager cache = new FilesystemPackageCacheManager.Builder().withTestingCacheFolder().build();\n0615f2a163 (Grahame Grieve 2023-06-22 15:05:59 +1000 73)     cache.clear();  \n0615f2a163 (Grahame Grieve 2023-06-22 15:05:59 +1000 74)     NpmPackage uscore = cache.loadPackage(\"hl7.fhir.us.core\", \"3.1.0\");\n0615f2a163 (Grahame Grieve 2023-06-22 15:05:59 +1000 75)     cache.setMinimalMemory(true);\n0615f2a163 (Grahame Grieve 2023-06-22 15:05:59 +1000 76)     NpmPackage uscoreMin = cache.loadPackage(\"hl7.fhir.us.core\", \"3.1.0\");\n",
            "commit_hashes": {
                "0afea8dc1d": "    CLI Task to preload package cache (#1508)",
                "0615f2a163": "    Minimal Memory model for NpmPackage"
            },
            "Commit&issueIDs": {
                "0afea8dc1d": [
                    "1508"
                ]
            },
            "links": [
                "https://github.com/hapifhir/org.hl7.fhir.core/issues/1508",
                "https://github.com/hapifhir/org.hl7.fhir.core/commit/0afea8dc1d"
            ]
        },
        {
            "poj_link": "https://github.com/hapifhir/org.hl7.fhir.core/",
            "file_path": "hapifhir/org.hl7.fhir.core/org.hl7.fhir.validation/src/test/java/org/hl7/fhir/validation/cli/services/PassiveExpiringSessionCacheTest.java",
            "test_name": "testConfigureDuration",
            "FQS": "org.hl7.fhir.validation.cli.services.PassiveExpiringSessionCacheTest.testConfigureDuration()",
            "start_line": "67",
            "blame_result": "f9e7f98b4f org.hl7.fhir.validation/src/test/java/org/hl7/fhir/validation/cli/services/PassiveExpiringSessionCacheTest.java (rpassas       2023-12-18 09:54:20 -0500 68)     final long EXPIRE_TIME = 15L;\nf9e7f98b4f org.hl7.fhir.validation/src/test/java/org/hl7/fhir/validation/cli/services/PassiveExpiringSessionCacheTest.java (rpassas       2023-12-18 09:54:20 -0500 69)     PassiveExpiringSessionCache cache = new PassiveExpiringSessionCache(EXPIRE_TIME, TimeUnit.SECONDS).setResetExpirationAfterFetch(true);\n847ede5f88 org.hl7.fhir.validation/src/test/java/org/hl7/fhir/validation/cli/services/SessionCacheTest.java                (dotasek       2022-02-01 15:28:19 -0500 70)     ValidationEngine testEngine = new ValidationEngine.ValidationEngineBuilder().fromNothing();\nb700d82eab org.hl7.fhir.validation/src/test/java/org/hl7/fhir/validation/cli/services/SessionCacheTest.java                (Mark Iantorno 2021-02-23 14:44:13 -0500 71)     String sessionId = cache.cacheSession(testEngine);\nf9e7f98b4f org.hl7.fhir.validation/src/test/java/org/hl7/fhir/validation/cli/services/PassiveExpiringSessionCacheTest.java (rpassas       2023-12-18 09:54:20 -0500 72)     TimeUnit.SECONDS.sleep(10L);\n",
            "commit_hashes": {
                "f9e7f98b4f": "    configurable sessions expiration (#1501)",
                "847ede5f88": "    Refactor SimpleWorkerContext and ValidationEngine",
                "b700d82eab": "    Validation sessions (#443)"
            },
            "Commit&issueIDs": {
                "f9e7f98b4f": [
                    "1501"
                ],
                "b700d82eab": [
                    "443"
                ]
            },
            "links": [
                "https://github.com/hapifhir/org.hl7.fhir.core/issues/1501",
                "https://github.com/hapifhir/org.hl7.fhir.core/commit/f9e7f98b4f",
                "https://github.com/hapifhir/org.hl7.fhir.core/issues/443",
                "https://github.com/hapifhir/org.hl7.fhir.core/commit/b700d82eab"
            ]
        },
        {
            "poj_link": "https://github.com/arnaudroger/SimpleFlatMapper/",
            "file_path": "arnaudroger/SimpleFlatMapper/sfm-csv/src/test/java/org/simpleflatmapper/csv/test/CsvColumnKeyTest.java",
            "test_name": "testEquals",
            "FQS": "org.simpleflatmapper.csv.test.CsvColumnKeyTest.testEquals()",
            "start_line": "28",
            "blame_result": "1319f5f1f3 src/test/java/org/sfm/csv/CsvColumnKeyTest.java     (Arnaud Roger 2014-11-16 21:16:13 +0000 29)         assertEquals(new CsvColumnKey(\"col\", 2), new CsvColumnKey(\"col\", 2));\n06dea9854c src/test/java/org/sfm/csv/CsvColumnKeyTest.java     (Arnaud Roger 2014-11-16 21:26:31 +0000 30)         assertEquals(new CsvColumnKey(\"col\", 2).alias(\"h\"), new CsvColumnKey(\"col\", 2).alias(\"h\"));\nc186b42143 sfm/src/test/java/org/sfm/csv/CsvColumnKeyTest.java (Arnaud Roger 2016-02-20 18:44:26 +0000 31)         // parent not int equals\nc186b42143 sfm/src/test/java/org/sfm/csv/CsvColumnKeyTest.java (Arnaud Roger 2016-02-20 18:44:26 +0000 32)         assertEquals(new CsvColumnKey(\"col2\", 2).alias(\"h\"), new CsvColumnKey(\"col3\", 2).alias(\"h\"));\n1319f5f1f3 src/test/java/org/sfm/csv/CsvColumnKeyTest.java     (Arnaud Roger 2014-11-16 21:16:13 +0000 33)         assertNotEquals(new CsvColumnKey(\"col\", 2), new CsvColumnKey(\"col1\", 2));\n",
            "commit_hashes": {
                "1319f5f1f3": "    add test",
                "06dea9854c": "    add test",
                "c186b42143": "     #289 make fieldkay abstract instead of interface"
            },
            "Commit&issueIDs": {
                "c186b42143": [
                    "#289"
                ]
            },
            "links": [
                "https://github.com/arnaudroger/SimpleFlatMapper/issues/289",
                "https://github.com/arnaudroger/SimpleFlatMapper/commit/c186b42143"
            ]
        },
        {
            "poj_link": "https://github.com/arnaudroger/SimpleFlatMapper/",
            "file_path": "arnaudroger/SimpleFlatMapper/sfm-reflect/src/test/java/org/simpleflatmapper/reflect/test/ObjectSetterFactoryTest.java",
            "test_name": "testToBooleanSetter",
            "FQS": "org.simpleflatmapper.reflect.test.ObjectSetterFactoryTest.testToBooleanSetter()",
            "start_line": "119",
            "blame_result": "459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 120) \t\tassertTrue(ObjectSetterFactory.toBooleanSetter(nonAsmFactory.getSetter(DbPrimitiveObject.class, \"pBoolean\")) instanceof BooleanFieldSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 121) \t\tassertTrue(ObjectSetterFactory.toBooleanSetter(nonAsmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pBoolean\")) instanceof BooleanMethodSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 122) \t\tSetter<DbPrimitiveObjectWithSetter, Object> setter =  asmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pBoolean\");\n7812f6947b src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-02-19 22:03:00 +0000 123) \t\tassertSame(setter, ObjectSetterFactory.toBooleanSetter(setter));\nbf1dd31345 sfm-reflect/src/test/java/org/simpleflatmapper/reflect/ObjectSetterFactoryTest.java (Arnaud Roger 2016-09-07 22:51:25 +0100 124) \t\tassertNull(ObjectSetterFactory.toBooleanSetter(null));\n",
            "commit_hashes": {
                "459902aed5": "    clean up",
                "7812f6947b": "    #117 add primitive getter",
                "bf1dd31345": "    add nullsetter test"
            },
            "Commit&issueIDs": {
                "7812f6947b": [
                    "#117"
                ]
            },
            "links": [
                "https://github.com/arnaudroger/SimpleFlatMapper/issues/117",
                "https://github.com/arnaudroger/SimpleFlatMapper/commit/7812f6947b"
            ]
        },
        {
            "poj_link": "https://github.com/arnaudroger/SimpleFlatMapper/",
            "file_path": "arnaudroger/SimpleFlatMapper/sfm-reflect/src/test/java/org/simpleflatmapper/reflect/test/ObjectSetterFactoryTest.java",
            "test_name": "testToByteSetter",
            "FQS": "org.simpleflatmapper.reflect.test.ObjectSetterFactoryTest.testToByteSetter()",
            "start_line": "138",
            "blame_result": "459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 139) \t\tassertTrue(ObjectSetterFactory.toByteSetter(nonAsmFactory.getSetter(DbPrimitiveObject.class, \"pByte\")) instanceof ByteFieldSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 140) \t\tassertTrue(ObjectSetterFactory.toByteSetter(nonAsmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pByte\")) instanceof ByteMethodSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 141) \t\tSetter<DbPrimitiveObjectWithSetter, Object> setter =  asmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pByte\");\n7812f6947b src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-02-19 22:03:00 +0000 142) \t\tassertSame(setter, ObjectSetterFactory.toByteSetter(setter));\nbf1dd31345 sfm-reflect/src/test/java/org/simpleflatmapper/reflect/ObjectSetterFactoryTest.java (Arnaud Roger 2016-09-07 22:51:25 +0100 143) \t\tassertNull(ObjectSetterFactory.toByteSetter(null));\n",
            "commit_hashes": {
                "459902aed5": "    clean up",
                "7812f6947b": "    #117 add primitive getter",
                "bf1dd31345": "    add nullsetter test"
            },
            "Commit&issueIDs": {
                "7812f6947b": [
                    "#117"
                ]
            },
            "links": [
                "https://github.com/arnaudroger/SimpleFlatMapper/issues/117",
                "https://github.com/arnaudroger/SimpleFlatMapper/commit/7812f6947b"
            ]
        },
        {
            "poj_link": "https://github.com/arnaudroger/SimpleFlatMapper/",
            "file_path": "arnaudroger/SimpleFlatMapper/sfm-reflect/src/test/java/org/simpleflatmapper/reflect/test/ObjectSetterFactoryTest.java",
            "test_name": "testToCharacterSetter",
            "FQS": "org.simpleflatmapper.reflect.test.ObjectSetterFactoryTest.testToCharacterSetter()",
            "start_line": "157",
            "blame_result": "459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 158) \t\tassertTrue(ObjectSetterFactory.toCharacterSetter(nonAsmFactory.getSetter(DbPrimitiveObject.class, \"pCharacter\")) instanceof CharacterFieldSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 159) \t\tassertTrue(ObjectSetterFactory.toCharacterSetter(nonAsmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pCharacter\")) instanceof CharacterMethodSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 160) \t\tSetter<DbPrimitiveObjectWithSetter, Object> setter =  asmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pCharacter\");\n7812f6947b src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-02-19 22:03:00 +0000 161) \t\tassertSame(setter, ObjectSetterFactory.toCharacterSetter(setter));\nbf1dd31345 sfm-reflect/src/test/java/org/simpleflatmapper/reflect/ObjectSetterFactoryTest.java (Arnaud Roger 2016-09-07 22:51:25 +0100 162) \t\tassertNull(ObjectSetterFactory.toCharacterSetter(null));\n",
            "commit_hashes": {
                "459902aed5": "    clean up",
                "7812f6947b": "    #117 add primitive getter",
                "bf1dd31345": "    add nullsetter test"
            },
            "Commit&issueIDs": {
                "7812f6947b": [
                    "#117"
                ]
            },
            "links": [
                "https://github.com/arnaudroger/SimpleFlatMapper/issues/117",
                "https://github.com/arnaudroger/SimpleFlatMapper/commit/7812f6947b"
            ]
        },
        {
            "poj_link": "https://github.com/arnaudroger/SimpleFlatMapper/",
            "file_path": "arnaudroger/SimpleFlatMapper/sfm-reflect/src/test/java/org/simpleflatmapper/reflect/test/ObjectSetterFactoryTest.java",
            "test_name": "testToShortSetter",
            "FQS": "org.simpleflatmapper.reflect.test.ObjectSetterFactoryTest.testToShortSetter()",
            "start_line": "176",
            "blame_result": "459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 177) \t\tassertTrue(ObjectSetterFactory.toShortSetter(nonAsmFactory.getSetter(DbPrimitiveObject.class, \"pShort\")) instanceof ShortFieldSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 178) \t\tassertTrue(ObjectSetterFactory.toShortSetter(nonAsmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pShort\")) instanceof ShortMethodSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 179) \t\tSetter<DbPrimitiveObjectWithSetter, Object> setter =  asmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pShort\");\n7812f6947b src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-02-19 22:03:00 +0000 180) \t\tassertSame(setter, ObjectSetterFactory.toShortSetter(setter));\nbf1dd31345 sfm-reflect/src/test/java/org/simpleflatmapper/reflect/ObjectSetterFactoryTest.java (Arnaud Roger 2016-09-07 22:51:25 +0100 181) \t\tassertNull(ObjectSetterFactory.toShortSetter(null));\n",
            "commit_hashes": {
                "459902aed5": "    clean up",
                "7812f6947b": "    #117 add primitive getter",
                "bf1dd31345": "    add nullsetter test"
            },
            "Commit&issueIDs": {
                "7812f6947b": [
                    "#117"
                ]
            },
            "links": [
                "https://github.com/arnaudroger/SimpleFlatMapper/issues/117",
                "https://github.com/arnaudroger/SimpleFlatMapper/commit/7812f6947b"
            ]
        },
        {
            "poj_link": "https://github.com/arnaudroger/SimpleFlatMapper/",
            "file_path": "arnaudroger/SimpleFlatMapper/sfm-reflect/src/test/java/org/simpleflatmapper/reflect/test/ObjectSetterFactoryTest.java",
            "test_name": "testToIntSetter",
            "FQS": "org.simpleflatmapper.reflect.test.ObjectSetterFactoryTest.testToIntSetter()",
            "start_line": "195",
            "blame_result": "459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 196) \t\tassertTrue(ObjectSetterFactory.toIntSetter(nonAsmFactory.getSetter(DbPrimitiveObject.class, \"pInt\")) instanceof IntFieldSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 197) \t\tassertTrue(ObjectSetterFactory.toIntSetter(nonAsmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pInt\")) instanceof IntMethodSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 198) \t\tSetter<DbPrimitiveObjectWithSetter, Object> setter =  asmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pInt\");\n7812f6947b src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-02-19 22:03:00 +0000 199) \t\tassertSame(setter, ObjectSetterFactory.toIntSetter(setter));\nbf1dd31345 sfm-reflect/src/test/java/org/simpleflatmapper/reflect/ObjectSetterFactoryTest.java (Arnaud Roger 2016-09-07 22:51:25 +0100 200) \t\tassertNull(ObjectSetterFactory.toIntSetter(null));\n",
            "commit_hashes": {
                "459902aed5": "    clean up",
                "7812f6947b": "    #117 add primitive getter",
                "bf1dd31345": "    add nullsetter test"
            },
            "Commit&issueIDs": {
                "7812f6947b": [
                    "#117"
                ]
            },
            "links": [
                "https://github.com/arnaudroger/SimpleFlatMapper/issues/117",
                "https://github.com/arnaudroger/SimpleFlatMapper/commit/7812f6947b"
            ]
        },
        {
            "poj_link": "https://github.com/arnaudroger/SimpleFlatMapper/",
            "file_path": "arnaudroger/SimpleFlatMapper/sfm-reflect/src/test/java/org/simpleflatmapper/reflect/test/ObjectSetterFactoryTest.java",
            "test_name": "testToLongSetter",
            "FQS": "org.simpleflatmapper.reflect.test.ObjectSetterFactoryTest.testToLongSetter()",
            "start_line": "214",
            "blame_result": "459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 215) \t\tassertTrue(ObjectSetterFactory.toLongSetter(nonAsmFactory.getSetter(DbPrimitiveObject.class, \"pLong\")) instanceof LongFieldSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 216) \t\tassertTrue(ObjectSetterFactory.toLongSetter(nonAsmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pLong\")) instanceof LongMethodSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 217) \t\tSetter<DbPrimitiveObjectWithSetter, Object> setter =  asmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pLong\");\n7812f6947b src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-02-19 22:03:00 +0000 218) \t\tassertSame(setter, ObjectSetterFactory.toLongSetter(setter));\nbf1dd31345 sfm-reflect/src/test/java/org/simpleflatmapper/reflect/ObjectSetterFactoryTest.java (Arnaud Roger 2016-09-07 22:51:25 +0100 219) \t\tassertNull(ObjectSetterFactory.toLongSetter(null));\n",
            "commit_hashes": {
                "459902aed5": "    clean up",
                "7812f6947b": "    #117 add primitive getter",
                "bf1dd31345": "    add nullsetter test"
            },
            "Commit&issueIDs": {
                "7812f6947b": [
                    "#117"
                ]
            },
            "links": [
                "https://github.com/arnaudroger/SimpleFlatMapper/issues/117",
                "https://github.com/arnaudroger/SimpleFlatMapper/commit/7812f6947b"
            ]
        },
        {
            "poj_link": "https://github.com/arnaudroger/SimpleFlatMapper/",
            "file_path": "arnaudroger/SimpleFlatMapper/sfm-reflect/src/test/java/org/simpleflatmapper/reflect/test/ObjectSetterFactoryTest.java",
            "test_name": "testToFloatSetter",
            "FQS": "org.simpleflatmapper.reflect.test.ObjectSetterFactoryTest.testToFloatSetter()",
            "start_line": "233",
            "blame_result": "459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 234) \t\tassertTrue(ObjectSetterFactory.toFloatSetter(nonAsmFactory.getSetter(DbPrimitiveObject.class, \"pFloat\")) instanceof FloatFieldSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 235) \t\tassertTrue(ObjectSetterFactory.toFloatSetter(nonAsmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pFloat\")) instanceof FloatMethodSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 236) \t\tSetter<DbPrimitiveObjectWithSetter, Object> setter =  asmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pFloat\");\n7812f6947b src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-02-19 22:03:00 +0000 237) \t\tassertSame(setter, ObjectSetterFactory.toFloatSetter(setter));\nbf1dd31345 sfm-reflect/src/test/java/org/simpleflatmapper/reflect/ObjectSetterFactoryTest.java (Arnaud Roger 2016-09-07 22:51:25 +0100 238) \t\tassertNull(ObjectSetterFactory.toFloatSetter(null));\n",
            "commit_hashes": {
                "459902aed5": "    clean up",
                "7812f6947b": "    #117 add primitive getter",
                "bf1dd31345": "    add nullsetter test"
            },
            "Commit&issueIDs": {
                "7812f6947b": [
                    "#117"
                ]
            },
            "links": [
                "https://github.com/arnaudroger/SimpleFlatMapper/issues/117",
                "https://github.com/arnaudroger/SimpleFlatMapper/commit/7812f6947b"
            ]
        },
        {
            "poj_link": "https://github.com/arnaudroger/SimpleFlatMapper/",
            "file_path": "arnaudroger/SimpleFlatMapper/sfm-reflect/src/test/java/org/simpleflatmapper/reflect/test/ObjectSetterFactoryTest.java",
            "test_name": "testToDoubleSetter",
            "FQS": "org.simpleflatmapper.reflect.test.ObjectSetterFactoryTest.testToDoubleSetter()",
            "start_line": "252",
            "blame_result": "459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 253) \t\tassertTrue(ObjectSetterFactory.toDoubleSetter(nonAsmFactory.getSetter(DbPrimitiveObject.class, \"pDouble\")) instanceof DoubleFieldSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 254) \t\tassertTrue(ObjectSetterFactory.toDoubleSetter(nonAsmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pDouble\")) instanceof DoubleMethodSetter);\n459902aed5 src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-03-13 16:19:19 +0000 255) \t\tSetter<DbPrimitiveObjectWithSetter, Object> setter =  asmFactory.getSetter(DbPrimitiveObjectWithSetter.class, \"pDouble\");\n7812f6947b src/test/java/org/sfm/reflect/ObjectSetterFactoryTest.java                          (Arnaud Roger 2015-02-19 22:03:00 +0000 256) \t\tassertSame(setter, ObjectSetterFactory.toDoubleSetter(setter));\nbf1dd31345 sfm-reflect/src/test/java/org/simpleflatmapper/reflect/ObjectSetterFactoryTest.java (Arnaud Roger 2016-09-07 22:51:25 +0100 257) \t\tassertNull(ObjectSetterFactory.toDoubleSetter(null));\n",
            "commit_hashes": {
                "459902aed5": "    clean up",
                "7812f6947b": "    #117 add primitive getter",
                "bf1dd31345": "    add nullsetter test"
            },
            "Commit&issueIDs": {
                "7812f6947b": [
                    "#117"
                ]
            },
            "links": [
                "https://github.com/arnaudroger/SimpleFlatMapper/issues/117",
                "https://github.com/arnaudroger/SimpleFlatMapper/commit/7812f6947b"
            ]
        },
        {
            "poj_link": "https://github.com/arnaudroger/SimpleFlatMapper/",
            "file_path": "arnaudroger/SimpleFlatMapper/sfm-reflect/src/test/java/org/simpleflatmapper/reflect/test/asm/AsmFactoryTest.java",
            "test_name": "testCreateInstantiatorFinalDbObjectInjectIdAndName",
            "FQS": "org.simpleflatmapper.reflect.test.asm.AsmFactoryTest.testCreateInstantiatorFinalDbObjectInjectIdAndName()",
            "start_line": "68",
            "blame_result": "bb52d0df04 sfm/src/test/java/org/sfm/reflect/asm/AsmFactoryTest.java      (Arnaud Roger 2016-02-10 21:09:55 +0000 69) \t\tExecutableInstantiatorDefinition instantiatorDefinition =\nbb52d0df04 sfm/src/test/java/org/sfm/reflect/asm/AsmFactoryTest.java      (Arnaud Roger 2016-02-10 21:09:55 +0000 70) \t\t\t\t(ExecutableInstantiatorDefinition) AsmInstantiatorDefinitionFactory.extractDefinitions(DbFinalObject.class).get(0);\n1c5f8f646f sfm-core/src/test/java/org/sfm/reflect/asm/AsmFactoryTest.java (Arnaud Roger 2016-08-01 20:13:41 +0000 71) \t\tHashMap<Parameter, Getter<? super Object, ?>> injections = new HashMap<Parameter, Getter<? super Object, ?>>();\n1c5f8f646f sfm-core/src/test/java/org/sfm/reflect/asm/AsmFactoryTest.java (Arnaud Roger 2016-08-01 20:13:41 +0000 72) \t\tinjections.put(new Parameter(0, \"id\", long.class), new ConstantLongGetter<Object>(33l));\n1c5f8f646f sfm-core/src/test/java/org/sfm/reflect/asm/AsmFactoryTest.java (Arnaud Roger 2016-08-01 20:13:41 +0000 73) \t\tinjections.put(new Parameter(1, \"name\", String.class), new ConstantGetter<Object, String>(\"fdo\"));\n",
            "commit_hashes": {
                "bb52d0df04": "     #287 add build instantiator",
                "1c5f8f646f": "    start extracting sfm-jdbc"
            },
            "Commit&issueIDs": {
                "bb52d0df04": [
                    "#287"
                ]
            },
            "links": [
                "https://github.com/arnaudroger/SimpleFlatMapper/issues/287",
                "https://github.com/arnaudroger/SimpleFlatMapper/commit/bb52d0df04"
            ]
        },
        {
            "poj_link": "https://github.com/arnaudroger/SimpleFlatMapper/",
            "file_path": "arnaudroger/SimpleFlatMapper/sfm-tuples/src/test/java/org/simpleflatmapper/tuple/test/TuplesTest.java",
            "test_name": "testTuple2",
            "FQS": "org.simpleflatmapper.tuple.test.TuplesTest.testTuple2()",
            "start_line": "45",
            "blame_result": "afb865e05b src/test/java/org/sfm/tuples/TuplesTest.java (Arnaud Roger 2015-05-20 18:38:58 +0100 46)         assertEquals(new Tuple2<String, String>(\"aa\", \"bb\"), tuple2);\nafb865e05b src/test/java/org/sfm/tuples/TuplesTest.java (Arnaud Roger 2015-05-20 18:38:58 +0100 47)         assertEquals(new Tuple2<String, String>(\"aa\", \"bb\").hashCode(), tuple2.hashCode());\nafb865e05b src/test/java/org/sfm/tuples/TuplesTest.java (Arnaud Roger 2015-05-20 18:38:58 +0100 48)         assertNotEquals(new Tuple2<String, String>(\"aa\", \"bbb\"), tuple2);\nafb865e05b src/test/java/org/sfm/tuples/TuplesTest.java (Arnaud Roger 2015-05-20 18:38:58 +0100 49)         assertNotEquals(new Tuple2<String, String>(\"aa\", \"bbb\").hashCode(), tuple2.hashCode());\nafb865e05b src/test/java/org/sfm/tuples/TuplesTest.java (Arnaud Roger 2015-05-20 18:38:58 +0100 50)         assertNotEquals(new Tuple2<String, String>(\"aaa\", \"bb\"), tuple2);\n",
            "commit_hashes": {
                "afb865e05b": "     #177 better resolving of generic information support List impl and Map impl"
            },
            "Commit&issueIDs": {
                "afb865e05b": [
                    "#177"
                ]
            },
            "links": [
                "https://github.com/arnaudroger/SimpleFlatMapper/issues/177",
                "https://github.com/arnaudroger/SimpleFlatMapper/commit/afb865e05b"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/BagUtilsTest.java",
            "test_name": "testUnmodifiableBag",
            "FQS": "org.apache.commons.collections4.BagUtilsTest.testUnmodifiableBag()",
            "start_line": "110",
            "blame_result": "059c468f7 (Gary Gregory  2018-01-02 19:51:56 -0700 111)         final Bag<Object> bag = BagUtils.unmodifiableBag(new HashBag<>());\na82fa1572 (Arturo Bernal 2021-02-03 22:40:22 +0100 112)         assertTrue(bag instanceof UnmodifiableBag, \"Returned object should be an UnmodifiableBag.\");\n93510caf3 (John Patrick  2022-03-06 22:13:38 +0000 113)         assertThrows(NullPointerException.class, () -> BagUtils.unmodifiableBag(null),\n93510caf3 (John Patrick  2022-03-06 22:13:38 +0000 114)                 \"Expecting NullPointerException for null bag.\");\na82fa1572 (Arturo Bernal 2021-02-03 22:40:22 +0100 115)         assertSame(bag, BagUtils.unmodifiableBag(bag), \"UnmodifiableBag shall not be decorated\");\n",
            "commit_hashes": {
                "059c468f7": "    Use final.",
                "a82fa1572": "    COLLECTIONS-779 - Migrate assert to Assertions (#209)",
                "93510caf3": "    COLLECTIONS-777 JUnit v5 (#287)"
            },
            "Commit&issueIDs": {
                "a82fa1572": [
                    "(#209)"
                ],
                "93510caf3": [
                    "(#287)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/209",
                "https://github.com/apache/commons-collections/commit/a82fa1572",
                "https://github.com/apache/commons-collections/issues/287",
                "https://github.com/apache/commons-collections/commit/93510caf3"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/BagUtilsTest.java",
            "test_name": "testUnmodifiableSortedBag",
            "FQS": "org.apache.commons.collections4.BagUtilsTest.testUnmodifiableSortedBag()",
            "start_line": "119",
            "blame_result": "059c468f7 (Gary Gregory  2018-01-02 19:51:56 -0700 120)         final SortedBag<Object> bag = BagUtils.unmodifiableSortedBag(new TreeBag<>());\na82fa1572 (Arturo Bernal 2021-02-03 22:40:22 +0100 121)         assertTrue(bag instanceof UnmodifiableSortedBag, \"Returned object should be an UnmodifiableSortedBag.\");\n93510caf3 (John Patrick  2022-03-06 22:13:38 +0000 122)         assertThrows(NullPointerException.class, () -> BagUtils.unmodifiableSortedBag(null),\n93510caf3 (John Patrick  2022-03-06 22:13:38 +0000 123)                 \"Expecting NullPointerException for null bag.\");\na82fa1572 (Arturo Bernal 2021-02-03 22:40:22 +0100 124)         assertSame(bag, BagUtils.unmodifiableSortedBag(bag), \"UnmodifiableSortedBag shall not be decorated\");\n",
            "commit_hashes": {
                "059c468f7": "    Use final.",
                "a82fa1572": "    COLLECTIONS-779 - Migrate assert to Assertions (#209)",
                "93510caf3": "    COLLECTIONS-777 JUnit v5 (#287)"
            },
            "Commit&issueIDs": {
                "a82fa1572": [
                    "(#209)"
                ],
                "93510caf3": [
                    "(#287)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/209",
                "https://github.com/apache/commons-collections/commit/a82fa1572",
                "https://github.com/apache/commons-collections/issues/287",
                "https://github.com/apache/commons-collections/commit/93510caf3"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/FluentIterableTest.java",
            "test_name": "testAllMatch",
            "FQS": "org.apache.commons.collections4.FluentIterableTest.testAllMatch()",
            "start_line": "107",
            "blame_result": "bafb7096f (Thomas Neidhart 2015-06-04 21:12:09 +0000 108)         assertTrue(FluentIterable.of(iterableEven).allMatch(EVEN));\nbafb7096f (Thomas Neidhart 2015-06-04 21:12:09 +0000 109)         assertFalse(FluentIterable.of(iterableOdd).allMatch(EVEN));\nbafb7096f (Thomas Neidhart 2015-06-04 21:12:09 +0000 110)         assertFalse(FluentIterable.of(iterableA).allMatch(EVEN));\ned39f9334 (Thomas Neidhart 2015-06-05 14:06:47 +0000 111) \n93510caf3 (John Patrick    2022-03-06 22:13:38 +0000 112)         assertThrows(NullPointerException.class, () -> FluentIterable.of(iterableEven).allMatch(null),\n",
            "commit_hashes": {
                "bafb7096f": "    Minor changes to FluentIterable, added toList to IterableUtils, added first FluentIterable tests.",
                "ed39f9334": "    Add more tests, add emptyIterable() method.",
                "93510caf3": "    COLLECTIONS-777 JUnit v5 (#287)"
            },
            "Commit&issueIDs": {
                "93510caf3": [
                    "(#287)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/287",
                "https://github.com/apache/commons-collections/commit/93510caf3"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/FluentIterableTest.java",
            "test_name": "testAnyMatch",
            "FQS": "org.apache.commons.collections4.FluentIterableTest.testAnyMatch()",
            "start_line": "117",
            "blame_result": "bafb7096f (Thomas Neidhart 2015-06-04 21:12:09 +0000 118)         assertTrue(FluentIterable.of(iterableEven).anyMatch(EVEN));\nbafb7096f (Thomas Neidhart 2015-06-04 21:12:09 +0000 119)         assertFalse(FluentIterable.of(iterableOdd).anyMatch(EVEN));\nbafb7096f (Thomas Neidhart 2015-06-04 21:12:09 +0000 120)         assertTrue(FluentIterable.of(iterableA).anyMatch(EVEN));\ned39f9334 (Thomas Neidhart 2015-06-05 14:06:47 +0000 121) \n93510caf3 (John Patrick    2022-03-06 22:13:38 +0000 122)         assertThrows(NullPointerException.class, () -> FluentIterable.of(iterableEven).anyMatch(null),\n",
            "commit_hashes": {
                "bafb7096f": "    Minor changes to FluentIterable, added toList to IterableUtils, added first FluentIterable tests.",
                "ed39f9334": "    Add more tests, add emptyIterable() method.",
                "93510caf3": "    COLLECTIONS-777 JUnit v5 (#287)"
            },
            "Commit&issueIDs": {
                "93510caf3": [
                    "(#287)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/287",
                "https://github.com/apache/commons-collections/commit/93510caf3"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/FluentIterableTest.java",
            "test_name": "testUnmodifiable",
            "FQS": "org.apache.commons.collections4.FluentIterableTest.testUnmodifiable()",
            "start_line": "429",
            "blame_result": "059c468f7 (Gary Gregory    2018-01-02 19:51:56 -0700 430)         final FluentIterable<Integer> iterable1 = FluentIterable.of(iterableA).unmodifiable();\n059c468f7 (Gary Gregory    2018-01-02 19:51:56 -0700 431)         final Iterator<Integer> it = iterable1.iterator();\n6c8caea33 (Thomas Neidhart 2015-06-06 12:00:46 +0000 432)         assertEquals(1, it.next().intValue());\n93510caf3 (John Patrick    2022-03-06 22:13:38 +0000 433) \n93510caf3 (John Patrick    2022-03-06 22:13:38 +0000 434)         assertThrows(UnsupportedOperationException.class, () -> it.remove(),\n",
            "commit_hashes": {
                "059c468f7": "    Use final.",
                "6c8caea33": "    [COLLECTIONS-551] Move forAllButLastDo methods, add unmodifiableIterable.",
                "93510caf3": "    COLLECTIONS-777 JUnit v5 (#287)"
            },
            "Commit&issueIDs": {
                "93510caf3": [
                    "(#287)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/287",
                "https://github.com/apache/commons-collections/commit/93510caf3"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/MapUtilsTest.java",
            "test_name": "testIterableSortedMap",
            "FQS": "org.apache.commons.collections4.MapUtilsTest.testIterableSortedMap()",
            "start_line": "712",
            "blame_result": "93510caf3 src/test/java/org/apache/commons/collections4/MapUtilsTest.java (John Patrick  2022-03-06 22:13:38 +0000 713)         assertThrows(NullPointerException.class, () -> MapUtils.iterableSortedMap(null),\n93510caf3 src/test/java/org/apache/commons/collections4/MapUtilsTest.java (John Patrick  2022-03-06 22:13:38 +0000 714)                 \"Should throw NullPointerException\");\nbe6789ced src/test/java/org/apache/commons/collections4/MapUtilsTest.java (ggregory      2017-10-14 13:41:44 -0600 715) \neef8f1a0a src/test/java/org/apache/commons/collections4/MapUtilsTest.java (Gary Gregory  2017-07-26 23:43:14 -0700 716)         final TreeMap<String, String> map = new TreeMap<>();\n646488dc7 src/test/org/apache/commons/collections/TestMapUtils.java       (Henri Yandell 2009-09-15 05:58:11 +0000 717)         map.put(\"foo\", \"foov\");\n",
            "commit_hashes": {
                "93510caf3": "    COLLECTIONS-777 JUnit v5 (#287)",
                "be6789ced": "    Remove trailing white spaces on all lines.",
                "eef8f1a0a": "    Remove redundant type arguments.",
                "646488dc7": "    Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956."
            },
            "Commit&issueIDs": {
                "93510caf3": [
                    "(#287)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/287",
                "https://github.com/apache/commons-collections/commit/93510caf3"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/QueueUtilsTest.java",
            "test_name": "testUnmodifiableQueue",
            "FQS": "org.apache.commons.collections4.QueueUtilsTest.testUnmodifiableQueue()",
            "start_line": "85",
            "blame_result": "059c468f7 (Gary Gregory    2018-01-02 19:51:56 -0700 86)         final Queue<Object> queue = QueueUtils.unmodifiableQueue(new LinkedList<>());\na82fa1572 (Arturo Bernal   2021-02-03 22:40:22 +0100 87)         assertTrue(queue instanceof UnmodifiableQueue, \"Returned object should be an UnmodifiableQueue.\");\n11ddae0a3 (Thomas Neidhart 2013-11-11 09:07:10 +0000 88) \n2a2a534c0 (John Patrick    2022-03-04 13:44:25 +0000 89)         assertThrows(NullPointerException.class, () -> QueueUtils.unmodifiableQueue(null),\n2a2a534c0 (John Patrick    2022-03-04 13:44:25 +0000 90)                 \"Expecting NullPointerException for null queue.\");\n",
            "commit_hashes": {
                "059c468f7": "    Use final.",
                "a82fa1572": "    COLLECTIONS-779 - Migrate assert to Assertions (#209)",
                "11ddae0a3": "    Add unit test for QueueUtils.",
                "2a2a534c0": "    COLLECTIONS-777 JUnit v5 (#284)"
            },
            "Commit&issueIDs": {
                "a82fa1572": [
                    "(#209)"
                ],
                "2a2a534c0": [
                    "(#284)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/209",
                "https://github.com/apache/commons-collections/commit/a82fa1572",
                "https://github.com/apache/commons-collections/issues/284",
                "https://github.com/apache/commons-collections/commit/2a2a534c0"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/TrieUtilsTest.java",
            "test_name": "testUnmodifiableTrie",
            "FQS": "org.apache.commons.collections4.TrieUtilsTest.testUnmodifiableTrie()",
            "start_line": "33",
            "blame_result": "059c468f7 (Gary Gregory  2018-01-02 19:51:56 -0700 34)         final Trie<String, Object> trie = TrieUtils.unmodifiableTrie(new PatriciaTrie<>());\na82fa1572 (Arturo Bernal 2021-02-03 22:40:22 +0100 35)         assertTrue(trie instanceof UnmodifiableTrie, \"Returned object should be an UnmodifiableTrie.\");\nf4c041ba9 (John Patrick  2022-03-04 13:36:21 +0000 36) \nf4c041ba9 (John Patrick  2022-03-04 13:36:21 +0000 37)         assertThrows(NullPointerException.class, () -> TrieUtils.unmodifiableTrie(null));\nbe6789ced (ggregory      2017-10-14 13:41:44 -0600 38) \n",
            "commit_hashes": {
                "059c468f7": "    Use final.",
                "a82fa1572": "    COLLECTIONS-779 - Migrate assert to Assertions (#209)",
                "f4c041ba9": "    COLLECTIONS-777 JUnit v5 (#281)",
                "be6789ced": "    Remove trailing white spaces on all lines."
            },
            "Commit&issueIDs": {
                "a82fa1572": [
                    "(#209)"
                ],
                "f4c041ba9": [
                    "(#281)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/209",
                "https://github.com/apache/commons-collections/commit/a82fa1572",
                "https://github.com/apache/commons-collections/issues/281",
                "https://github.com/apache/commons-collections/commit/f4c041ba9"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java",
            "test_name": "testFullBagCompatibility",
            "FQS": "org.apache.commons.collections4.bag.CollectionBagTest.testFullBagCompatibility()",
            "start_line": "111",
            "blame_result": "7725a72c7 src/test/java/org/apache/commons/collections4/bag/CompliantBagTest.java  (Thomas Neidhart 2013-06-17 21:06:00 +0000 112)         // test to make sure the canonical form has been preserved\n5a87d98aa src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java (Thomas Neidhart 2013-11-11 20:28:22 +0000 113)         final Bag<T> bag = (Bag<T>) makeFullCollection();\n7725a72c7 src/test/java/org/apache/commons/collections4/bag/CompliantBagTest.java  (Thomas Neidhart 2013-06-17 21:06:00 +0000 114)         if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n7725a72c7 src/test/java/org/apache/commons/collections4/bag/CompliantBagTest.java  (Thomas Neidhart 2013-06-17 21:06:00 +0000 115)             final Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n34f0b1cef src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java (Sam Ng          2023-04-24 03:24:48 +0800 116)             assertEquals(bag.size(), bag2.size(), \"Bag is the right size\");\n",
            "commit_hashes": {
                "7725a72c7": "    [COLLECTIONS-468] Added CompliantBag decorator which decorates another bag to comply with the Collection contract.",
                "5a87d98aa": "    [COLLECTION-497,498,499] Refactored test framework for bag implementations, added missing tests, added CollectionSortedBag.",
                "34f0b1cef": "    [COLLECTIONS-839] migrate all tests to use junit5 assert and BulkTest not extend TestCase (#391)"
            },
            "Commit&issueIDs": {
                "34f0b1cef": [
                    "(#391)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/391",
                "https://github.com/apache/commons-collections/commit/34f0b1cef"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java",
            "test_name": "testFullBagCompatibility",
            "FQS": "org.apache.commons.collections4.bag.CollectionSortedBagTest.testFullBagCompatibility()",
            "start_line": "142",
            "blame_result": "7725a72c7 src/test/java/org/apache/commons/collections4/bag/CompliantBagTest.java        (Thomas Neidhart 2013-06-17 21:06:00 +0000 143)         // test to make sure the canonical form has been preserved\n5a87d98aa src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java (Thomas Neidhart 2013-11-11 20:28:22 +0000 144)         final SortedBag<T> bag = (SortedBag<T>) makeFullCollection();\n7725a72c7 src/test/java/org/apache/commons/collections4/bag/CompliantBagTest.java        (Thomas Neidhart 2013-06-17 21:06:00 +0000 145)         if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n5a87d98aa src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java (Thomas Neidhart 2013-11-11 20:28:22 +0000 146)             final SortedBag<?> bag2 = (SortedBag<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n34f0b1cef src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java (Sam Ng          2023-04-24 03:24:48 +0800 147)             assertEquals(bag.size(), bag2.size(), \"Bag is the right size\");\n",
            "commit_hashes": {
                "7725a72c7": "    [COLLECTIONS-468] Added CompliantBag decorator which decorates another bag to comply with the Collection contract.",
                "5a87d98aa": "    [COLLECTION-497,498,499] Refactored test framework for bag implementations, added missing tests, added CollectionSortedBag.",
                "34f0b1cef": "    [COLLECTIONS-839] migrate all tests to use junit5 assert and BulkTest not extend TestCase (#391)"
            },
            "Commit&issueIDs": {
                "34f0b1cef": [
                    "(#391)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/391",
                "https://github.com/apache/commons-collections/commit/34f0b1cef"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java",
            "test_name": "testFromIndexArray",
            "FQS": "org.apache.commons.collections4.bloomfilter.DefaultIndexExtractorTest.testFromIndexArray()",
            "start_line": "134",
            "blame_result": "2a6ec0fca0 src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexProducerTest.java  (Alex Herbert      2022-09-09 22:55:14 +0100 135)         for (int i = 0; i < 5; i++) {\ne37d375d83 src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexProducerTest.java  (Gary Gregory      2022-11-06 10:42:35 -0500 136)             final int[] expected = generateIntArray(10, 256);\n4a2aa76d4b src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java (Claude Warren     2024-05-28 15:00:20 +0100 137)             final IndexExtractor ip = IndexExtractor.fromIndexArray(expected);\na251c18dae src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexProducerTest.java  (Claude Warren     2022-11-05 16:30:47 -0500 138)             assertArrayEquals(expected, ip.asIndexArray());\n9a58c1bbdf src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexProducerTest.java  (Claude Warren, Jr 2022-09-09 22:18:32 +0100 139)         }\n",
            "commit_hashes": {
                "2a6ec0fca0": "    Simplify random indices tests",
                "e37d375d83": "    Add missing @Override",
                "4a2aa76d4b": "    [COLLECTIONS-854] renaming bloomfilter components and methods as per ticket (#492)",
                "a251c18dae": "    Collections-834: Clarify Bloom filter BitCountProducer operation (#335)",
                "9a58c1bbdf": "    Collections-763: Remove BloomFilter constructors that create initial entry"
            },
            "Commit&issueIDs": {
                "4a2aa76d4b": [
                    "492"
                ],
                "a251c18dae": [
                    "335"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/492",
                "https://github.com/apache/commons-collections/commit/4a2aa76d4b",
                "https://github.com/apache/commons-collections/issues/335",
                "https://github.com/apache/commons-collections/commit/a251c18dae"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java",
            "test_name": "testCommutativityOnMismatchedSizes",
            "FQS": "org.apache.commons.collections4.bloomfilter.SetOperationsTest.testCommutativityOnMismatchedSizes()",
            "start_line": "91",
            "blame_result": "c182f6561 (Gary Gregory  2023-09-13 18:10:39 -0400 92)         final BitMapProducer p1 = BitMapProducer.fromBitMapArray(0x3L, 0x5L);\nc182f6561 (Gary Gregory  2023-09-13 18:10:39 -0400 93)         final BitMapProducer p2 = BitMapProducer.fromBitMapArray(0x1L);\n87647d081 (Claude Warren 2022-06-15 18:24:22 +0100 94) \n87647d081 (Claude Warren 2022-06-15 18:24:22 +0100 95)         assertEquals(SetOperations.orCardinality(p1, p2), SetOperations.orCardinality(p2, p1));\n87647d081 (Claude Warren 2022-06-15 18:24:22 +0100 96)         assertEquals(SetOperations.xorCardinality(p1, p2), SetOperations.xorCardinality(p2, p1));\n",
            "commit_hashes": {
                "c182f6561": "    Better lambdas",
                "87647d081": "    Simplify bloom filters (#258)"
            },
            "Commit&issueIDs": {
                "87647d081": [
                    "(#258)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/258",
                "https://github.com/apache/commons-collections/commit/87647d081"
            ]
        },
        {
            "poj_link": "https://github.com/apache/commons-collections/",
            "file_path": "apache/commons-collections/src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java",
            "test_name": "testEntrySet",
            "FQS": "org.apache.commons.collections4.multiset.UnmodifiableMultiSetTest.testEntrySet()",
            "start_line": "97",
            "blame_result": "59c6e94d5 (Thomas Neidhart 2015-11-15 15:04:19 +0000  98)         final MultiSet<E> multiset = makeFullCollection();\n5db17ee05 (dota17          2019-10-30 21:04:26 +0800  99)         final MultiSet<E> unmodifiableMultiSet =  UnmodifiableMultiSet.unmodifiableMultiSet(multiset);\n4797acefb (Alex Herbert    2020-02-18 23:07:19 +0000 100)         assertSame( unmodifiableMultiSet.entrySet().size(), multiset.entrySet().size());\n5db17ee05 (dota17          2019-10-30 21:04:26 +0800 101)     }\n5db17ee05 (dota17          2019-10-30 21:04:26 +0800 102) \n",
            "commit_hashes": {
                "59c6e94d5": "    [COLLECTIONS-567] Add missing unit tests, fix problems with remove method.",
                "5db17ee05": "    add junit for add, remove, setCount and entrySet in the UnmodifiableMultiSetTest (#95)",
                "4797acefb": "    Fixed checkstyle."
            },
            "Commit&issueIDs": {
                "5db17ee05": [
                    "(#95)"
                ]
            },
            "links": [
                "https://github.com/apache/commons-collections/issues/95",
                "https://github.com/apache/commons-collections/commit/5db17ee05"
            ]
        },
        {
            "poj_link": "https://github.com/michel-kraemer/bson4jackson/",
            "file_path": "michel-kraemer/bson4jackson/src/test/java/de/undercouch/bson4jackson/BsonFactoryTest.java",
            "test_name": "shouldCopyParserFeaturesOnCopy",
            "FQS": "de.undercouch.bson4jackson.BsonFactoryTest.shouldCopyParserFeaturesOnCopy()",
            "start_line": "41",
            "blame_result": "6d5dcde3 (Michel Kraemer 2016-10-23 11:43:54 +0200 42)         BsonParser.Feature feature = BsonParser.Feature.HONOR_DOCUMENT_LENGTH;\n15369bdc (The Datalorax  2015-03-03 16:24:55 +0000 43)         factory.configure(feature, !factory.isEnabled(feature));\n15369bdc (The Datalorax  2015-03-03 16:24:55 +0000 44) \n6d5dcde3 (Michel Kraemer 2016-10-23 11:43:54 +0200 45)         BsonFactory copy = factory.copy();\n15369bdc (The Datalorax  2015-03-03 16:24:55 +0000 46) \n",
            "commit_hashes": {
                "6d5dcde3": "    Add more javadoc and clean up a bit",
                "15369bdc": "    Issue #44 - Add copy() support to BsonFactory"
            },
            "Commit&issueIDs": {
                "15369bdc": [
                    "#44"
                ]
            },
            "links": [
                "https://github.com/michel-kraemer/bson4jackson/issues/44",
                "https://github.com/michel-kraemer/bson4jackson/commit/15369bdc"
            ]
        },
        {
            "poj_link": "https://github.com/michel-kraemer/bson4jackson/",
            "file_path": "michel-kraemer/bson4jackson/src/test/java/de/undercouch/bson4jackson/BsonFactoryTest.java",
            "test_name": "shouldCopyGeneratorFeaturesOnCopy",
            "FQS": "de.undercouch.bson4jackson.BsonFactoryTest.shouldCopyGeneratorFeaturesOnCopy()",
            "start_line": "55",
            "blame_result": "6d5dcde3 (Michel Kraemer 2016-10-23 11:43:54 +0200 56)         BsonGenerator.Feature feature = BsonGenerator.Feature.ENABLE_STREAMING;\n15369bdc (The Datalorax  2015-03-03 16:24:55 +0000 57)         factory.configure(feature, !factory.isEnabled(feature));\n15369bdc (The Datalorax  2015-03-03 16:24:55 +0000 58) \n6d5dcde3 (Michel Kraemer 2016-10-23 11:43:54 +0200 59)         BsonFactory copy = factory.copy();\n15369bdc (The Datalorax  2015-03-03 16:24:55 +0000 60) \n",
            "commit_hashes": {
                "6d5dcde3": "    Add more javadoc and clean up a bit",
                "15369bdc": "    Issue #44 - Add copy() support to BsonFactory"
            },
            "Commit&issueIDs": {
                "15369bdc": [
                    "#44"
                ]
            },
            "links": [
                "https://github.com/michel-kraemer/bson4jackson/issues/44",
                "https://github.com/michel-kraemer/bson4jackson/commit/15369bdc"
            ]
        },
        {
            "poj_link": "https://github.com/huaweicloud/spring-cloud-huawei/",
            "file_path": "huaweicloud/spring-cloud-huawei/spring-cloud-huawei-common/src/test/java/com/huaweicloud/common/util/MD5UtilTest.java",
            "test_name": "encrypt",
            "FQS": "com.huaweicloud.common.util.MD5UtilTest.encrypt()",
            "start_line": "30",
            "blame_result": "45ad6b5fd spring-cloud-huawei-common/src/test/java/org/springframework/cloud/common/util/MD5UtilTest.java (Jon Wang     2019-11-06 19:56:35 +0800 31)     String computeValue = \"dasfjkl;sdjfkldsafjodsiu29-w0483290-48230-8idfsopafjdls;afkd;safkd;safdsaf\";\ncc9db2f69 spring-cloud-huawei-common/src/test/java/com/huaweicloud/common/util/MD5UtilTest.java           (david6969xin 2022-04-19 16:11:21 +0800 32)     Assertions.assertEquals(MD5Util.encrypt(computeValue), MD5Util.encrypt(computeValue));\n45ad6b5fd spring-cloud-huawei-common/src/test/java/org/springframework/cloud/common/util/MD5UtilTest.java (Jon Wang     2019-11-06 19:56:35 +0800 33)     String changeValue = \"dasfjkl;sdjfkldsafjodsiu29-w0483290-48230-8idfsopafjdls;afkd;safkd;safdsa5\";\ncc9db2f69 spring-cloud-huawei-common/src/test/java/com/huaweicloud/common/util/MD5UtilTest.java           (david6969xin 2022-04-19 16:11:21 +0800 34)     Assertions.assertNotEquals(MD5Util.encrypt(computeValue), MD5Util.encrypt(changeValue));\n45ad6b5fd spring-cloud-huawei-common/src/test/java/org/springframework/cloud/common/util/MD5UtilTest.java (Jon Wang     2019-11-06 19:56:35 +0800 35)   }\n",
            "commit_hashes": {
                "45ad6b5fd": "    modify ConfigWatch and add doc for config (#49)",
                "cc9db2f69": "    all test case upgrate junit5 (#658)"
            },
            "Commit&issueIDs": {
                "45ad6b5fd": [
                    "(#49)"
                ],
                "cc9db2f69": [
                    "(#658)"
                ]
            },
            "links": [
                "https://github.com/huaweicloud/spring-cloud-huawei/issues/49",
                "https://github.com/huaweicloud/spring-cloud-huawei/commit/45ad6b5fd",
                "https://github.com/huaweicloud/spring-cloud-huawei/issues/658",
                "https://github.com/huaweicloud/spring-cloud-huawei/commit/cc9db2f69"
            ]
        },
        {
            "poj_link": "https://github.com/apache/incubator-baremaps/",
            "file_path": "apache/incubator-baremaps/baremaps-data/src/test/java/org/apache/baremaps/data/collection/IndexedDataMapTest.java",
            "test_name": "keyIterator",
            "FQS": "org.apache.baremaps.data.collection.IndexedDataMapTest.keyIterator()",
            "start_line": "137",
            "blame_result": "8716d5354 (yagagagaga 2024-06-26 03:46:03 +0800 138)     Iterator<Long> itr1 = map.keyIterator();\n8716d5354 (yagagagaga 2024-06-26 03:46:03 +0800 139)     assertFalse(itr1.hasNext());\n8716d5354 (yagagagaga 2024-06-26 03:46:03 +0800 140)     assertThrows(NoSuchElementException.class, itr1::next);\n8716d5354 (yagagagaga 2024-06-26 03:46:03 +0800 141) \n8716d5354 (yagagagaga 2024-06-26 03:46:03 +0800 142)     for (long i = 0; i < 256; i += 2) {\n",
            "commit_hashes": {
                "8716d5354": "    Performance improvement (#882)"
            },
            "Commit&issueIDs": {
                "8716d5354": [
                    "882"
                ]
            },
            "links": [
                "https://github.com/apache/incubator-baremaps/issues/882",
                "https://github.com/apache/incubator-baremaps/commit/8716d5354"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/ReferenceTest.java",
            "test_name": "testHashcode",
            "FQS": "org.dyn4j.ReferenceTest.testHashcode()",
            "start_line": "86",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 87) \t\tReference<Integer> test = new Reference<Integer>(5);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 88) \t\tTestCase.assertEquals(new Reference<Integer>().hashCode(), new Reference<Integer>().hashCode());\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 89) \t\tTestCase.assertEquals(new Reference<Integer>(5).hashCode(), new Reference<Integer>(5).hashCode());\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 90) \t\tTestCase.assertEquals(test.hashCode(), new Reference<Integer>(5).hashCode());\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 91) \t\tTestCase.assertEquals(test.hashCode(), test.hashCode());\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/collision/AbstractCollisionBodyTest.java",
            "test_name": "getSetTransform",
            "FQS": "org.dyn4j.collision.AbstractCollisionBodyTest.getSetTransform()",
            "start_line": "630",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 631) \t\tTestBody b = new TestBody();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 632) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 633) \t\tTestCase.assertNotNull(b.transform);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 634) \t\tTestCase.assertNotNull(b.getTransform());\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 635) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/collision/AbstractCollisionBodyTest.java",
            "test_name": "removeFixture",
            "FQS": "org.dyn4j.collision.AbstractCollisionBodyTest.removeFixture()",
            "start_line": "307",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 308) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 309) \t\tTestCase.assertEquals(2, b.getFixtureCount());\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 310) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 311) \t\tb.removeAllFixtures();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 312) \t\t\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/collision/AbstractCollisionBodyTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.collision.AbstractCollisionBodyTest.copy()",
            "start_line": "8",
            "blame_result": "e220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java         (mtsamis        2019-12-23 17:49:23 +0200  9)  *     and the following disclaimer.\ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java         (mtsamis        2019-12-23 17:49:23 +0200 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java         (mtsamis        2019-12-23 17:49:23 +0200 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \ne220841d src/test/java/org/dyn4j/geometry/RobustGeometryTest.java         (mtsamis        2019-12-23 17:49:23 +0200 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/collision/AbstractCollisionBodyTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "e220841d": "    Robust hull algorithms (#97)",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "e220841d": [
                    "97"
                ],
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/97",
                "https://github.com/dyn4j/dyn4j/commit/e220841d",
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/collision/AbstractCollisionItemTest.java",
            "test_name": "hashCodeTest",
            "FQS": "org.dyn4j.collision.AbstractCollisionItemTest.hashCodeTest()",
            "start_line": "75",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 76) \t\t// HashCode must be the same for the same input, but could be the same for different input\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 77) \t\tint h1 = AbstractCollisionItem.getHashCode(this.cb1, this.f1a);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 78) \t\tint h2 = AbstractCollisionItem.getHashCode(this.cb1, this.f1a);\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 79) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 80) \t\tTestCase.assertEquals(h1, h2);\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/collision/CategoryFilterTest.java",
            "test_name": "equalsAndHashCode",
            "FQS": "org.dyn4j.collision.CategoryFilterTest.equalsAndHashCode()",
            "start_line": "55",
            "blame_result": "4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 56) \t\tCategoryFilter f1 = new CategoryFilter();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 57) \t\tCategoryFilter f2 = new CategoryFilter();\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 58) \t\t\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 59) \t\tTestCase.assertTrue(f1.equals(f2));\n4fdc119a (William Bittle 2020-08-29 20:14:14 -0400 60) \t\tTestCase.assertEquals(f1.hashCode(), f2.hashCode());\n",
            "commit_hashes": {
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "(#127)"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        },
        {
            "poj_link": "https://github.com/dyn4j/dyn4j/",
            "file_path": "dyn4j/dyn4j/src/test/java/org/dyn4j/collision/FixtureTest.java",
            "test_name": "copy",
            "FQS": "org.dyn4j.collision.FixtureTest.copy()",
            "start_line": "8",
            "blame_result": "^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java         (wjbittle       2010-02-06 19:03:09 +0000  9)  *     and the following disclaimer.\n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java         (wjbittle       2010-02-06 19:03:09 +0000 10)  *   * Redistributions in binary form must reproduce the above copyright notice, this list of conditions \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java         (wjbittle       2010-02-06 19:03:09 +0000 11)  *     and the following disclaimer in the documentation and/or other materials provided with the \n^1f6b11f test/org/dyn4j/game2d/testbed/TestBed.java         (wjbittle       2010-02-06 19:03:09 +0000 12)  *     distribution.\n4fdc119a src/test/java/org/dyn4j/collision/FixtureTest.java (William Bittle 2020-08-29 20:14:14 -0400 13)  *   * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or \n",
            "commit_hashes": {
                "1f6b11f": "    Initial check in from local repository.",
                "4fdc119a": "    V4 (#127)"
            },
            "Commit&issueIDs": {
                "4fdc119a": [
                    "127"
                ]
            },
            "links": [
                "https://github.com/dyn4j/dyn4j/issues/127",
                "https://github.com/dyn4j/dyn4j/commit/4fdc119a"
            ]
        }
    ]
}